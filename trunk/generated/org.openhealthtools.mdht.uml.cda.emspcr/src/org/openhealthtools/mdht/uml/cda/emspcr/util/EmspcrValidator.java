/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openhealthtools.mdht.uml.cda.emspcr.util;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.EObjectValidator;

import org.openhealthtools.mdht.uml.cda.consol.util.ConsolValidator;

import org.openhealthtools.mdht.uml.cda.emspcr.*;

import org.openhealthtools.mdht.uml.cda.util.CDAValidator;

/**
 * <!-- begin-user-doc -->
 * The <b>Validator</b> for the model.
 * <!-- end-user-doc -->
 * @see org.openhealthtools.mdht.uml.cda.emspcr.EmspcrPackage
 * @generated
 */
public class EmspcrValidator extends EObjectValidator {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final EmspcrValidator INSTANCE = new EmspcrValidator();

	/**
	 * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.common.util.Diagnostic#getSource()
	 * @see org.eclipse.emf.common.util.Diagnostic#getCode()
	 * @generated
	 */
	public static final String DIAGNOSTIC_SOURCE = "org.openhealthtools.mdht.uml.cda.emspcr";

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Class Code' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CLASS_CODE = 1;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Mood Code' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_MOOD_CODE = 2;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Code P' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CODE_P = 3;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Code' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CODE = 4;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Title' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_TITLE = 5;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Version Number' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_VERSION_NUMBER = 6;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Id' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_ID = 7;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Confidentiality Code' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CONFIDENTIALITY_CODE = 8;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Record Target' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_RECORD_TARGET = 9;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Billing' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_BILLING = 10;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Current Medication' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CURRENT_MEDICATION = 11;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Cardiac Arrest Event' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CARDIAC_ARREST_EVENT = 12;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Advance Directives' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_ADVANCE_DIRECTIVES = 13;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Allergies And Adverse Reactions Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_ALLERGIES_AND_ADVERSE_REACTIONS_SECTION = 14;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Past Medical History' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PAST_MEDICAL_HISTORY = 15;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Social History' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_SOCIAL_HISTORY = 16;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Physical Assessment Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PHYSICAL_ASSESSMENT_SECTION = 17;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Medications Administered Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_MEDICATIONS_ADMINISTERED_SECTION = 18;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Procedures Performed Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PROCEDURES_PERFORMED_SECTION = 19;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Patient Care Narrative' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PATIENT_CARE_NARRATIVE = 20;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Scene Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_SCENE_SECTION = 21;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Component Of' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_COMPONENT_OF = 22;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Dispatch Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_DISPATCH_SECTION = 23;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Disposition Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_DISPOSITION_SECTION = 24;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Personnel Adverse Event Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PERSONNEL_ADVERSE_EVENT_SECTION = 25;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Protocol Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PROTOCOL_SECTION = 26;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Response Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_RESPONSE_SECTION = 27;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Situation Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_SITUATION_SECTION = 28;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Times Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_TIMES_SECTION = 29;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Vital Signs Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_VITAL_SIGNS_SECTION = 30;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Author Participation' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_AUTHOR_PARTICIPATION = 31;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Custodian' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_CUSTODIAN = 32;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Documentation Of' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_DOCUMENTATION_OF = 33;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Related Document' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_RELATED_DOCUMENT = 34;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Participant' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_PARTICIPANT = 35;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Report Injury Incident Description Section' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__PATIENT_CARE_REPORT_INJURY_INCIDENT_DESCRIPTION_SECTION = 36;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'Patient Care Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_REPORT__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 37;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Template Id' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_TEMPLATE_ID = 38;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Code' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_CODE = 39;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Title' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_TITLE = 40;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Text' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_TEXT = 41;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Billing Condition' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_BILLING_CONDITION = 42;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Section Level Of Service Observation' of 'Billing Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_SECTION__BILLING_SECTION_LEVEL_OF_SERVICE_OBSERVATION = 43;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Template Id' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_TEMPLATE_ID = 44;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Code P' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_CODE_P = 45;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Code' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_CODE = 46;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Value' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_VALUE = 47;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Value P' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_VALUE_P = 48;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Billing Condition Mood Code' of 'Billing Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BILLING_CONDITION__BILLING_CONDITION_MOOD_CODE = 49;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Template Id' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_TEMPLATE_ID = 50;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Code P' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_CODE_P = 51;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Code' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_CODE = 52;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Value' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_VALUE = 53;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Value P' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_VALUE_P = 54;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Service Observation Mood Code' of 'Level Of Service Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_SERVICE_OBSERVATION__LEVEL_OF_SERVICE_OBSERVATION_MOOD_CODE = 55;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Section Title' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__CURRENT_MEDICATION_SECTION_TITLE = 56;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Section Text' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__CURRENT_MEDICATION_SECTION_TEXT = 57;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Section Currently On Medication' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__CURRENT_MEDICATION_SECTION_CURRENTLY_ON_MEDICATION = 58;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Section Patient On Anticoagulants' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__CURRENT_MEDICATION_SECTION_PATIENT_ON_ANTICOAGULANTS = 59;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Section Current Medication' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__CURRENT_MEDICATION_SECTION_CURRENT_MEDICATION = 60;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Template Id' of 'Current Medication Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION_SECTION__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 61;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Template Id' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_TEMPLATE_ID = 62;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Code' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_CODE = 63;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Value' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_VALUE = 64;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Currently On Medication Mood Code' of 'Currently On Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENTLY_ON_MEDICATION__CURRENTLY_ON_MEDICATION_MOOD_CODE = 65;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient On Anticoagulants Template Id' of 'Patient On Anticoagulants'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ON_ANTICOAGULANTS__PATIENT_ON_ANTICOAGULANTS_TEMPLATE_ID = 66;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient On Anticoagulants Code' of 'Patient On Anticoagulants'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ON_ANTICOAGULANTS__PATIENT_ON_ANTICOAGULANTS_CODE = 67;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient On Anticoagulants Value' of 'Patient On Anticoagulants'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ON_ANTICOAGULANTS__PATIENT_ON_ANTICOAGULANTS_VALUE = 68;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient On Anticoagulants Mood Code' of 'Patient On Anticoagulants'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ON_ANTICOAGULANTS__PATIENT_ON_ANTICOAGULANTS_MOOD_CODE = 69;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Consumable' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_CONSUMABLE = 70;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Dose Quantity' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_DOSE_QUANTITY = 71;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Route Code P' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_ROUTE_CODE_P = 72;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Route Code' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_ROUTE_CODE = 73;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Negation Ind' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_NEGATION_IND = 74;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Current Medication Null Flavor' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__CURRENT_MEDICATION_NULL_FLAVOR = 75;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Template Id' of 'Current Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CURRENT_MEDICATION__MEDICATION_ACTIVITY_TEMPLATE_ID = 76;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Event Section Template Id' of 'Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EVENT_SECTION__CARDIAC_ARREST_EVENT_SECTION_TEMPLATE_ID = 77;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Event Section Code' of 'Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EVENT_SECTION__CARDIAC_ARREST_EVENT_SECTION_CODE = 78;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Event Section Title' of 'Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EVENT_SECTION__CARDIAC_ARREST_EVENT_SECTION_TITLE = 79;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Event Section Text' of 'Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EVENT_SECTION__CARDIAC_ARREST_EVENT_SECTION_TEXT = 80;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Event Section Cardiac Arrest Existence' of 'Cardiac Arrest Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EVENT_SECTION__CARDIAC_ARREST_EVENT_SECTION_CARDIAC_ARREST_EXISTENCE = 81;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Cardiac Arrest Cause Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_CARDIAC_ARREST_CAUSE_RELATIONSHIP = 82;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Cardiac Arrest Informant Participation' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_CARDIAC_ARREST_INFORMANT_PARTICIPATION = 83;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Prior CPR Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_PRIOR_CPR_RELATIONSHIP = 84;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Prior AED Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_PRIOR_AED_RELATIONSHIP = 85;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Spontaneous Circulation Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_SPONTANEOUS_CIRCULATION_RELATIONSHIP = 86;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Destination Rhythm Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_DESTINATION_RHYTHM_RELATIONSHIP = 87;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Arrest Rhythm Relationship' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_ARREST_RHYTHM_RELATIONSHIP = 88;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Template Id' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_TEMPLATE_ID = 89;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Code' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_CODE = 90;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Effective Time' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_EFFECTIVE_TIME = 91;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Value' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_VALUE = 92;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Negation Ind' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_NEGATION_IND = 93;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Existence Mood Code' of 'Cardiac Arrest Existence'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_EXISTENCE__CARDIAC_ARREST_EXISTENCE_MOOD_CODE = 94;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Template Id' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_TEMPLATE_ID = 95;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Code' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_CODE = 96;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Title' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_TITLE = 97;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Text' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_TEXT = 98;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Advanced Directive Observation' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_ADVANCED_DIRECTIVE_OBSERVATION = 99;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advanced Directive Observation Template Id' of 'Advanced Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCED_DIRECTIVE_OBSERVATION__ADVANCED_DIRECTIVE_OBSERVATION_TEMPLATE_ID = 100;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advanced Directive Observation Code' of 'Advanced Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCED_DIRECTIVE_OBSERVATION__ADVANCED_DIRECTIVE_OBSERVATION_CODE = 101;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advanced Directive Observation Value' of 'Advanced Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCED_DIRECTIVE_OBSERVATION__ADVANCED_DIRECTIVE_OBSERVATION_VALUE = 102;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advanced Directive Observation Value P' of 'Advanced Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCED_DIRECTIVE_OBSERVATION__ADVANCED_DIRECTIVE_OBSERVATION_VALUE_P = 103;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advanced Directive Observation Mood Code' of 'Advanced Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCED_DIRECTIVE_OBSERVATION__ADVANCED_DIRECTIVE_OBSERVATION_MOOD_CODE = 104;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Template Id' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TEMPLATE_ID = 105;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Code' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_CODE = 106;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Title' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TITLE = 107;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Text' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_TEXT = 108;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Observation' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_OBSERVATION = 109;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Drug Allergy Problem Act' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_DRUG_ALLERGY_PROBLEM_ACT = 110;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies And Adverse Reactions Section Environmental Allergies' of 'Allergies And Adverse Reactions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_AND_ADVERSE_REACTIONS_SECTION__ALLERGIES_AND_ADVERSE_REACTIONS_SECTION_ENVIRONMENTAL_ALLERGIES = 111;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Allergy Observation Template Id' of 'Existence Of Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION_TEMPLATE_ID = 112;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Allergy Observation Code' of 'Existence Of Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION_CODE = 113;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Allergy Observation Value' of 'Existence Of Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION_VALUE = 114;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Allergy Observation Mood Code' of 'Existence Of Drug Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION__EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION_MOOD_CODE = 115;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Allergy Problem Act Participant1' of 'Drug Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY_PROBLEM_ACT__DRUG_ALLERGY_PROBLEM_ACT_PARTICIPANT1 = 116;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Template Id' of 'Drug Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_TEMPLATE_ID = 117;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergies Existence Of Environmental Allergy' of 'Environmental Allergies'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGIES__ENVIRONMENTAL_ALLERGIES_EXISTENCE_OF_ENVIRONMENTAL_ALLERGY = 118;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergies Environmental Allergy' of 'Environmental Allergies'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGIES__ENVIRONMENTAL_ALLERGIES_ENVIRONMENTAL_ALLERGY = 119;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergies Template Id' of 'Environmental Allergies'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGIES__ENVIRONMENTAL_ALLERGIES_TEMPLATE_ID = 120;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Environmental Allergy Template Id' of 'Existence Of Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_ENVIRONMENTAL_ALLERGY__EXISTENCE_OF_ENVIRONMENTAL_ALLERGY_TEMPLATE_ID = 121;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Environmental Allergy Code' of 'Existence Of Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_ENVIRONMENTAL_ALLERGY__EXISTENCE_OF_ENVIRONMENTAL_ALLERGY_CODE = 122;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Environmental Allergy Value' of 'Existence Of Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_ENVIRONMENTAL_ALLERGY__EXISTENCE_OF_ENVIRONMENTAL_ALLERGY_VALUE = 123;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Environmental Allergy Mood Code' of 'Existence Of Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_ENVIRONMENTAL_ALLERGY__EXISTENCE_OF_ENVIRONMENTAL_ALLERGY_MOOD_CODE = 124;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergy Template Id' of 'Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGY__ENVIRONMENTAL_ALLERGY_TEMPLATE_ID = 125;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergy Code' of 'Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGY__ENVIRONMENTAL_ALLERGY_CODE = 126;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergy Value' of 'Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGY__ENVIRONMENTAL_ALLERGY_VALUE = 127;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Environmental Allergy Mood Code' of 'Environmental Allergy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENVIRONMENTAL_ALLERGY__ENVIRONMENTAL_ALLERGY_MOOD_CODE = 128;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Template Id' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_TEMPLATE_ID = 129;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Code' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_CODE = 130;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Code P' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_CODE_P = 131;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Title' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_TITLE = 132;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Text' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_TEXT = 133;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section Existence Of History Of Condition' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_EXISTENCE_OF_HISTORY_OF_CONDITION = 134;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Past Medical History Section History Of Condition' of 'Past Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAST_MEDICAL_HISTORY_SECTION__PAST_MEDICAL_HISTORY_SECTION_HISTORY_OF_CONDITION = 135;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Template Id' of 'Existence Of History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION__EXISTENCE_OF_HISTORY_OF_CONDITION_TEMPLATE_ID = 136;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Code' of 'Existence Of History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION__EXISTENCE_OF_HISTORY_OF_CONDITION_CODE = 137;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Value' of 'Existence Of History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION__EXISTENCE_OF_HISTORY_OF_CONDITION_VALUE = 138;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Condition Mood Code' of 'Existence Of History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_CONDITION__EXISTENCE_OF_HISTORY_OF_CONDITION_MOOD_CODE = 139;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Template Id' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_TEMPLATE_ID = 140;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Code P' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_CODE_P = 141;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Code' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_CODE = 142;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Value' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_VALUE = 143;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Value P' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_VALUE_P = 144;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Condition Mood Code' of 'History Of Condition'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_CONDITION__HISTORY_OF_CONDITION_MOOD_CODE = 145;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Procedures Organizer Existence Of History Of Procedure Component' of 'History Of Procedures Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PROCEDURES_ORGANIZER__HISTORY_OF_PROCEDURES_ORGANIZER_EXISTENCE_OF_HISTORY_OF_PROCEDURE_COMPONENT = 718;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Procedures Organizer History Of Procedures Component' of 'History Of Procedures Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PROCEDURES_ORGANIZER__HISTORY_OF_PROCEDURES_ORGANIZER_HISTORY_OF_PROCEDURES_COMPONENT = 719;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Procedures Organizer Template Id' of 'History Of Procedures Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PROCEDURES_ORGANIZER__HISTORY_OF_PROCEDURES_ORGANIZER_TEMPLATE_ID = 720;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Template Id' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TEMPLATE_ID = 146;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Code' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_CODE = 147;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Code P' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_CODE_P = 148;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Title' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TITLE = 149;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Text' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TEXT = 150;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Existence Of Drug Use Indication' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_EXISTENCE_OF_DRUG_USE_INDICATION = 151;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Drug Use Indication' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_DRUG_USE_INDICATION = 152;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Template Id' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_TEMPLATE_ID = 153;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Code P' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_CODE_P = 154;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Code' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_CODE = 155;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Value' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_VALUE = 156;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of Drug Use Indication Mood Code' of 'Existence Of Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_DRUG_USE_INDICATION__EXISTENCE_OF_DRUG_USE_INDICATION_MOOD_CODE = 157;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Template Id' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_TEMPLATE_ID = 158;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Code' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_CODE = 159;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Value' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_VALUE = 160;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Use Indication Mood Code' of 'Drug Use Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_USE_INDICATION__DRUG_USE_INDICATION_MOOD_CODE = 161;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Code P' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_CODE_P = 162;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Code' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_CODE = 163;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Title' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_TITLE = 164;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Text' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_TEXT = 165;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Physical Assessment Organizer' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_PHYSICAL_ASSESSMENT_ORGANIZER = 166;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Patient Pregnancy' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_PATIENT_PREGNANCY = 167;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Last Oral Intake' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_LAST_ORAL_INTAKE = 168;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Patient Age' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_PATIENT_AGE = 169;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Thrombolytic Contraindications' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_THROMBOLYTIC_CONTRAINDICATIONS = 170;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Section Barriers To Patient Care' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_ASSESSMENT_SECTION_BARRIERS_TO_PATIENT_CARE = 171;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Exam Section Template Id' of 'Physical Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_SECTION__PHYSICAL_EXAM_SECTION_TEMPLATE_ID = 172;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component1' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT1 = 173;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component2' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT2 = 174;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component3' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT3 = 175;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component4' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT4 = 176;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component5' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT5 = 177;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component6' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT6 = 178;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component7' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT7 = 179;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component8' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT8 = 180;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component9' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT9 = 181;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component10' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT10 = 182;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component11' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT11 = 183;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component12' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT12 = 184;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component13' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT13 = 185;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Component14' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_COMPONENT14 = 186;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Assessment Organizer Template Id' of 'Physical Assessment Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_ASSESSMENT_ORGANIZER__PHYSICAL_ASSESSMENT_ORGANIZER_TEMPLATE_ID = 187;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Template Id' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_TEMPLATE_ID = 188;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Code P' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_CODE_P = 189;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Code' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_CODE = 190;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Value' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_VALUE = 191;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Value P' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_VALUE_P = 192;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Skin Assessment Mood Code' of 'Skin Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SKIN_ASSESSMENT__SKIN_ASSESSMENT_MOOD_CODE = 193;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Template Id' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_TEMPLATE_ID = 194;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Code P' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_CODE_P = 195;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Code' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_CODE = 196;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Value' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_VALUE = 197;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Value P' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_VALUE_P = 198;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Pregnancy Mood Code' of 'Patient Pregnancy'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_PREGNANCY__PATIENT_PREGNANCY_MOOD_CODE = 199;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Template Id' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_TEMPLATE_ID = 200;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Code P' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_CODE_P = 201;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Code' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_CODE = 202;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Value' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_VALUE = 203;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Last Oral Intake Mood Code' of 'Last Oral Intake'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LAST_ORAL_INTAKE__LAST_ORAL_INTAKE_MOOD_CODE = 204;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Template Id' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_TEMPLATE_ID = 205;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Code P' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_CODE_P = 206;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Code' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_CODE = 207;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Value' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_VALUE = 208;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Age Mood Code' of 'Patient Age'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_AGE__PATIENT_AGE_MOOD_CODE = 209;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Template Id' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_TEMPLATE_ID = 210;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Code P' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_CODE_P = 211;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Code' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_CODE = 212;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Value' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_VALUE = 213;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Thrombolytic Contraindications Mood Code' of 'Thrombolytic Contraindications'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int THROMBOLYTIC_CONTRAINDICATIONS__THROMBOLYTIC_CONTRAINDICATIONS_MOOD_CODE = 214;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Template Id' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_TEMPLATE_ID = 215;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Code P' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_CODE_P = 216;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Code' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_CODE = 217;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Value' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_VALUE = 218;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Value P' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_VALUE_P = 219;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Barriers To Patient Care Mood Code' of 'Barriers To Patient Care'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BARRIERS_TO_PATIENT_CARE__BARRIERS_TO_PATIENT_CARE_MOOD_CODE = 220;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Medications Administered Section Code' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__EMSPCR_MEDICATIONS_ADMINISTERED_SECTION_CODE = 221;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Medications Administered Section Title' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__EMSPCR_MEDICATIONS_ADMINISTERED_SECTION_TITLE = 222;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Medications Administered Section Text' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__EMSPCR_MEDICATIONS_ADMINISTERED_SECTION_TEXT = 223;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Medications Administered Section Medication Administered' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__EMSPCR_MEDICATIONS_ADMINISTERED_SECTION_MEDICATION_ADMINISTERED = 224;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Administered Section Template Id' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__MEDICATIONS_ADMINISTERED_SECTION_TEMPLATE_ID = 225;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Not Administered Entry Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_NOT_ADMINISTERED_ENTRY_RELATIONSHIP = 226;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Consumable' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_CONSUMABLE = 227;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Response Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_RESPONSE_RELATIONSHIP = 228;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Complication Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_COMPLICATION_RELATIONSHIP = 229;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Prior Administration Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_PRIOR_ADMINISTRATION_RELATIONSHIP = 230;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Performer Participation' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_PERFORMER_PARTICIPATION = 231;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Authorization Relationship' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_AUTHORIZATION_RELATIONSHIP = 232;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Medication Administration Device Participant' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_MEDICATION_ADMINISTRATION_DEVICE_PARTICIPANT = 233;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Class Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_CLASS_CODE = 234;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Dose Quantity' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_DOSE_QUANTITY = 235;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Effective Time' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_EFFECTIVE_TIME = 236;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Negation Ind' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_NEGATION_IND = 237;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Route Code P' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_ROUTE_CODE_P = 238;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Route Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_ROUTE_CODE = 239;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Approach Site Code P' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_APPROACH_SITE_CODE_P = 240;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Administered Approach Site Code' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ADMINISTERED_APPROACH_SITE_CODE = 241;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Template Id' of 'Medication Administered'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ADMINISTERED__MEDICATION_ACTIVITY_TEMPLATE_ID = 242;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Performed Section Code P' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURES_PERFORMED_SECTION_CODE_P = 243;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Performed Section Code' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURES_PERFORMED_SECTION_CODE = 244;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Performed Section Title' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURES_PERFORMED_SECTION_TITLE = 245;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Performed Section Text' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURES_PERFORMED_SECTION_TEXT = 246;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Performed Section Procedure Activity Procedure1' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURES_PERFORMED_SECTION_PROCEDURE_ACTIVITY_PROCEDURE1 = 247;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Description Section Template Id' of 'Procedures Performed Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_PERFORMED_SECTION__PROCEDURE_DESCRIPTION_SECTION_TEMPLATE_ID = 248;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Abandoned Procedure Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_ABANDONED_PROCEDURE_RELATIONSHIP = 249;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Prior Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_PRIOR_RELATIONSHIP = 250;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Number Of Attempts Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_NUMBER_OF_ATTEMPTS_RELATIONSHIP = 251;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Successful Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_SUCCESSFUL_RELATIONSHIP = 252;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Complications Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_COMPLICATIONS_RELATIONSHIP = 253;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Patient Response Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_PATIENT_RESPONSE_RELATIONSHIP = 254;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Procedure Performer' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_PROCEDURE_PERFORMER = 255;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Airway Confirmation Relationship' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_AIRWAY_CONFIRMATION_RELATIONSHIP = 256;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_CODE = 257;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Effective Time' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_EFFECTIVE_TIME = 258;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Status Code P' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_STATUS_CODE_P = 259;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Status Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_STATUS_CODE = 260;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Approach Site Code P' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_APPROACH_SITE_CODE_P = 261;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Approach Site Code' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_APPROACH_SITE_CODE = 262;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Procedure Negation Ind' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__EMSPCR_PROCEDURE_NEGATION_IND = 263;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Template Id' of 'Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_TEMPLATE_ID = 264;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Narrative Section Template Id' of 'Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_NARRATIVE_SECTION__PATIENT_CARE_NARRATIVE_SECTION_TEMPLATE_ID = 265;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Narrative Section Code' of 'Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_NARRATIVE_SECTION__PATIENT_CARE_NARRATIVE_SECTION_CODE = 266;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Narrative Section Code P' of 'Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_NARRATIVE_SECTION__PATIENT_CARE_NARRATIVE_SECTION_CODE_P = 267;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Narrative Section Title' of 'Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_NARRATIVE_SECTION__PATIENT_CARE_NARRATIVE_SECTION_TITLE = 268;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Care Narrative Section Text' of 'Patient Care Narrative Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CARE_NARRATIVE_SECTION__PATIENT_CARE_NARRATIVE_SECTION_TEXT = 269;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Template Id' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_TEMPLATE_ID = 270;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Code' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_CODE = 271;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Title' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_TITLE = 272;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Text' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_TEXT = 273;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section First Unit Indicator' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_FIRST_UNIT_INDICATOR = 274;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section First Unit On Scene' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_FIRST_UNIT_ON_SCENE = 275;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Scene Patient Count' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_SCENE_PATIENT_COUNT = 276;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Mass Casualty Indicator' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_MASS_CASUALTY_INDICATOR = 277;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Section Location Type Observation' of 'Scene Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_SECTION__SCENE_SECTION_LOCATION_TYPE_OBSERVATION = 278;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Template Id' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_TEMPLATE_ID = 279;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Code P' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_CODE_P = 280;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Code' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_CODE = 281;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Value' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_VALUE = 282;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit Indicator Mood Code' of 'First Unit Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_INDICATOR__FIRST_UNIT_INDICATOR_MOOD_CODE = 283;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit On Scene Template Id' of 'First Unit On Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_ON_SCENE__FIRST_UNIT_ON_SCENE_TEMPLATE_ID = 284;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit On Scene Code P' of 'First Unit On Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_ON_SCENE__FIRST_UNIT_ON_SCENE_CODE_P = 285;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit On Scene Code' of 'First Unit On Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_ON_SCENE__FIRST_UNIT_ON_SCENE_CODE = 286;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit On Scene Value' of 'First Unit On Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_ON_SCENE__FIRST_UNIT_ON_SCENE_VALUE = 287;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate First Unit On Scene Mood Code' of 'First Unit On Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FIRST_UNIT_ON_SCENE__FIRST_UNIT_ON_SCENE_MOOD_CODE = 288;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Template Id' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_TEMPLATE_ID = 289;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Code P' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_CODE_P = 290;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Code' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_CODE = 291;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Value' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_VALUE = 292;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Patient Count Mood Code' of 'Scene Patient Count'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_PATIENT_COUNT__SCENE_PATIENT_COUNT_MOOD_CODE = 293;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Template Id' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_TEMPLATE_ID = 294;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Code P' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_CODE_P = 295;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Code' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_CODE = 296;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Value' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_VALUE = 297;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mass Casualty Indicator Mood Code' of 'Mass Casualty Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MASS_CASUALTY_INDICATOR__MASS_CASUALTY_INDICATOR_MOOD_CODE = 298;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Template Id' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_TEMPLATE_ID = 299;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Type Observation Code' of 'Location Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_TYPE_OBSERVATION__LOCATION_TYPE_OBSERVATION_CODE = 300;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Template Id' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_TEMPLATE_ID = 301;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Code' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_CODE = 302;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Title' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_TITLE = 303;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Text' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_TEXT = 304;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Emergency Medical Dispatch Observation' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_EMERGENCY_MEDICAL_DISPATCH_OBSERVATION = 305;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Section Complaint Reported By Dispatch' of 'Dispatch Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_SECTION__DISPATCH_SECTION_COMPLAINT_REPORTED_BY_DISPATCH = 306;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Template Id' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_TEMPLATE_ID = 307;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Code P' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_CODE_P = 308;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Code' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_CODE = 309;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Value' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_VALUE = 310;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Value P' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_VALUE_P = 311;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Emergency Medical Dispatch Observation Mood Code' of 'Emergency Medical Dispatch Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EMERGENCY_MEDICAL_DISPATCH_OBSERVATION__EMERGENCY_MEDICAL_DISPATCH_OBSERVATION_MOOD_CODE = 312;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Template Id' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_TEMPLATE_ID = 313;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Code P' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_CODE_P = 314;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Code' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_CODE = 315;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Value' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_VALUE = 316;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Value P' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_VALUE_P = 317;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Reported By Dispatch Mood Code' of 'Complaint Reported By Dispatch'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_REPORTED_BY_DISPATCH__COMPLAINT_REPORTED_BY_DISPATCH_MOOD_CODE = 318;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Template Id' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_TEMPLATE_ID = 319;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Code' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_CODE = 320;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Code P' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_CODE_P = 321;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Title' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_TITLE = 322;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Text' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_TEXT = 323;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Entry4' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_ENTRY4 = 324;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Number Of Patients Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_NUMBER_OF_PATIENTS_OBSERVATION = 325;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Incident Disposition Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_INCIDENT_DISPOSITION_OBSERVATION = 326;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Transport Mode Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_TRANSPORT_MODE_OBSERVATION = 327;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Transport Method Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_TRANSPORT_METHOD_OBSERVATION = 328;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Reason For Choosing Destination Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_REASON_FOR_CHOOSING_DESTINATION_OBSERVATION = 329;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Prearrival Activation Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_PREARRIVAL_ACTIVATION_OBSERVATION = 330;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disposition Section Patient Condition Change At Destination Observation' of 'Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPOSITION_SECTION__DISPOSITION_SECTION_PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION = 331;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Template Id' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_TEMPLATE_ID = 332;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Code P' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_CODE_P = 333;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Code' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_CODE = 334;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Value' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_VALUE = 335;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Value P' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_VALUE_P = 336;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Method Observation Mood Code' of 'Transport Method Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_METHOD_OBSERVATION__TRANSPORT_METHOD_OBSERVATION_MOOD_CODE = 337;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Observation Template Id' of 'Number Of Patients Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_OBSERVATION__NUMBER_OF_PATIENTS_OBSERVATION_TEMPLATE_ID = 338;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Observation Code P' of 'Number Of Patients Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_OBSERVATION__NUMBER_OF_PATIENTS_OBSERVATION_CODE_P = 339;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Observation Code' of 'Number Of Patients Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_OBSERVATION__NUMBER_OF_PATIENTS_OBSERVATION_CODE = 340;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Observation Value' of 'Number Of Patients Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_OBSERVATION__NUMBER_OF_PATIENTS_OBSERVATION_VALUE = 341;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Number Of Patients Observation Mood Code' of 'Number Of Patients Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NUMBER_OF_PATIENTS_OBSERVATION__NUMBER_OF_PATIENTS_OBSERVATION_MOOD_CODE = 342;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Template Id' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_TEMPLATE_ID = 343;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Code P' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_CODE_P = 344;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Code' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_CODE = 345;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Value' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_VALUE = 346;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Value P' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_VALUE_P = 347;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Incident Disposition Observation Mood Code' of 'Incident Disposition Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INCIDENT_DISPOSITION_OBSERVATION__INCIDENT_DISPOSITION_OBSERVATION_MOOD_CODE = 348;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Template Id' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_TEMPLATE_ID = 349;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Code P' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_CODE_P = 350;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Code' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_CODE = 351;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Value' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_VALUE = 352;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Mode Observation Mood Code' of 'Transport Mode Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_MODE_OBSERVATION__TRANSPORT_MODE_OBSERVATION_MOOD_CODE = 353;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Template Id' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_TEMPLATE_ID = 354;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Code P' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_CODE_P = 355;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Code' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_CODE = 356;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Value' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_VALUE = 357;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Value P' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_VALUE_P = 358;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Choosing Destination Observation Mood Code' of 'Reason For Choosing Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_CHOOSING_DESTINATION_OBSERVATION__REASON_FOR_CHOOSING_DESTINATION_OBSERVATION_MOOD_CODE = 359;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Template Id' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_TEMPLATE_ID = 360;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Code P' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_CODE_P = 361;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Code' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_CODE = 362;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Value' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_VALUE = 363;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Effective Time' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_EFFECTIVE_TIME = 364;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prearrival Activation Observation Mood Code' of 'Prearrival Activation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREARRIVAL_ACTIVATION_OBSERVATION__PREARRIVAL_ACTIVATION_OBSERVATION_MOOD_CODE = 365;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Template Id' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_TEMPLATE_ID = 366;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Code P' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_CODE_P = 367;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Code' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_CODE = 368;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Value' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_VALUE = 369;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Value P' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_VALUE_P = 370;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Condition Change At Destination Observation Mood Code' of 'Patient Condition Change At Destination Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION__PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION_MOOD_CODE = 371;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Template Id' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_TEMPLATE_ID = 372;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Code' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_CODE = 373;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Code P' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_CODE_P = 374;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Title' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_TITLE = 375;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Text' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_TEXT = 376;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Adverse Event Indicator' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_ADVERSE_EVENT_INDICATOR = 377;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Personnel Adverse Event Section Adverse Event Type Observation' of 'Personnel Adverse Event Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERSONNEL_ADVERSE_EVENT_SECTION__PERSONNEL_ADVERSE_EVENT_SECTION_ADVERSE_EVENT_TYPE_OBSERVATION = 378;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Template Id' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_TEMPLATE_ID = 379;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Code P' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_CODE_P = 380;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Code' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_CODE = 381;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Value' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_VALUE = 382;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Indicator Mood Code' of 'Adverse Event Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_INDICATOR__ADVERSE_EVENT_INDICATOR_MOOD_CODE = 383;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Template Id' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_TEMPLATE_ID = 384;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Code P' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_CODE_P = 385;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Code' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_CODE = 386;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Value' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_VALUE = 387;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Value P' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_VALUE_P = 388;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Adverse Event Type Observation Mood Code' of 'Adverse Event Type Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVERSE_EVENT_TYPE_OBSERVATION__ADVERSE_EVENT_TYPE_OBSERVATION_MOOD_CODE = 389;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Template Id' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_TEMPLATE_ID = 390;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Code' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_CODE = 391;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Title' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_TITLE = 392;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Text' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_TEXT = 393;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Protocol Observation' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_PROTOCOL_OBSERVATION = 394;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Section Candidate Patient Registry Type' of 'Protocol Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_SECTION__PROTOCOL_SECTION_CANDIDATE_PATIENT_REGISTRY_TYPE = 395;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Template Id' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_TEMPLATE_ID = 396;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Code P' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_CODE_P = 397;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Code' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_CODE = 398;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Value' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_VALUE = 399;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Value P' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_VALUE_P = 400;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Observation Mood Code' of 'Protocol Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_OBSERVATION__PROTOCOL_OBSERVATION_MOOD_CODE = 401;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Template Id' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_TEMPLATE_ID = 402;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Code P' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_CODE_P = 403;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Code' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_CODE = 404;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Value' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_VALUE = 405;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Value P' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_VALUE_P = 406;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Candidate Patient Registry Type Mood Code' of 'Candidate Patient Registry Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CANDIDATE_PATIENT_REGISTRY_TYPE__CANDIDATE_PATIENT_REGISTRY_TYPE_MOOD_CODE = 407;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Template Id' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_TEMPLATE_ID = 408;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Code' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_CODE = 409;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Code P' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_CODE_P = 410;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Title' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_TITLE = 411;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Text' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_TEXT = 412;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Delay Organizer' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_DELAY_ORGANIZER = 413;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Dispatch Location Organizer' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_DISPATCH_LOCATION_ORGANIZER = 414;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Response Odometer Reading Organizer' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_RESPONSE_ODOMETER_READING_ORGANIZER = 415;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Section Response Mode To Scene' of 'Response Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_SECTION__RESPONSE_SECTION_RESPONSE_MODE_TO_SCENE = 416;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Dispatch Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_DISPATCH_DELAY_RELATIONSHIP = 417;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Response Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_RESPONSE_DELAY_RELATIONSHIP = 418;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Scene Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_SCENE_DELAY_RELATIONSHIP = 419;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Transport Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TRANSPORT_DELAY_RELATIONSHIP = 420;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Turnaound Delay Relationship' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TURNAOUND_DELAY_RELATIONSHIP = 421;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Delay Organizer Template Id' of 'Delay Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DELAY_ORGANIZER__DELAY_ORGANIZER_TEMPLATE_ID = 422;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Name Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_NAME_RELATIONSHIP = 423;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Latitude Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_LATITUDE_RELATIONSHIP = 424;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Dispatch Location Longtude Relationship' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_DISPATCH_LOCATION_LONGTUDE_RELATIONSHIP = 425;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Organizer Template Id' of 'Dispatch Location Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_ORGANIZER__DISPATCH_LOCATION_ORGANIZER_TEMPLATE_ID = 426;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Beginning Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_BEGINNING_ODOMETER_READING_RELATIONSHIP = 427;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response On Scene Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_ON_SCENE_ODOMETER_READING_RELATIONSHIP = 428;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Destination Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_DESTINATION_ODOMETER_READING_RELATIONSHIP = 429;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Response Ending Odometer Reading Relationship' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_RESPONSE_ENDING_ODOMETER_READING_RELATIONSHIP = 430;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Odometer Reading Organizer Template Id' of 'Response Odometer Reading Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ODOMETER_READING_ORGANIZER__RESPONSE_ODOMETER_READING_ORGANIZER_TEMPLATE_ID = 431;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Template Id' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_TEMPLATE_ID = 432;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Code P' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_CODE_P = 433;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Code' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_CODE = 434;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Value' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_VALUE = 435;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Value P' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_VALUE_P = 436;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Mode To Scene Mood Code' of 'Response Mode To Scene'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_MODE_TO_SCENE__RESPONSE_MODE_TO_SCENE_MOOD_CODE = 437;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Template Id' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_TEMPLATE_ID = 438;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Code' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_CODE = 439;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Code P' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_CODE_P = 440;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Title' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_TITLE = 441;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Text' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_TEXT = 442;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Complaint' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_COMPLAINT = 443;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Possible Injury' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_POSSIBLE_INJURY = 444;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Provider Primary Impression' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_PROVIDER_PRIMARY_IMPRESSION = 445;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Primary Symptom' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_PRIMARY_SYMPTOM = 446;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Other Symptoms' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_OTHER_SYMPTOMS = 447;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Provider Secondary Impressions' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_PROVIDER_SECONDARY_IMPRESSIONS = 448;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Situation Section Initial Patient Acuity' of 'Situation Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SITUATION_SECTION__SITUATION_SECTION_INITIAL_PATIENT_ACUITY = 449;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_DURATION_RELATIONSHIP = 450;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TYPE_RELATIONSHIP = 451;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Relationship' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_ORGAN_SYSTEM_RELATIONSHIP = 452;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Template Id' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TEMPLATE_ID = 453;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Code P' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_CODE_P = 454;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_CODE = 455;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Value' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_VALUE = 456;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Target Site Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TARGET_SITE_CODE = 457;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Target Site Code P' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_TARGET_SITE_CODE_P = 458;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Effective Time' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_EFFECTIVE_TIME = 459;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Mood Code' of 'Complaint'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT__COMPLAINT_MOOD_CODE = 460;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Template Id' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_TEMPLATE_ID = 461;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Code P' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_CODE_P = 462;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Code' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_CODE = 463;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Value' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_VALUE = 464;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Possible Injury Mood Code' of 'Possible Injury'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSSIBLE_INJURY__POSSIBLE_INJURY_MOOD_CODE = 465;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Template Id' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_TEMPLATE_ID = 466;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Code P' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_CODE_P = 467;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Code' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_CODE = 468;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Value' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_VALUE = 469;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Value P' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_VALUE_P = 470;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Primary Impression Mood Code' of 'Provider Primary Impression'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_PRIMARY_IMPRESSION__PROVIDER_PRIMARY_IMPRESSION_MOOD_CODE = 471;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Template Id' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_TEMPLATE_ID = 472;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Code P' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_CODE_P = 473;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Code' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_CODE = 474;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Value' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_VALUE = 475;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Value P' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_VALUE_P = 476;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Symptom Mood Code' of 'Primary Symptom'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIMARY_SYMPTOM__PRIMARY_SYMPTOM_MOOD_CODE = 477;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Template Id' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_TEMPLATE_ID = 478;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Code P' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_CODE_P = 479;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Code' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_CODE = 480;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Value' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_VALUE = 481;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Value P' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_VALUE_P = 482;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Other Symptoms Mood Code' of 'Other Symptoms'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OTHER_SYMPTOMS__OTHER_SYMPTOMS_MOOD_CODE = 483;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Template Id' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_TEMPLATE_ID = 484;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Code P' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_CODE_P = 485;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Code' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_CODE = 486;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Value' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_VALUE = 487;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Value P' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_VALUE_P = 488;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Secondary Impressions Mood Code' of 'Provider Secondary Impressions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_SECONDARY_IMPRESSIONS__PROVIDER_SECONDARY_IMPRESSIONS_MOOD_CODE = 489;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Template Id' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_TEMPLATE_ID = 490;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Code P' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_CODE_P = 491;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Code' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_CODE = 492;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Value' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_VALUE = 493;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Value P' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_VALUE_P = 494;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Initial Patient Acuity Mood Code' of 'Initial Patient Acuity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INITIAL_PATIENT_ACUITY__INITIAL_PATIENT_ACUITY_MOOD_CODE = 495;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Template Id' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_TEMPLATE_ID = 496;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Code' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_CODE = 497;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Title' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_TITLE = 498;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Text' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_TEXT = 499;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Call Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_CALL_TIME = 500;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit Notified Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_NOTIFIED_TIME = 501;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit En Route Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_EN_ROUTE_TIME = 502;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit On Scene Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_ON_SCENE_TIME = 503;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit At Patientt Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_AT_PATIENTT_TIME = 504;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit Left Scene Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_LEFT_SCENE_TIME = 505;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Patient Arrived At Destination Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_PATIENT_ARRIVED_AT_DESTINATION_TIME = 506;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Unit Back In Service Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_UNIT_BACK_IN_SERVICE_TIME = 507;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Times Section Dispatch Notified Time' of 'Times Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TIMES_SECTION__TIMES_SECTION_DISPATCH_NOTIFIED_TIME = 508;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Template Id' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_TEMPLATE_ID = 509;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Code P' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_CODE_P = 510;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Code' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_CODE = 511;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Value' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_VALUE = 512;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Call Time Mood Code' of 'Call Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CALL_TIME__CALL_TIME_MOOD_CODE = 513;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Template Id' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_TEMPLATE_ID = 514;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Code P' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_CODE_P = 515;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Code' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_CODE = 516;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Value' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_VALUE = 517;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Notified Time Mood Code' of 'Unit Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_NOTIFIED_TIME__UNIT_NOTIFIED_TIME_MOOD_CODE = 518;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Template Id' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_TEMPLATE_ID = 519;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Code P' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_CODE_P = 520;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Code' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_CODE = 521;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Value' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_VALUE = 522;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit En Route Time Mood Code' of 'Unit En Route Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_EN_ROUTE_TIME__UNIT_EN_ROUTE_TIME_MOOD_CODE = 523;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Template Id' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_TEMPLATE_ID = 524;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Code P' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_CODE_P = 525;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Code' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_CODE = 526;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Value' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_VALUE = 527;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit On Scene Time Mood Code' of 'Unit On Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_ON_SCENE_TIME__UNIT_ON_SCENE_TIME_MOOD_CODE = 528;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patientt Time Template Id' of 'Unit At Patientt Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENTT_TIME__UNIT_AT_PATIENTT_TIME_TEMPLATE_ID = 529;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patientt Time Code P' of 'Unit At Patientt Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENTT_TIME__UNIT_AT_PATIENTT_TIME_CODE_P = 530;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patientt Time Code' of 'Unit At Patientt Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENTT_TIME__UNIT_AT_PATIENTT_TIME_CODE = 531;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patientt Time Value' of 'Unit At Patientt Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENTT_TIME__UNIT_AT_PATIENTT_TIME_VALUE = 532;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit At Patientt Time Mood Code' of 'Unit At Patientt Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_AT_PATIENTT_TIME__UNIT_AT_PATIENTT_TIME_MOOD_CODE = 533;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Template Id' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_TEMPLATE_ID = 534;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Code P' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_CODE_P = 535;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Code' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_CODE = 536;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Value' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_VALUE = 537;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Left Scene Time Mood Code' of 'Unit Left Scene Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_LEFT_SCENE_TIME__UNIT_LEFT_SCENE_TIME_MOOD_CODE = 538;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Template Id' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_TEMPLATE_ID = 539;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Code P' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_CODE_P = 540;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Code' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_CODE = 541;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Value' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_VALUE = 542;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Arrived At Destination Time Mood Code' of 'Patient Arrived At Destination Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ARRIVED_AT_DESTINATION_TIME__PATIENT_ARRIVED_AT_DESTINATION_TIME_MOOD_CODE = 543;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Template Id' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_TEMPLATE_ID = 544;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Code P' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_CODE_P = 545;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Code' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_CODE = 546;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Value' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_VALUE = 547;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unit Back In Service Time Mood Code' of 'Unit Back In Service Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNIT_BACK_IN_SERVICE_TIME__UNIT_BACK_IN_SERVICE_TIME_MOOD_CODE = 548;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Template Id' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_TEMPLATE_ID = 549;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Code P' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_CODE_P = 550;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Code' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_CODE = 551;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Value' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_VALUE = 552;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Notified Time Mood Code' of 'Dispatch Notified Time'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_NOTIFIED_TIME__DISPATCH_NOTIFIED_TIME_MOOD_CODE = 553;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Code' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_CODE = 554;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Title' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_TITLE = 555;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Text' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_TEXT = 556;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Vital Signs Organizer' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_VITAL_SIGNS_ORGANIZER = 557;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Prior Aid Vitals' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_PRIOR_AID_VITALS = 558;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Section Additional Vital Signs Organizer' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__EMSPCR_VITAL_SIGNS_SECTION_ADDITIONAL_VITAL_SIGNS_ORGANIZER = 559;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Template Id' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 560;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Systolic Blood Pressure Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_SYSTOLIC_BLOOD_PRESSURE_COMPONENT = 561;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Diastolic Blood Pressure Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_DIASTOLIC_BLOOD_PRESSURE_COMPONENT = 562;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Heart Rate Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_HEART_RATE_COMPONENT = 563;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Respiratory Rate Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_RESPIRATORY_RATE_COMPONENT = 564;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Body Temperature Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_BODY_TEMPERATURE_COMPONENT = 565;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Oxygen Saturation Component' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_OXYGEN_SATURATION_COMPONENT = 566;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate EMSPCR Vital Signs Organizer Effective Time' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__EMSPCR_VITAL_SIGNS_ORGANIZER_EFFECTIVE_TIME = 567;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Template Id' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_TEMPLATE_ID = 568;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Template Id' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_TEMPLATE_ID = 569;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Code' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_CODE = 570;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Value' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_VALUE = 571;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior Aid Vitals Mood Code' of 'Prior Aid Vitals'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AID_VITALS__PRIOR_AID_VITALS_MOOD_CODE = 572;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Stroke Score Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_STROKE_SCORE_COMPONENT = 573;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Pain Score Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_PAIN_SCORE_COMPONENT = 574;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Level Of Responsiveness Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_LEVEL_OF_RESPONSIVENESS_COMPONENT = 575;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Blood Glucose Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_BLOOD_GLUCOSE_COMPONENT = 576;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Carbon Monoxide Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_CARBON_MONOXIDE_COMPONENT = 577;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Carbon Dioxide Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_CARBON_DIOXIDE_COMPONENT = 578;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Cardiac Rhythm Component' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_CARDIAC_RHYTHM_COMPONENT = 579;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Template Id' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_TEMPLATE_ID = 580;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Effective Time' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_EFFECTIVE_TIME = 581;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Mood Code' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_MOOD_CODE = 582;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Additional Vital Signs Organizer Glasgow Coma Score Organizer' of 'Additional Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADDITIONAL_VITAL_SIGNS_ORGANIZER__ADDITIONAL_VITAL_SIGNS_ORGANIZER_GLASGOW_COMA_SCORE_ORGANIZER = 583;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Template Id' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_TEMPLATE_ID = 584;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Code P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_CODE_P = 585;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_CODE = 586;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Value' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_VALUE = 587;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Value P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_VALUE_P = 588;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Method Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_METHOD_CODE = 589;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Method Code P' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_METHOD_CODE_P = 590;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Effective Time' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_EFFECTIVE_TIME = 591;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Stroke Score Mood Code' of 'Stroke Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STROKE_SCORE__STROKE_SCORE_MOOD_CODE = 592;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Template Id' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_TEMPLATE_ID = 593;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Code' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_CODE = 594;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Effective Time' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_EFFECTIVE_TIME = 595;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pain Score Mood Code' of 'Pain Score'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAIN_SCORE__PAIN_SCORE_MOOD_CODE = 596;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Template Id' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_TEMPLATE_ID = 597;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Code P' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_CODE_P = 598;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Code' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_CODE = 599;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Value' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_VALUE = 600;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Value P' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_VALUE_P = 601;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Effective Time' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_EFFECTIVE_TIME = 602;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Level Of Responsiveness Mood Code' of 'Level Of Responsiveness'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEVEL_OF_RESPONSIVENESS__LEVEL_OF_RESPONSIVENESS_MOOD_CODE = 603;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Template Id' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_TEMPLATE_ID = 604;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Code P' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_CODE_P = 605;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Code' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_CODE = 606;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Value' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_VALUE = 607;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Effective Time' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_EFFECTIVE_TIME = 608;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Blood Glucose Mood Code' of 'Blood Glucose'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BLOOD_GLUCOSE__BLOOD_GLUCOSE_MOOD_CODE = 609;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Template Id' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_TEMPLATE_ID = 610;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Code P' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_CODE_P = 611;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Code' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_CODE = 612;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Value' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_VALUE = 613;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Effective Time' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_EFFECTIVE_TIME = 614;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Monoxide Mood Code' of 'Carbon Monoxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_MONOXIDE__CARBON_MONOXIDE_MOOD_CODE = 615;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Template Id' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_TEMPLATE_ID = 616;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Code P' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_CODE_P = 617;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Code' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_CODE = 618;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Value' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_VALUE = 619;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Effective Time' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_EFFECTIVE_TIME = 620;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Carbon Dioxide Mood Code' of 'Carbon Dioxide'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARBON_DIOXIDE__CARBON_DIOXIDE_MOOD_CODE = 621;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Participant1' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_PARTICIPANT1 = 622;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Template Id' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_TEMPLATE_ID = 623;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Code P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_CODE_P = 624;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_CODE = 625;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Method Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_METHOD_CODE = 626;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Method Code P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_METHOD_CODE_P = 627;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Value' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_VALUE = 628;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Value P' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_VALUE_P = 629;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Effective Time' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_EFFECTIVE_TIME = 630;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Rhythm Mood Code' of 'Cardiac Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_RHYTHM__CARDIAC_RHYTHM_MOOD_CODE = 631;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Glasgow Eye' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_GLASGOW_EYE = 632;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Glasgow Motor' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_GLASGOW_MOTOR = 633;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Glasgow Qualifier' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_GLASGOW_QUALIFIER = 634;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Glasgow Total' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_GLASGOW_TOTAL = 635;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Glasgow Verbal' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_GLASGOW_VERBAL = 636;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Template Id' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_TEMPLATE_ID = 637;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Coma Score Organizer Effective Time' of 'Glasgow Coma Score Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_COMA_SCORE_ORGANIZER__GLASGOW_COMA_SCORE_ORGANIZER_EFFECTIVE_TIME = 638;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Template Id' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_TEMPLATE_ID = 639;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Code P' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_CODE_P = 640;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Code' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_CODE = 641;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Value' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_VALUE = 642;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Eye Mood Code' of 'Glasgow Eye'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_EYE__GLASGOW_EYE_MOOD_CODE = 643;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Template Id' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_TEMPLATE_ID = 644;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Code P' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_CODE_P = 645;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Code' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_CODE = 646;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Value' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_VALUE = 647;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Motor Mood Code' of 'Glasgow Motor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_MOTOR__GLASGOW_MOTOR_MOOD_CODE = 648;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Template Id' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_TEMPLATE_ID = 649;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Code P' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_CODE_P = 650;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Code' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_CODE = 651;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Value' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_VALUE = 652;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Qualifier Mood Code' of 'Glasgow Qualifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_QUALIFIER__GLASGOW_QUALIFIER_MOOD_CODE = 653;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Template Id' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_TEMPLATE_ID = 654;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Code P' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_CODE_P = 655;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Code' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_CODE = 656;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Value' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_VALUE = 657;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Total Mood Code' of 'Glasgow Total'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_TOTAL__GLASGOW_TOTAL_MOOD_CODE = 658;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Template Id' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_TEMPLATE_ID = 659;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Code P' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_CODE_P = 660;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Code' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_CODE = 661;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Value' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_VALUE = 662;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Glasgow Verbal Mood Code' of 'Glasgow Verbal'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GLASGOW_VERBAL__GLASGOW_VERBAL_MOOD_CODE = 663;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Template Id' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_TEMPLATE_ID = 664;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Code' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_CODE = 665;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Title' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_TITLE = 666;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Text' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_TEXT = 667;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Injury Cause Category' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_CAUSE_CATEGORY = 668;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Injury Mechanism' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_MECHANISM = 669;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Trauma Center Criteria' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_TRAUMA_CENTER_CRITERIA = 670;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Injury Risk Factor' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_INJURY_RISK_FACTOR = 671;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Vehicle Impact Area' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_VEHICLE_IMPACT_AREA = 672;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Patient Location In Vehicle' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_PATIENT_LOCATION_IN_VEHICLE = 673;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Vehicle Occupant Safety Equipment' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_VEHICLE_OCCUPANT_SAFETY_EQUIPMENT = 674;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Airbag Deployment Status' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_AIRBAG_DEPLOYMENT_STATUS = 675;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Height Of Fall' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_HEIGHT_OF_FALL = 676;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Incident Description Section Disaster Type' of 'Injury Incident Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_INCIDENT_DESCRIPTION_SECTION__INJURY_INCIDENT_DESCRIPTION_SECTION_DISASTER_TYPE = 677;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Template Id' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_TEMPLATE_ID = 678;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Code' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_CODE = 679;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Value' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_VALUE = 680;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Cause Category Mood Code' of 'Injury Cause Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_CAUSE_CATEGORY__INJURY_CAUSE_CATEGORY_MOOD_CODE = 681;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Template Id' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_TEMPLATE_ID = 682;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Code' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_CODE = 683;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Value' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_VALUE = 684;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Mechanism Mood Code' of 'Injury Mechanism'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_MECHANISM__INJURY_MECHANISM_MOOD_CODE = 685;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Center Criteria Template Id' of 'Trauma Center Criteria'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_CENTER_CRITERIA__TRAUMA_CENTER_CRITERIA_TEMPLATE_ID = 686;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Center Criteria Code' of 'Trauma Center Criteria'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_CENTER_CRITERIA__TRAUMA_CENTER_CRITERIA_CODE = 687;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Center Criteria Value' of 'Trauma Center Criteria'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_CENTER_CRITERIA__TRAUMA_CENTER_CRITERIA_VALUE = 688;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Trauma Center Criteria Mood Code' of 'Trauma Center Criteria'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRAUMA_CENTER_CRITERIA__TRAUMA_CENTER_CRITERIA_MOOD_CODE = 689;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Risk Factor Template Id' of 'Injury Risk Factor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_RISK_FACTOR__INJURY_RISK_FACTOR_TEMPLATE_ID = 690;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Risk Factor Code' of 'Injury Risk Factor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_RISK_FACTOR__INJURY_RISK_FACTOR_CODE = 691;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Risk Factor Value' of 'Injury Risk Factor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_RISK_FACTOR__INJURY_RISK_FACTOR_VALUE = 692;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Injury Risk Factor Mood Code' of 'Injury Risk Factor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INJURY_RISK_FACTOR__INJURY_RISK_FACTOR_MOOD_CODE = 693;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Template Id' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_TEMPLATE_ID = 694;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Code' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_CODE = 695;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Value' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_VALUE = 696;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Impact Area Mood Code' of 'Vehicle Impact Area'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_IMPACT_AREA__VEHICLE_IMPACT_AREA_MOOD_CODE = 697;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Template Id' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_TEMPLATE_ID = 698;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Code' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_CODE = 699;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Value' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_VALUE = 700;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Location In Vehicle Mood Code' of 'Patient Location In Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LOCATION_IN_VEHICLE__PATIENT_LOCATION_IN_VEHICLE_MOOD_CODE = 701;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Template Id' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_TEMPLATE_ID = 702;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Code' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_CODE = 703;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Value' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_VALUE = 704;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vehicle Occupant Safety Equipment Mood Code' of 'Vehicle Occupant Safety Equipment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VEHICLE_OCCUPANT_SAFETY_EQUIPMENT__VEHICLE_OCCUPANT_SAFETY_EQUIPMENT_MOOD_CODE = 705;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Template Id' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_TEMPLATE_ID = 706;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Code' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_CODE = 707;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Value' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_VALUE = 708;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airbag Deployment Status Mood Code' of 'Airbag Deployment Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRBAG_DEPLOYMENT_STATUS__AIRBAG_DEPLOYMENT_STATUS_MOOD_CODE = 709;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Template Id' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_TEMPLATE_ID = 710;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Code' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_CODE = 711;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Value' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_VALUE = 712;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Height Of Fall Mood Code' of 'Height Of Fall'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEIGHT_OF_FALL__HEIGHT_OF_FALL_MOOD_CODE = 713;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Template Id' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_TEMPLATE_ID = 714;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Code' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_CODE = 715;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Value' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_VALUE = 716;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Disaster Type Mood Code' of 'Disaster Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISASTER_TYPE__DISASTER_TYPE_MOOD_CODE = 717;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Template Id' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_TEMPLATE_ID = 721;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Code' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_CODE = 722;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Value' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_VALUE = 723;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Value P' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_VALUE_P = 724;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Not Administered Reason Observation Mood Code' of 'Medication Not Administered Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION__MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION_MOOD_CODE = 725;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Template Id' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_TEMPLATE_ID = 726;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Code P' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_CODE_P = 727;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Code' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_CODE = 728;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Value' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_VALUE = 729;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Response Observation Mood Code' of 'Medication Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_RESPONSE_OBSERVATION__MEDICATION_RESPONSE_OBSERVATION_MOOD_CODE = 730;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Template Id' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_TEMPLATE_ID = 731;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Code P' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_CODE_P = 732;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Code' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_CODE = 733;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Value' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_VALUE = 734;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Value P' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_VALUE_P = 735;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Complication Observation Mood Code' of 'Medication Complication Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_COMPLICATION_OBSERVATION__MEDICATION_COMPLICATION_OBSERVATION_MOOD_CODE = 736;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Template Id' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_TEMPLATE_ID = 737;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Code P' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_CODE_P = 738;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Code' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_CODE = 739;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Value' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_VALUE = 740;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Prior Administration Observation Mood Code' of 'Medication Prior Administration Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION__MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION_MOOD_CODE = 741;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Template Id' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_TEMPLATE_ID = 742;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Code' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_CODE = 743;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Value' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_VALUE = 744;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Body Weight Mood Code' of 'Patient Body Weight'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BODY_WEIGHT__PATIENT_BODY_WEIGHT_MOOD_CODE = 745;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Template Id' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_TEMPLATE_ID = 746;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Code P' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_CODE_P = 747;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Code' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_CODE = 748;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Value' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_VALUE = 749;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Effective Time' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_EFFECTIVE_TIME = 750;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Length Based Patient Body Weight Class Mood Code' of 'Length Based Patient Body Weight Class'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS__LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS_MOOD_CODE = 751;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Template Id' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_TEMPLATE_ID = 752;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Code P' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_CODE_P = 753;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Code' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_CODE = 754;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Value' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_VALUE = 755;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Value P' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_VALUE_P = 756;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Effective Time' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_EFFECTIVE_TIME = 757;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Face Assessment Mood Code' of 'Face Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FACE_ASSESSMENT__FACE_ASSESSMENT_MOOD_CODE = 758;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Template Id' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_TEMPLATE_ID = 759;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Code P' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_CODE_P = 760;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Code' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_CODE = 761;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Value' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_VALUE = 762;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Effective Time' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_EFFECTIVE_TIME = 763;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Head Assessment Mood Code' of 'Head Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEAD_ASSESSMENT__HEAD_ASSESSMENT_MOOD_CODE = 764;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Template Id' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_TEMPLATE_ID = 765;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Code' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_CODE = 766;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Value' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_VALUE = 767;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Effective Time' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_EFFECTIVE_TIME = 768;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neck Assessment Mood Code' of 'Neck Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NECK_ASSESSMENT__NECK_ASSESSMENT_MOOD_CODE = 769;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest And Lungs Assessment Template Id' of 'Chest And Lungs Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_AND_LUNGS_ASSESSMENT__CHEST_AND_LUNGS_ASSESSMENT_TEMPLATE_ID = 770;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest And Lungs Assessment Code' of 'Chest And Lungs Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_AND_LUNGS_ASSESSMENT__CHEST_AND_LUNGS_ASSESSMENT_CODE = 771;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest And Lungs Assessment Value' of 'Chest And Lungs Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_AND_LUNGS_ASSESSMENT__CHEST_AND_LUNGS_ASSESSMENT_VALUE = 772;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest And Lungs Assessment Effective Time' of 'Chest And Lungs Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_AND_LUNGS_ASSESSMENT__CHEST_AND_LUNGS_ASSESSMENT_EFFECTIVE_TIME = 773;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chest And Lungs Assessment Mood Code' of 'Chest And Lungs Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHEST_AND_LUNGS_ASSESSMENT__CHEST_AND_LUNGS_ASSESSMENT_MOOD_CODE = 774;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Template Id' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_TEMPLATE_ID = 775;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Code P' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_CODE_P = 776;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Code' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_CODE = 777;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Value' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_VALUE = 778;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Value P' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_VALUE_P = 779;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Effective Time' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_EFFECTIVE_TIME = 780;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Assessment Mood Code' of 'Heart Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_ASSESSMENT__HEART_ASSESSMENT_MOOD_CODE = 781;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Template Id' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_TEMPLATE_ID = 782;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_CODE = 783;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Value' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_VALUE = 784;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Target Site Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_TARGET_SITE_CODE = 785;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Effective Time' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_EFFECTIVE_TIME = 786;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abdomen Assessment Mood Code' of 'Abdomen Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABDOMEN_ASSESSMENT__ABDOMEN_ASSESSMENT_MOOD_CODE = 787;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Template Id' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_TEMPLATE_ID = 788;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Code' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_CODE = 789;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Value' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_VALUE = 790;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Value P' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_VALUE_P = 791;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Effective Time' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_EFFECTIVE_TIME = 792;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pelvic And Genitourinary Assessment Mood Code' of 'Pelvic And Genitourinary Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PELVIC_AND_GENITOURINARY_ASSESSMENT__PELVIC_AND_GENITOURINARY_ASSESSMENT_MOOD_CODE = 793;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Template Id' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TEMPLATE_ID = 794;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Code P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_CODE_P = 795;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_CODE = 796;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Target Site Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TARGET_SITE_CODE = 797;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Target Site Code P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_TARGET_SITE_CODE_P = 798;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Value' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_VALUE = 799;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Value P' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_VALUE_P = 800;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Effective Time' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_EFFECTIVE_TIME = 801;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Back And Spine Assessment Mood Code' of 'Back And Spine Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BACK_AND_SPINE_ASSESSMENT__BACK_AND_SPINE_ASSESSMENT_MOOD_CODE = 802;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Template Id' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TEMPLATE_ID = 803;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Code P' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_CODE_P = 804;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_CODE = 805;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Target Site Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TARGET_SITE_CODE = 806;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Target Site Code P' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_TARGET_SITE_CODE_P = 807;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Value' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_VALUE = 808;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Effective Time' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_EFFECTIVE_TIME = 809;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Extremities Assessment Mood Code' of 'Extremities Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTREMITIES_ASSESSMENT__EXTREMITIES_ASSESSMENT_MOOD_CODE = 810;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Template Id' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TEMPLATE_ID = 811;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Code P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_CODE_P = 812;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_CODE = 813;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Target Site Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TARGET_SITE_CODE = 814;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Target Site Code P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_TARGET_SITE_CODE_P = 815;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Value' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_VALUE = 816;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Value P' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_VALUE_P = 817;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Effective Time' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_EFFECTIVE_TIME = 818;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Eye Assessment Mood Code' of 'Eye Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EYE_ASSESSMENT__EYE_ASSESSMENT_MOOD_CODE = 819;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Template Id' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_TEMPLATE_ID = 820;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Code P' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_CODE_P = 821;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Code' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_CODE = 822;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Value' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_VALUE = 823;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Mental Status Assessment Mood Code' of 'Mental Status Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MENTAL_STATUS_ASSESSMENT__MENTAL_STATUS_ASSESSMENT_MOOD_CODE = 824;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Template Id' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_TEMPLATE_ID = 825;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Code' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_CODE = 826;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Value' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_VALUE = 827;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Timing Mood Code' of 'Cardiac Arrest Timing'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_TIMING__CARDIAC_ARREST_TIMING_MOOD_CODE = 828;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Template Id' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_TEMPLATE_ID = 829;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Code' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_CODE = 830;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Value' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_VALUE = 831;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Cardiac Arrest Cause Mood Code' of 'Cardiac Arrest Cause'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CARDIAC_ARREST_CAUSE__CARDIAC_ARREST_CAUSE_MOOD_CODE = 832;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior CPR Provider Participation' of 'Prior CPR'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_CPR__PRIOR_CPR_PROVIDER_PARTICIPATION = 833;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior CPR Template Id' of 'Prior CPR'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_CPR__PRIOR_CPR_TEMPLATE_ID = 834;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior CPR Code' of 'Prior CPR'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_CPR__PRIOR_CPR_CODE = 835;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior CPR Value' of 'Prior CPR'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_CPR__PRIOR_CPR_VALUE = 836;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior CPR Mood Code' of 'Prior CPR'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_CPR__PRIOR_CPR_MOOD_CODE = 837;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior AED Use Prior AED Provider Participation' of 'Prior AED Use'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AED_USE__PRIOR_AED_USE_PRIOR_AED_PROVIDER_PARTICIPATION = 838;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior AED Use Template Id' of 'Prior AED Use'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AED_USE__PRIOR_AED_USE_TEMPLATE_ID = 839;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior AED Use Code' of 'Prior AED Use'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AED_USE__PRIOR_AED_USE_CODE = 840;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior AED Use Value' of 'Prior AED Use'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AED_USE__PRIOR_AED_USE_VALUE = 841;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Prior AED Use Mood Code' of 'Prior AED Use'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRIOR_AED_USE__PRIOR_AED_USE_MOOD_CODE = 842;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Template Id' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_TEMPLATE_ID = 843;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Code' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_CODE = 844;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Value' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_VALUE = 845;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Arrest Rhythm Mood Code' of 'Arrest Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ARREST_RHYTHM__ARREST_RHYTHM_MOOD_CODE = 846;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Template Id' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_TEMPLATE_ID = 847;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Code' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_CODE = 848;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Value' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_VALUE = 849;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Return Of Spontaneous Circulation Mood Code' of 'Return Of Spontaneous Circulation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RETURN_OF_SPONTANEOUS_CIRCULATION__RETURN_OF_SPONTANEOUS_CIRCULATION_MOOD_CODE = 850;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Template Id' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_TEMPLATE_ID = 851;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Code' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_CODE = 852;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Value' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_VALUE = 853;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Destination Rhythm Mood Code' of 'Destination Rhythm'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DESTINATION_RHYTHM__DESTINATION_RHYTHM_MOOD_CODE = 854;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Template Id' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_TEMPLATE_ID = 855;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Code P' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_CODE_P = 856;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Code' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_CODE = 857;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Value' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_VALUE = 858;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Value P' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_VALUE_P = 859;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Abandoned Procedure Reason Observation Mood Code' of 'Abandoned Procedure Reason Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ABANDONED_PROCEDURE_REASON_OBSERVATION__ABANDONED_PROCEDURE_REASON_OBSERVATION_MOOD_CODE = 860;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Template Id' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_TEMPLATE_ID = 861;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Code P' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_CODE_P = 862;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Code' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_CODE = 863;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Value' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_VALUE = 864;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Prior Indicator Mood Code' of 'Procedure Prior Indicator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PRIOR_INDICATOR__PROCEDURE_PRIOR_INDICATOR_MOOD_CODE = 865;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Template Id' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_TEMPLATE_ID = 866;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Code P' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_CODE_P = 867;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Code' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_CODE = 868;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Value' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_VALUE = 869;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Number Of Attempts Observation Mood Code' of 'Procedure Number Of Attempts Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION__PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION_MOOD_CODE = 870;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Template Id' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_TEMPLATE_ID = 871;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Code P' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_CODE_P = 872;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Code' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_CODE = 873;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Value' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_VALUE = 874;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Successful Observation Mood Code' of 'Procedure Successful Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SUCCESSFUL_OBSERVATION__PROCEDURE_SUCCESSFUL_OBSERVATION_MOOD_CODE = 875;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Template Id' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_TEMPLATE_ID = 876;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Code P' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_CODE_P = 877;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Code' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_CODE = 878;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Value' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_VALUE = 879;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Complications Observation Mood Code' of 'Procedure Complications Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_COMPLICATIONS_OBSERVATION__PROCEDURE_COMPLICATIONS_OBSERVATION_MOOD_CODE = 880;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Template Id' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_TEMPLATE_ID = 881;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Code P' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_CODE_P = 882;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Code' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_CODE = 883;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Value' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_VALUE = 884;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Value P' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_VALUE_P = 885;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Patient Response Observation Mood Code' of 'Procedure Patient Response Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PATIENT_RESPONSE_OBSERVATION__PROCEDURE_PATIENT_RESPONSE_OBSERVATION_MOOD_CODE = 886;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Template Id' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_TEMPLATE_ID = 887;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Code P' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_CODE_P = 888;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_CODE = 889;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Method Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_METHOD_CODE = 890;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Method Code P' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_METHOD_CODE_P = 891;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Value' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_VALUE = 892;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Effective Time' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_EFFECTIVE_TIME = 893;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Airway Confirmation Observation Mood Code' of 'Airway Confirmation Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AIRWAY_CONFIRMATION_OBSERVATION__AIRWAY_CONFIRMATION_OBSERVATION_MOOD_CODE = 894;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Template Id' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_TEMPLATE_ID = 895;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Code' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_CODE = 896;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Value' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_VALUE = 897;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Value P' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_VALUE_P = 898;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason Procedure Not Attempted Observation Mood Code' of 'Reason Procedure Not Attempted Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION__REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION_MOOD_CODE = 899;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Template Id' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_TEMPLATE_ID = 900;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Code P' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_CODE_P = 901;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Code' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_CODE = 902;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Value' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_VALUE = 903;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Value P' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_VALUE_P = 904;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Type Mood Code' of 'Complaint Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_TYPE__COMPLAINT_TYPE_MOOD_CODE = 905;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Template Id' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_TEMPLATE_ID = 906;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Code P' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_CODE_P = 907;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Code' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_CODE = 908;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Value' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_VALUE = 909;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Duration Mood Code' of 'Complaint Duration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_DURATION__COMPLAINT_DURATION_MOOD_CODE = 910;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Template Id' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_TEMPLATE_ID = 911;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Code P' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_CODE_P = 912;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Code' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_CODE = 913;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Value' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_VALUE = 914;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Value P' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_VALUE_P = 915;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complaint Organ System Mood Code' of 'Complaint Organ System'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLAINT_ORGAN_SYSTEM__COMPLAINT_ORGAN_SYSTEM_MOOD_CODE = 916;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Template Id' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_TEMPLATE_ID = 917;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Code P' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_CODE_P = 918;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Code' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_CODE = 919;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Value' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_VALUE = 920;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Value P' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_VALUE_P = 921;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Neurological Assessment Mood Code' of 'Neurological Assessment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NEUROLOGICAL_ASSESSMENT__NEUROLOGICAL_ASSESSMENT_MOOD_CODE = 922;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Procedures Template Id' of 'Existence Of History Of Procedures'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_PROCEDURES__EXISTENCE_OF_HISTORY_OF_PROCEDURES_TEMPLATE_ID = 923;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Procedures Code' of 'Existence Of History Of Procedures'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_PROCEDURES__EXISTENCE_OF_HISTORY_OF_PROCEDURES_CODE = 924;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Procedures Value' of 'Existence Of History Of Procedures'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_PROCEDURES__EXISTENCE_OF_HISTORY_OF_PROCEDURES_VALUE = 925;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Existence Of History Of Procedures Mood Code' of 'Existence Of History Of Procedures'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXISTENCE_OF_HISTORY_OF_PROCEDURES__EXISTENCE_OF_HISTORY_OF_PROCEDURES_MOOD_CODE = 926;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Code' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_CODE = 927;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Value' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_VALUE = 928;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Mood Code' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_MOOD_CODE = 929;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Systolic Blood Pressure Effective Time' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__SYSTOLIC_BLOOD_PRESSURE_EFFECTIVE_TIME = 930;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Systolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SYSTOLIC_BLOOD_PRESSURE__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 931;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Code' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_CODE = 932;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Value' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_VALUE = 933;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Effective Time' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_EFFECTIVE_TIME = 934;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diastolic Blood Pressure Mood Code' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__DIASTOLIC_BLOOD_PRESSURE_MOOD_CODE = 935;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Diastolic Blood Pressure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIASTOLIC_BLOOD_PRESSURE__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 936;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Code P' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_CODE_P = 937;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Code' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_CODE = 938;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Value' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_VALUE = 939;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Effective Time' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_EFFECTIVE_TIME = 940;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Heart Rate Mood Code' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__HEART_RATE_MOOD_CODE = 941;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Heart Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEART_RATE__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 942;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Code' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_CODE = 943;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Value' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_VALUE = 944;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Effective Time' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_EFFECTIVE_TIME = 945;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Respiratory Rate Mood Code' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__RESPIRATORY_RATE_MOOD_CODE = 946;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Respiratory Rate'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPIRATORY_RATE__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 947;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Code' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_CODE = 948;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Value' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_VALUE = 949;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Effective Time' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_EFFECTIVE_TIME = 950;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Body Temperature Mood Code' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__BODY_TEMPERATURE_MOOD_CODE = 951;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Body Temperature'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BODY_TEMPERATURE__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 952;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Template Id' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_TEMPLATE_ID = 953;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Code' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_CODE = 954;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Value' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_VALUE = 955;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Oxygen Saturation Mood Code' of 'Oxygen Saturation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OXYGEN_SATURATION__OXYGEN_SATURATION_MOOD_CODE = 956;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Template Id' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_TEMPLATE_ID = 957;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Code P' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_CODE_P = 958;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Code' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_CODE = 959;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Value' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_VALUE = 960;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Value P' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_VALUE_P = 961;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Protocol Age Category Mood Code' of 'Protocol Age Category'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROTOCOL_AGE_CATEGORY__PROTOCOL_AGE_CATEGORY_MOOD_CODE = 962;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Template Id' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_TEMPLATE_ID = 963;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Code' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_CODE = 964;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Value' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_VALUE = 965;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Name Mood Code' of 'Dispatch Location Name'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_NAME__DISPATCH_LOCATION_NAME_MOOD_CODE = 966;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Template Id' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_TEMPLATE_ID = 967;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Code' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_CODE = 968;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Value' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_VALUE = 969;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Latitude Mood Code' of 'Dispatch Location Latitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LATITUDE__DISPATCH_LOCATION_LATITUDE_MOOD_CODE = 970;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Template Id' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_TEMPLATE_ID = 971;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Code' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_CODE = 972;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Value' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_VALUE = 973;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Location Longitude Mood Code' of 'Dispatch Location Longitude'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_LOCATION_LONGITUDE__DISPATCH_LOCATION_LONGITUDE_MOOD_CODE = 974;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Template Id' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_TEMPLATE_ID = 975;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Code P' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_CODE_P = 976;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Code' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_CODE = 977;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Value' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_VALUE = 978;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Value P' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_VALUE_P = 979;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Dispatch Delay Mood Code' of 'Dispatch Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISPATCH_DELAY__DISPATCH_DELAY_MOOD_CODE = 980;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Template Id' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_TEMPLATE_ID = 981;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Code P' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_CODE_P = 982;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Code' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_CODE = 983;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Value' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_VALUE = 984;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Value P' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_VALUE_P = 985;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Delay Mood Code' of 'Response Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DELAY__RESPONSE_DELAY_MOOD_CODE = 986;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Template Id' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_TEMPLATE_ID = 987;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Code P' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_CODE_P = 988;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Code' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_CODE = 989;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Value' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_VALUE = 990;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Value P' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_VALUE_P = 991;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scene Delay Mood Code' of 'Scene Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCENE_DELAY__SCENE_DELAY_MOOD_CODE = 992;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Template Id' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_TEMPLATE_ID = 993;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Code P' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_CODE_P = 994;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Code' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_CODE = 995;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Value' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_VALUE = 996;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Value P' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_VALUE_P = 997;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Transport Delay Mood Code' of 'Transport Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TRANSPORT_DELAY__TRANSPORT_DELAY_MOOD_CODE = 998;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Template Id' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_TEMPLATE_ID = 999;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Code P' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_CODE_P = 1000;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Code' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_CODE = 1001;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Value' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_VALUE = 1002;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Value P' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_VALUE_P = 1003;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Turnaround Delay Mood Code' of 'Turnaround Delay'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TURNAROUND_DELAY__TURNAROUND_DELAY_MOOD_CODE = 1004;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Template Id' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_TEMPLATE_ID = 1005;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Code P' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_CODE_P = 1006;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Code' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_CODE = 1007;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Value' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_VALUE = 1008;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Beginning Odometer Reading Mood Code' of 'Response Beginning Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_BEGINNING_ODOMETER_READING__RESPONSE_BEGINNING_ODOMETER_READING_MOOD_CODE = 1009;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Template Id' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_TEMPLATE_ID = 1010;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Code P' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_CODE_P = 1011;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Code' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_CODE = 1012;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Value' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_VALUE = 1013;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response On Scene Odometer Reading Mood Code' of 'Response On Scene Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ON_SCENE_ODOMETER_READING__RESPONSE_ON_SCENE_ODOMETER_READING_MOOD_CODE = 1014;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Template Id' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_TEMPLATE_ID = 1015;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Code P' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_CODE_P = 1016;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Code' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_CODE = 1017;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Value' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_VALUE = 1018;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Destination Odometer Reading Mood Code' of 'Response Destination Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_DESTINATION_ODOMETER_READING__RESPONSE_DESTINATION_ODOMETER_READING_MOOD_CODE = 1019;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Template Id' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_TEMPLATE_ID = 1020;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Code P' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_CODE_P = 1021;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Code' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_CODE = 1022;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Value' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_VALUE = 1023;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Response Ending Odometer Reading Mood Code' of 'Response Ending Odometer Reading'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESPONSE_ENDING_ODOMETER_READING__RESPONSE_ENDING_ODOMETER_READING_MOOD_CODE = 1024;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final int GENERATED_DIAGNOSTIC_CODE_COUNT = 1024;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants in a derived class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final int DIAGNOSTIC_CODE_COUNT = GENERATED_DIAGNOSTIC_CODE_COUNT;

	/**
	 * The cached base package validator.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CDAValidator cdaValidator;

	/**
	 * The cached base package validator.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsolValidator consolValidator;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EmspcrValidator() {
		super();
		cdaValidator = CDAValidator.INSTANCE;
		consolValidator = ConsolValidator.INSTANCE;
	}

	/**
	 * Returns the package of this validator switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EPackage getEPackage() {
		return EmspcrPackage.eINSTANCE;
	}

	/**
	 * Calls <code>validateXXX</code> for the corresponding classifier of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
		switch (classifierID) {
			case EmspcrPackage.PATIENT_CARE_REPORT:
				return validatePatientCareReport((PatientCareReport) value, diagnostics, context);
			case EmspcrPackage.BILLING_SECTION:
				return validateBillingSection((BillingSection) value, diagnostics, context);
			case EmspcrPackage.BILLING_CONDITION:
				return validateBillingCondition((BillingCondition) value, diagnostics, context);
			case EmspcrPackage.LEVEL_OF_SERVICE_OBSERVATION:
				return validateLevelOfServiceObservation((LevelOfServiceObservation) value, diagnostics, context);
			case EmspcrPackage.CURRENT_MEDICATION_SECTION:
				return validateCurrentMedicationSection((CurrentMedicationSection) value, diagnostics, context);
			case EmspcrPackage.CURRENTLY_ON_MEDICATION:
				return validateCurrentlyOnMedication((CurrentlyOnMedication) value, diagnostics, context);
			case EmspcrPackage.PATIENT_ON_ANTICOAGULANTS:
				return validatePatientOnAnticoagulants((PatientOnAnticoagulants) value, diagnostics, context);
			case EmspcrPackage.CURRENT_MEDICATION:
				return validateCurrentMedication((CurrentMedication) value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_EVENT_SECTION:
				return validateCardiacArrestEventSection((CardiacArrestEventSection) value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_EXISTENCE:
				return validateCardiacArrestExistence((CardiacArrestExistence) value, diagnostics, context);
			case EmspcrPackage.ADVANCE_DIRECTIVES_SECTION:
				return validateAdvanceDirectivesSection((AdvanceDirectivesSection) value, diagnostics, context);
			case EmspcrPackage.ADVANCED_DIRECTIVE_OBSERVATION:
				return validateAdvancedDirectiveObservation((AdvancedDirectiveObservation) value, diagnostics, context);
			case EmspcrPackage.ALLERGIES_AND_ADVERSE_REACTIONS_SECTION:
				return validateAllergiesAndAdverseReactionsSection(
					(AllergiesAndAdverseReactionsSection) value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_DRUG_ALLERGY_OBSERVATION:
				return validateExistenceOfDrugAllergyObservation(
					(ExistenceOfDrugAllergyObservation) value, diagnostics, context);
			case EmspcrPackage.DRUG_ALLERGY_PROBLEM_ACT:
				return validateDrugAllergyProblemAct((DrugAllergyProblemAct) value, diagnostics, context);
			case EmspcrPackage.ENVIRONMENTAL_ALLERGIES:
				return validateEnvironmentalAllergies((EnvironmentalAllergies) value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_ENVIRONMENTAL_ALLERGY:
				return validateExistenceOfEnvironmentalAllergy(
					(ExistenceOfEnvironmentalAllergy) value, diagnostics, context);
			case EmspcrPackage.ENVIRONMENTAL_ALLERGY:
				return validateEnvironmentalAllergy((EnvironmentalAllergy) value, diagnostics, context);
			case EmspcrPackage.PAST_MEDICAL_HISTORY_SECTION:
				return validatePastMedicalHistorySection((PastMedicalHistorySection) value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_HISTORY_OF_CONDITION:
				return validateExistenceOfHistoryOfCondition(
					(ExistenceOfHistoryOfCondition) value, diagnostics, context);
			case EmspcrPackage.HISTORY_OF_CONDITION:
				return validateHistoryOfCondition((HistoryOfCondition) value, diagnostics, context);
			case EmspcrPackage.SOCIAL_HISTORY_SECTION:
				return validateSocialHistorySection((SocialHistorySection) value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_DRUG_USE_INDICATION:
				return validateExistenceOfDrugUseIndication((ExistenceOfDrugUseIndication) value, diagnostics, context);
			case EmspcrPackage.DRUG_USE_INDICATION:
				return validateDrugUseIndication((DrugUseIndication) value, diagnostics, context);
			case EmspcrPackage.PHYSICAL_ASSESSMENT_SECTION:
				return validatePhysicalAssessmentSection((PhysicalAssessmentSection) value, diagnostics, context);
			case EmspcrPackage.PHYSICAL_ASSESSMENT_ORGANIZER:
				return validatePhysicalAssessmentOrganizer((PhysicalAssessmentOrganizer) value, diagnostics, context);
			case EmspcrPackage.SKIN_ASSESSMENT:
				return validateSkinAssessment((SkinAssessment) value, diagnostics, context);
			case EmspcrPackage.PATIENT_PREGNANCY:
				return validatePatientPregnancy((PatientPregnancy) value, diagnostics, context);
			case EmspcrPackage.LAST_ORAL_INTAKE:
				return validateLastOralIntake((LastOralIntake) value, diagnostics, context);
			case EmspcrPackage.PATIENT_AGE:
				return validatePatientAge((PatientAge) value, diagnostics, context);
			case EmspcrPackage.THROMBOLYTIC_CONTRAINDICATIONS:
				return validateThrombolyticContraindications(
					(ThrombolyticContraindications) value, diagnostics, context);
			case EmspcrPackage.BARRIERS_TO_PATIENT_CARE:
				return validateBarriersToPatientCare((BarriersToPatientCare) value, diagnostics, context);
			case EmspcrPackage.MEDICATIONS_ADMINISTERED_SECTION:
				return validateMedicationsAdministeredSection(
					(MedicationsAdministeredSection) value, diagnostics, context);
			case EmspcrPackage.MEDICATION_ADMINISTERED:
				return validateMedicationAdministered((MedicationAdministered) value, diagnostics, context);
			case EmspcrPackage.PROCEDURES_PERFORMED_SECTION:
				return validateProceduresPerformedSection((ProceduresPerformedSection) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE:
				return validateProcedure((Procedure) value, diagnostics, context);
			case EmspcrPackage.PATIENT_CARE_NARRATIVE_SECTION:
				return validatePatientCareNarrativeSection((PatientCareNarrativeSection) value, diagnostics, context);
			case EmspcrPackage.SCENE_SECTION:
				return validateSceneSection((SceneSection) value, diagnostics, context);
			case EmspcrPackage.FIRST_UNIT_INDICATOR:
				return validateFirstUnitIndicator((FirstUnitIndicator) value, diagnostics, context);
			case EmspcrPackage.FIRST_UNIT_ON_SCENE:
				return validateFirstUnitOnScene((FirstUnitOnScene) value, diagnostics, context);
			case EmspcrPackage.SCENE_PATIENT_COUNT:
				return validateScenePatientCount((ScenePatientCount) value, diagnostics, context);
			case EmspcrPackage.MASS_CASUALTY_INDICATOR:
				return validateMassCasualtyIndicator((MassCasualtyIndicator) value, diagnostics, context);
			case EmspcrPackage.LOCATION_TYPE_OBSERVATION:
				return validateLocationTypeObservation((LocationTypeObservation) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_SECTION:
				return validateDispatchSection((DispatchSection) value, diagnostics, context);
			case EmspcrPackage.EMERGENCY_MEDICAL_DISPATCH_OBSERVATION:
				return validateEmergencyMedicalDispatchObservation(
					(EmergencyMedicalDispatchObservation) value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_REPORTED_BY_DISPATCH:
				return validateComplaintReportedByDispatch((ComplaintReportedByDispatch) value, diagnostics, context);
			case EmspcrPackage.DISPOSITION_SECTION:
				return validateDispositionSection((DispositionSection) value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_METHOD_OBSERVATION:
				return validateTransportMethodObservation((TransportMethodObservation) value, diagnostics, context);
			case EmspcrPackage.NUMBER_OF_PATIENTS_OBSERVATION:
				return validateNumberOfPatientsObservation((NumberOfPatientsObservation) value, diagnostics, context);
			case EmspcrPackage.INCIDENT_DISPOSITION_OBSERVATION:
				return validateIncidentDispositionObservation(
					(IncidentDispositionObservation) value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_MODE_OBSERVATION:
				return validateTransportModeObservation((TransportModeObservation) value, diagnostics, context);
			case EmspcrPackage.REASON_FOR_CHOOSING_DESTINATION_OBSERVATION:
				return validateReasonForChoosingDestinationObservation(
					(ReasonForChoosingDestinationObservation) value, diagnostics, context);
			case EmspcrPackage.PREARRIVAL_ACTIVATION_OBSERVATION:
				return validatePrearrivalActivationObservation(
					(PrearrivalActivationObservation) value, diagnostics, context);
			case EmspcrPackage.PATIENT_CONDITION_CHANGE_AT_DESTINATION_OBSERVATION:
				return validatePatientConditionChangeAtDestinationObservation(
					(PatientConditionChangeAtDestinationObservation) value, diagnostics, context);
			case EmspcrPackage.PERSONNEL_ADVERSE_EVENT_SECTION:
				return validatePersonnelAdverseEventSection((PersonnelAdverseEventSection) value, diagnostics, context);
			case EmspcrPackage.ADVERSE_EVENT_INDICATOR:
				return validateAdverseEventIndicator((AdverseEventIndicator) value, diagnostics, context);
			case EmspcrPackage.ADVERSE_EVENT_TYPE_OBSERVATION:
				return validateAdverseEventTypeObservation((AdverseEventTypeObservation) value, diagnostics, context);
			case EmspcrPackage.PROTOCOL_SECTION:
				return validateProtocolSection((ProtocolSection) value, diagnostics, context);
			case EmspcrPackage.PROTOCOL_OBSERVATION:
				return validateProtocolObservation((ProtocolObservation) value, diagnostics, context);
			case EmspcrPackage.CANDIDATE_PATIENT_REGISTRY_TYPE:
				return validateCandidatePatientRegistryType((CandidatePatientRegistryType) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_SECTION:
				return validateResponseSection((ResponseSection) value, diagnostics, context);
			case EmspcrPackage.DELAY_ORGANIZER:
				return validateDelayOrganizer((DelayOrganizer) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_ORGANIZER:
				return validateDispatchLocationOrganizer((DispatchLocationOrganizer) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ODOMETER_READING_ORGANIZER:
				return validateResponseOdometerReadingOrganizer(
					(ResponseOdometerReadingOrganizer) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_MODE_TO_SCENE:
				return validateResponseModeToScene((ResponseModeToScene) value, diagnostics, context);
			case EmspcrPackage.SITUATION_SECTION:
				return validateSituationSection((SituationSection) value, diagnostics, context);
			case EmspcrPackage.COMPLAINT:
				return validateComplaint((Complaint) value, diagnostics, context);
			case EmspcrPackage.POSSIBLE_INJURY:
				return validatePossibleInjury((PossibleInjury) value, diagnostics, context);
			case EmspcrPackage.PROVIDER_PRIMARY_IMPRESSION:
				return validateProviderPrimaryImpression((ProviderPrimaryImpression) value, diagnostics, context);
			case EmspcrPackage.PRIMARY_SYMPTOM:
				return validatePrimarySymptom((PrimarySymptom) value, diagnostics, context);
			case EmspcrPackage.OTHER_SYMPTOMS:
				return validateOtherSymptoms((OtherSymptoms) value, diagnostics, context);
			case EmspcrPackage.PROVIDER_SECONDARY_IMPRESSIONS:
				return validateProviderSecondaryImpressions((ProviderSecondaryImpressions) value, diagnostics, context);
			case EmspcrPackage.INITIAL_PATIENT_ACUITY:
				return validateInitialPatientAcuity((InitialPatientAcuity) value, diagnostics, context);
			case EmspcrPackage.TIMES_SECTION:
				return validateTimesSection((TimesSection) value, diagnostics, context);
			case EmspcrPackage.CALL_TIME:
				return validateCallTime((CallTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_NOTIFIED_TIME:
				return validateUnitNotifiedTime((UnitNotifiedTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_EN_ROUTE_TIME:
				return validateUnitEnRouteTime((UnitEnRouteTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_ON_SCENE_TIME:
				return validateUnitOnSceneTime((UnitOnSceneTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_AT_PATIENTT_TIME:
				return validateUnitAtPatienttTime((UnitAtPatienttTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_LEFT_SCENE_TIME:
				return validateUnitLeftSceneTime((UnitLeftSceneTime) value, diagnostics, context);
			case EmspcrPackage.PATIENT_ARRIVED_AT_DESTINATION_TIME:
				return validatePatientArrivedAtDestinationTime(
					(PatientArrivedAtDestinationTime) value, diagnostics, context);
			case EmspcrPackage.UNIT_BACK_IN_SERVICE_TIME:
				return validateUnitBackInServiceTime((UnitBackInServiceTime) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_NOTIFIED_TIME:
				return validateDispatchNotifiedTime((DispatchNotifiedTime) value, diagnostics, context);
			case EmspcrPackage.VITAL_SIGNS_SECTION:
				return validateVitalSignsSection((VitalSignsSection) value, diagnostics, context);
			case EmspcrPackage.VITAL_SIGNS_ORGANIZER:
				return validateVitalSignsOrganizer((VitalSignsOrganizer) value, diagnostics, context);
			case EmspcrPackage.PRIOR_AID_VITALS:
				return validatePriorAidVitals((PriorAidVitals) value, diagnostics, context);
			case EmspcrPackage.ADDITIONAL_VITAL_SIGNS_ORGANIZER:
				return validateAdditionalVitalSignsOrganizer(
					(AdditionalVitalSignsOrganizer) value, diagnostics, context);
			case EmspcrPackage.STROKE_SCORE:
				return validateStrokeScore((StrokeScore) value, diagnostics, context);
			case EmspcrPackage.PAIN_SCORE:
				return validatePainScore((PainScore) value, diagnostics, context);
			case EmspcrPackage.LEVEL_OF_RESPONSIVENESS:
				return validateLevelOfResponsiveness((LevelOfResponsiveness) value, diagnostics, context);
			case EmspcrPackage.BLOOD_GLUCOSE:
				return validateBloodGlucose((BloodGlucose) value, diagnostics, context);
			case EmspcrPackage.CARBON_MONOXIDE:
				return validateCarbonMonoxide((CarbonMonoxide) value, diagnostics, context);
			case EmspcrPackage.CARBON_DIOXIDE:
				return validateCarbonDioxide((CarbonDioxide) value, diagnostics, context);
			case EmspcrPackage.CARDIAC_RHYTHM:
				return validateCardiacRhythm((CardiacRhythm) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_COMA_SCORE_ORGANIZER:
				return validateGlasgowComaScoreOrganizer((GlasgowComaScoreOrganizer) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_EYE:
				return validateGlasgowEye((GlasgowEye) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_MOTOR:
				return validateGlasgowMotor((GlasgowMotor) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_QUALIFIER:
				return validateGlasgowQualifier((GlasgowQualifier) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_TOTAL:
				return validateGlasgowTotal((GlasgowTotal) value, diagnostics, context);
			case EmspcrPackage.GLASGOW_VERBAL:
				return validateGlasgowVerbal((GlasgowVerbal) value, diagnostics, context);
			case EmspcrPackage.INJURY_INCIDENT_DESCRIPTION_SECTION:
				return validateInjuryIncidentDescriptionSection(
					(InjuryIncidentDescriptionSection) value, diagnostics, context);
			case EmspcrPackage.INJURY_CAUSE_CATEGORY:
				return validateInjuryCauseCategory((InjuryCauseCategory) value, diagnostics, context);
			case EmspcrPackage.INJURY_MECHANISM:
				return validateInjuryMechanism((InjuryMechanism) value, diagnostics, context);
			case EmspcrPackage.TRAUMA_CENTER_CRITERIA:
				return validateTraumaCenterCriteria((TraumaCenterCriteria) value, diagnostics, context);
			case EmspcrPackage.INJURY_RISK_FACTOR:
				return validateInjuryRiskFactor((InjuryRiskFactor) value, diagnostics, context);
			case EmspcrPackage.VEHICLE_IMPACT_AREA:
				return validateVehicleImpactArea((VehicleImpactArea) value, diagnostics, context);
			case EmspcrPackage.PATIENT_LOCATION_IN_VEHICLE:
				return validatePatientLocationInVehicle((PatientLocationInVehicle) value, diagnostics, context);
			case EmspcrPackage.VEHICLE_OCCUPANT_SAFETY_EQUIPMENT:
				return validateVehicleOccupantSafetyEquipment(
					(VehicleOccupantSafetyEquipment) value, diagnostics, context);
			case EmspcrPackage.AIRBAG_DEPLOYMENT_STATUS:
				return validateAirbagDeploymentStatus((AirbagDeploymentStatus) value, diagnostics, context);
			case EmspcrPackage.HEIGHT_OF_FALL:
				return validateHeightOfFall((HeightOfFall) value, diagnostics, context);
			case EmspcrPackage.DISASTER_TYPE:
				return validateDisasterType((DisasterType) value, diagnostics, context);
			case EmspcrPackage.HISTORY_OF_PROCEDURES_ORGANIZER:
				return validateHistoryOfProceduresOrganizer((HistoryOfProceduresOrganizer) value, diagnostics, context);
			case EmspcrPackage.MEDICATION_NOT_ADMINISTERED_REASON_OBSERVATION:
				return validateMedicationNotAdministeredReasonObservation(
					(MedicationNotAdministeredReasonObservation) value, diagnostics, context);
			case EmspcrPackage.MEDICATION_RESPONSE_OBSERVATION:
				return validateMedicationResponseObservation(
					(MedicationResponseObservation) value, diagnostics, context);
			case EmspcrPackage.MEDICATION_COMPLICATION_OBSERVATION:
				return validateMedicationComplicationObservation(
					(MedicationComplicationObservation) value, diagnostics, context);
			case EmspcrPackage.MEDICATION_PRIOR_ADMINISTRATION_OBSERVATION:
				return validateMedicationPriorAdministrationObservation(
					(MedicationPriorAdministrationObservation) value, diagnostics, context);
			case EmspcrPackage.PATIENT_BODY_WEIGHT:
				return validatePatientBodyWeight((PatientBodyWeight) value, diagnostics, context);
			case EmspcrPackage.LENGTH_BASED_PATIENT_BODY_WEIGHT_CLASS:
				return validateLengthBasedPatientBodyWeightClass(
					(LengthBasedPatientBodyWeightClass) value, diagnostics, context);
			case EmspcrPackage.FACE_ASSESSMENT:
				return validateFaceAssessment((FaceAssessment) value, diagnostics, context);
			case EmspcrPackage.HEAD_ASSESSMENT:
				return validateHeadAssessment((HeadAssessment) value, diagnostics, context);
			case EmspcrPackage.NECK_ASSESSMENT:
				return validateNeckAssessment((NeckAssessment) value, diagnostics, context);
			case EmspcrPackage.CHEST_AND_LUNGS_ASSESSMENT:
				return validateChestAndLungsAssessment((ChestAndLungsAssessment) value, diagnostics, context);
			case EmspcrPackage.HEART_ASSESSMENT:
				return validateHeartAssessment((HeartAssessment) value, diagnostics, context);
			case EmspcrPackage.ABDOMEN_ASSESSMENT:
				return validateAbdomenAssessment((AbdomenAssessment) value, diagnostics, context);
			case EmspcrPackage.PELVIC_AND_GENITOURINARY_ASSESSMENT:
				return validatePelvicAndGenitourinaryAssessment(
					(PelvicAndGenitourinaryAssessment) value, diagnostics, context);
			case EmspcrPackage.BACK_AND_SPINE_ASSESSMENT:
				return validateBackAndSpineAssessment((BackAndSpineAssessment) value, diagnostics, context);
			case EmspcrPackage.EXTREMITIES_ASSESSMENT:
				return validateExtremitiesAssessment((ExtremitiesAssessment) value, diagnostics, context);
			case EmspcrPackage.EYE_ASSESSMENT:
				return validateEyeAssessment((EyeAssessment) value, diagnostics, context);
			case EmspcrPackage.MENTAL_STATUS_ASSESSMENT:
				return validateMentalStatusAssessment((MentalStatusAssessment) value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_TIMING:
				return validateCardiacArrestTiming((CardiacArrestTiming) value, diagnostics, context);
			case EmspcrPackage.CARDIAC_ARREST_CAUSE:
				return validateCardiacArrestCause((CardiacArrestCause) value, diagnostics, context);
			case EmspcrPackage.PRIOR_CPR:
				return validatePriorCPR((PriorCPR) value, diagnostics, context);
			case EmspcrPackage.PRIOR_AED_USE:
				return validatePriorAEDUse((PriorAEDUse) value, diagnostics, context);
			case EmspcrPackage.ARREST_RHYTHM:
				return validateArrestRhythm((ArrestRhythm) value, diagnostics, context);
			case EmspcrPackage.RETURN_OF_SPONTANEOUS_CIRCULATION:
				return validateReturnOfSpontaneousCirculation(
					(ReturnOfSpontaneousCirculation) value, diagnostics, context);
			case EmspcrPackage.DESTINATION_RHYTHM:
				return validateDestinationRhythm((DestinationRhythm) value, diagnostics, context);
			case EmspcrPackage.ABANDONED_PROCEDURE_REASON_OBSERVATION:
				return validateAbandonedProcedureReasonObservation(
					(AbandonedProcedureReasonObservation) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_PRIOR_INDICATOR:
				return validateProcedurePriorIndicator((ProcedurePriorIndicator) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_NUMBER_OF_ATTEMPTS_OBSERVATION:
				return validateProcedureNumberOfAttemptsObservation(
					(ProcedureNumberOfAttemptsObservation) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_SUCCESSFUL_OBSERVATION:
				return validateProcedureSuccessfulObservation(
					(ProcedureSuccessfulObservation) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_COMPLICATIONS_OBSERVATION:
				return validateProcedureComplicationsObservation(
					(ProcedureComplicationsObservation) value, diagnostics, context);
			case EmspcrPackage.PROCEDURE_PATIENT_RESPONSE_OBSERVATION:
				return validateProcedurePatientResponseObservation(
					(ProcedurePatientResponseObservation) value, diagnostics, context);
			case EmspcrPackage.AIRWAY_CONFIRMATION_OBSERVATION:
				return validateAirwayConfirmationObservation(
					(AirwayConfirmationObservation) value, diagnostics, context);
			case EmspcrPackage.REASON_PROCEDURE_NOT_ATTEMPTED_OBSERVATION:
				return validateReasonProcedureNotAttemptedObservation(
					(ReasonProcedureNotAttemptedObservation) value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_TYPE:
				return validateComplaintType((ComplaintType) value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_DURATION:
				return validateComplaintDuration((ComplaintDuration) value, diagnostics, context);
			case EmspcrPackage.COMPLAINT_ORGAN_SYSTEM:
				return validateComplaintOrganSystem((ComplaintOrganSystem) value, diagnostics, context);
			case EmspcrPackage.NEUROLOGICAL_ASSESSMENT:
				return validateNeurologicalAssessment((NeurologicalAssessment) value, diagnostics, context);
			case EmspcrPackage.EXISTENCE_OF_HISTORY_OF_PROCEDURES:
				return validateExistenceOfHistoryOfProcedures(
					(ExistenceOfHistoryOfProcedures) value, diagnostics, context);
			case EmspcrPackage.SYSTOLIC_BLOOD_PRESSURE:
				return validateSystolicBloodPressure((SystolicBloodPressure) value, diagnostics, context);
			case EmspcrPackage.DIASTOLIC_BLOOD_PRESSURE:
				return validateDiastolicBloodPressure((DiastolicBloodPressure) value, diagnostics, context);
			case EmspcrPackage.HEART_RATE:
				return validateHeartRate((HeartRate) value, diagnostics, context);
			case EmspcrPackage.RESPIRATORY_RATE:
				return validateRespiratoryRate((RespiratoryRate) value, diagnostics, context);
			case EmspcrPackage.BODY_TEMPERATURE:
				return validateBodyTemperature((BodyTemperature) value, diagnostics, context);
			case EmspcrPackage.OXYGEN_SATURATION:
				return validateOxygenSaturation((OxygenSaturation) value, diagnostics, context);
			case EmspcrPackage.PROTOCOL_AGE_CATEGORY:
				return validateProtocolAgeCategory((ProtocolAgeCategory) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_NAME:
				return validateDispatchLocationName((DispatchLocationName) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_LATITUDE:
				return validateDispatchLocationLatitude((DispatchLocationLatitude) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_LOCATION_LONGITUDE:
				return validateDispatchLocationLongitude((DispatchLocationLongitude) value, diagnostics, context);
			case EmspcrPackage.DISPATCH_DELAY:
				return validateDispatchDelay((DispatchDelay) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_DELAY:
				return validateResponseDelay((ResponseDelay) value, diagnostics, context);
			case EmspcrPackage.SCENE_DELAY:
				return validateSceneDelay((SceneDelay) value, diagnostics, context);
			case EmspcrPackage.TRANSPORT_DELAY:
				return validateTransportDelay((TransportDelay) value, diagnostics, context);
			case EmspcrPackage.TURNAROUND_DELAY:
				return validateTurnaroundDelay((TurnaroundDelay) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_BEGINNING_ODOMETER_READING:
				return validateResponseBeginningOdometerReading(
					(ResponseBeginningOdometerReading) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ON_SCENE_ODOMETER_READING:
				return validateResponseOnSceneOdometerReading(
					(ResponseOnSceneOdometerReading) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_DESTINATION_ODOMETER_READING:
				return validateResponseDestinationOdometerReading(
					(ResponseDestinationOdometerReading) value, diagnostics, context);
			case EmspcrPackage.RESPONSE_ENDING_ODOMETER_READING:
				return validateResponseEndingOdometerReading(
					(ResponseEndingOdometerReading) value, diagnostics, context);
			default:
				return true;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport(PatientCareReport patientCareReport, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientCareReport, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientCareReport, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateClinicalDocument_validateClassCode(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateClinicalDocument_validateMoodCode(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeIdRoot(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeIdExtension(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetIdVersionNumber(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumberSetId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validateGeneralHeaderConstraintsTemplateId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOf(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorization(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientTSBirthTimePreciseToYear(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientTSBirthTimePreciseToDay(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientTSValue(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameUSRealmPatientNameMixedContent(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameFamily(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameGiven(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNamePrefix(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameSuffix(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGeneralHeaderConstraintsUSRealmPatientNameUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientAdministrativeGenderCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientSDTCRaceCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientSDTCRaceCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganization(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasOneAssignedPersonOrOneAssignedAuthoringDevice(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTELUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAssignedPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAssignedPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressUSRealmAddressStreet(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressCity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressCountry(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressPostalCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressState(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressStreetAddressLine(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressUseP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsUSRealmAddressUse(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityGeneralHeaderConstraintsInformantAssignedEntityPersonName(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1AssignedEntityHasNationalProviderIdentifier(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1AssignedEntityCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1AssignedEntityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1AssignedEntityId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1FunctionCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1FunctionCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1TypeCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer1AssignedEntity(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventEffectiveTimeLow(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventEffectiveTime(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEventPerformer(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDocumentationOfServiceEvent(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorizationConsentCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorizationConsentId(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorizationConsentStatusCodeP(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorizationConsentStatusCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorizationConsent(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportClassCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportMoodCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportCodeP(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportCode(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportTitle(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportVersionNumber(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportId(patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportConfidentialityCode(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportRecordTarget(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportBilling(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportCurrentMedication(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportCardiacArrestEvent(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportAdvanceDirectives(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportAllergiesAndAdverseReactionsSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportPastMedicalHistory(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportSocialHistory(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportPhysicalAssessmentSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportMedicationsAdministeredSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportProceduresPerformedSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportPatientCareNarrative(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportSceneSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportComponentOf(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportDispatchSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportDispositionSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportPersonnelAdverseEventSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportProtocolSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportResponseSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportSituationSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportTimesSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportVitalSignsSection(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportAuthorParticipation(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportCustodian(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportDocumentationOf(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportRelatedDocument(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportParticipant(
				patientCareReport, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareReport_validatePatientCareReportInjuryIncidentDescriptionSection(
				patientCareReport, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientCareReportClassCode constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportClassCode(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportMoodCode constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportMoodCode(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportCodeP constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportCodeP(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportCode constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportCode(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportTitle constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportTitle(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportVersionNumber constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportVersionNumber(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportVersionNumber(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportId constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportId(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportConfidentialityCode constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportConfidentialityCode(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportConfidentialityCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportRecordTarget constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportRecordTarget(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportRecordTarget(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportBilling constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportBilling(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportBilling(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportCurrentMedication constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportCurrentMedication(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportCurrentMedication(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportCardiacArrestEvent constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportCardiacArrestEvent(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportCardiacArrestEvent(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportAdvanceDirectives constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportAdvanceDirectives(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportAdvanceDirectives(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportAllergiesAndAdverseReactionsSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportAllergiesAndAdverseReactionsSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportAllergiesAndAdverseReactionsSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportPastMedicalHistory constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportPastMedicalHistory(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportPastMedicalHistory(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportSocialHistory constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportSocialHistory(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportSocialHistory(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportPhysicalAssessmentSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportPhysicalAssessmentSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportPhysicalAssessmentSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportMedicationsAdministeredSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportMedicationsAdministeredSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportMedicationsAdministeredSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportProceduresPerformedSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportProceduresPerformedSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportProceduresPerformedSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportPatientCareNarrative constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportPatientCareNarrative(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportPatientCareNarrative(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportSceneSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportSceneSection(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportSceneSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportComponentOf constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportComponentOf(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportDispatchSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportDispatchSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportDispatchSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportDispositionSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportDispositionSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportDispositionSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportPersonnelAdverseEventSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportPersonnelAdverseEventSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportPersonnelAdverseEventSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportProtocolSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportProtocolSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportProtocolSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportResponseSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportResponseSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportResponseSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportSituationSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportSituationSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportSituationSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportTimesSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportTimesSection(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportTimesSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportVitalSignsSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportVitalSignsSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportVitalSignsSection(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportAuthorParticipation constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportAuthorParticipation(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportAuthorParticipation(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportCustodian constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportCustodian(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportCustodian(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportDocumentationOf constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportDocumentationOf(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportRelatedDocument constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportRelatedDocument(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportRelatedDocument(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportParticipant constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportParticipant(PatientCareReport patientCareReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportParticipant(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareReportInjuryIncidentDescriptionSection constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validatePatientCareReportInjuryIncidentDescriptionSection(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validatePatientCareReportInjuryIncidentDescriptionSection(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>Patient Care Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareReport_validateGeneralHeaderConstraintsTemplateId(
			PatientCareReport patientCareReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientCareReport.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection(BillingSection billingSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(billingSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(billingSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionTemplateId(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionCode(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionTitle(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionText(billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionBillingCondition(
				billingSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingSection_validateBillingSectionLevelOfServiceObservation(
				billingSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBillingSectionTemplateId constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionTemplateId(BillingSection billingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBillingSectionCode constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionCode(BillingSection billingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateBillingSectionTitle constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionTitle(BillingSection billingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateBillingSectionText constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionText(BillingSection billingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateBillingSectionBillingCondition constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionBillingCondition(BillingSection billingSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionBillingCondition(diagnostics, context);
	}

	/**
	 * Validates the validateBillingSectionLevelOfServiceObservation constraint of '<em>Billing Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingSection_validateBillingSectionLevelOfServiceObservation(
			BillingSection billingSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingSection.validateBillingSectionLevelOfServiceObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition(BillingCondition billingCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(billingCondition, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(billingCondition, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionTemplateId(
				billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionCodeP(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionCode(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionValue(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionValueP(billingCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBillingCondition_validateBillingConditionMoodCode(billingCondition, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBillingConditionTemplateId constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionTemplateId(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionCodeP constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionCodeP(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionCode constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionCode(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionCode(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionValue constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionValue(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionValue(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionValueP constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionValueP(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionValueP(diagnostics, context);
	}

	/**
	 * Validates the validateBillingConditionMoodCode constraint of '<em>Billing Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBillingCondition_validateBillingConditionMoodCode(BillingCondition billingCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return billingCondition.validateBillingConditionMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation(LevelOfServiceObservation levelOfServiceObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(levelOfServiceObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(levelOfServiceObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationTemplateId(
				levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationCodeP(
				levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationCode(
				levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationValue(
				levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationValueP(
				levelOfServiceObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfServiceObservation_validateLevelOfServiceObservationMoodCode(
				levelOfServiceObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateLevelOfServiceObservationTemplateId constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationTemplateId(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationCodeP constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationCodeP(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationCode constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationCode(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationValue constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationValue(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationValueP constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationValueP(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfServiceObservationMoodCode constraint of '<em>Level Of Service Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfServiceObservation_validateLevelOfServiceObservationMoodCode(
			LevelOfServiceObservation levelOfServiceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return levelOfServiceObservation.validateLevelOfServiceObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection(CurrentMedicationSection currentMedicationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(currentMedicationSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(currentMedicationSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateMedicationsSectionEntriesOptionalTemplateId(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalCode(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTitle(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalText(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalMedicationActivity(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSection_validateMedicationsSectionCode(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSection_validateMedicationsSectionTitle(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSection_validateMedicationsSectionText(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsSection_validateMedicationsSectionMedication(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateCurrentMedicationSectionTitle(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateCurrentMedicationSectionText(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateCurrentMedicationSectionCurrentlyOnMedication(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateCurrentMedicationSectionPatientOnAnticoagulants(
				currentMedicationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedicationSection_validateCurrentMedicationSectionCurrentMedication(
				currentMedicationSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCurrentMedicationSectionTitle constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateCurrentMedicationSectionTitle(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateCurrentMedicationSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationSectionText constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateCurrentMedicationSectionText(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateCurrentMedicationSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationSectionCurrentlyOnMedication constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateCurrentMedicationSectionCurrentlyOnMedication(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateCurrentMedicationSectionCurrentlyOnMedication(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationSectionPatientOnAnticoagulants constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateCurrentMedicationSectionPatientOnAnticoagulants(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateCurrentMedicationSectionPatientOnAnticoagulants(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationSectionCurrentMedication constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateCurrentMedicationSectionCurrentMedication(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateCurrentMedicationSectionCurrentMedication(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Current Medication Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedicationSection_validateMedicationsSectionEntriesOptionalTemplateId(
			CurrentMedicationSection currentMedicationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedicationSection.validateMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication(CurrentlyOnMedication currentlyOnMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(currentlyOnMedication, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(currentlyOnMedication, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationTemplateId(
				currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationCode(
				currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationValue(
				currentlyOnMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentlyOnMedication_validateCurrentlyOnMedicationMoodCode(
				currentlyOnMedication, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCurrentlyOnMedicationTemplateId constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationTemplateId(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationCode constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationCode(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationValue constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationValue(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationValue(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentlyOnMedicationMoodCode constraint of '<em>Currently On Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentlyOnMedication_validateCurrentlyOnMedicationMoodCode(
			CurrentlyOnMedication currentlyOnMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentlyOnMedication.validateCurrentlyOnMedicationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientOnAnticoagulants(PatientOnAnticoagulants patientOnAnticoagulants,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientOnAnticoagulants, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientOnAnticoagulants, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsTemplateId(
				patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsCode(
				patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsValue(
				patientOnAnticoagulants, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsMoodCode(
				patientOnAnticoagulants, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientOnAnticoagulantsTemplateId constraint of '<em>Patient On Anticoagulants</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsTemplateId(
			PatientOnAnticoagulants patientOnAnticoagulants, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientOnAnticoagulants.validatePatientOnAnticoagulantsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientOnAnticoagulantsCode constraint of '<em>Patient On Anticoagulants</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsCode(
			PatientOnAnticoagulants patientOnAnticoagulants, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientOnAnticoagulants.validatePatientOnAnticoagulantsCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientOnAnticoagulantsValue constraint of '<em>Patient On Anticoagulants</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsValue(
			PatientOnAnticoagulants patientOnAnticoagulants, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientOnAnticoagulants.validatePatientOnAnticoagulantsValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientOnAnticoagulantsMoodCode constraint of '<em>Patient On Anticoagulants</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientOnAnticoagulants_validatePatientOnAnticoagulantsMoodCode(
			PatientOnAnticoagulants patientOnAnticoagulants, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientOnAnticoagulants.validatePatientOnAnticoagulantsMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication(CurrentMedication currentMedication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(currentMedication, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(currentMedication, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSubstanceAdministration_validateClassCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantityorrateQuantity(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityTextReference(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityReferenceValue(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityTextReferenceValue(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeIVLTS(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeLow(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeHigh(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimePIVLTS(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeOperator(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantityUnit(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDrugVehicleTypeCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityInstructionsInversionInd(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPreconditionSubstanceAdmTypeCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateMedicationActivityTemplateId(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityClassCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMoodCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityId(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityStatusCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRouteCodeP(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRouteCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityApproachSiteCodeP(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityApproachSiteCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantity(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRateQuantity(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMaxDoseQuantity(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityAdministrationUnitCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityText(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRepeatNumber(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMedicationSupplyOrder(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityReactionObservation(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPerformer(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityInstructions(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityIndication(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMedicationDispense(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPrecondition(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDrugVehicle(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityConsumable(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityConsumableMedicationInformation(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationConsumable(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationDoseQuantity(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationRouteCodeP(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationRouteCode(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationNegationInd(
				currentMedication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCurrentMedication_validateCurrentMedicationNullFlavor(
				currentMedication, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCurrentMedicationConsumable constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationConsumable(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationConsumable(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationDoseQuantity constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationDoseQuantity(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationRouteCodeP constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationRouteCodeP(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationRouteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationRouteCode constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationRouteCode(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationRouteCode(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationNegationInd constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationNegationInd(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateCurrentMedicationNullFlavor constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateCurrentMedicationNullFlavor(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateCurrentMedicationNullFlavor(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityTemplateId constraint of '<em>Current Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCurrentMedication_validateMedicationActivityTemplateId(CurrentMedication currentMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return currentMedication.validateMedicationActivityTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection(CardiacArrestEventSection cardiacArrestEventSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestEventSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestEventSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestEventSection_validateCardiacArrestEventSectionTemplateId(
				cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestEventSection_validateCardiacArrestEventSectionCode(
				cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestEventSection_validateCardiacArrestEventSectionTitle(
				cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestEventSection_validateCardiacArrestEventSectionText(
				cardiacArrestEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestEventSection_validateCardiacArrestEventSectionCardiacArrestExistence(
				cardiacArrestEventSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCardiacArrestEventSectionTemplateId constraint of '<em>Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection_validateCardiacArrestEventSectionTemplateId(
			CardiacArrestEventSection cardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return cardiacArrestEventSection.validateCardiacArrestEventSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestEventSectionCode constraint of '<em>Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection_validateCardiacArrestEventSectionCode(
			CardiacArrestEventSection cardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return cardiacArrestEventSection.validateCardiacArrestEventSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestEventSectionTitle constraint of '<em>Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection_validateCardiacArrestEventSectionTitle(
			CardiacArrestEventSection cardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return cardiacArrestEventSection.validateCardiacArrestEventSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestEventSectionText constraint of '<em>Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection_validateCardiacArrestEventSectionText(
			CardiacArrestEventSection cardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return cardiacArrestEventSection.validateCardiacArrestEventSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestEventSectionCardiacArrestExistence constraint of '<em>Cardiac Arrest Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestEventSection_validateCardiacArrestEventSectionCardiacArrestExistence(
			CardiacArrestEventSection cardiacArrestEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return cardiacArrestEventSection.validateCardiacArrestEventSectionCardiacArrestExistence(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence(CardiacArrestExistence cardiacArrestExistence,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestExistence, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestExistence, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceCardiacArrestCauseRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceCardiacArrestInformantParticipation(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistencePriorCPRRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistencePriorAEDRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceSpontaneousCirculationRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceDestinationRhythmRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceArrestRhythmRelationship(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceTemplateId(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceCode(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceEffectiveTime(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceValue(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceNegationInd(
				cardiacArrestExistence, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestExistence_validateCardiacArrestExistenceMoodCode(
				cardiacArrestExistence, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCardiacArrestExistenceCardiacArrestCauseRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceCardiacArrestCauseRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceCardiacArrestCauseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceCardiacArrestInformantParticipation constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceCardiacArrestInformantParticipation(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceCardiacArrestInformantParticipation(
			diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistencePriorCPRRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistencePriorCPRRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistencePriorCPRRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistencePriorAEDRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistencePriorAEDRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistencePriorAEDRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceSpontaneousCirculationRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceSpontaneousCirculationRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceSpontaneousCirculationRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceDestinationRhythmRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceDestinationRhythmRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceDestinationRhythmRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceArrestRhythmRelationship constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceArrestRhythmRelationship(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceArrestRhythmRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceTemplateId constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceTemplateId(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceCode constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceCode(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceEffectiveTime constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceEffectiveTime(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceValue constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceValue(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceNegationInd constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceNegationInd(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestExistenceMoodCode constraint of '<em>Cardiac Arrest Existence</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestExistence_validateCardiacArrestExistenceMoodCode(
			CardiacArrestExistence cardiacArrestExistence, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestExistence.validateCardiacArrestExistenceMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection(AdvanceDirectivesSection advanceDirectivesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectivesSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTemplateId(
				advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionCode(
				advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTitle(
				advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionText(
				advanceDirectivesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionAdvancedDirectiveObservation(
				advanceDirectivesSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionTemplateId constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTemplateId(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionCode constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionCode(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionTitle constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTitle(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionText constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionText(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionAdvancedDirectiveObservation constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionAdvancedDirectiveObservation(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionAdvancedDirectiveObservation(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation(AdvancedDirectiveObservation advancedDirectiveObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advancedDirectiveObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(advancedDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationTemplateId(
				advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationCode(
				advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationValue(
				advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationValueP(
				advancedDirectiveObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationMoodCode(
				advancedDirectiveObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAdvancedDirectiveObservationTemplateId constraint of '<em>Advanced Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationTemplateId(
			AdvancedDirectiveObservation advancedDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advancedDirectiveObservation.validateAdvancedDirectiveObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvancedDirectiveObservationCode constraint of '<em>Advanced Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationCode(
			AdvancedDirectiveObservation advancedDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advancedDirectiveObservation.validateAdvancedDirectiveObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvancedDirectiveObservationValue constraint of '<em>Advanced Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationValue(
			AdvancedDirectiveObservation advancedDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advancedDirectiveObservation.validateAdvancedDirectiveObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAdvancedDirectiveObservationValueP constraint of '<em>Advanced Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationValueP(
			AdvancedDirectiveObservation advancedDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advancedDirectiveObservation.validateAdvancedDirectiveObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateAdvancedDirectiveObservationMoodCode constraint of '<em>Advanced Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvancedDirectiveObservation_validateAdvancedDirectiveObservationMoodCode(
			AdvancedDirectiveObservation advancedDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advancedDirectiveObservation.validateAdvancedDirectiveObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergiesAndAdverseReactionsSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(allergiesAndAdverseReactionsSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionTemplateId(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionCode(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionTitle(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionText(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionObservation(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionDrugAllergyProblemAct(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(
				allergiesAndAdverseReactionsSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionTemplateId constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionTemplateId(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionCode constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionCode(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionTitle constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionTitle(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionTitle(
			diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionText constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionText(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionObservation constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionObservation(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionObservation(
			diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionDrugAllergyProblemAct constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionDrugAllergyProblemAct(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionDrugAllergyProblemAct(
			diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesAndAdverseReactionsSectionEnvironmentalAllergies constraint of '<em>Allergies And Adverse Reactions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesAndAdverseReactionsSection_validateAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(
			AllergiesAndAdverseReactionsSection allergiesAndAdverseReactionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesAndAdverseReactionsSection.validateAllergiesAndAdverseReactionsSectionEnvironmentalAllergies(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugAllergyObservation(
			ExistenceOfDrugAllergyObservation existenceOfDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfDrugAllergyObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(existenceOfDrugAllergyObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationTemplateId(
				existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationCode(
				existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationValue(
				existenceOfDrugAllergyObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationMoodCode(
				existenceOfDrugAllergyObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExistenceOfDrugAllergyObservationTemplateId constraint of '<em>Existence Of Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationTemplateId(
			ExistenceOfDrugAllergyObservation existenceOfDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugAllergyObservation.validateExistenceOfDrugAllergyObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugAllergyObservationCode constraint of '<em>Existence Of Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationCode(
			ExistenceOfDrugAllergyObservation existenceOfDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugAllergyObservation.validateExistenceOfDrugAllergyObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugAllergyObservationValue constraint of '<em>Existence Of Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationValue(
			ExistenceOfDrugAllergyObservation existenceOfDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugAllergyObservation.validateExistenceOfDrugAllergyObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugAllergyObservationMoodCode constraint of '<em>Existence Of Drug Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugAllergyObservation_validateExistenceOfDrugAllergyObservationMoodCode(
			ExistenceOfDrugAllergyObservation existenceOfDrugAllergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugAllergyObservation.validateExistenceOfDrugAllergyObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyProblemAct(DrugAllergyProblemAct drugAllergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugAllergyProblemAct, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(drugAllergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeLow(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeHigh(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugAllergyProblemAct_validateAllergyProblemActTemplateId(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActClassCode(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActMoodCode(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActId(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActCode(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActStatusCode(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActEffectiveTime(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateAllergyProblemAct_validateAllergyProblemActAllergyObservation(
				drugAllergyProblemAct, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugAllergyProblemAct_validateDrugAllergyProblemActParticipant1(
				drugAllergyProblemAct, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDrugAllergyProblemActParticipant1 constraint of '<em>Drug Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyProblemAct_validateDrugAllergyProblemActParticipant1(
			DrugAllergyProblemAct drugAllergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergyProblemAct.validateDrugAllergyProblemActParticipant1(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActTemplateId constraint of '<em>Drug Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugAllergyProblemAct_validateAllergyProblemActTemplateId(
			DrugAllergyProblemAct drugAllergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugAllergyProblemAct.validateAllergyProblemActTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergies(EnvironmentalAllergies environmentalAllergies,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(environmentalAllergies, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(environmentalAllergies, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergies_validateEnvironmentalAllergiesExistenceOfEnvironmentalAllergy(
				environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergies_validateEnvironmentalAllergiesEnvironmentalAllergy(
				environmentalAllergies, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergies_validateEnvironmentalAllergiesTemplateId(
				environmentalAllergies, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEnvironmentalAllergiesExistenceOfEnvironmentalAllergy constraint of '<em>Environmental Allergies</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergies_validateEnvironmentalAllergiesExistenceOfEnvironmentalAllergy(
			EnvironmentalAllergies environmentalAllergies, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergies.validateEnvironmentalAllergiesExistenceOfEnvironmentalAllergy(
			diagnostics, context);
	}

	/**
	 * Validates the validateEnvironmentalAllergiesEnvironmentalAllergy constraint of '<em>Environmental Allergies</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergies_validateEnvironmentalAllergiesEnvironmentalAllergy(
			EnvironmentalAllergies environmentalAllergies, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergies.validateEnvironmentalAllergiesEnvironmentalAllergy(diagnostics, context);
	}

	/**
	 * Validates the validateEnvironmentalAllergiesTemplateId constraint of '<em>Environmental Allergies</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergies_validateEnvironmentalAllergiesTemplateId(
			EnvironmentalAllergies environmentalAllergies, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergies.validateEnvironmentalAllergiesTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfEnvironmentalAllergy(
			ExistenceOfEnvironmentalAllergy existenceOfEnvironmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfEnvironmentalAllergy, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(existenceOfEnvironmentalAllergy, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyTemplateId(
				existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyCode(
				existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyValue(
				existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyMoodCode(
				existenceOfEnvironmentalAllergy, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExistenceOfEnvironmentalAllergyTemplateId constraint of '<em>Existence Of Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyTemplateId(
			ExistenceOfEnvironmentalAllergy existenceOfEnvironmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfEnvironmentalAllergy.validateExistenceOfEnvironmentalAllergyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfEnvironmentalAllergyCode constraint of '<em>Existence Of Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyCode(
			ExistenceOfEnvironmentalAllergy existenceOfEnvironmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfEnvironmentalAllergy.validateExistenceOfEnvironmentalAllergyCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfEnvironmentalAllergyValue constraint of '<em>Existence Of Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyValue(
			ExistenceOfEnvironmentalAllergy existenceOfEnvironmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfEnvironmentalAllergy.validateExistenceOfEnvironmentalAllergyValue(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfEnvironmentalAllergyMoodCode constraint of '<em>Existence Of Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfEnvironmentalAllergy_validateExistenceOfEnvironmentalAllergyMoodCode(
			ExistenceOfEnvironmentalAllergy existenceOfEnvironmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfEnvironmentalAllergy.validateExistenceOfEnvironmentalAllergyMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergy(EnvironmentalAllergy environmentalAllergy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(environmentalAllergy, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(environmentalAllergy, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergy_validateEnvironmentalAllergyTemplateId(
				environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergy_validateEnvironmentalAllergyCode(
				environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergy_validateEnvironmentalAllergyValue(
				environmentalAllergy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEnvironmentalAllergy_validateEnvironmentalAllergyMoodCode(
				environmentalAllergy, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEnvironmentalAllergyTemplateId constraint of '<em>Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergy_validateEnvironmentalAllergyTemplateId(
			EnvironmentalAllergy environmentalAllergy, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergy.validateEnvironmentalAllergyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEnvironmentalAllergyCode constraint of '<em>Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergy_validateEnvironmentalAllergyCode(
			EnvironmentalAllergy environmentalAllergy, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergy.validateEnvironmentalAllergyCode(diagnostics, context);
	}

	/**
	 * Validates the validateEnvironmentalAllergyValue constraint of '<em>Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergy_validateEnvironmentalAllergyValue(
			EnvironmentalAllergy environmentalAllergy, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergy.validateEnvironmentalAllergyValue(diagnostics, context);
	}

	/**
	 * Validates the validateEnvironmentalAllergyMoodCode constraint of '<em>Environmental Allergy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEnvironmentalAllergy_validateEnvironmentalAllergyMoodCode(
			EnvironmentalAllergy environmentalAllergy, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return environmentalAllergy.validateEnvironmentalAllergyMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection(PastMedicalHistorySection pastMedicalHistorySection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(pastMedicalHistorySection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(pastMedicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionTemplateId(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionCode(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionCodeP(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionTitle(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionText(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionExistenceOfHistoryOfCondition(
				pastMedicalHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePastMedicalHistorySection_validatePastMedicalHistorySectionHistoryOfCondition(
				pastMedicalHistorySection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePastMedicalHistorySectionTemplateId constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionTemplateId(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionCode constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionCode(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionCodeP constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionCodeP(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionTitle constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionTitle(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionText constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionText(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionExistenceOfHistoryOfCondition constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionExistenceOfHistoryOfCondition(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionExistenceOfHistoryOfCondition(
			diagnostics, context);
	}

	/**
	 * Validates the validatePastMedicalHistorySectionHistoryOfCondition constraint of '<em>Past Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePastMedicalHistorySection_validatePastMedicalHistorySectionHistoryOfCondition(
			PastMedicalHistorySection pastMedicalHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pastMedicalHistorySection.validatePastMedicalHistorySectionHistoryOfCondition(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfCondition(ExistenceOfHistoryOfCondition existenceOfHistoryOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfHistoryOfCondition, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(existenceOfHistoryOfCondition, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionTemplateId(
				existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionCode(
				existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionValue(
				existenceOfHistoryOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionMoodCode(
				existenceOfHistoryOfCondition, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionTemplateId constraint of '<em>Existence Of History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionTemplateId(
			ExistenceOfHistoryOfCondition existenceOfHistoryOfCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfCondition.validateExistenceOfHistoryOfConditionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionCode constraint of '<em>Existence Of History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionCode(
			ExistenceOfHistoryOfCondition existenceOfHistoryOfCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfCondition.validateExistenceOfHistoryOfConditionCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionValue constraint of '<em>Existence Of History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionValue(
			ExistenceOfHistoryOfCondition existenceOfHistoryOfCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfCondition.validateExistenceOfHistoryOfConditionValue(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfConditionMoodCode constraint of '<em>Existence Of History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfCondition_validateExistenceOfHistoryOfConditionMoodCode(
			ExistenceOfHistoryOfCondition existenceOfHistoryOfCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfCondition.validateExistenceOfHistoryOfConditionMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition(HistoryOfCondition historyOfCondition, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyOfCondition, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(historyOfCondition, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionTemplateId(
				historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionCodeP(
				historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionCode(
				historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionValue(
				historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionValueP(
				historyOfCondition, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfCondition_validateHistoryOfConditionMoodCode(
				historyOfCondition, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHistoryOfConditionTemplateId constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionTemplateId(
			HistoryOfCondition historyOfCondition, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfConditionCodeP constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionCodeP(HistoryOfCondition historyOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfConditionCode constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionCode(HistoryOfCondition historyOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfConditionValue constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionValue(HistoryOfCondition historyOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionValue(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfConditionValueP constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionValueP(HistoryOfCondition historyOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionValueP(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfConditionMoodCode constraint of '<em>History Of Condition</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfCondition_validateHistoryOfConditionMoodCode(HistoryOfCondition historyOfCondition,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyOfCondition.validateHistoryOfConditionMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfProceduresOrganizer(HistoryOfProceduresOrganizer historyOfProceduresOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyOfProceduresOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(historyOfProceduresOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerExistenceOfHistoryOfProcedureComponent(
				historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerHistoryOfProceduresComponent(
				historyOfProceduresOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerTemplateId(
				historyOfProceduresOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHistoryOfProceduresOrganizerExistenceOfHistoryOfProcedureComponent constraint of '<em>History Of Procedures Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerExistenceOfHistoryOfProcedureComponent(
			HistoryOfProceduresOrganizer historyOfProceduresOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfProceduresOrganizer.validateHistoryOfProceduresOrganizerExistenceOfHistoryOfProcedureComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfProceduresOrganizerHistoryOfProceduresComponent constraint of '<em>History Of Procedures Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerHistoryOfProceduresComponent(
			HistoryOfProceduresOrganizer historyOfProceduresOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfProceduresOrganizer.validateHistoryOfProceduresOrganizerHistoryOfProceduresComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfProceduresOrganizerTemplateId constraint of '<em>History Of Procedures Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfProceduresOrganizer_validateHistoryOfProceduresOrganizerTemplateId(
			HistoryOfProceduresOrganizer historyOfProceduresOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfProceduresOrganizer.validateHistoryOfProceduresOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection(SocialHistorySection socialHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(socialHistorySection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionTemplateId(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionCode(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionCodeP(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionTitle(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionText(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionExistenceOfDrugUseIndication(
				socialHistorySection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSocialHistorySection_validateSocialHistorySectionDrugUseIndication(
				socialHistorySection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSocialHistorySectionTemplateId constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionTemplateId(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionCode constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionCode(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionCodeP constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionCodeP(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionTitle constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionTitle(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionText constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionText(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionExistenceOfDrugUseIndication constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionExistenceOfDrugUseIndication(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionExistenceOfDrugUseIndication(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionDrugUseIndication constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionDrugUseIndication(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionDrugUseIndication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication(ExistenceOfDrugUseIndication existenceOfDrugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfDrugUseIndication, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(existenceOfDrugUseIndication, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationTemplateId(
				existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCodeP(
				existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCode(
				existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationValue(
				existenceOfDrugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationMoodCode(
				existenceOfDrugUseIndication, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationTemplateId constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationTemplateId(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationCodeP constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCodeP(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationCode constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationCode(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationValue constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationValue(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationValue(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfDrugUseIndicationMoodCode constraint of '<em>Existence Of Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfDrugUseIndication_validateExistenceOfDrugUseIndicationMoodCode(
			ExistenceOfDrugUseIndication existenceOfDrugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfDrugUseIndication.validateExistenceOfDrugUseIndicationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication(DrugUseIndication drugUseIndication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugUseIndication, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(drugUseIndication, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugUseIndication_validateDrugUseIndicationTemplateId(
				drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugUseIndication_validateDrugUseIndicationCode(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugUseIndication_validateDrugUseIndicationValue(drugUseIndication, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDrugUseIndication_validateDrugUseIndicationMoodCode(
				drugUseIndication, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDrugUseIndicationTemplateId constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationTemplateId(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationCode constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationCode(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationValue constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationValue(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationValue(diagnostics, context);
	}

	/**
	 * Validates the validateDrugUseIndicationMoodCode constraint of '<em>Drug Use Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugUseIndication_validateDrugUseIndicationMoodCode(DrugUseIndication drugUseIndication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugUseIndication.validateDrugUseIndicationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection(PhysicalAssessmentSection physicalAssessmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicalAssessmentSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(physicalAssessmentSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalExamSectionTemplateId(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionCode(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionCodeP(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionTitle(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionText(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionPressureUlcerObservation(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionNumberOfPressureUlcersObservation(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validatePhysicalExamSection_validatePhysicalExamSectionHighestPressureUlcerStage(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionCodeP(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionCode(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionTitle(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionText(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPhysicalAssessmentOrganizer(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPatientPregnancy(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionLastOralIntake(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPatientAge(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionThrombolyticContraindications(
				physicalAssessmentSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionBarriersToPatientCare(
				physicalAssessmentSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionCodeP constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionCodeP(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionCode constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionCode(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionTitle constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionTitle(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionText constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionText(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionPhysicalAssessmentOrganizer constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPhysicalAssessmentOrganizer(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionPhysicalAssessmentOrganizer(
			diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionPatientPregnancy constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPatientPregnancy(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionPatientPregnancy(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionLastOralIntake constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionLastOralIntake(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionLastOralIntake(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionPatientAge constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionPatientAge(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionPatientAge(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionThrombolyticContraindications constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionThrombolyticContraindications(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionThrombolyticContraindications(
			diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentSectionBarriersToPatientCare constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalAssessmentSectionBarriersToPatientCare(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalAssessmentSectionBarriersToPatientCare(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalExamSectionTemplateId constraint of '<em>Physical Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentSection_validatePhysicalExamSectionTemplateId(
			PhysicalAssessmentSection physicalAssessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentSection.validatePhysicalExamSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer(PhysicalAssessmentOrganizer physicalAssessmentOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicalAssessmentOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(physicalAssessmentOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent1(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent2(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent3(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent4(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent5(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent6(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent7(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent8(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent9(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent10(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent11(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent12(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent13(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent14(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerTemplateId(
				physicalAssessmentOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent1 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent1(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent1(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent2 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent2(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent2(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent3 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent3(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent3(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent4 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent4(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent4(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent5 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent5(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent5(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent6 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent6(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent6(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent7 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent7(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent7(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent8 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent8(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent8(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent9 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent9(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent9(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent10 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent10(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent10(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent11 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent11(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent11(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent12 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent12(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent12(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent13 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent13(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent13(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerComponent14 constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerComponent14(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerComponent14(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalAssessmentOrganizerTemplateId constraint of '<em>Physical Assessment Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalAssessmentOrganizer_validatePhysicalAssessmentOrganizerTemplateId(
			PhysicalAssessmentOrganizer physicalAssessmentOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicalAssessmentOrganizer.validatePhysicalAssessmentOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment(SkinAssessment skinAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(skinAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(skinAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentTemplateId(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentCodeP(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentCode(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentValue(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentValueP(skinAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSkinAssessment_validateSkinAssessmentMoodCode(skinAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSkinAssessmentTemplateId constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentTemplateId(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentCodeP constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentCodeP(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentCode constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentCode(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentValue constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentValue(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentValueP constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentValueP(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateSkinAssessmentMoodCode constraint of '<em>Skin Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSkinAssessment_validateSkinAssessmentMoodCode(SkinAssessment skinAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return skinAssessment.validateSkinAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy(PatientPregnancy patientPregnancy, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientPregnancy, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientPregnancy, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyTemplateId(
				patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyCodeP(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyCode(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyValue(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyValueP(patientPregnancy, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientPregnancy_validatePatientPregnancyMoodCode(patientPregnancy, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientPregnancyTemplateId constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyTemplateId(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyCodeP constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyCodeP(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyCode constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyCode(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyValue constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyValue(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyValueP constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyValueP(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyValueP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientPregnancyMoodCode constraint of '<em>Patient Pregnancy</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientPregnancy_validatePatientPregnancyMoodCode(PatientPregnancy patientPregnancy,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientPregnancy.validatePatientPregnancyMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake(LastOralIntake lastOralIntake, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(lastOralIntake, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(lastOralIntake, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLastOralIntake_validateLastOralIntakeTemplateId(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLastOralIntake_validateLastOralIntakeCodeP(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLastOralIntake_validateLastOralIntakeCode(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLastOralIntake_validateLastOralIntakeValue(lastOralIntake, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLastOralIntake_validateLastOralIntakeMoodCode(lastOralIntake, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateLastOralIntakeTemplateId constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeTemplateId(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeCodeP constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeCodeP(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeCode constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeCode(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeCode(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeValue constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeValue(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeValue(diagnostics, context);
	}

	/**
	 * Validates the validateLastOralIntakeMoodCode constraint of '<em>Last Oral Intake</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLastOralIntake_validateLastOralIntakeMoodCode(LastOralIntake lastOralIntake,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return lastOralIntake.validateLastOralIntakeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge(PatientAge patientAge, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientAge, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientAge, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientAge_validatePatientAgeTemplateId(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientAge_validatePatientAgeCodeP(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientAge_validatePatientAgeCode(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientAge_validatePatientAgeValue(patientAge, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientAge_validatePatientAgeMoodCode(patientAge, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientAgeTemplateId constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeTemplateId(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeCodeP constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeCodeP(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeCode constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeCode(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeValue constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeValue(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientAgeMoodCode constraint of '<em>Patient Age</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientAge_validatePatientAgeMoodCode(PatientAge patientAge, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientAge.validatePatientAgeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications(ThrombolyticContraindications thrombolyticContraindications,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(thrombolyticContraindications, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(thrombolyticContraindications, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsTemplateId(
				thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsCodeP(
				thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsCode(
				thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsValue(
				thrombolyticContraindications, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateThrombolyticContraindications_validateThrombolyticContraindicationsMoodCode(
				thrombolyticContraindications, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateThrombolyticContraindicationsTemplateId constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsTemplateId(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsCodeP constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsCodeP(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsCode constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsCode(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsCode(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsValue constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsValue(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsValue(diagnostics, context);
	}

	/**
	 * Validates the validateThrombolyticContraindicationsMoodCode constraint of '<em>Thrombolytic Contraindications</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateThrombolyticContraindications_validateThrombolyticContraindicationsMoodCode(
			ThrombolyticContraindications thrombolyticContraindications, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return thrombolyticContraindications.validateThrombolyticContraindicationsMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare(BarriersToPatientCare barriersToPatientCare,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(barriersToPatientCare, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(barriersToPatientCare, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareTemplateId(
				barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareCodeP(
				barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareCode(
				barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareValue(
				barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareValueP(
				barriersToPatientCare, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBarriersToPatientCare_validateBarriersToPatientCareMoodCode(
				barriersToPatientCare, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBarriersToPatientCareTemplateId constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareTemplateId(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareCodeP constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareCodeP(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareCode constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareCode(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareCode(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareValue constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareValue(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareValue(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareValueP constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareValueP(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareValueP(diagnostics, context);
	}

	/**
	 * Validates the validateBarriersToPatientCareMoodCode constraint of '<em>Barriers To Patient Care</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBarriersToPatientCare_validateBarriersToPatientCareMoodCode(
			BarriersToPatientCare barriersToPatientCare, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return barriersToPatientCare.validateBarriersToPatientCareMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationsAdministeredSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionTemplateId(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionCode(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionCodeP(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionText(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionTitle(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionMedicationActivity(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionCode(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionTitle(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionText(
				medicationsAdministeredSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionMedicationAdministered(
				medicationsAdministeredSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEMSPCRMedicationsAdministeredSectionCode constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionCode(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateEMSPCRMedicationsAdministeredSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRMedicationsAdministeredSectionTitle constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionTitle(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateEMSPCRMedicationsAdministeredSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRMedicationsAdministeredSectionText constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionText(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateEMSPCRMedicationsAdministeredSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRMedicationsAdministeredSectionMedicationAdministered constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateEMSPCRMedicationsAdministeredSectionMedicationAdministered(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateEMSPCRMedicationsAdministeredSectionMedicationAdministered(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsAdministeredSectionTemplateId constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionTemplateId(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateMedicationsAdministeredSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered(MedicationAdministered medicationAdministered,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationAdministered, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(medicationAdministered, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSubstanceAdministration_validateClassCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantityorrateQuantity(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityTextReference(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityReferenceValue(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityTextReferenceValue(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeIVLTS(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeLow(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeHigh(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimePIVLTS(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityEffectiveTimeOperator(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantityUnit(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDrugVehicleTypeCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityInstructionsInversionInd(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPreconditionSubstanceAdmTypeCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationActivityTemplateId(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityClassCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMoodCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityId(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityStatusCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRouteCodeP(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRouteCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityApproachSiteCodeP(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityApproachSiteCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDoseQuantity(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRateQuantity(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMaxDoseQuantity(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityAdministrationUnitCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityText(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityRepeatNumber(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMedicationSupplyOrder(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityReactionObservation(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPerformer(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityInstructions(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityIndication(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityMedicationDispense(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityPrecondition(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityDrugVehicle(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityConsumable(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateMedicationActivity_validateMedicationActivityConsumableMedicationInformation(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationConsumable(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredResponseRelationship(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationComplicationRelationship(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationPriorAdministrationRelationship(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationPerformerParticipation(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationAuthorizationRelationship(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredMedicationAdministrationDeviceParticipant(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredClassCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredDoseQuantity(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredEffectiveTime(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredNegationInd(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredRouteCodeP(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredRouteCode(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredApproachSiteCodeP(
				medicationAdministered, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationAdministered_validateMedicationAdministeredApproachSiteCode(
				medicationAdministered, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationNotAdministeredEntryRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationNotAdministeredEntryRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationConsumable constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationConsumable(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationConsumable(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredResponseRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredResponseRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredResponseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationComplicationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationComplicationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationComplicationRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationPriorAdministrationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationPriorAdministrationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationPriorAdministrationRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationPerformerParticipation constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationPerformerParticipation(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationPerformerParticipation(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationAuthorizationRelationship constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationAuthorizationRelationship(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationAuthorizationRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredMedicationAdministrationDeviceParticipant constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredMedicationAdministrationDeviceParticipant(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredMedicationAdministrationDeviceParticipant(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredClassCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredClassCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredDoseQuantity constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredDoseQuantity(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredEffectiveTime constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredEffectiveTime(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredNegationInd constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredNegationInd(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredRouteCodeP constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredRouteCodeP(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredRouteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredRouteCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredRouteCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredRouteCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredApproachSiteCodeP constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredApproachSiteCodeP(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredApproachSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationAdministeredApproachSiteCode constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationAdministeredApproachSiteCode(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationAdministeredApproachSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityTemplateId constraint of '<em>Medication Administered</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationAdministered_validateMedicationActivityTemplateId(
			MedicationAdministered medicationAdministered, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationAdministered.validateMedicationActivityTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection(ProceduresPerformedSection proceduresPerformedSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(proceduresPerformedSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(proceduresPerformedSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProcedureDescriptionSectionTemplateId(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureDescriptionSection_validateProcedureDescriptionSectionCode(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureDescriptionSection_validateProcedureDescriptionSectionCodeP(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureDescriptionSection_validateProcedureDescriptionSectionText(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureDescriptionSection_validateProcedureDescriptionSectionTitle(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProceduresPerformedSectionCodeP(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProceduresPerformedSectionCode(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProceduresPerformedSectionTitle(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProceduresPerformedSectionText(
				proceduresPerformedSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProceduresPerformedSection_validateProceduresPerformedSectionProcedureActivityProcedure1(
				proceduresPerformedSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProceduresPerformedSectionCodeP constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProceduresPerformedSectionCodeP(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProceduresPerformedSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresPerformedSectionCode constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProceduresPerformedSectionCode(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProceduresPerformedSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresPerformedSectionTitle constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProceduresPerformedSectionTitle(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProceduresPerformedSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresPerformedSectionText constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProceduresPerformedSectionText(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProceduresPerformedSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresPerformedSectionProcedureActivityProcedure1 constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProceduresPerformedSectionProcedureActivityProcedure1(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProceduresPerformedSectionProcedureActivityProcedure1(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDescriptionSectionTemplateId constraint of '<em>Procedures Performed Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresPerformedSection_validateProcedureDescriptionSectionTemplateId(
			ProceduresPerformedSection proceduresPerformedSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresPerformedSection.validateProcedureDescriptionSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure(Procedure procedure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedure, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedure, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeCodeSystems(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeOriginalText(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureOriginalTextReference(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureOriginalTextReferenceValue(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureReferenceValue(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEncounterInversion(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstanceTypeCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocationTypeCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureInstructionsInversion(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateProcedureActivityProcedureTemplateId(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureClassCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureMoodCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureId(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureStatusCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEffectiveTime(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedurePriorityCodeP(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedurePriorityCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureMethodCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureTargetSiteCodeP(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureTargetSiteCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureIndication(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureSpecimen(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocation(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedurePerformer(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureMedicationActivity(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedurePatientInstruction(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstance(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureSpecimenSpecimenRole(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureSpecimenSpecimentRoleId(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityProcedureActivityRepresentedOrganizationId(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityProcedureActivityRepresentedOrganizationName(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityProcedureActivityRepresentedOrganizationTelecom(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityProcedureActivityRepresentedOrganizationAddr(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityId(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityAddr(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityTelecom(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerProcedureActivityAssignedEntityRepresentedOrganization(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureActivityPerformerAssignedEntity(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipProcedureActivityEncounterClassCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipProcedureActivityEncounterMoodCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipProcedureActivityEncounterId(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipInversionInd(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipTypeCode(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateProcedureActivityProcedure_validateProcedureActivityProcedureEntryRelationshipProcedureActivityEncounter(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureAbandonedProcedureRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedurePriorRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedureNumberOfAttemptsRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedureSuccessfulRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedureComplicationsRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedurePatientResponseRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureProcedurePerformer(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureAirwayConfirmationRelationship(
				procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureCode(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureEffectiveTime(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureStatusCodeP(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureStatusCode(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureApproachSiteCodeP(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureApproachSiteCode(procedure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedure_validateEMSPCRProcedureNegationInd(procedure, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEMSPCRProcedureAbandonedProcedureRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureAbandonedProcedureRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureAbandonedProcedureRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedurePriorRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedurePriorRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedurePriorRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedureNumberOfAttemptsRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedureNumberOfAttemptsRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedureNumberOfAttemptsRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedureSuccessfulRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedureSuccessfulRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedureSuccessfulRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedureComplicationsRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedureComplicationsRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedureComplicationsRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedurePatientResponseRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedurePatientResponseRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedurePatientResponseRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureProcedurePerformer constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureProcedurePerformer(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureProcedurePerformer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureAirwayConfirmationRelationship constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureAirwayConfirmationRelationship(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureAirwayConfirmationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureCode(Procedure procedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureEffectiveTime constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureEffectiveTime(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureStatusCodeP constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureStatusCodeP(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureStatusCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureStatusCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureStatusCode(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureApproachSiteCodeP constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureApproachSiteCodeP(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureApproachSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureApproachSiteCode constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureApproachSiteCode(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureApproachSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRProcedureNegationInd constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateEMSPCRProcedureNegationInd(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateEMSPCRProcedureNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureTemplateId constraint of '<em>Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedure_validateProcedureActivityProcedureTemplateId(Procedure procedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedure.validateProcedureActivityProcedureTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection(PatientCareNarrativeSection patientCareNarrativeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientCareNarrativeSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientCareNarrativeSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionTemplateId(
				patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionCode(
				patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionCodeP(
				patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionTitle(
				patientCareNarrativeSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionText(
				patientCareNarrativeSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientCareNarrativeSectionTemplateId constraint of '<em>Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionTemplateId(
			PatientCareNarrativeSection patientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientCareNarrativeSection.validatePatientCareNarrativeSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareNarrativeSectionCode constraint of '<em>Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionCode(
			PatientCareNarrativeSection patientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientCareNarrativeSection.validatePatientCareNarrativeSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareNarrativeSectionCodeP constraint of '<em>Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionCodeP(
			PatientCareNarrativeSection patientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientCareNarrativeSection.validatePatientCareNarrativeSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareNarrativeSectionTitle constraint of '<em>Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionTitle(
			PatientCareNarrativeSection patientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientCareNarrativeSection.validatePatientCareNarrativeSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePatientCareNarrativeSectionText constraint of '<em>Patient Care Narrative Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientCareNarrativeSection_validatePatientCareNarrativeSectionText(
			PatientCareNarrativeSection patientCareNarrativeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientCareNarrativeSection.validatePatientCareNarrativeSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection(SceneSection sceneSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(sceneSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(sceneSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionTemplateId(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionCode(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionTitle(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionText(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionFirstUnitIndicator(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionFirstUnitOnScene(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionScenePatientCount(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionMassCasualtyIndicator(sceneSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneSection_validateSceneSectionLocationTypeObservation(
				sceneSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSceneSectionTemplateId constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionTemplateId(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionCode constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionCode(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionTitle constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionTitle(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionText constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionText(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionFirstUnitIndicator constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionFirstUnitIndicator(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionFirstUnitIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionFirstUnitOnScene constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionFirstUnitOnScene(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionFirstUnitOnScene(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionScenePatientCount constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionScenePatientCount(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionScenePatientCount(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionMassCasualtyIndicator constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionMassCasualtyIndicator(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionMassCasualtyIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateSceneSectionLocationTypeObservation constraint of '<em>Scene Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneSection_validateSceneSectionLocationTypeObservation(SceneSection sceneSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sceneSection.validateSceneSectionLocationTypeObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator(FirstUnitIndicator firstUnitIndicator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(firstUnitIndicator, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(firstUnitIndicator, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitIndicator_validateFirstUnitIndicatorTemplateId(
				firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitIndicator_validateFirstUnitIndicatorCodeP(
				firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitIndicator_validateFirstUnitIndicatorCode(
				firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitIndicator_validateFirstUnitIndicatorValue(
				firstUnitIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitIndicator_validateFirstUnitIndicatorMoodCode(
				firstUnitIndicator, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateFirstUnitIndicatorTemplateId constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorTemplateId(
			FirstUnitIndicator firstUnitIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorCodeP constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorCodeP(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorCode constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorCode(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorValue constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorValue(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorValue(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitIndicatorMoodCode constraint of '<em>First Unit Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitIndicator_validateFirstUnitIndicatorMoodCode(FirstUnitIndicator firstUnitIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitIndicator.validateFirstUnitIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene(FirstUnitOnScene firstUnitOnScene, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(firstUnitOnScene, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(firstUnitOnScene, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitOnScene_validateFirstUnitOnSceneTemplateId(
				firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitOnScene_validateFirstUnitOnSceneCodeP(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitOnScene_validateFirstUnitOnSceneCode(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitOnScene_validateFirstUnitOnSceneValue(firstUnitOnScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFirstUnitOnScene_validateFirstUnitOnSceneMoodCode(firstUnitOnScene, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateFirstUnitOnSceneTemplateId constraint of '<em>First Unit On Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene_validateFirstUnitOnSceneTemplateId(FirstUnitOnScene firstUnitOnScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitOnScene.validateFirstUnitOnSceneTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitOnSceneCodeP constraint of '<em>First Unit On Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene_validateFirstUnitOnSceneCodeP(FirstUnitOnScene firstUnitOnScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitOnScene.validateFirstUnitOnSceneCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitOnSceneCode constraint of '<em>First Unit On Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene_validateFirstUnitOnSceneCode(FirstUnitOnScene firstUnitOnScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitOnScene.validateFirstUnitOnSceneCode(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitOnSceneValue constraint of '<em>First Unit On Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene_validateFirstUnitOnSceneValue(FirstUnitOnScene firstUnitOnScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitOnScene.validateFirstUnitOnSceneValue(diagnostics, context);
	}

	/**
	 * Validates the validateFirstUnitOnSceneMoodCode constraint of '<em>First Unit On Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFirstUnitOnScene_validateFirstUnitOnSceneMoodCode(FirstUnitOnScene firstUnitOnScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return firstUnitOnScene.validateFirstUnitOnSceneMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount(ScenePatientCount scenePatientCount, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(scenePatientCount, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(scenePatientCount, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateScenePatientCount_validateScenePatientCountTemplateId(
				scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateScenePatientCount_validateScenePatientCountCodeP(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateScenePatientCount_validateScenePatientCountCode(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateScenePatientCount_validateScenePatientCountValue(scenePatientCount, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateScenePatientCount_validateScenePatientCountMoodCode(
				scenePatientCount, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateScenePatientCountTemplateId constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountTemplateId(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountCodeP constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountCodeP(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountCode constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountCode(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountCode(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountValue constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountValue(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountValue(diagnostics, context);
	}

	/**
	 * Validates the validateScenePatientCountMoodCode constraint of '<em>Scene Patient Count</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScenePatientCount_validateScenePatientCountMoodCode(ScenePatientCount scenePatientCount,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scenePatientCount.validateScenePatientCountMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator(MassCasualtyIndicator massCasualtyIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(massCasualtyIndicator, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(massCasualtyIndicator, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorTemplateId(
				massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorCodeP(
				massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorCode(
				massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorValue(
				massCasualtyIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMassCasualtyIndicator_validateMassCasualtyIndicatorMoodCode(
				massCasualtyIndicator, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMassCasualtyIndicatorTemplateId constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorTemplateId(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorCodeP constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorCodeP(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorCode constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorCode(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorValue constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorValue(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorValue(diagnostics, context);
	}

	/**
	 * Validates the validateMassCasualtyIndicatorMoodCode constraint of '<em>Mass Casualty Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMassCasualtyIndicator_validateMassCasualtyIndicatorMoodCode(
			MassCasualtyIndicator massCasualtyIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return massCasualtyIndicator.validateMassCasualtyIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation(LocationTypeObservation locationTypeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(locationTypeObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(locationTypeObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLocationTypeObservation_validateLocationTypeObservationTemplateId(
				locationTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLocationTypeObservation_validateLocationTypeObservationCode(
				locationTypeObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateLocationTypeObservationTemplateId constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationTemplateId(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLocationTypeObservationCode constraint of '<em>Location Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocationTypeObservation_validateLocationTypeObservationCode(
			LocationTypeObservation locationTypeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return locationTypeObservation.validateLocationTypeObservationCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection(DispatchSection dispatchSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionTemplateId(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionCode(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionTitle(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionText(dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionEmergencyMedicalDispatchObservation(
				dispatchSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchSection_validateDispatchSectionComplaintReportedByDispatch(
				dispatchSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchSectionTemplateId constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionTemplateId(DispatchSection dispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchSectionCode constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionCode(DispatchSection dispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchSectionTitle constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionTitle(DispatchSection dispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchSectionText constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionText(DispatchSection dispatchSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchSectionEmergencyMedicalDispatchObservation constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionEmergencyMedicalDispatchObservation(
			DispatchSection dispatchSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionEmergencyMedicalDispatchObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchSectionComplaintReportedByDispatch constraint of '<em>Dispatch Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchSection_validateDispatchSectionComplaintReportedByDispatch(
			DispatchSection dispatchSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchSection.validateDispatchSectionComplaintReportedByDispatch(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(emergencyMedicalDispatchObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(emergencyMedicalDispatchObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationTemplateId(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCodeP(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCode(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValue(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValueP(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationMoodCode(
				emergencyMedicalDispatchObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationTemplateId constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationTemplateId(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationCodeP constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCodeP(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationCode constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationCode(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationValue constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValue(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationValueP constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationValueP(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateEmergencyMedicalDispatchObservationMoodCode constraint of '<em>Emergency Medical Dispatch Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEmergencyMedicalDispatchObservation_validateEmergencyMedicalDispatchObservationMoodCode(
			EmergencyMedicalDispatchObservation emergencyMedicalDispatchObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return emergencyMedicalDispatchObservation.validateEmergencyMedicalDispatchObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch(ComplaintReportedByDispatch complaintReportedByDispatch,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintReportedByDispatch, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(complaintReportedByDispatch, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchTemplateId(
				complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchCodeP(
				complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchCode(
				complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchValue(
				complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchValueP(
				complaintReportedByDispatch, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintReportedByDispatch_validateComplaintReportedByDispatchMoodCode(
				complaintReportedByDispatch, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateComplaintReportedByDispatchTemplateId constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchTemplateId(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintReportedByDispatchCodeP constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchCodeP(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintReportedByDispatchCode constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchCode(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintReportedByDispatchValue constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchValue(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintReportedByDispatchValueP constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchValueP(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchValueP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintReportedByDispatchMoodCode constraint of '<em>Complaint Reported By Dispatch</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintReportedByDispatch_validateComplaintReportedByDispatchMoodCode(
			ComplaintReportedByDispatch complaintReportedByDispatch, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaintReportedByDispatch.validateComplaintReportedByDispatchMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection(DispositionSection dispositionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispositionSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispositionSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionTemplateId(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionCode(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionCodeP(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionTitle(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionText(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionEntry4(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionNumberOfPatientsObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionIncidentDispositionObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionTransportModeObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionTransportMethodObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionReasonForChoosingDestinationObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionPrearrivalActivationObservation(
				dispositionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispositionSection_validateDispositionSectionPatientConditionChangeAtDestinationObservation(
				dispositionSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispositionSectionTemplateId constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionTemplateId(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionCode constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionCode(DispositionSection dispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionCodeP constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionCodeP(DispositionSection dispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionTitle constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionTitle(DispositionSection dispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionText constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionText(DispositionSection dispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionEntry4 constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionEntry4(DispositionSection dispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionEntry4(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionNumberOfPatientsObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionNumberOfPatientsObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionNumberOfPatientsObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionIncidentDispositionObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionIncidentDispositionObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionIncidentDispositionObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionTransportModeObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionTransportModeObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionTransportModeObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionTransportMethodObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionTransportMethodObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionTransportMethodObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionReasonForChoosingDestinationObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionReasonForChoosingDestinationObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionReasonForChoosingDestinationObservation(
			diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionPrearrivalActivationObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionPrearrivalActivationObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionPrearrivalActivationObservation(diagnostics, context);
	}

	/**
	 * Validates the validateDispositionSectionPatientConditionChangeAtDestinationObservation constraint of '<em>Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispositionSection_validateDispositionSectionPatientConditionChangeAtDestinationObservation(
			DispositionSection dispositionSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispositionSection.validateDispositionSectionPatientConditionChangeAtDestinationObservation(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation(TransportMethodObservation transportMethodObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportMethodObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(transportMethodObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationTemplateId(
				transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationCodeP(
				transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationCode(
				transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationValue(
				transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationValueP(
				transportMethodObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportMethodObservation_validateTransportMethodObservationMoodCode(
				transportMethodObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTransportMethodObservationTemplateId constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationTemplateId(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationCodeP constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationCodeP(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationCode constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationCode(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationValue constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationValue(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationValueP constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationValueP(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportMethodObservationMoodCode constraint of '<em>Transport Method Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportMethodObservation_validateTransportMethodObservationMoodCode(
			TransportMethodObservation transportMethodObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return transportMethodObservation.validateTransportMethodObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation(NumberOfPatientsObservation numberOfPatientsObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(numberOfPatientsObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(numberOfPatientsObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNumberOfPatientsObservation_validateNumberOfPatientsObservationTemplateId(
				numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNumberOfPatientsObservation_validateNumberOfPatientsObservationCodeP(
				numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNumberOfPatientsObservation_validateNumberOfPatientsObservationCode(
				numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNumberOfPatientsObservation_validateNumberOfPatientsObservationValue(
				numberOfPatientsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNumberOfPatientsObservation_validateNumberOfPatientsObservationMoodCode(
				numberOfPatientsObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateNumberOfPatientsObservationTemplateId constraint of '<em>Number Of Patients Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation_validateNumberOfPatientsObservationTemplateId(
			NumberOfPatientsObservation numberOfPatientsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsObservation.validateNumberOfPatientsObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsObservationCodeP constraint of '<em>Number Of Patients Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation_validateNumberOfPatientsObservationCodeP(
			NumberOfPatientsObservation numberOfPatientsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsObservation.validateNumberOfPatientsObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsObservationCode constraint of '<em>Number Of Patients Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation_validateNumberOfPatientsObservationCode(
			NumberOfPatientsObservation numberOfPatientsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsObservation.validateNumberOfPatientsObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsObservationValue constraint of '<em>Number Of Patients Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation_validateNumberOfPatientsObservationValue(
			NumberOfPatientsObservation numberOfPatientsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsObservation.validateNumberOfPatientsObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateNumberOfPatientsObservationMoodCode constraint of '<em>Number Of Patients Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNumberOfPatientsObservation_validateNumberOfPatientsObservationMoodCode(
			NumberOfPatientsObservation numberOfPatientsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return numberOfPatientsObservation.validateNumberOfPatientsObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(incidentDispositionObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(incidentDispositionObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationTemplateId(
				incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationCodeP(
				incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationCode(
				incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationValue(
				incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationValueP(
				incidentDispositionObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateIncidentDispositionObservation_validateIncidentDispositionObservationMoodCode(
				incidentDispositionObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateIncidentDispositionObservationTemplateId constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationTemplateId(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateIncidentDispositionObservationCodeP constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationCodeP(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateIncidentDispositionObservationCode constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationCode(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateIncidentDispositionObservationValue constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationValue(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateIncidentDispositionObservationValueP constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationValueP(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateIncidentDispositionObservationMoodCode constraint of '<em>Incident Disposition Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIncidentDispositionObservation_validateIncidentDispositionObservationMoodCode(
			IncidentDispositionObservation incidentDispositionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return incidentDispositionObservation.validateIncidentDispositionObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation(TransportModeObservation transportModeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportModeObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(transportModeObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportModeObservation_validateTransportModeObservationTemplateId(
				transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportModeObservation_validateTransportModeObservationCodeP(
				transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportModeObservation_validateTransportModeObservationCode(
				transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportModeObservation_validateTransportModeObservationValue(
				transportModeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportModeObservation_validateTransportModeObservationMoodCode(
				transportModeObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTransportModeObservationTemplateId constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationTemplateId(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationCodeP constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationCodeP(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationCode constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationCode(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationValue constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationValue(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportModeObservationMoodCode constraint of '<em>Transport Mode Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportModeObservation_validateTransportModeObservationMoodCode(
			TransportModeObservation transportModeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportModeObservation.validateTransportModeObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonForChoosingDestinationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(
			reasonForChoosingDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationTemplateId(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCodeP(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCode(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValue(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValueP(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationMoodCode(
				reasonForChoosingDestinationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationTemplateId constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationTemplateId(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationCodeP constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCodeP(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationCode constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationCode(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationValue constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValue(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationValueP constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationValueP(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonForChoosingDestinationObservationMoodCode constraint of '<em>Reason For Choosing Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForChoosingDestinationObservation_validateReasonForChoosingDestinationObservationMoodCode(
			ReasonForChoosingDestinationObservation reasonForChoosingDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForChoosingDestinationObservation.validateReasonForChoosingDestinationObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(prearrivalActivationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(prearrivalActivationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationTemplateId(
				prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCodeP(
				prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCode(
				prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValue(
				prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationEffectiveTime(
				prearrivalActivationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrearrivalActivationObservation_validatePrearrivalActivationObservationMoodCode(
				prearrivalActivationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePrearrivalActivationObservationTemplateId constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationTemplateId(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationCodeP constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCodeP(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationCode constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationCode(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationValue constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationValue(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationEffectiveTime constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationEffectiveTime(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationEffectiveTime(
			diagnostics, context);
	}

	/**
	 * Validates the validatePrearrivalActivationObservationMoodCode constraint of '<em>Prearrival Activation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrearrivalActivationObservation_validatePrearrivalActivationObservationMoodCode(
			PrearrivalActivationObservation prearrivalActivationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return prearrivalActivationObservation.validatePrearrivalActivationObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientConditionChangeAtDestinationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(
			patientConditionChangeAtDestinationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationTemplateId(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationCodeP(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationCode(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationValue(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationValueP(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationMoodCode(
				patientConditionChangeAtDestinationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationTemplateId constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationTemplateId(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationCodeP constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationCodeP(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationCode constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationCode(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationValue constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationValue(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationValueP constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationValueP(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validatePatientConditionChangeAtDestinationObservationMoodCode constraint of '<em>Patient Condition Change At Destination Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientConditionChangeAtDestinationObservation_validatePatientConditionChangeAtDestinationObservationMoodCode(
			PatientConditionChangeAtDestinationObservation patientConditionChangeAtDestinationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientConditionChangeAtDestinationObservation.validatePatientConditionChangeAtDestinationObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection(PersonnelAdverseEventSection personnelAdverseEventSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(personnelAdverseEventSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(personnelAdverseEventSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionTemplateId(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionCode(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionCodeP(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionTitle(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionText(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionAdverseEventIndicator(
				personnelAdverseEventSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionAdverseEventTypeObservation(
				personnelAdverseEventSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionTemplateId constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionTemplateId(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionCode constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionCode(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionCodeP constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionCodeP(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionTitle constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionTitle(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionText constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionText(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionAdverseEventIndicator constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionAdverseEventIndicator(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionAdverseEventIndicator(
			diagnostics, context);
	}

	/**
	 * Validates the validatePersonnelAdverseEventSectionAdverseEventTypeObservation constraint of '<em>Personnel Adverse Event Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePersonnelAdverseEventSection_validatePersonnelAdverseEventSectionAdverseEventTypeObservation(
			PersonnelAdverseEventSection personnelAdverseEventSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return personnelAdverseEventSection.validatePersonnelAdverseEventSectionAdverseEventTypeObservation(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator(AdverseEventIndicator adverseEventIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(adverseEventIndicator, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(adverseEventIndicator, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventIndicator_validateAdverseEventIndicatorTemplateId(
				adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventIndicator_validateAdverseEventIndicatorCodeP(
				adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventIndicator_validateAdverseEventIndicatorCode(
				adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventIndicator_validateAdverseEventIndicatorValue(
				adverseEventIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventIndicator_validateAdverseEventIndicatorMoodCode(
				adverseEventIndicator, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAdverseEventIndicatorTemplateId constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorTemplateId(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorCodeP constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorCodeP(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorCode constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorCode(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorValue constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorValue(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorValue(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventIndicatorMoodCode constraint of '<em>Adverse Event Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventIndicator_validateAdverseEventIndicatorMoodCode(
			AdverseEventIndicator adverseEventIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return adverseEventIndicator.validateAdverseEventIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation(AdverseEventTypeObservation adverseEventTypeObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(adverseEventTypeObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(adverseEventTypeObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationTemplateId(
				adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCodeP(
				adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCode(
				adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValue(
				adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValueP(
				adverseEventTypeObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdverseEventTypeObservation_validateAdverseEventTypeObservationMoodCode(
				adverseEventTypeObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAdverseEventTypeObservationTemplateId constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationTemplateId(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationCodeP constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCodeP(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationCode constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationCode(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationValue constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValue(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationValueP constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationValueP(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateAdverseEventTypeObservationMoodCode constraint of '<em>Adverse Event Type Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdverseEventTypeObservation_validateAdverseEventTypeObservationMoodCode(
			AdverseEventTypeObservation adverseEventTypeObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return adverseEventTypeObservation.validateAdverseEventTypeObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection(ProtocolSection protocolSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(protocolSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(protocolSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionTemplateId(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionCode(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionTitle(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionText(protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionProtocolObservation(
				protocolSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolSection_validateProtocolSectionCandidatePatientRegistryType(
				protocolSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProtocolSectionTemplateId constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionTemplateId(ProtocolSection protocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolSectionCode constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionCode(ProtocolSection protocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolSectionTitle constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionTitle(ProtocolSection protocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolSectionText constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionText(ProtocolSection protocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolSectionProtocolObservation constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionProtocolObservation(ProtocolSection protocolSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionProtocolObservation(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolSectionCandidatePatientRegistryType constraint of '<em>Protocol Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolSection_validateProtocolSectionCandidatePatientRegistryType(
			ProtocolSection protocolSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolSection.validateProtocolSectionCandidatePatientRegistryType(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation(ProtocolObservation protocolObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(protocolObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(protocolObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationTemplateId(
				protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationCodeP(
				protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationCode(
				protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationValue(
				protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationValueP(
				protocolObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolObservation_validateProtocolObservationMoodCode(
				protocolObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProtocolObservationTemplateId constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationTemplateId(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationCodeP constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationCodeP(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationCode constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationCode(ProtocolObservation protocolObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationValue constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationValue(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationValueP constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationValueP(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolObservationMoodCode constraint of '<em>Protocol Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolObservation_validateProtocolObservationMoodCode(
			ProtocolObservation protocolObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolObservation.validateProtocolObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType(CandidatePatientRegistryType candidatePatientRegistryType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(candidatePatientRegistryType, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(candidatePatientRegistryType, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeTemplateId(
				candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCodeP(
				candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCode(
				candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValue(
				candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValueP(
				candidatePatientRegistryType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeMoodCode(
				candidatePatientRegistryType, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeTemplateId constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeTemplateId(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeCodeP constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCodeP(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeCode constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeCode(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeValue constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValue(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeValueP constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeValueP(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeValueP(diagnostics, context);
	}

	/**
	 * Validates the validateCandidatePatientRegistryTypeMoodCode constraint of '<em>Candidate Patient Registry Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCandidatePatientRegistryType_validateCandidatePatientRegistryTypeMoodCode(
			CandidatePatientRegistryType candidatePatientRegistryType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return candidatePatientRegistryType.validateCandidatePatientRegistryTypeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection(ResponseSection responseSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionTemplateId(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionCode(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionCodeP(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionTitle(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionText(responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionDelayOrganizer(
				responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionDispatchLocationOrganizer(
				responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionResponseOdometerReadingOrganizer(
				responseSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseSection_validateResponseSectionResponseModeToScene(
				responseSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseSectionTemplateId constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionTemplateId(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionCode constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionCode(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionCodeP constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionCodeP(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionTitle constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionTitle(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionText constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionText(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionDelayOrganizer constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionDelayOrganizer(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionDelayOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionDispatchLocationOrganizer constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionDispatchLocationOrganizer(
			ResponseSection responseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionDispatchLocationOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionResponseOdometerReadingOrganizer constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionResponseOdometerReadingOrganizer(
			ResponseSection responseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionResponseOdometerReadingOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateResponseSectionResponseModeToScene constraint of '<em>Response Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseSection_validateResponseSectionResponseModeToScene(ResponseSection responseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseSection.validateResponseSectionResponseModeToScene(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer(DelayOrganizer delayOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(delayOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(delayOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerDispatchDelayRelationship(
				delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerResponseDelayRelationship(
				delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerSceneDelayRelationship(
				delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerTransportDelayRelationship(
				delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerTurnaoundDelayRelationship(
				delayOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDelayOrganizer_validateDelayOrganizerTemplateId(delayOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDelayOrganizerDispatchDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerDispatchDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerDispatchDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerResponseDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerResponseDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerResponseDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerSceneDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerSceneDelayRelationship(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerSceneDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTransportDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTransportDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTransportDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTurnaoundDelayRelationship constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTurnaoundDelayRelationship(
			DelayOrganizer delayOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTurnaoundDelayRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateDelayOrganizerTemplateId constraint of '<em>Delay Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDelayOrganizer_validateDelayOrganizerTemplateId(DelayOrganizer delayOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return delayOrganizer.validateDelayOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer(DispatchLocationOrganizer dispatchLocationOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationNameRelationship(
				dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(
				dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(
				dispatchLocationOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationOrganizer_validateDispatchLocationOrganizerTemplateId(
				dispatchLocationOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationNameRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationNameRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationNameRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationLatitudeRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerDispatchLocationLongtudeRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationOrganizerTemplateId constraint of '<em>Dispatch Location Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationOrganizer_validateDispatchLocationOrganizerTemplateId(
			DispatchLocationOrganizer dispatchLocationOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationOrganizer.validateDispatchLocationOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseOdometerReadingOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseOdometerReadingOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(
				responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(
				responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(
				responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(
				responseOdometerReadingOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerTemplateId(
				responseOdometerReadingOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseBeginningOdometerReadingRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseOnSceneOdometerReadingRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseDestinationOdometerReadingRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerResponseEndingOdometerReadingRelationship(
			diagnostics, context);
	}

	/**
	 * Validates the validateResponseOdometerReadingOrganizerTemplateId constraint of '<em>Response Odometer Reading Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOdometerReadingOrganizer_validateResponseOdometerReadingOrganizerTemplateId(
			ResponseOdometerReadingOrganizer responseOdometerReadingOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOdometerReadingOrganizer.validateResponseOdometerReadingOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene(ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseModeToScene, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseModeToScene, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneTemplateId(
				responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneCodeP(
				responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneCode(
				responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneValue(
				responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneValueP(
				responseModeToScene, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseModeToScene_validateResponseModeToSceneMoodCode(
				responseModeToScene, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseModeToSceneTemplateId constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneTemplateId(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneCodeP constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneCodeP(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneCode constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneCode(ResponseModeToScene responseModeToScene,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneValue constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneValue(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneValueP constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneValueP(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneValueP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseModeToSceneMoodCode constraint of '<em>Response Mode To Scene</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseModeToScene_validateResponseModeToSceneMoodCode(
			ResponseModeToScene responseModeToScene, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseModeToScene.validateResponseModeToSceneMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection(SituationSection situationSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(situationSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(situationSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionTemplateId(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionCode(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionCodeP(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionTitle(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionText(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionComplaint(situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionPossibleInjury(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionProviderPrimaryImpression(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionPrimarySymptom(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionOtherSymptoms(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionProviderSecondaryImpressions(
				situationSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSituationSection_validateSituationSectionInitialPatientAcuity(
				situationSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSituationSectionTemplateId constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionTemplateId(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionCode constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionCode(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionCodeP constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionCodeP(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionTitle constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionTitle(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionText constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionText(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionComplaint constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionComplaint(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionComplaint(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionPossibleInjury constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionPossibleInjury(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionPossibleInjury(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionProviderPrimaryImpression constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionProviderPrimaryImpression(
			SituationSection situationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionProviderPrimaryImpression(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionPrimarySymptom constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionPrimarySymptom(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionPrimarySymptom(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionOtherSymptoms constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionOtherSymptoms(SituationSection situationSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionOtherSymptoms(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionProviderSecondaryImpressions constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionProviderSecondaryImpressions(
			SituationSection situationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionProviderSecondaryImpressions(diagnostics, context);
	}

	/**
	 * Validates the validateSituationSectionInitialPatientAcuity constraint of '<em>Situation Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSituationSection_validateSituationSectionInitialPatientAcuity(
			SituationSection situationSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return situationSection.validateSituationSectionInitialPatientAcuity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint(Complaint complaint, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaint, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(complaint, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintDurationRelationship(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintTypeRelationship(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintOrganSystemRelationship(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintTemplateId(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintCodeP(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintCode(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintValue(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintTargetSiteCode(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintTargetSiteCodeP(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintEffectiveTime(complaint, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaint_validateComplaintMoodCode(complaint, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateComplaintDurationRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintDurationRelationship(Complaint complaint,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaint.validateComplaintDurationRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTypeRelationship(Complaint complaint,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaint.validateComplaintTypeRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemRelationship constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintOrganSystemRelationship(Complaint complaint,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaint.validateComplaintOrganSystemRelationship(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTemplateId constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTemplateId(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintCodeP constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintCodeP(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintValue constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintValue(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTargetSiteCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTargetSiteCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTargetSiteCodeP constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintTargetSiteCodeP(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintEffectiveTime constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintEffectiveTime(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintMoodCode constraint of '<em>Complaint</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaint_validateComplaintMoodCode(Complaint complaint, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return complaint.validateComplaintMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury(PossibleInjury possibleInjury, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(possibleInjury, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(possibleInjury, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePossibleInjury_validatePossibleInjuryTemplateId(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePossibleInjury_validatePossibleInjuryCodeP(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePossibleInjury_validatePossibleInjuryCode(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePossibleInjury_validatePossibleInjuryValue(possibleInjury, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePossibleInjury_validatePossibleInjuryMoodCode(possibleInjury, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePossibleInjuryTemplateId constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryTemplateId(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryCodeP constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryCodeP(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryCode constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryCode(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryCode(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryValue constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryValue(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryValue(diagnostics, context);
	}

	/**
	 * Validates the validatePossibleInjuryMoodCode constraint of '<em>Possible Injury</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePossibleInjury_validatePossibleInjuryMoodCode(PossibleInjury possibleInjury,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return possibleInjury.validatePossibleInjuryMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression(ProviderPrimaryImpression providerPrimaryImpression,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(providerPrimaryImpression, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(providerPrimaryImpression, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionTemplateId(
				providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionCodeP(
				providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionCode(
				providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionValue(
				providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionValueP(
				providerPrimaryImpression, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderPrimaryImpression_validateProviderPrimaryImpressionMoodCode(
				providerPrimaryImpression, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProviderPrimaryImpressionTemplateId constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionTemplateId(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionCodeP constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionCodeP(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionCode constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionCode(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionValue constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionValue(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionValue(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionValueP constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionValueP(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionValueP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderPrimaryImpressionMoodCode constraint of '<em>Provider Primary Impression</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderPrimaryImpression_validateProviderPrimaryImpressionMoodCode(
			ProviderPrimaryImpression providerPrimaryImpression, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerPrimaryImpression.validateProviderPrimaryImpressionMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom(PrimarySymptom primarySymptom, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(primarySymptom, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(primarySymptom, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomTemplateId(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomCodeP(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomCode(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomValue(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomValueP(primarySymptom, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePrimarySymptom_validatePrimarySymptomMoodCode(primarySymptom, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePrimarySymptomTemplateId constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomTemplateId(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomCodeP constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomCodeP(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomCode constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomCode(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomValue constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomValue(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomValue(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomValueP constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomValueP(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomValueP(diagnostics, context);
	}

	/**
	 * Validates the validatePrimarySymptomMoodCode constraint of '<em>Primary Symptom</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePrimarySymptom_validatePrimarySymptomMoodCode(PrimarySymptom primarySymptom,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return primarySymptom.validatePrimarySymptomMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms(OtherSymptoms otherSymptoms, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(otherSymptoms, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(otherSymptoms, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsTemplateId(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsCodeP(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsCode(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsValue(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsValueP(otherSymptoms, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOtherSymptoms_validateOtherSymptomsMoodCode(otherSymptoms, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateOtherSymptomsTemplateId constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsTemplateId(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsCodeP constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsCodeP(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsCode constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsCode(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsCode(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsValue constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsValue(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsValue(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsValueP constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsValueP(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsValueP(diagnostics, context);
	}

	/**
	 * Validates the validateOtherSymptomsMoodCode constraint of '<em>Other Symptoms</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOtherSymptoms_validateOtherSymptomsMoodCode(OtherSymptoms otherSymptoms,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return otherSymptoms.validateOtherSymptomsMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions(ProviderSecondaryImpressions providerSecondaryImpressions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(providerSecondaryImpressions, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(providerSecondaryImpressions, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsTemplateId(
				providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCodeP(
				providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCode(
				providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValue(
				providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValueP(
				providerSecondaryImpressions, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsMoodCode(
				providerSecondaryImpressions, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsTemplateId constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsTemplateId(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsCodeP constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCodeP(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsCode constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsCode(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsCode(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsValue constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValue(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsValue(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsValueP constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsValueP(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsValueP(diagnostics, context);
	}

	/**
	 * Validates the validateProviderSecondaryImpressionsMoodCode constraint of '<em>Provider Secondary Impressions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProviderSecondaryImpressions_validateProviderSecondaryImpressionsMoodCode(
			ProviderSecondaryImpressions providerSecondaryImpressions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return providerSecondaryImpressions.validateProviderSecondaryImpressionsMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity(InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(initialPatientAcuity, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(initialPatientAcuity, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityTemplateId(
				initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityCodeP(
				initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityCode(
				initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityValue(
				initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityValueP(
				initialPatientAcuity, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInitialPatientAcuity_validateInitialPatientAcuityMoodCode(
				initialPatientAcuity, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateInitialPatientAcuityTemplateId constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityTemplateId(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityCodeP constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityCodeP(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityCode constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityCode(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityCode(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityValue constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityValue(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityValue(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityValueP constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityValueP(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityValueP(diagnostics, context);
	}

	/**
	 * Validates the validateInitialPatientAcuityMoodCode constraint of '<em>Initial Patient Acuity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInitialPatientAcuity_validateInitialPatientAcuityMoodCode(
			InitialPatientAcuity initialPatientAcuity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return initialPatientAcuity.validateInitialPatientAcuityMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection(TimesSection timesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(timesSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(timesSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionTemplateId(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionCode(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionTitle(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionText(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionCallTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitNotifiedTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitEnRouteTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitOnSceneTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitAtPatienttTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitLeftSceneTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionPatientArrivedAtDestinationTime(
				timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionUnitBackInServiceTime(timesSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTimesSection_validateTimesSectionDispatchNotifiedTime(timesSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTimesSectionTemplateId constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionTemplateId(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionCode constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionCode(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionTitle constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionTitle(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionText constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionText(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionCallTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionCallTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionCallTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitNotifiedTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitNotifiedTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitNotifiedTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitEnRouteTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitEnRouteTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitEnRouteTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitOnSceneTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitOnSceneTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitOnSceneTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitAtPatienttTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitAtPatienttTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitAtPatienttTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitLeftSceneTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitLeftSceneTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitLeftSceneTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionPatientArrivedAtDestinationTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionPatientArrivedAtDestinationTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionPatientArrivedAtDestinationTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionUnitBackInServiceTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionUnitBackInServiceTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionUnitBackInServiceTime(diagnostics, context);
	}

	/**
	 * Validates the validateTimesSectionDispatchNotifiedTime constraint of '<em>Times Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTimesSection_validateTimesSectionDispatchNotifiedTime(TimesSection timesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return timesSection.validateTimesSectionDispatchNotifiedTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime(CallTime callTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(callTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(callTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCallTime_validateCallTimeTemplateId(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCallTime_validateCallTimeCodeP(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCallTime_validateCallTimeCode(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCallTime_validateCallTimeValue(callTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCallTime_validateCallTimeMoodCode(callTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCallTimeTemplateId constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeTemplateId(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeCodeP constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeCodeP(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeCode constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeCode(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeValue constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeValue(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateCallTimeMoodCode constraint of '<em>Call Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCallTime_validateCallTimeMoodCode(CallTime callTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return callTime.validateCallTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime(UnitNotifiedTime unitNotifiedTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitNotifiedTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitNotifiedTime_validateUnitNotifiedTimeTemplateId(
				unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitNotifiedTime_validateUnitNotifiedTimeCodeP(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitNotifiedTime_validateUnitNotifiedTimeCode(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitNotifiedTime_validateUnitNotifiedTimeValue(unitNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitNotifiedTime_validateUnitNotifiedTimeMoodCode(unitNotifiedTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitNotifiedTimeTemplateId constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeTemplateId(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeCodeP constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeCodeP(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeCode constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeCode(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeValue constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeValue(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitNotifiedTimeMoodCode constraint of '<em>Unit Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitNotifiedTime_validateUnitNotifiedTimeMoodCode(UnitNotifiedTime unitNotifiedTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitNotifiedTime.validateUnitNotifiedTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime(UnitEnRouteTime unitEnRouteTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitEnRouteTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitEnRouteTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitEnRouteTime_validateUnitEnRouteTimeTemplateId(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitEnRouteTime_validateUnitEnRouteTimeCodeP(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitEnRouteTime_validateUnitEnRouteTimeCode(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitEnRouteTime_validateUnitEnRouteTimeValue(unitEnRouteTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitEnRouteTime_validateUnitEnRouteTimeMoodCode(unitEnRouteTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitEnRouteTimeTemplateId constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeTemplateId(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeCodeP constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeCodeP(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeCode constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeCode(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeValue constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeValue(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitEnRouteTimeMoodCode constraint of '<em>Unit En Route Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitEnRouteTime_validateUnitEnRouteTimeMoodCode(UnitEnRouteTime unitEnRouteTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitEnRouteTime.validateUnitEnRouteTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime(UnitOnSceneTime unitOnSceneTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitOnSceneTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitOnSceneTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitOnSceneTime_validateUnitOnSceneTimeTemplateId(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitOnSceneTime_validateUnitOnSceneTimeCodeP(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitOnSceneTime_validateUnitOnSceneTimeCode(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitOnSceneTime_validateUnitOnSceneTimeValue(unitOnSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitOnSceneTime_validateUnitOnSceneTimeMoodCode(unitOnSceneTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitOnSceneTimeTemplateId constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeTemplateId(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeCodeP constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeCodeP(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeCode constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeCode(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeValue constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeValue(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitOnSceneTimeMoodCode constraint of '<em>Unit On Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitOnSceneTime_validateUnitOnSceneTimeMoodCode(UnitOnSceneTime unitOnSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitOnSceneTime.validateUnitOnSceneTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime(UnitAtPatienttTime unitAtPatienttTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitAtPatienttTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitAtPatienttTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitAtPatienttTime_validateUnitAtPatienttTimeTemplateId(
				unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitAtPatienttTime_validateUnitAtPatienttTimeCodeP(
				unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitAtPatienttTime_validateUnitAtPatienttTimeCode(
				unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitAtPatienttTime_validateUnitAtPatienttTimeValue(
				unitAtPatienttTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitAtPatienttTime_validateUnitAtPatienttTimeMoodCode(
				unitAtPatienttTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitAtPatienttTimeTemplateId constraint of '<em>Unit At Patientt Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime_validateUnitAtPatienttTimeTemplateId(
			UnitAtPatienttTime unitAtPatienttTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatienttTime.validateUnitAtPatienttTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatienttTimeCodeP constraint of '<em>Unit At Patientt Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime_validateUnitAtPatienttTimeCodeP(UnitAtPatienttTime unitAtPatienttTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatienttTime.validateUnitAtPatienttTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatienttTimeCode constraint of '<em>Unit At Patientt Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime_validateUnitAtPatienttTimeCode(UnitAtPatienttTime unitAtPatienttTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatienttTime.validateUnitAtPatienttTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatienttTimeValue constraint of '<em>Unit At Patientt Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime_validateUnitAtPatienttTimeValue(UnitAtPatienttTime unitAtPatienttTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatienttTime.validateUnitAtPatienttTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitAtPatienttTimeMoodCode constraint of '<em>Unit At Patientt Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitAtPatienttTime_validateUnitAtPatienttTimeMoodCode(UnitAtPatienttTime unitAtPatienttTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitAtPatienttTime.validateUnitAtPatienttTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime(UnitLeftSceneTime unitLeftSceneTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitLeftSceneTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitLeftSceneTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeTemplateId(
				unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeCodeP(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeCode(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeValue(unitLeftSceneTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitLeftSceneTime_validateUnitLeftSceneTimeMoodCode(
				unitLeftSceneTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitLeftSceneTimeTemplateId constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeTemplateId(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeCodeP constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeCodeP(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeCode constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeCode(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeValue constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeValue(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitLeftSceneTimeMoodCode constraint of '<em>Unit Left Scene Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitLeftSceneTime_validateUnitLeftSceneTimeMoodCode(UnitLeftSceneTime unitLeftSceneTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitLeftSceneTime.validateUnitLeftSceneTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientArrivedAtDestinationTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientArrivedAtDestinationTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeTemplateId(
				patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCodeP(
				patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCode(
				patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeValue(
				patientArrivedAtDestinationTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeMoodCode(
				patientArrivedAtDestinationTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeTemplateId constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeTemplateId(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeCodeP constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCodeP(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeCode constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeCode(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeValue constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeValue(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientArrivedAtDestinationTimeMoodCode constraint of '<em>Patient Arrived At Destination Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientArrivedAtDestinationTime_validatePatientArrivedAtDestinationTimeMoodCode(
			PatientArrivedAtDestinationTime patientArrivedAtDestinationTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientArrivedAtDestinationTime.validatePatientArrivedAtDestinationTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime(UnitBackInServiceTime unitBackInServiceTime,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unitBackInServiceTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(unitBackInServiceTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeTemplateId(
				unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeCodeP(
				unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeCode(
				unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeValue(
				unitBackInServiceTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateUnitBackInServiceTime_validateUnitBackInServiceTimeMoodCode(
				unitBackInServiceTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateUnitBackInServiceTimeTemplateId constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeTemplateId(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeCodeP constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeCodeP(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeCode constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeCode(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeValue constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeValue(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateUnitBackInServiceTimeMoodCode constraint of '<em>Unit Back In Service Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnitBackInServiceTime_validateUnitBackInServiceTimeMoodCode(
			UnitBackInServiceTime unitBackInServiceTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unitBackInServiceTime.validateUnitBackInServiceTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime(DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchNotifiedTime, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchNotifiedTime, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeTemplateId(
				dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeCodeP(
				dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeCode(
				dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeValue(
				dispatchNotifiedTime, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchNotifiedTime_validateDispatchNotifiedTimeMoodCode(
				dispatchNotifiedTime, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchNotifiedTimeTemplateId constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeTemplateId(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeCodeP constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeCodeP(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeCode constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeCode(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeValue constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeValue(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchNotifiedTimeMoodCode constraint of '<em>Dispatch Notified Time</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchNotifiedTime_validateDispatchNotifiedTimeMoodCode(
			DispatchNotifiedTime dispatchNotifiedTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchNotifiedTime.validateDispatchNotifiedTimeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection(VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalTemplateId(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalCode(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalCodeP(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalText(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTitle(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSection_validateVitalSignsSectionCodeP(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSection_validateVitalSignsSectionCode(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSection_validateVitalSignsSectionText(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSection_validateVitalSignsSectionTitle(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsSection_validateVitalSignsSectionVitalSignsOrganizer(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionCode(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionTitle(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionText(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionVitalSignsOrganizer(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionPriorAidVitals(
				vitalSignsSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsSection_validateEMSPCRVitalSignsSectionAdditionalVitalSignsOrganizer(
				vitalSignsSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionCode constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionCode(VitalSignsSection vitalSignsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionTitle constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionTitle(VitalSignsSection vitalSignsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionText constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionText(VitalSignsSection vitalSignsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionVitalSignsOrganizer constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionVitalSignsOrganizer(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionVitalSignsOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionPriorAidVitals constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionPriorAidVitals(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionPriorAidVitals(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsSectionAdditionalVitalSignsOrganizer constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateEMSPCRVitalSignsSectionAdditionalVitalSignsOrganizer(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateEMSPCRVitalSignsSectionAdditionalVitalSignsOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalTemplateId constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalTemplateId(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer(VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerClassCode(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerMoodCode(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerId(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerCode(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerStatusCode(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerEffectiveTime(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignsOrganizer_validateVitalSignsOrganizerVitalSignObservation(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerSystolicBloodPressureComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerDiastolicBloodPressureComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerHeartRateComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerRespiratoryRateComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerBodyTemperatureComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerOxygenSaturationComponent(
				vitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerEffectiveTime(
				vitalSignsOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerSystolicBloodPressureComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerSystolicBloodPressureComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerSystolicBloodPressureComponent(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerDiastolicBloodPressureComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerDiastolicBloodPressureComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerDiastolicBloodPressureComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerHeartRateComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerHeartRateComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerHeartRateComponent(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerRespiratoryRateComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerRespiratoryRateComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerRespiratoryRateComponent(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerBodyTemperatureComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerBodyTemperatureComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerBodyTemperatureComponent(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerOxygenSaturationComponent constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerOxygenSaturationComponent(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerOxygenSaturationComponent(diagnostics, context);
	}

	/**
	 * Validates the validateEMSPCRVitalSignsOrganizerEffectiveTime constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateEMSPCRVitalSignsOrganizerEffectiveTime(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateEMSPCRVitalSignsOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerTemplateId constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals(PriorAidVitals priorAidVitals, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(priorAidVitals, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(priorAidVitals, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAidVitals_validatePriorAidVitalsTemplateId(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAidVitals_validatePriorAidVitalsCode(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAidVitals_validatePriorAidVitalsValue(priorAidVitals, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAidVitals_validatePriorAidVitalsMoodCode(priorAidVitals, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePriorAidVitalsTemplateId constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsTemplateId(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsCode constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsCode(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsCode(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsValue constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsValue(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsValue(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAidVitalsMoodCode constraint of '<em>Prior Aid Vitals</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAidVitals_validatePriorAidVitalsMoodCode(PriorAidVitals priorAidVitals,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAidVitals.validatePriorAidVitalsMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer(AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(additionalVitalSignsOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(additionalVitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerStrokeScoreComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerPainScoreComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerLevelOfResponsivenessComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerBloodGlucoseComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCarbonMonoxideComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCarbonDioxideComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCardiacRhythmComponent(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerTemplateId(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerEffectiveTime(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerMoodCode(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerGlasgowComaScoreOrganizer(
				additionalVitalSignsOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerStrokeScoreComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerStrokeScoreComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerStrokeScoreComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerPainScoreComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerPainScoreComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerPainScoreComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerLevelOfResponsivenessComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerLevelOfResponsivenessComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerLevelOfResponsivenessComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerBloodGlucoseComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerBloodGlucoseComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerBloodGlucoseComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerCarbonMonoxideComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCarbonMonoxideComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerCarbonMonoxideComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerCarbonDioxideComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCarbonDioxideComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerCarbonDioxideComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerCardiacRhythmComponent constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerCardiacRhythmComponent(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerCardiacRhythmComponent(
			diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerTemplateId constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerTemplateId(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerEffectiveTime constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerEffectiveTime(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerMoodCode constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerMoodCode(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdditionalVitalSignsOrganizerGlasgowComaScoreOrganizer constraint of '<em>Additional Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdditionalVitalSignsOrganizer_validateAdditionalVitalSignsOrganizerGlasgowComaScoreOrganizer(
			AdditionalVitalSignsOrganizer additionalVitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return additionalVitalSignsOrganizer.validateAdditionalVitalSignsOrganizerGlasgowComaScoreOrganizer(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore(StrokeScore strokeScore, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(strokeScore, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(strokeScore, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreTemplateId(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreCodeP(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreCode(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreValue(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreValueP(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreMethodCode(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreMethodCodeP(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreEffectiveTime(strokeScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateStrokeScore_validateStrokeScoreMoodCode(strokeScore, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateStrokeScoreTemplateId constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreTemplateId(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreCodeP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreCodeP(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreCode(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreCode(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreValue constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreValue(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreValue(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreValueP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreValueP(StrokeScore strokeScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreValueP(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMethodCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMethodCode(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMethodCodeP constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMethodCodeP(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMethodCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreEffectiveTime constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreEffectiveTime(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateStrokeScoreMoodCode constraint of '<em>Stroke Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStrokeScore_validateStrokeScoreMoodCode(StrokeScore strokeScore,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return strokeScore.validateStrokeScoreMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore(PainScore painScore, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(painScore, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(painScore, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePainScore_validatePainScoreTemplateId(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePainScore_validatePainScoreCode(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePainScore_validatePainScoreEffectiveTime(painScore, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePainScore_validatePainScoreMoodCode(painScore, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePainScoreTemplateId constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreTemplateId(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreCode constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreCode(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreCode(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreEffectiveTime constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreEffectiveTime(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePainScoreMoodCode constraint of '<em>Pain Score</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePainScore_validatePainScoreMoodCode(PainScore painScore, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return painScore.validatePainScoreMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness(LevelOfResponsiveness levelOfResponsiveness,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(levelOfResponsiveness, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(levelOfResponsiveness, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessTemplateId(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessCodeP(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessCode(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessValue(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessValueP(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessEffectiveTime(
				levelOfResponsiveness, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLevelOfResponsiveness_validateLevelOfResponsivenessMoodCode(
				levelOfResponsiveness, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateLevelOfResponsivenessTemplateId constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessTemplateId(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessCodeP constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessCodeP(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessCode constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessCode(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessCode(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessValue constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessValue(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessValue(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessValueP constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessValueP(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessValueP(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessEffectiveTime constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessEffectiveTime(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateLevelOfResponsivenessMoodCode constraint of '<em>Level Of Responsiveness</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLevelOfResponsiveness_validateLevelOfResponsivenessMoodCode(
			LevelOfResponsiveness levelOfResponsiveness, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return levelOfResponsiveness.validateLevelOfResponsivenessMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose(BloodGlucose bloodGlucose, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(bloodGlucose, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(bloodGlucose, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseTemplateId(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseCodeP(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseCode(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseValue(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseEffectiveTime(bloodGlucose, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBloodGlucose_validateBloodGlucoseMoodCode(bloodGlucose, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBloodGlucoseTemplateId constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseTemplateId(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseCodeP constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseCodeP(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseCode constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseCode(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseCode(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseValue constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseValue(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseValue(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseEffectiveTime constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseEffectiveTime(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBloodGlucoseMoodCode constraint of '<em>Blood Glucose</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBloodGlucose_validateBloodGlucoseMoodCode(BloodGlucose bloodGlucose,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bloodGlucose.validateBloodGlucoseMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide(CarbonMonoxide carbonMonoxide, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(carbonMonoxide, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(carbonMonoxide, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideTemplateId(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideCodeP(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideCode(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideValue(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideEffectiveTime(carbonMonoxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonMonoxide_validateCarbonMonoxideMoodCode(carbonMonoxide, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCarbonMonoxideTemplateId constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideTemplateId(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideCodeP constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideCodeP(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideCode constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideCode(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideValue constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideValue(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideValue(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideEffectiveTime constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideEffectiveTime(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonMonoxideMoodCode constraint of '<em>Carbon Monoxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonMonoxide_validateCarbonMonoxideMoodCode(CarbonMonoxide carbonMonoxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonMonoxide.validateCarbonMonoxideMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide(CarbonDioxide carbonDioxide, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(carbonDioxide, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(carbonDioxide, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideTemplateId(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideCodeP(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideCode(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideValue(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideEffectiveTime(carbonDioxide, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCarbonDioxide_validateCarbonDioxideMoodCode(carbonDioxide, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCarbonDioxideTemplateId constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideTemplateId(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideCodeP constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideCodeP(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideCode constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideCode(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideCode(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideValue constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideValue(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideValue(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideEffectiveTime constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideEffectiveTime(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCarbonDioxideMoodCode constraint of '<em>Carbon Dioxide</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCarbonDioxide_validateCarbonDioxideMoodCode(CarbonDioxide carbonDioxide,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return carbonDioxide.validateCarbonDioxideMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm(CardiacRhythm cardiacRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacRhythm, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(cardiacRhythm, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmParticipant1(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmTemplateId(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmCodeP(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmCode(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmMethodCode(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmMethodCodeP(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmValue(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmValueP(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmEffectiveTime(cardiacRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacRhythm_validateCardiacRhythmMoodCode(cardiacRhythm, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCardiacRhythmParticipant1 constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmParticipant1(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmParticipant1(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmTemplateId constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmTemplateId(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmCodeP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmCodeP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMethodCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMethodCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMethodCodeP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMethodCodeP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMethodCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmValue constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmValue(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmValueP constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmValueP(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmValueP(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmEffectiveTime constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmEffectiveTime(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacRhythmMoodCode constraint of '<em>Cardiac Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacRhythm_validateCardiacRhythmMoodCode(CardiacRhythm cardiacRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacRhythm.validateCardiacRhythmMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer(GlasgowComaScoreOrganizer glasgowComaScoreOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowComaScoreOrganizer, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowComaScoreOrganizer, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowEye(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowMotor(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowQualifier(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowTotal(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowVerbal(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerTemplateId(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerEffectiveTime(
				glasgowComaScoreOrganizer, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerGlasgowEye constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowEye(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerGlasgowEye(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerGlasgowMotor constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowMotor(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerGlasgowMotor(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerGlasgowQualifier constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowQualifier(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerGlasgowQualifier(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerGlasgowTotal constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowTotal(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerGlasgowTotal(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerGlasgowVerbal constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerGlasgowVerbal(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerGlasgowVerbal(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerTemplateId constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerTemplateId(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowComaScoreOrganizerEffectiveTime constraint of '<em>Glasgow Coma Score Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowComaScoreOrganizer_validateGlasgowComaScoreOrganizerEffectiveTime(
			GlasgowComaScoreOrganizer glasgowComaScoreOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowComaScoreOrganizer.validateGlasgowComaScoreOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye(GlasgowEye glasgowEye, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowEye, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowEye, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowEye_validateGlasgowEyeTemplateId(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowEye_validateGlasgowEyeCodeP(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowEye_validateGlasgowEyeCode(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowEye_validateGlasgowEyeValue(glasgowEye, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowEye_validateGlasgowEyeMoodCode(glasgowEye, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowEyeTemplateId constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeTemplateId(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeCodeP constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeCodeP(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeCode constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeCode(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeValue constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeValue(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowEyeMoodCode constraint of '<em>Glasgow Eye</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowEye_validateGlasgowEyeMoodCode(GlasgowEye glasgowEye, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return glasgowEye.validateGlasgowEyeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor(GlasgowMotor glasgowMotor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowMotor, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowMotor, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowMotor_validateGlasgowMotorTemplateId(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowMotor_validateGlasgowMotorCodeP(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowMotor_validateGlasgowMotorCode(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowMotor_validateGlasgowMotorValue(glasgowMotor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowMotor_validateGlasgowMotorMoodCode(glasgowMotor, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowMotorTemplateId constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorTemplateId(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorCodeP constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorCodeP(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorCode constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorCode(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorValue constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorValue(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowMotorMoodCode constraint of '<em>Glasgow Motor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowMotor_validateGlasgowMotorMoodCode(GlasgowMotor glasgowMotor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowMotor.validateGlasgowMotorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier(GlasgowQualifier glasgowQualifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowQualifier, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowQualifier, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowQualifier_validateGlasgowQualifierTemplateId(
				glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowQualifier_validateGlasgowQualifierCodeP(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowQualifier_validateGlasgowQualifierCode(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowQualifier_validateGlasgowQualifierValue(glasgowQualifier, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowQualifier_validateGlasgowQualifierMoodCode(glasgowQualifier, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowQualifierTemplateId constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierTemplateId(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierCodeP constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierCodeP(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierCode constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierCode(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierValue constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierValue(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowQualifierMoodCode constraint of '<em>Glasgow Qualifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowQualifier_validateGlasgowQualifierMoodCode(GlasgowQualifier glasgowQualifier,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowQualifier.validateGlasgowQualifierMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal(GlasgowTotal glasgowTotal, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowTotal, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowTotal, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowTotal_validateGlasgowTotalTemplateId(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowTotal_validateGlasgowTotalCodeP(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowTotal_validateGlasgowTotalCode(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowTotal_validateGlasgowTotalValue(glasgowTotal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowTotal_validateGlasgowTotalMoodCode(glasgowTotal, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowTotalTemplateId constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalTemplateId(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalCodeP constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalCodeP(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalCode constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalCode(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalValue constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalValue(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowTotalMoodCode constraint of '<em>Glasgow Total</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowTotal_validateGlasgowTotalMoodCode(GlasgowTotal glasgowTotal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowTotal.validateGlasgowTotalMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal(GlasgowVerbal glasgowVerbal, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(glasgowVerbal, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(glasgowVerbal, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowVerbal_validateGlasgowVerbalTemplateId(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowVerbal_validateGlasgowVerbalCodeP(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowVerbal_validateGlasgowVerbalCode(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowVerbal_validateGlasgowVerbalValue(glasgowVerbal, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateGlasgowVerbal_validateGlasgowVerbalMoodCode(glasgowVerbal, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateGlasgowVerbalTemplateId constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalTemplateId(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalCodeP constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalCodeP(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalCode constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalCode(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalCode(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalValue constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalValue(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalValue(diagnostics, context);
	}

	/**
	 * Validates the validateGlasgowVerbalMoodCode constraint of '<em>Glasgow Verbal</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGlasgowVerbal_validateGlasgowVerbalMoodCode(GlasgowVerbal glasgowVerbal,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return glasgowVerbal.validateGlasgowVerbalMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryIncidentDescriptionSection, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(injuryIncidentDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateClassCode(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= cdaValidator.validateSection_validateMoodCode(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTemplateId(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionCode(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTitle(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionText(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryCauseCategory(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryMechanism(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTraumaCenterCriteria(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryRiskFactor(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionVehicleImpactArea(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionPatientLocationInVehicle(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionAirbagDeploymentStatus(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionHeightOfFall(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionDisasterType(
				injuryIncidentDescriptionSection, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionTemplateId constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTemplateId(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionCode constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionCode(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionTitle constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTitle(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionText constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionText(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionInjuryCauseCategory constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryCauseCategory(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionInjuryCauseCategory(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionInjuryMechanism constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryMechanism(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionInjuryMechanism(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionTraumaCenterCriteria constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionTraumaCenterCriteria(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionTraumaCenterCriteria(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionInjuryRiskFactor constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionInjuryRiskFactor(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionInjuryRiskFactor(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionVehicleImpactArea constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionVehicleImpactArea(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionVehicleImpactArea(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionPatientLocationInVehicle constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionPatientLocationInVehicle(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionPatientLocationInVehicle(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionVehicleOccupantSafetyEquipment(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionAirbagDeploymentStatus constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionAirbagDeploymentStatus(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionAirbagDeploymentStatus(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionHeightOfFall constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionHeightOfFall(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionHeightOfFall(
			diagnostics, context);
	}

	/**
	 * Validates the validateInjuryIncidentDescriptionSectionDisasterType constraint of '<em>Injury Incident Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryIncidentDescriptionSection_validateInjuryIncidentDescriptionSectionDisasterType(
			InjuryIncidentDescriptionSection injuryIncidentDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return injuryIncidentDescriptionSection.validateInjuryIncidentDescriptionSectionDisasterType(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory(InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryCauseCategory, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(injuryCauseCategory, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryCauseCategory_validateInjuryCauseCategoryTemplateId(
				injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryCauseCategory_validateInjuryCauseCategoryCode(
				injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryCauseCategory_validateInjuryCauseCategoryValue(
				injuryCauseCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryCauseCategory_validateInjuryCauseCategoryMoodCode(
				injuryCauseCategory, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateInjuryCauseCategoryTemplateId constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryTemplateId(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryCode constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryCode(InjuryCauseCategory injuryCauseCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryValue constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryValue(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryValue(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryCauseCategoryMoodCode constraint of '<em>Injury Cause Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryCauseCategory_validateInjuryCauseCategoryMoodCode(
			InjuryCauseCategory injuryCauseCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryCauseCategory.validateInjuryCauseCategoryMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism(InjuryMechanism injuryMechanism, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryMechanism, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(injuryMechanism, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryMechanism_validateInjuryMechanismTemplateId(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryMechanism_validateInjuryMechanismCode(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryMechanism_validateInjuryMechanismValue(injuryMechanism, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryMechanism_validateInjuryMechanismMoodCode(injuryMechanism, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateInjuryMechanismTemplateId constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismTemplateId(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismCode constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismCode(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismValue constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismValue(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismValue(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryMechanismMoodCode constraint of '<em>Injury Mechanism</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryMechanism_validateInjuryMechanismMoodCode(InjuryMechanism injuryMechanism,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryMechanism.validateInjuryMechanismMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaCenterCriteria(TraumaCenterCriteria traumaCenterCriteria, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(traumaCenterCriteria, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(traumaCenterCriteria, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTraumaCenterCriteria_validateTraumaCenterCriteriaTemplateId(
				traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTraumaCenterCriteria_validateTraumaCenterCriteriaCode(
				traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTraumaCenterCriteria_validateTraumaCenterCriteriaValue(
				traumaCenterCriteria, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTraumaCenterCriteria_validateTraumaCenterCriteriaMoodCode(
				traumaCenterCriteria, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTraumaCenterCriteriaTemplateId constraint of '<em>Trauma Center Criteria</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaCenterCriteria_validateTraumaCenterCriteriaTemplateId(
			TraumaCenterCriteria traumaCenterCriteria, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return traumaCenterCriteria.validateTraumaCenterCriteriaTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaCenterCriteriaCode constraint of '<em>Trauma Center Criteria</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaCenterCriteria_validateTraumaCenterCriteriaCode(
			TraumaCenterCriteria traumaCenterCriteria, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return traumaCenterCriteria.validateTraumaCenterCriteriaCode(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaCenterCriteriaValue constraint of '<em>Trauma Center Criteria</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaCenterCriteria_validateTraumaCenterCriteriaValue(
			TraumaCenterCriteria traumaCenterCriteria, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return traumaCenterCriteria.validateTraumaCenterCriteriaValue(diagnostics, context);
	}

	/**
	 * Validates the validateTraumaCenterCriteriaMoodCode constraint of '<em>Trauma Center Criteria</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTraumaCenterCriteria_validateTraumaCenterCriteriaMoodCode(
			TraumaCenterCriteria traumaCenterCriteria, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return traumaCenterCriteria.validateTraumaCenterCriteriaMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryRiskFactor(InjuryRiskFactor injuryRiskFactor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(injuryRiskFactor, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(injuryRiskFactor, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryRiskFactor_validateInjuryRiskFactorTemplateId(
				injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryRiskFactor_validateInjuryRiskFactorCode(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryRiskFactor_validateInjuryRiskFactorValue(injuryRiskFactor, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateInjuryRiskFactor_validateInjuryRiskFactorMoodCode(injuryRiskFactor, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateInjuryRiskFactorTemplateId constraint of '<em>Injury Risk Factor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryRiskFactor_validateInjuryRiskFactorTemplateId(InjuryRiskFactor injuryRiskFactor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryRiskFactor.validateInjuryRiskFactorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryRiskFactorCode constraint of '<em>Injury Risk Factor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryRiskFactor_validateInjuryRiskFactorCode(InjuryRiskFactor injuryRiskFactor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryRiskFactor.validateInjuryRiskFactorCode(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryRiskFactorValue constraint of '<em>Injury Risk Factor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryRiskFactor_validateInjuryRiskFactorValue(InjuryRiskFactor injuryRiskFactor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryRiskFactor.validateInjuryRiskFactorValue(diagnostics, context);
	}

	/**
	 * Validates the validateInjuryRiskFactorMoodCode constraint of '<em>Injury Risk Factor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInjuryRiskFactor_validateInjuryRiskFactorMoodCode(InjuryRiskFactor injuryRiskFactor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return injuryRiskFactor.validateInjuryRiskFactorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea(VehicleImpactArea vehicleImpactArea, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vehicleImpactArea, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(vehicleImpactArea, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleImpactArea_validateVehicleImpactAreaTemplateId(
				vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleImpactArea_validateVehicleImpactAreaCode(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleImpactArea_validateVehicleImpactAreaValue(vehicleImpactArea, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleImpactArea_validateVehicleImpactAreaMoodCode(
				vehicleImpactArea, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateVehicleImpactAreaTemplateId constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaTemplateId(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaCode constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaCode(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaValue constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaValue(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaValue(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleImpactAreaMoodCode constraint of '<em>Vehicle Impact Area</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleImpactArea_validateVehicleImpactAreaMoodCode(VehicleImpactArea vehicleImpactArea,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vehicleImpactArea.validateVehicleImpactAreaMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle(PatientLocationInVehicle patientLocationInVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientLocationInVehicle, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientLocationInVehicle, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleTemplateId(
				patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleCode(
				patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleValue(
				patientLocationInVehicle, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientLocationInVehicle_validatePatientLocationInVehicleMoodCode(
				patientLocationInVehicle, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientLocationInVehicleTemplateId constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleTemplateId(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleCode constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleCode(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleValue constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleValue(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLocationInVehicleMoodCode constraint of '<em>Patient Location In Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientLocationInVehicle_validatePatientLocationInVehicleMoodCode(
			PatientLocationInVehicle patientLocationInVehicle, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientLocationInVehicle.validatePatientLocationInVehicleMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vehicleOccupantSafetyEquipment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(vehicleOccupantSafetyEquipment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentTemplateId(
				vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCode(
				vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValue(
				vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentMoodCode(
				vehicleOccupantSafetyEquipment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentTemplateId constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentTemplateId(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentCode constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentCode(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentValue constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentValue(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateVehicleOccupantSafetyEquipmentMoodCode constraint of '<em>Vehicle Occupant Safety Equipment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVehicleOccupantSafetyEquipment_validateVehicleOccupantSafetyEquipmentMoodCode(
			VehicleOccupantSafetyEquipment vehicleOccupantSafetyEquipment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vehicleOccupantSafetyEquipment.validateVehicleOccupantSafetyEquipmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus(AirbagDeploymentStatus airbagDeploymentStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(airbagDeploymentStatus, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(airbagDeploymentStatus, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusTemplateId(
				airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusCode(
				airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValue(
				airbagDeploymentStatus, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirbagDeploymentStatus_validateAirbagDeploymentStatusMoodCode(
				airbagDeploymentStatus, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAirbagDeploymentStatusTemplateId constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusTemplateId(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusCode constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusCode(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusValue constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusValue(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusValue(diagnostics, context);
	}

	/**
	 * Validates the validateAirbagDeploymentStatusMoodCode constraint of '<em>Airbag Deployment Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirbagDeploymentStatus_validateAirbagDeploymentStatusMoodCode(
			AirbagDeploymentStatus airbagDeploymentStatus, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return airbagDeploymentStatus.validateAirbagDeploymentStatusMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall(HeightOfFall heightOfFall, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heightOfFall, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(heightOfFall, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeightOfFall_validateHeightOfFallTemplateId(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeightOfFall_validateHeightOfFallCode(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeightOfFall_validateHeightOfFallValue(heightOfFall, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeightOfFall_validateHeightOfFallMoodCode(heightOfFall, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHeightOfFallTemplateId constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallTemplateId(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallCode constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallCode(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallValue constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallValue(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallValue(diagnostics, context);
	}

	/**
	 * Validates the validateHeightOfFallMoodCode constraint of '<em>Height Of Fall</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeightOfFall_validateHeightOfFallMoodCode(HeightOfFall heightOfFall,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heightOfFall.validateHeightOfFallMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType(DisasterType disasterType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(disasterType, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(disasterType, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDisasterType_validateDisasterTypeTemplateId(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDisasterType_validateDisasterTypeCode(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDisasterType_validateDisasterTypeValue(disasterType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDisasterType_validateDisasterTypeMoodCode(disasterType, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDisasterTypeTemplateId constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeTemplateId(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeCode constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeCode(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeValue constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeValue(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateDisasterTypeMoodCode constraint of '<em>Disaster Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDisasterType_validateDisasterTypeMoodCode(DisasterType disasterType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return disasterType.validateDisasterTypeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationNotAdministeredReasonObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(
			medicationNotAdministeredReasonObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationTemplateId(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCode(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValue(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValueP(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationMoodCode(
				medicationNotAdministeredReasonObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationTemplateId constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationTemplateId(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationCode constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationCode(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationValue constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValue(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationValueP constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationValueP(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationNotAdministeredReasonObservationMoodCode constraint of '<em>Medication Not Administered Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationNotAdministeredReasonObservation_validateMedicationNotAdministeredReasonObservationMoodCode(
			MedicationNotAdministeredReasonObservation medicationNotAdministeredReasonObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationNotAdministeredReasonObservation.validateMedicationNotAdministeredReasonObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation(MedicationResponseObservation medicationResponseObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationResponseObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(medicationResponseObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationResponseObservation_validateMedicationResponseObservationTemplateId(
				medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationResponseObservation_validateMedicationResponseObservationCodeP(
				medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationResponseObservation_validateMedicationResponseObservationCode(
				medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationResponseObservation_validateMedicationResponseObservationValue(
				medicationResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationResponseObservation_validateMedicationResponseObservationMoodCode(
				medicationResponseObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMedicationResponseObservationTemplateId constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationTemplateId(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationCodeP constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationCodeP(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationCode constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationCode(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationValue constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationValue(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationResponseObservationMoodCode constraint of '<em>Medication Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationResponseObservation_validateMedicationResponseObservationMoodCode(
			MedicationResponseObservation medicationResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationResponseObservation.validateMedicationResponseObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationComplicationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(medicationComplicationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationTemplateId(
				medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationCodeP(
				medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationCode(
				medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationValue(
				medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationValueP(
				medicationComplicationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationComplicationObservation_validateMedicationComplicationObservationMoodCode(
				medicationComplicationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMedicationComplicationObservationTemplateId constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationTemplateId(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationCodeP constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationCodeP(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationCode constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationCode(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationValue constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationValue(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationValueP constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationValueP(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationValueP(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationComplicationObservationMoodCode constraint of '<em>Medication Complication Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationComplicationObservation_validateMedicationComplicationObservationMoodCode(
			MedicationComplicationObservation medicationComplicationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationComplicationObservation.validateMedicationComplicationObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationPriorAdministrationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(
			medicationPriorAdministrationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationTemplateId(
				medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCodeP(
				medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCode(
				medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationValue(
				medicationPriorAdministrationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationMoodCode(
				medicationPriorAdministrationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationTemplateId constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationTemplateId(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationCodeP constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCodeP(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationCode constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationCode(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationValue constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationValue(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateMedicationPriorAdministrationObservationMoodCode constraint of '<em>Medication Prior Administration Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationPriorAdministrationObservation_validateMedicationPriorAdministrationObservationMoodCode(
			MedicationPriorAdministrationObservation medicationPriorAdministrationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationPriorAdministrationObservation.validateMedicationPriorAdministrationObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight(PatientBodyWeight patientBodyWeight, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientBodyWeight, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(patientBodyWeight, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientBodyWeight_validatePatientBodyWeightTemplateId(
				patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientBodyWeight_validatePatientBodyWeightCode(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientBodyWeight_validatePatientBodyWeightValue(patientBodyWeight, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePatientBodyWeight_validatePatientBodyWeightMoodCode(
				patientBodyWeight, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePatientBodyWeightTemplateId constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightTemplateId(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightCode constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightCode(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightValue constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightValue(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightValue(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBodyWeightMoodCode constraint of '<em>Patient Body Weight</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientBodyWeight_validatePatientBodyWeightMoodCode(PatientBodyWeight patientBodyWeight,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientBodyWeight.validatePatientBodyWeightMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(lengthBasedPatientBodyWeightClass, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(lengthBasedPatientBodyWeightClass, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassTemplateId(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCodeP(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCode(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValue(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassEffectiveTime(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassMoodCode(
				lengthBasedPatientBodyWeightClass, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassTemplateId constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassTemplateId(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassCodeP constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCodeP(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassCode constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassCode(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassValue constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassValue(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassValue(diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassEffectiveTime constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassEffectiveTime(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassEffectiveTime(
			diagnostics, context);
	}

	/**
	 * Validates the validateLengthBasedPatientBodyWeightClassMoodCode constraint of '<em>Length Based Patient Body Weight Class</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLengthBasedPatientBodyWeightClass_validateLengthBasedPatientBodyWeightClassMoodCode(
			LengthBasedPatientBodyWeightClass lengthBasedPatientBodyWeightClass, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return lengthBasedPatientBodyWeightClass.validateLengthBasedPatientBodyWeightClassMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment(FaceAssessment faceAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(faceAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(faceAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentTemplateId(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentCodeP(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentCode(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentValue(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentValueP(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentEffectiveTime(faceAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateFaceAssessment_validateFaceAssessmentMoodCode(faceAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateFaceAssessmentTemplateId constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentTemplateId(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentCodeP constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentCodeP(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentCode constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentCode(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentValue constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentValue(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentValueP constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentValueP(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentEffectiveTime constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentEffectiveTime(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateFaceAssessmentMoodCode constraint of '<em>Face Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFaceAssessment_validateFaceAssessmentMoodCode(FaceAssessment faceAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return faceAssessment.validateFaceAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment(HeadAssessment headAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(headAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(headAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentTemplateId(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentCodeP(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentCode(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentValue(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentEffectiveTime(headAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeadAssessment_validateHeadAssessmentMoodCode(headAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHeadAssessmentTemplateId constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentTemplateId(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentCodeP constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentCodeP(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentCode constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentCode(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentValue constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentValue(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentEffectiveTime constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentEffectiveTime(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeadAssessmentMoodCode constraint of '<em>Head Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeadAssessment_validateHeadAssessmentMoodCode(HeadAssessment headAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return headAssessment.validateHeadAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment(NeckAssessment neckAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(neckAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(neckAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeckAssessment_validateNeckAssessmentTemplateId(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeckAssessment_validateNeckAssessmentCode(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeckAssessment_validateNeckAssessmentValue(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeckAssessment_validateNeckAssessmentEffectiveTime(neckAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeckAssessment_validateNeckAssessmentMoodCode(neckAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateNeckAssessmentTemplateId constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentTemplateId(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentCode constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentCode(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentValue constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentValue(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentEffectiveTime constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentEffectiveTime(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateNeckAssessmentMoodCode constraint of '<em>Neck Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeckAssessment_validateNeckAssessmentMoodCode(NeckAssessment neckAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neckAssessment.validateNeckAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment(ChestAndLungsAssessment chestAndLungsAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(chestAndLungsAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(chestAndLungsAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateChestAndLungsAssessment_validateChestAndLungsAssessmentTemplateId(
				chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateChestAndLungsAssessment_validateChestAndLungsAssessmentCode(
				chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateChestAndLungsAssessment_validateChestAndLungsAssessmentValue(
				chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateChestAndLungsAssessment_validateChestAndLungsAssessmentEffectiveTime(
				chestAndLungsAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateChestAndLungsAssessment_validateChestAndLungsAssessmentMoodCode(
				chestAndLungsAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateChestAndLungsAssessmentTemplateId constraint of '<em>Chest And Lungs Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment_validateChestAndLungsAssessmentTemplateId(
			ChestAndLungsAssessment chestAndLungsAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAndLungsAssessment.validateChestAndLungsAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateChestAndLungsAssessmentCode constraint of '<em>Chest And Lungs Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment_validateChestAndLungsAssessmentCode(
			ChestAndLungsAssessment chestAndLungsAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAndLungsAssessment.validateChestAndLungsAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateChestAndLungsAssessmentValue constraint of '<em>Chest And Lungs Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment_validateChestAndLungsAssessmentValue(
			ChestAndLungsAssessment chestAndLungsAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAndLungsAssessment.validateChestAndLungsAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateChestAndLungsAssessmentEffectiveTime constraint of '<em>Chest And Lungs Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment_validateChestAndLungsAssessmentEffectiveTime(
			ChestAndLungsAssessment chestAndLungsAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAndLungsAssessment.validateChestAndLungsAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateChestAndLungsAssessmentMoodCode constraint of '<em>Chest And Lungs Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChestAndLungsAssessment_validateChestAndLungsAssessmentMoodCode(
			ChestAndLungsAssessment chestAndLungsAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chestAndLungsAssessment.validateChestAndLungsAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment(HeartAssessment heartAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heartAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(heartAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentTemplateId(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentCodeP(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentCode(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentValue(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentValueP(heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentEffectiveTime(
				heartAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartAssessment_validateHeartAssessmentMoodCode(heartAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHeartAssessmentTemplateId constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentTemplateId(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentCodeP constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentCodeP(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentCode constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentCode(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentValue constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentValue(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentValueP constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentValueP(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentEffectiveTime constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentEffectiveTime(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeartAssessmentMoodCode constraint of '<em>Heart Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartAssessment_validateHeartAssessmentMoodCode(HeartAssessment heartAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartAssessment.validateHeartAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment(AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(abdomenAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(abdomenAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentTemplateId(
				abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentCode(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentValue(abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCode(
				abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentEffectiveTime(
				abdomenAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbdomenAssessment_validateAbdomenAssessmentMoodCode(
				abdomenAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAbdomenAssessmentTemplateId constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentTemplateId(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentCode(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentValue constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentValue(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentTargetSiteCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentTargetSiteCode(
			AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentEffectiveTime constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentEffectiveTime(
			AbdomenAssessment abdomenAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAbdomenAssessmentMoodCode constraint of '<em>Abdomen Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbdomenAssessment_validateAbdomenAssessmentMoodCode(AbdomenAssessment abdomenAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return abdomenAssessment.validateAbdomenAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(pelvicAndGenitourinaryAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(pelvicAndGenitourinaryAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentTemplateId(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCode(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValue(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValueP(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentEffectiveTime(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentMoodCode(
				pelvicAndGenitourinaryAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentTemplateId constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentTemplateId(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentCode constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentCode(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentValue constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValue(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentValueP constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentValueP(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentEffectiveTime constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentEffectiveTime(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentEffectiveTime(
			diagnostics, context);
	}

	/**
	 * Validates the validatePelvicAndGenitourinaryAssessmentMoodCode constraint of '<em>Pelvic And Genitourinary Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePelvicAndGenitourinaryAssessment_validatePelvicAndGenitourinaryAssessmentMoodCode(
			PelvicAndGenitourinaryAssessment pelvicAndGenitourinaryAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return pelvicAndGenitourinaryAssessment.validatePelvicAndGenitourinaryAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment(BackAndSpineAssessment backAndSpineAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(backAndSpineAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(backAndSpineAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTemplateId(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentCodeP(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentCode(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCode(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCodeP(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentValue(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentValueP(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentEffectiveTime(
				backAndSpineAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBackAndSpineAssessment_validateBackAndSpineAssessmentMoodCode(
				backAndSpineAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTemplateId constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTemplateId(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentCodeP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentCodeP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTargetSiteCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentTargetSiteCodeP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentTargetSiteCodeP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentValue constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentValue(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentValueP constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentValueP(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentEffectiveTime constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentEffectiveTime(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBackAndSpineAssessmentMoodCode constraint of '<em>Back And Spine Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBackAndSpineAssessment_validateBackAndSpineAssessmentMoodCode(
			BackAndSpineAssessment backAndSpineAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return backAndSpineAssessment.validateBackAndSpineAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment(ExtremitiesAssessment extremitiesAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(extremitiesAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(extremitiesAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTemplateId(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentCodeP(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentCode(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCode(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCodeP(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentValue(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentEffectiveTime(
				extremitiesAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExtremitiesAssessment_validateExtremitiesAssessmentMoodCode(
				extremitiesAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExtremitiesAssessmentTemplateId constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTemplateId(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentCodeP constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentCodeP(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentTargetSiteCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentTargetSiteCodeP constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentTargetSiteCodeP(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentValue constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentValue(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentEffectiveTime constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentEffectiveTime(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateExtremitiesAssessmentMoodCode constraint of '<em>Extremities Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExtremitiesAssessment_validateExtremitiesAssessmentMoodCode(
			ExtremitiesAssessment extremitiesAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return extremitiesAssessment.validateExtremitiesAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment(EyeAssessment eyeAssessment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(eyeAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(eyeAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentTemplateId(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentCodeP(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentCode(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentTargetSiteCode(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentTargetSiteCodeP(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentValue(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentValueP(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentEffectiveTime(eyeAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateEyeAssessment_validateEyeAssessmentMoodCode(eyeAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateEyeAssessmentTemplateId constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTemplateId(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentCodeP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentCodeP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentTargetSiteCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTargetSiteCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentTargetSiteCodeP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentTargetSiteCodeP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentTargetSiteCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentValue constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentValue(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentValueP constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentValueP(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentEffectiveTime constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentEffectiveTime(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEyeAssessmentMoodCode constraint of '<em>Eye Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEyeAssessment_validateEyeAssessmentMoodCode(EyeAssessment eyeAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return eyeAssessment.validateEyeAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment(MentalStatusAssessment mentalStatusAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(mentalStatusAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(mentalStatusAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMentalStatusAssessment_validateMentalStatusAssessmentTemplateId(
				mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMentalStatusAssessment_validateMentalStatusAssessmentCodeP(
				mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMentalStatusAssessment_validateMentalStatusAssessmentCode(
				mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMentalStatusAssessment_validateMentalStatusAssessmentValue(
				mentalStatusAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateMentalStatusAssessment_validateMentalStatusAssessmentMoodCode(
				mentalStatusAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateMentalStatusAssessmentTemplateId constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentTemplateId(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentCodeP constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentCodeP(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentCode constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentCode(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentValue constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentValue(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateMentalStatusAssessmentMoodCode constraint of '<em>Mental Status Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMentalStatusAssessment_validateMentalStatusAssessmentMoodCode(
			MentalStatusAssessment mentalStatusAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return mentalStatusAssessment.validateMentalStatusAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming(CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestTiming, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestTiming, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestTiming_validateCardiacArrestTimingTemplateId(
				cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestTiming_validateCardiacArrestTimingCode(
				cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestTiming_validateCardiacArrestTimingValue(
				cardiacArrestTiming, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestTiming_validateCardiacArrestTimingMoodCode(
				cardiacArrestTiming, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCardiacArrestTimingTemplateId constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingTemplateId(
			CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingCode constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingCode(CardiacArrestTiming cardiacArrestTiming,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingValue constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingValue(
			CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestTimingMoodCode constraint of '<em>Cardiac Arrest Timing</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestTiming_validateCardiacArrestTimingMoodCode(
			CardiacArrestTiming cardiacArrestTiming, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestTiming.validateCardiacArrestTimingMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause(CardiacArrestCause cardiacArrestCause, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(cardiacArrestCause, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(cardiacArrestCause, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestCause_validateCardiacArrestCauseTemplateId(
				cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestCause_validateCardiacArrestCauseCode(
				cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestCause_validateCardiacArrestCauseValue(
				cardiacArrestCause, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateCardiacArrestCause_validateCardiacArrestCauseMoodCode(
				cardiacArrestCause, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateCardiacArrestCauseTemplateId constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseTemplateId(
			CardiacArrestCause cardiacArrestCause, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseCode constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseCode(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseCode(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseValue constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseValue(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseValue(diagnostics, context);
	}

	/**
	 * Validates the validateCardiacArrestCauseMoodCode constraint of '<em>Cardiac Arrest Cause</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCardiacArrestCause_validateCardiacArrestCauseMoodCode(CardiacArrestCause cardiacArrestCause,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return cardiacArrestCause.validateCardiacArrestCauseMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR(PriorCPR priorCPR, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(priorCPR, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(priorCPR, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorCPR_validatePriorCPRProviderParticipation(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorCPR_validatePriorCPRTemplateId(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorCPR_validatePriorCPRCode(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorCPR_validatePriorCPRValue(priorCPR, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorCPR_validatePriorCPRMoodCode(priorCPR, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePriorCPRProviderParticipation constraint of '<em>Prior CPR</em>'.
	 * <!-- begin-user-doc -->
	* <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR_validatePriorCPRProviderParticipation(PriorCPR priorCPR,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorCPR.validatePriorCPRProviderParticipation(diagnostics, context);
	}

	/**
	 * Validates the validatePriorCPRTemplateId constraint of '<em>Prior CPR</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR_validatePriorCPRTemplateId(PriorCPR priorCPR, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorCPR.validatePriorCPRTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePriorCPRCode constraint of '<em>Prior CPR</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR_validatePriorCPRCode(PriorCPR priorCPR, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorCPR.validatePriorCPRCode(diagnostics, context);
	}

	/**
	 * Validates the validatePriorCPRValue constraint of '<em>Prior CPR</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR_validatePriorCPRValue(PriorCPR priorCPR, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorCPR.validatePriorCPRValue(diagnostics, context);
	}

	/**
	 * Validates the validatePriorCPRMoodCode constraint of '<em>Prior CPR</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorCPR_validatePriorCPRMoodCode(PriorCPR priorCPR, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorCPR.validatePriorCPRMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse(PriorAEDUse priorAEDUse, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(priorAEDUse, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(priorAEDUse, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAEDUse_validatePriorAEDUsePriorAEDProviderParticipation(
				priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAEDUse_validatePriorAEDUseTemplateId(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAEDUse_validatePriorAEDUseCode(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAEDUse_validatePriorAEDUseValue(priorAEDUse, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validatePriorAEDUse_validatePriorAEDUseMoodCode(priorAEDUse, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validatePriorAEDUsePriorAEDProviderParticipation constraint of '<em>Prior AED Use</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse_validatePriorAEDUsePriorAEDProviderParticipation(PriorAEDUse priorAEDUse,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAEDUse.validatePriorAEDUsePriorAEDProviderParticipation(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAEDUseTemplateId constraint of '<em>Prior AED Use</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse_validatePriorAEDUseTemplateId(PriorAEDUse priorAEDUse,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAEDUse.validatePriorAEDUseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAEDUseCode constraint of '<em>Prior AED Use</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse_validatePriorAEDUseCode(PriorAEDUse priorAEDUse, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorAEDUse.validatePriorAEDUseCode(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAEDUseValue constraint of '<em>Prior AED Use</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse_validatePriorAEDUseValue(PriorAEDUse priorAEDUse, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return priorAEDUse.validatePriorAEDUseValue(diagnostics, context);
	}

	/**
	 * Validates the validatePriorAEDUseMoodCode constraint of '<em>Prior AED Use</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePriorAEDUse_validatePriorAEDUseMoodCode(PriorAEDUse priorAEDUse,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return priorAEDUse.validatePriorAEDUseMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm(ArrestRhythm arrestRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(arrestRhythm, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(arrestRhythm, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateArrestRhythm_validateArrestRhythmTemplateId(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateArrestRhythm_validateArrestRhythmCode(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateArrestRhythm_validateArrestRhythmValue(arrestRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateArrestRhythm_validateArrestRhythmMoodCode(arrestRhythm, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateArrestRhythmTemplateId constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmTemplateId(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmCode constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmCode(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmValue constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmValue(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmValue(diagnostics, context);
	}

	/**
	 * Validates the validateArrestRhythmMoodCode constraint of '<em>Arrest Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateArrestRhythm_validateArrestRhythmMoodCode(ArrestRhythm arrestRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return arrestRhythm.validateArrestRhythmMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(returnOfSpontaneousCirculation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(returnOfSpontaneousCirculation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationTemplateId(
				returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCode(
				returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValue(
				returnOfSpontaneousCirculation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationMoodCode(
				returnOfSpontaneousCirculation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationTemplateId constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationTemplateId(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationCode constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationCode(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationValue constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationValue(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationValue(diagnostics, context);
	}

	/**
	 * Validates the validateReturnOfSpontaneousCirculationMoodCode constraint of '<em>Return Of Spontaneous Circulation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReturnOfSpontaneousCirculation_validateReturnOfSpontaneousCirculationMoodCode(
			ReturnOfSpontaneousCirculation returnOfSpontaneousCirculation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return returnOfSpontaneousCirculation.validateReturnOfSpontaneousCirculationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm(DestinationRhythm destinationRhythm, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(destinationRhythm, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(destinationRhythm, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDestinationRhythm_validateDestinationRhythmTemplateId(
				destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDestinationRhythm_validateDestinationRhythmCode(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDestinationRhythm_validateDestinationRhythmValue(destinationRhythm, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDestinationRhythm_validateDestinationRhythmMoodCode(
				destinationRhythm, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDestinationRhythmTemplateId constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmTemplateId(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmCode constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmCode(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmCode(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmValue constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmValue(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmValue(diagnostics, context);
	}

	/**
	 * Validates the validateDestinationRhythmMoodCode constraint of '<em>Destination Rhythm</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDestinationRhythm_validateDestinationRhythmMoodCode(DestinationRhythm destinationRhythm,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return destinationRhythm.validateDestinationRhythmMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(abandonedProcedureReasonObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(abandonedProcedureReasonObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationTemplateId(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCodeP(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCode(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValue(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValueP(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationMoodCode(
				abandonedProcedureReasonObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationTemplateId constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationTemplateId(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationCodeP constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCodeP(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationCode constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationCode(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationValue constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValue(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationValueP constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationValueP(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateAbandonedProcedureReasonObservationMoodCode constraint of '<em>Abandoned Procedure Reason Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAbandonedProcedureReasonObservation_validateAbandonedProcedureReasonObservationMoodCode(
			AbandonedProcedureReasonObservation abandonedProcedureReasonObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return abandonedProcedureReasonObservation.validateAbandonedProcedureReasonObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator(ProcedurePriorIndicator procedurePriorIndicator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedurePriorIndicator, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedurePriorIndicator, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorTemplateId(
				procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorCodeP(
				procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorCode(
				procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorValue(
				procedurePriorIndicator, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePriorIndicator_validateProcedurePriorIndicatorMoodCode(
				procedurePriorIndicator, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProcedurePriorIndicatorTemplateId constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorTemplateId(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorCodeP constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorCodeP(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorCode constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorCode(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorValue constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorValue(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePriorIndicatorMoodCode constraint of '<em>Procedure Prior Indicator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePriorIndicator_validateProcedurePriorIndicatorMoodCode(
			ProcedurePriorIndicator procedurePriorIndicator, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePriorIndicator.validateProcedurePriorIndicatorMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNumberOfAttemptsObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedureNumberOfAttemptsObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationTemplateId(
				procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCodeP(
				procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCode(
				procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationValue(
				procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationMoodCode(
				procedureNumberOfAttemptsObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationTemplateId constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationTemplateId(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationCodeP constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCodeP(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationCode constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationCode(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationValue constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationValue(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNumberOfAttemptsObservationMoodCode constraint of '<em>Procedure Number Of Attempts Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNumberOfAttemptsObservation_validateProcedureNumberOfAttemptsObservationMoodCode(
			ProcedureNumberOfAttemptsObservation procedureNumberOfAttemptsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNumberOfAttemptsObservation.validateProcedureNumberOfAttemptsObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureSuccessfulObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedureSuccessfulObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationTemplateId(
				procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCodeP(
				procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCode(
				procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationValue(
				procedureSuccessfulObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationMoodCode(
				procedureSuccessfulObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationTemplateId constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationTemplateId(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationCodeP constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCodeP(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationCode constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationCode(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationValue constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationValue(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSuccessfulObservationMoodCode constraint of '<em>Procedure Successful Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSuccessfulObservation_validateProcedureSuccessfulObservationMoodCode(
			ProcedureSuccessfulObservation procedureSuccessfulObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSuccessfulObservation.validateProcedureSuccessfulObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureComplicationsObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedureComplicationsObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationTemplateId(
				procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCodeP(
				procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCode(
				procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValue(
				procedureComplicationsObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedureComplicationsObservation_validateProcedureComplicationsObservationMoodCode(
				procedureComplicationsObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProcedureComplicationsObservationTemplateId constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationTemplateId(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationCodeP constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCodeP(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationCode constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationCode(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationValue constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationValue(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureComplicationsObservationMoodCode constraint of '<em>Procedure Complications Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureComplicationsObservation_validateProcedureComplicationsObservationMoodCode(
			ProcedureComplicationsObservation procedureComplicationsObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureComplicationsObservation.validateProcedureComplicationsObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedurePatientResponseObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(procedurePatientResponseObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationTemplateId(
				procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCodeP(
				procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCode(
				procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValue(
				procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValueP(
				procedurePatientResponseObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationMoodCode(
				procedurePatientResponseObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationTemplateId constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationTemplateId(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationCodeP constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCodeP(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationCodeP(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationCode constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationCode(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationValue constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValue(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationValueP constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationValueP(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePatientResponseObservationMoodCode constraint of '<em>Procedure Patient Response Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePatientResponseObservation_validateProcedurePatientResponseObservationMoodCode(
			ProcedurePatientResponseObservation procedurePatientResponseObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedurePatientResponseObservation.validateProcedurePatientResponseObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation(AirwayConfirmationObservation airwayConfirmationObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(airwayConfirmationObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(airwayConfirmationObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationTemplateId(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCodeP(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCode(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCode(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCodeP(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationValue(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationEffectiveTime(
				airwayConfirmationObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMoodCode(
				airwayConfirmationObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateAirwayConfirmationObservationTemplateId constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationTemplateId(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationCodeP constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCodeP(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMethodCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMethodCodeP constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMethodCodeP(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMethodCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationValue constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationValue(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationEffectiveTime constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationEffectiveTime(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAirwayConfirmationObservationMoodCode constraint of '<em>Airway Confirmation Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAirwayConfirmationObservation_validateAirwayConfirmationObservationMoodCode(
			AirwayConfirmationObservation airwayConfirmationObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return airwayConfirmationObservation.validateAirwayConfirmationObservationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonProcedureNotAttemptedObservation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(
			reasonProcedureNotAttemptedObservation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationTemplateId(
				reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCode(
				reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValue(
				reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValueP(
				reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationMoodCode(
				reasonProcedureNotAttemptedObservation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationTemplateId constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationTemplateId(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationCode constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationCode(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationCode(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationValue constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValue(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationValue(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationValueP constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationValueP(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationValueP(
			diagnostics, context);
	}

	/**
	 * Validates the validateReasonProcedureNotAttemptedObservationMoodCode constraint of '<em>Reason Procedure Not Attempted Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonProcedureNotAttemptedObservation_validateReasonProcedureNotAttemptedObservationMoodCode(
			ReasonProcedureNotAttemptedObservation reasonProcedureNotAttemptedObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reasonProcedureNotAttemptedObservation.validateReasonProcedureNotAttemptedObservationMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType(ComplaintType complaintType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintType, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(complaintType, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeTemplateId(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeCodeP(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeCode(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeValue(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeValueP(complaintType, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintType_validateComplaintTypeMoodCode(complaintType, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateComplaintTypeTemplateId constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeTemplateId(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeCodeP constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeCodeP(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeCode constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeCode(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeValue constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeValue(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeValueP constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeValueP(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeValueP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintTypeMoodCode constraint of '<em>Complaint Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintType_validateComplaintTypeMoodCode(ComplaintType complaintType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintType.validateComplaintTypeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration(ComplaintDuration complaintDuration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintDuration, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(complaintDuration, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintDuration_validateComplaintDurationTemplateId(
				complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintDuration_validateComplaintDurationCodeP(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintDuration_validateComplaintDurationCode(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintDuration_validateComplaintDurationValue(complaintDuration, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintDuration_validateComplaintDurationMoodCode(
				complaintDuration, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateComplaintDurationTemplateId constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationTemplateId(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationCodeP constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationCodeP(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationCode constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationCode(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationValue constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationValue(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintDurationMoodCode constraint of '<em>Complaint Duration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintDuration_validateComplaintDurationMoodCode(ComplaintDuration complaintDuration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintDuration.validateComplaintDurationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem(ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complaintOrganSystem, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(complaintOrganSystem, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemTemplateId(
				complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemCodeP(
				complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemCode(
				complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemValue(
				complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemValueP(
				complaintOrganSystem, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateComplaintOrganSystem_validateComplaintOrganSystemMoodCode(
				complaintOrganSystem, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateComplaintOrganSystemTemplateId constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemTemplateId(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemCodeP constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemCodeP(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemCode constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemCode(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemCode(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemValue constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemValue(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemValue(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemValueP constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemValueP(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemValueP(diagnostics, context);
	}

	/**
	 * Validates the validateComplaintOrganSystemMoodCode constraint of '<em>Complaint Organ System</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplaintOrganSystem_validateComplaintOrganSystemMoodCode(
			ComplaintOrganSystem complaintOrganSystem, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complaintOrganSystem.validateComplaintOrganSystemMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment(NeurologicalAssessment neurologicalAssessment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(neurologicalAssessment, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(neurologicalAssessment, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentTemplateId(
				neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentCodeP(
				neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentCode(
				neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentValue(
				neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentValueP(
				neurologicalAssessment, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateNeurologicalAssessment_validateNeurologicalAssessmentMoodCode(
				neurologicalAssessment, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateNeurologicalAssessmentTemplateId constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentTemplateId(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentCodeP constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentCodeP(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentCode constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentCode(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentCode(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentValue constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentValue(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentValue(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentValueP constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentValueP(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentValueP(diagnostics, context);
	}

	/**
	 * Validates the validateNeurologicalAssessmentMoodCode constraint of '<em>Neurological Assessment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNeurologicalAssessment_validateNeurologicalAssessmentMoodCode(
			NeurologicalAssessment neurologicalAssessment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return neurologicalAssessment.validateNeurologicalAssessmentMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfProcedures(
			ExistenceOfHistoryOfProcedures existenceOfHistoryOfProcedures, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(existenceOfHistoryOfProcedures, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(existenceOfHistoryOfProcedures, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresTemplateId(
				existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresCode(
				existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresValue(
				existenceOfHistoryOfProcedures, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresMoodCode(
				existenceOfHistoryOfProcedures, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateExistenceOfHistoryOfProceduresTemplateId constraint of '<em>Existence Of History Of Procedures</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresTemplateId(
			ExistenceOfHistoryOfProcedures existenceOfHistoryOfProcedures, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfProcedures.validateExistenceOfHistoryOfProceduresTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfProceduresCode constraint of '<em>Existence Of History Of Procedures</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresCode(
			ExistenceOfHistoryOfProcedures existenceOfHistoryOfProcedures, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfProcedures.validateExistenceOfHistoryOfProceduresCode(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfProceduresValue constraint of '<em>Existence Of History Of Procedures</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresValue(
			ExistenceOfHistoryOfProcedures existenceOfHistoryOfProcedures, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfProcedures.validateExistenceOfHistoryOfProceduresValue(diagnostics, context);
	}

	/**
	 * Validates the validateExistenceOfHistoryOfProceduresMoodCode constraint of '<em>Existence Of History Of Procedures</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExistenceOfHistoryOfProcedures_validateExistenceOfHistoryOfProceduresMoodCode(
			ExistenceOfHistoryOfProcedures existenceOfHistoryOfProcedures, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return existenceOfHistoryOfProcedures.validateExistenceOfHistoryOfProceduresMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure(SystolicBloodPressure systolicBloodPressure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(systolicBloodPressure, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(systolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReference(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationReferenceValue(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReferenceValue(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSystolicBloodPressure_validateVitalSignObservationTemplateId(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationClassCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMoodCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationId(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCodeP(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationStatusCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationValue(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMethodCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationText(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationAuthor(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSystolicBloodPressure_validateSystolicBloodPressureCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSystolicBloodPressure_validateSystolicBloodPressureValue(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSystolicBloodPressure_validateSystolicBloodPressureMoodCode(
				systolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSystolicBloodPressure_validateSystolicBloodPressureEffectiveTime(
				systolicBloodPressure, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSystolicBloodPressureCode constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureCode(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureCode(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureValue constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureValue(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureValue(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureMoodCode constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureMoodCode(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSystolicBloodPressureEffectiveTime constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateSystolicBloodPressureEffectiveTime(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateSystolicBloodPressureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Systolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSystolicBloodPressure_validateVitalSignObservationTemplateId(
			SystolicBloodPressure systolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return systolicBloodPressure.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure(DiastolicBloodPressure diastolicBloodPressure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diastolicBloodPressure, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(diastolicBloodPressure, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReference(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationReferenceValue(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReferenceValue(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDiastolicBloodPressure_validateVitalSignObservationTemplateId(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationClassCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMoodCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationId(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCodeP(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationStatusCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationValue(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMethodCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationText(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationAuthor(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureCode(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureValue(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureEffectiveTime(
				diastolicBloodPressure, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDiastolicBloodPressure_validateDiastolicBloodPressureMoodCode(
				diastolicBloodPressure, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDiastolicBloodPressureCode constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureCode(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureCode(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureValue constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureValue(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureValue(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureEffectiveTime constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureEffectiveTime(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateDiastolicBloodPressureMoodCode constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateDiastolicBloodPressureMoodCode(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateDiastolicBloodPressureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Diastolic Blood Pressure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiastolicBloodPressure_validateVitalSignObservationTemplateId(
			DiastolicBloodPressure diastolicBloodPressure, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diastolicBloodPressure.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate(HeartRate heartRate, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(heartRate, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(heartRate, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReference(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationReferenceValue(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReferenceValue(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateVitalSignObservationTemplateId(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationClassCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMoodCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationId(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCodeP(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationStatusCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationValue(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMethodCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationText(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationAuthor(
				heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateHeartRateCodeP(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateHeartRateCode(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateHeartRateValue(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateHeartRateEffectiveTime(heartRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateHeartRate_validateHeartRateMoodCode(heartRate, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateHeartRateCodeP constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateCodeP(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateCode constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateCode(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateCode(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateValue constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateValue(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateValue(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateEffectiveTime constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateEffectiveTime(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHeartRateMoodCode constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateHeartRateMoodCode(HeartRate heartRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return heartRate.validateHeartRateMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Heart Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHeartRate_validateVitalSignObservationTemplateId(HeartRate heartRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return heartRate.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate(RespiratoryRate respiratoryRate, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(respiratoryRate, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(respiratoryRate, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReference(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationReferenceValue(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReferenceValue(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateRespiratoryRate_validateVitalSignObservationTemplateId(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationClassCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMoodCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationId(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCodeP(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationStatusCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationValue(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMethodCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationText(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationAuthor(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateRespiratoryRate_validateRespiratoryRateCode(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateRespiratoryRate_validateRespiratoryRateValue(respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateRespiratoryRate_validateRespiratoryRateEffectiveTime(
				respiratoryRate, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateRespiratoryRate_validateRespiratoryRateMoodCode(respiratoryRate, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateRespiratoryRateCode constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateCode(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateCode(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateValue constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateValue(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateValue(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateEffectiveTime constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateEffectiveTime(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateRespiratoryRateMoodCode constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateRespiratoryRateMoodCode(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateRespiratoryRateMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Respiratory Rate</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRespiratoryRate_validateVitalSignObservationTemplateId(RespiratoryRate respiratoryRate,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return respiratoryRate.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature(BodyTemperature bodyTemperature, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(bodyTemperature, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(bodyTemperature, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReference(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationReferenceValue(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTextReferenceValue(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBodyTemperature_validateVitalSignObservationTemplateId(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationClassCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMoodCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationId(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCodeP(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationStatusCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationValue(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationMethodCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationText(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= consolValidator.validateVitalSignObservation_validateVitalSignObservationAuthor(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBodyTemperature_validateBodyTemperatureCode(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBodyTemperature_validateBodyTemperatureValue(bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBodyTemperature_validateBodyTemperatureEffectiveTime(
				bodyTemperature, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateBodyTemperature_validateBodyTemperatureMoodCode(bodyTemperature, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateBodyTemperatureCode constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureCode(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureCode(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureValue constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureValue(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureValue(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureEffectiveTime constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureEffectiveTime(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateBodyTemperatureMoodCode constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateBodyTemperatureMoodCode(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateBodyTemperatureMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Body Temperature</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBodyTemperature_validateVitalSignObservationTemplateId(BodyTemperature bodyTemperature,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return bodyTemperature.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation(OxygenSaturation oxygenSaturation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(oxygenSaturation, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(oxygenSaturation, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOxygenSaturation_validateOxygenSaturationTemplateId(
				oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOxygenSaturation_validateOxygenSaturationCode(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOxygenSaturation_validateOxygenSaturationValue(oxygenSaturation, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateOxygenSaturation_validateOxygenSaturationMoodCode(oxygenSaturation, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateOxygenSaturationTemplateId constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationTemplateId(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationCode constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationCode(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationCode(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationValue constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationValue(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationValue(diagnostics, context);
	}

	/**
	 * Validates the validateOxygenSaturationMoodCode constraint of '<em>Oxygen Saturation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOxygenSaturation_validateOxygenSaturationMoodCode(OxygenSaturation oxygenSaturation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return oxygenSaturation.validateOxygenSaturationMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory(ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(protocolAgeCategory, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(protocolAgeCategory, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryTemplateId(
				protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryCodeP(
				protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryCode(
				protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryValue(
				protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryValueP(
				protocolAgeCategory, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateProtocolAgeCategory_validateProtocolAgeCategoryMoodCode(
				protocolAgeCategory, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateProtocolAgeCategoryTemplateId constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryTemplateId(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryCodeP constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryCodeP(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryCode constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryCode(ProtocolAgeCategory protocolAgeCategory,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryCode(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryValue constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryValue(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryValue(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryValueP constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryValueP(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryValueP(diagnostics, context);
	}

	/**
	 * Validates the validateProtocolAgeCategoryMoodCode constraint of '<em>Protocol Age Category</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProtocolAgeCategory_validateProtocolAgeCategoryMoodCode(
			ProtocolAgeCategory protocolAgeCategory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return protocolAgeCategory.validateProtocolAgeCategoryMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName(DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationName, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationName, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationName_validateDispatchLocationNameTemplateId(
				dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationName_validateDispatchLocationNameCode(
				dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationName_validateDispatchLocationNameValue(
				dispatchLocationName, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationName_validateDispatchLocationNameMoodCode(
				dispatchLocationName, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchLocationNameTemplateId constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameTemplateId(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameCode constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameCode(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameValue constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameValue(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationNameMoodCode constraint of '<em>Dispatch Location Name</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationName_validateDispatchLocationNameMoodCode(
			DispatchLocationName dispatchLocationName, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationName.validateDispatchLocationNameMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude(DispatchLocationLatitude dispatchLocationLatitude,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationLatitude, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationLatitude, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeTemplateId(
				dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeCode(
				dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeValue(
				dispatchLocationLatitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLatitude_validateDispatchLocationLatitudeMoodCode(
				dispatchLocationLatitude, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchLocationLatitudeTemplateId constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeTemplateId(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeCode constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeCode(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeValue constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeValue(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLatitudeMoodCode constraint of '<em>Dispatch Location Latitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLatitude_validateDispatchLocationLatitudeMoodCode(
			DispatchLocationLatitude dispatchLocationLatitude, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchLocationLatitude.validateDispatchLocationLatitudeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude(DispatchLocationLongitude dispatchLocationLongitude,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchLocationLongitude, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchLocationLongitude, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeTemplateId(
				dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeCode(
				dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeValue(
				dispatchLocationLongitude, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchLocationLongitude_validateDispatchLocationLongitudeMoodCode(
				dispatchLocationLongitude, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchLocationLongitudeTemplateId constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeTemplateId(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeCode constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeCode(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeValue constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeValue(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchLocationLongitudeMoodCode constraint of '<em>Dispatch Location Longitude</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchLocationLongitude_validateDispatchLocationLongitudeMoodCode(
			DispatchLocationLongitude dispatchLocationLongitude, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dispatchLocationLongitude.validateDispatchLocationLongitudeMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay(DispatchDelay dispatchDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dispatchDelay, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(dispatchDelay, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayTemplateId(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayCodeP(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayCode(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayValue(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayValueP(dispatchDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateDispatchDelay_validateDispatchDelayMoodCode(dispatchDelay, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateDispatchDelayTemplateId constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayTemplateId(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayCodeP constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayCodeP(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayCode constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayCode(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayValue constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayValue(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayValueP constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayValueP(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayValueP(diagnostics, context);
	}

	/**
	 * Validates the validateDispatchDelayMoodCode constraint of '<em>Dispatch Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDispatchDelay_validateDispatchDelayMoodCode(DispatchDelay dispatchDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dispatchDelay.validateDispatchDelayMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay(ResponseDelay responseDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseDelay, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseDelay, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayTemplateId(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayCodeP(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayCode(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayValue(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayValueP(responseDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDelay_validateResponseDelayMoodCode(responseDelay, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseDelayTemplateId constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayTemplateId(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayCodeP constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayCodeP(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayCode constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayCode(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayValue constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayValue(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayValueP constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayValueP(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayValueP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDelayMoodCode constraint of '<em>Response Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDelay_validateResponseDelayMoodCode(ResponseDelay responseDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return responseDelay.validateResponseDelayMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay(SceneDelay sceneDelay, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(sceneDelay, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(sceneDelay, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayTemplateId(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayCodeP(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayCode(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayValue(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayValueP(sceneDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateSceneDelay_validateSceneDelayMoodCode(sceneDelay, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateSceneDelayTemplateId constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayTemplateId(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayCodeP constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayCodeP(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayCode constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayCode(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayValue constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayValue(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayValueP constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayValueP(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayValueP(diagnostics, context);
	}

	/**
	 * Validates the validateSceneDelayMoodCode constraint of '<em>Scene Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSceneDelay_validateSceneDelayMoodCode(SceneDelay sceneDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return sceneDelay.validateSceneDelayMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay(TransportDelay transportDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(transportDelay, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(transportDelay, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayTemplateId(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayCodeP(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayCode(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayValue(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayValueP(transportDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTransportDelay_validateTransportDelayMoodCode(transportDelay, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTransportDelayTemplateId constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayTemplateId(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayCodeP constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayCodeP(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayCode constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayCode(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayValue constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayValue(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayValueP constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayValueP(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayValueP(diagnostics, context);
	}

	/**
	 * Validates the validateTransportDelayMoodCode constraint of '<em>Transport Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTransportDelay_validateTransportDelayMoodCode(TransportDelay transportDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return transportDelay.validateTransportDelayMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay(TurnaroundDelay turnaroundDelay, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(turnaroundDelay, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(turnaroundDelay, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayTemplateId(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayCodeP(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayCode(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayValue(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayValueP(turnaroundDelay, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateTurnaroundDelay_validateTurnaroundDelayMoodCode(turnaroundDelay, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateTurnaroundDelayTemplateId constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayTemplateId(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayCodeP constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayCodeP(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayCode constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayCode(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayCode(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayValue constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayValue(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayValue(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayValueP constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayValueP(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayValueP(diagnostics, context);
	}

	/**
	 * Validates the validateTurnaroundDelayMoodCode constraint of '<em>Turnaround Delay</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTurnaroundDelay_validateTurnaroundDelayMoodCode(TurnaroundDelay turnaroundDelay,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return turnaroundDelay.validateTurnaroundDelayMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseBeginningOdometerReading, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseBeginningOdometerReading, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingTemplateId(
				responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCodeP(
				responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCode(
				responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingValue(
				responseBeginningOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingMoodCode(
				responseBeginningOdometerReading, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingTemplateId constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingTemplateId(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingCodeP constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCodeP(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingCode constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingCode(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingValue constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingValue(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseBeginningOdometerReadingMoodCode constraint of '<em>Response Beginning Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseBeginningOdometerReading_validateResponseBeginningOdometerReadingMoodCode(
			ResponseBeginningOdometerReading responseBeginningOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseBeginningOdometerReading.validateResponseBeginningOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseOnSceneOdometerReading, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseOnSceneOdometerReading, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingTemplateId(
				responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCodeP(
				responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCode(
				responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingValue(
				responseOnSceneOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingMoodCode(
				responseOnSceneOdometerReading, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingTemplateId constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingTemplateId(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingCodeP constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCodeP(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingCode constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingCode(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingValue constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingValue(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseOnSceneOdometerReadingMoodCode constraint of '<em>Response On Scene Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseOnSceneOdometerReading_validateResponseOnSceneOdometerReadingMoodCode(
			ResponseOnSceneOdometerReading responseOnSceneOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseOnSceneOdometerReading.validateResponseOnSceneOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseDestinationOdometerReading, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseDestinationOdometerReading, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingTemplateId(
				responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCodeP(
				responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCode(
				responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingValue(
				responseDestinationOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingMoodCode(
				responseDestinationOdometerReading, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingTemplateId constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingTemplateId(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingTemplateId(
			diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingCodeP constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCodeP(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingCode constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingCode(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingValue constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingValue(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseDestinationOdometerReadingMoodCode constraint of '<em>Response Destination Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseDestinationOdometerReading_validateResponseDestinationOdometerReadingMoodCode(
			ResponseDestinationOdometerReading responseDestinationOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseDestinationOdometerReading.validateResponseDestinationOdometerReadingMoodCode(
			diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading(ResponseEndingOdometerReading responseEndingOdometerReading,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responseEndingOdometerReading, diagnostics, context)) {
			return false;
		}
		boolean result = validate_EveryMultiplicityConforms(responseEndingOdometerReading, diagnostics, context);
		if (result || diagnostics != null) {
			result &= validate_EveryDataValueConforms(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryReferenceIsContained(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryProxyResolves(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_UniqueID(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryKeyUnique(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validate_EveryMapEntryUnique(responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingTemplateId(
				responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCodeP(
				responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCode(
				responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingValue(
				responseEndingOdometerReading, diagnostics, context);
		}
		if (result || diagnostics != null) {
			result &= validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingMoodCode(
				responseEndingOdometerReading, diagnostics, context);
		}
		return result;
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingTemplateId constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingTemplateId(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingCodeP constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCodeP(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingCodeP(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingCode constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingCode(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingCode(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingValue constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingValue(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingValue(diagnostics, context);
	}

	/**
	 * Validates the validateResponseEndingOdometerReadingMoodCode constraint of '<em>Response Ending Odometer Reading</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponseEndingOdometerReading_validateResponseEndingOdometerReadingMoodCode(
			ResponseEndingOdometerReading responseEndingOdometerReading, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return responseEndingOdometerReading.validateResponseEndingOdometerReadingMoodCode(diagnostics, context);
	}

	/**
	 * Returns the resource locator that will be used to fetch messages for this validator's diagnostics.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return EmspcrPlugin.INSTANCE;
	}

} // EmspcrValidator
