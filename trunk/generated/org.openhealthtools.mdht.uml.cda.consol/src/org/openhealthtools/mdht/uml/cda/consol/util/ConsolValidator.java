/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openhealthtools.mdht.uml.cda.consol.util;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.EObjectValidator;

import org.openhealthtools.mdht.uml.cda.consol.*;

import org.openhealthtools.mdht.uml.cda.util.CDAValidator;

/**
 * <!-- begin-user-doc -->
 * The <b>Validator</b> for the model.
 * <!-- end-user-doc -->
 * @see org.openhealthtools.mdht.uml.cda.consol.ConsolPackage
 * @generated
 */
public class ConsolValidator extends EObjectValidator {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final ConsolValidator INSTANCE = new ConsolValidator();

	/**
	 * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.common.util.Diagnostic#getSource()
	 * @see org.eclipse.emf.common.util.Diagnostic#getCode()
	 * @generated
	 */
	public static final String DIAGNOSTIC_SOURCE = "org.openhealthtools.mdht.uml.cda.consol";

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints US Realm Address' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_US_REALM_ADDRESS = 1;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints US Realm Patient Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_US_REALM_PATIENT_NAME = 2;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 3;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Realm Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_REALM_CODE = 4;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Type Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_TYPE_ID = 5;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_ID = 6;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CODE = 7;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Title' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_TITLE = 8;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Effective Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_EFFECTIVE_TIME = 9;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Confidentiality Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CONFIDENTIALITY_CODE = 10;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Language Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LANGUAGE_CODE = 11;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Set Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_SET_ID = 12;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Version Number' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_VERSION_NUMBER = 13;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR = 14;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER = 15;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN = 16;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT = 17;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR = 18;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR = 19;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET = 20;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Component Of' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF = 21;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT = 22;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Support Participant' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_SUPPORT_PARTICIPANT = 23;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints In Fulfillment Of' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_IN_FULFILLMENT_OF = 24;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Authoring Device Manufacturer Model Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_AUTHORING_DEVICE_MANUFACTURER_MODEL_NAME = 25;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Authoring Device Software Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_AUTHORING_DEVICE_SOFTWARE_NAME = 26;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_PERSON_NAME = 27;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Has Assigned Person Or Assigned Authoring Device' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_HAS_ASSIGNED_PERSON_OR_ASSIGNED_AUTHORING_DEVICE = 28;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_HAS_NATIONAL_PROVIDER_IDENTIFIER = 29;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_ADDR = 30;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_CODE = 31;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_ID = 32;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR_TELECOM = 33;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Author Assigned Author' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHOR_ASSIGNED_AUTHOR = 34;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_PERSON_NAME = 35;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 36;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_ADDR = 37;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_CODE = 38;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_ID = 39;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_TELECOM = 40;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity Assigned Person' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY_ASSIGNED_PERSON = 41;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Data Enterer Assigned Entity' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER_ASSIGNED_ENTITY = 42;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Custodian Organization Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION_HAS_NATIONAL_PROVIDER_IDENTIFIER = 43;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Custodian Organization Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION_ADDR = 44;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Custodian Organization Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION_ID = 45;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Custodian Organization Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION_NAME = 46;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Custodian Organization Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION_TELECOM = 47;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian Represented Custodian Organization' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN_REPRESENTED_CUSTODIAN_ORGANIZATION = 48;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Custodian Assigned Custodian' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_CUSTODIAN_ASSIGNED_CUSTODIAN = 49;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient Intended Recipient Organization Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT_INTENDED_RECIPIENT_ORGANIZATION_NAME = 50;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient Intended Recipient Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT_INTENDED_RECIPIENT_PERSON_NAME = 51;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient Intended Recipient Information Recipient' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT_INTENDED_RECIPIENT_INFORMATION_RECIPIENT = 52;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient Intended Recipient Recieved Organization' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT_INTENDED_RECIPIENT_RECIEVED_ORGANIZATION = 53;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Information Recipient Intended Recipient' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT_INTENDED_RECIPIENT = 54;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_PERSON_NAME = 55;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 56;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_ADDR = 57;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_CODE = 58;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_ID = 59;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_TELECOM = 60;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Assigned Entity Assigned Person' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_ASSIGNED_PERSON = 61;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_TIME = 62;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Legal Authenticator Signature Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR_SIGNATURE_CODE = 63;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_PERSON_NAME = 64;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 65;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_ADDR = 66;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_CODE = 67;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_ID = 68;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY_TELECOM = 69;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_TIME = 70;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Signature Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_SIGNATURE_CODE = 71;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Authenticator Assigned Entity' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR_ASSIGNED_ENTITY = 72;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Provider Organization Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PROVIDER_ORGANIZATION_HAS_NATIONAL_PROVIDER_IDENTIFIER = 73;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Provider Organization Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PROVIDER_ORGANIZATION_ADDR = 74;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Provider Organization Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PROVIDER_ORGANIZATION_ID = 75;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Provider Organization Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PROVIDER_ORGANIZATION_NAME = 76;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Provider Organization Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PROVIDER_ORGANIZATION_TELECOM = 77;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Language Communication Language Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_LANGUAGE_COMMUNICATION_LANGUAGE_CODE = 78;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Language Communication Preference Ind' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_LANGUAGE_COMMUNICATION_PREFERENCE_IND = 79;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Language Communication Proficiency Level Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_LANGUAGE_COMMUNICATION_PROFICIENCY_LEVEL_CODE = 80;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Language Communication Mode Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_LANGUAGE_COMMUNICATION_MODE_CODE = 81;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birthplace Place Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTHPLACE_PLACE_ADDR = 82;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birthplace Place' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTHPLACE_PLACE = 83;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN_PERSON_NAME = 84;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN_ADDR = 85;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN_CODE = 86;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN_TELECOM = 87;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian Guardian Person' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN_GUARDIAN_PERSON = 88;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birth Time Precise To Year' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTH_TIME_PRECISE_TO_YEAR = 89;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birth Time Precise To Day' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTH_TIME_PRECISE_TO_DAY = 90;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birth Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTH_TIME = 91;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Ethnic Group Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_ETHNIC_GROUP_CODE = 92;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Marital Status Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_MARITAL_STATUS_CODE = 93;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_NAME = 94;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Race Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_RACE_CODE = 95;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Religious Affiliation Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_RELIGIOUS_AFFILIATION_CODE = 96;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Guardian' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_GUARDIAN = 97;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Birthplace' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_BIRTHPLACE = 98;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient Language Communication' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT_LANGUAGE_COMMUNICATION = 99;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_ADDR = 100;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_ID = 101;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Telecom' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_TELECOM = 102;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role Patient' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE_PATIENT = 103;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Record Target Patient Role' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET_PATIENT_ROLE = 104;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Component Of Encompassing Encounter Effective Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF_ENCOMPASSING_ENCOUNTER_EFFECTIVE_TIME = 105;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Component Of Encompassing Encounter Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF_ENCOMPASSING_ENCOUNTER_ID = 106;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Component Of Encompassing Encounter' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 107;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Related Entity Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_RELATED_ENTITY_PERSON_NAME = 108;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Related Entity Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_RELATED_ENTITY_ADDR = 109;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Related Entity Person' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_RELATED_ENTITY_PERSON = 110;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Person Name' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_PERSON_NAME = 111;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Has National Provider Identifier' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 112;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Addr' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_ADDR = 113;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Code' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_CODE = 114;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_ID = 115;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Assigned Entity Person' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_ASSIGNED_ENTITY_PERSON = 116;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Informant Has Assigned Entity Or Related Entity' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_INFORMANT_HAS_ASSIGNED_ENTITY_OR_RELATED_ENTITY = 117;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Participant Support Associated Entity Has Associated Person Or Scoping Organization' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_PARTICIPANT_SUPPORT_ASSOCIATED_ENTITY_HAS_ASSOCIATED_PERSON_OR_SCOPING_ORGANIZATION = 118;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Participant Support Time' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_PARTICIPANT_SUPPORT_TIME = 119;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints In Fulfillment Of Order Id' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_IN_FULFILLMENT_OF_ORDER_ID = 120;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints In Fulfillment Of Order' of 'General Header Constraints'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS__GENERAL_HEADER_CONSTRAINTS_IN_FULFILLMENT_OF_ORDER = 121;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Record Target Patient Role' of 'General Header Constraints Record Target'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET__RECORD_TARGET_PATIENT_ROLE = 122;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Role Addr' of 'Record Target Patient Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RECORD_TARGET_PATIENT_ROLE__PATIENT_ROLE_ADDR = 123;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Role Id' of 'Record Target Patient Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RECORD_TARGET_PATIENT_ROLE__PATIENT_ROLE_ID = 124;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Role Telecom' of 'Record Target Patient Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RECORD_TARGET_PATIENT_ROLE__PATIENT_ROLE_TELECOM = 125;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Role Patient' of 'Record Target Patient Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RECORD_TARGET_PATIENT_ROLE__PATIENT_ROLE_PATIENT = 126;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Birth Time Precise To Year' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_BIRTH_TIME_PRECISE_TO_YEAR = 127;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Birth Time Precise To Day' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_BIRTH_TIME_PRECISE_TO_DAY = 128;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Birth Time' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_BIRTH_TIME = 129;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Ethnic Group Code' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_ETHNIC_GROUP_CODE = 130;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Marital Status Code' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_MARITAL_STATUS_CODE = 131;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Name' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_NAME = 132;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Race Code' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_RACE_CODE = 133;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Religious Affiliation Code' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_RELIGIOUS_AFFILIATION_CODE = 134;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Guardian' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_GUARDIAN = 135;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Birthplace' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_BIRTHPLACE = 136;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Language Communication' of 'Patient Role Patient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PATIENT__PATIENT_LANGUAGE_COMMUNICATION = 137;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Guardian Addr' of 'Patient Guardian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_GUARDIAN__GUARDIAN_ADDR = 138;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Guardian Code' of 'Patient Guardian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_GUARDIAN__GUARDIAN_CODE = 139;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Guardian Telecom' of 'Patient Guardian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_GUARDIAN__GUARDIAN_TELECOM = 140;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Guardian Guardian Person' of 'Patient Guardian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_GUARDIAN__GUARDIAN_GUARDIAN_PERSON = 141;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Communication Language Code' of 'Patient Language Communication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LANGUAGE_COMMUNICATION__LANGUAGE_COMMUNICATION_LANGUAGE_CODE = 142;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Communication Preference Ind' of 'Patient Language Communication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LANGUAGE_COMMUNICATION__LANGUAGE_COMMUNICATION_PREFERENCE_IND = 143;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Communication Proficiency Level Code' of 'Patient Language Communication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LANGUAGE_COMMUNICATION__LANGUAGE_COMMUNICATION_PROFICIENCY_LEVEL_CODE = 144;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Communication Mode Code' of 'Patient Language Communication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_LANGUAGE_COMMUNICATION__LANGUAGE_COMMUNICATION_MODE_CODE = 145;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Birthplace Place' of 'Patient Birthplace'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_BIRTHPLACE__BIRTHPLACE_PLACE = 146;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Place Addr' of 'Birthplace Place'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BIRTHPLACE_PLACE__PLACE_ADDR = 147;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Organization Has National Provider Identifier' of 'Patient Role Provider Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PROVIDER_ORGANIZATION__PROVIDER_ORGANIZATION_HAS_NATIONAL_PROVIDER_IDENTIFIER = 148;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Organization Addr' of 'Patient Role Provider Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PROVIDER_ORGANIZATION__PROVIDER_ORGANIZATION_ADDR = 149;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Organization Id' of 'Patient Role Provider Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PROVIDER_ORGANIZATION__PROVIDER_ORGANIZATION_ID = 150;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Organization Name' of 'Patient Role Provider Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PROVIDER_ORGANIZATION__PROVIDER_ORGANIZATION_NAME = 151;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Provider Organization Telecom' of 'Patient Role Provider Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PATIENT_ROLE_PROVIDER_ORGANIZATION__PROVIDER_ORGANIZATION_TELECOM = 152;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter' of 'General Header Constraints Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 153;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter Effective Time' of 'Component Of Encompassing Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER__ENCOMPASSING_ENCOUNTER_EFFECTIVE_TIME = 154;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter Id' of 'Component Of Encompassing Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER__ENCOMPASSING_ENCOUNTER_ID = 155;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Author Assigned Author' of 'General Header Constraints Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_AUTHOR__AUTHOR_ASSIGNED_AUTHOR = 156;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Has Assigned Person Or Assigned Authoring Device' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_HAS_ASSIGNED_PERSON_OR_ASSIGNED_AUTHORING_DEVICE = 157;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Has National Provider Identifier' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_HAS_NATIONAL_PROVIDER_IDENTIFIER = 158;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Addr' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_ADDR = 159;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Code' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_CODE = 160;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Id' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_ID = 161;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author Telecom' of 'Author Assigned Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR__ASSIGNED_AUTHOR_TELECOM = 162;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authoring Device Manufacturer Model Name' of 'Assigned Author Authoring Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_AUTHOR_AUTHORING_DEVICE__AUTHORING_DEVICE_MANUFACTURER_MODEL_NAME = 163;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authoring Device Software Name' of 'Assigned Author Authoring Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_AUTHOR_AUTHORING_DEVICE__AUTHORING_DEVICE_SOFTWARE_NAME = 164;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Person Name' of 'General Header Constraints Person'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_PERSON__PERSON_NAME = 165;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Data Enterer Assigned Entity' of 'General Header Constraints Data Enterer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER__DATA_ENTERER_ASSIGNED_ENTITY = 166;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Has National Provider Identifier' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 167;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Addr' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ADDR = 168;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 169;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 170;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Telecom' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_TELECOM = 171;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Assigned Person' of 'Data Enterer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DATA_ENTERER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ASSIGNED_PERSON = 172;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Assigned Custodian' of 'General Header Constraints Custodian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_CUSTODIAN__CUSTODIAN_ASSIGNED_CUSTODIAN = 173;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Custodian Represented Custodian Organization' of 'Custodian Assigned Custodian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_ASSIGNED_CUSTODIAN__ASSIGNED_CUSTODIAN_REPRESENTED_CUSTODIAN_ORGANIZATION = 174;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Has National Provider Identifier' of 'Assigned Custodian Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_HAS_NATIONAL_PROVIDER_IDENTIFIER = 175;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Addr' of 'Assigned Custodian Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_ADDR = 176;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Id' of 'Assigned Custodian Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_ID = 177;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Name' of 'Assigned Custodian Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_NAME = 178;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Telecom' of 'Assigned Custodian Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_TELECOM = 179;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Information Recipient Intended Recipient' of 'General Header Constraints Information Recipient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT__INFORMATION_RECIPIENT_INTENDED_RECIPIENT = 180;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Intended Recipient Information Recipient' of 'Information Recipient Intended Recipient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMATION_RECIPIENT_INTENDED_RECIPIENT__INTENDED_RECIPIENT_INFORMATION_RECIPIENT = 181;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Intended Recipient Recieved Organization' of 'Information Recipient Intended Recipient'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMATION_RECIPIENT_INTENDED_RECIPIENT__INTENDED_RECIPIENT_RECIEVED_ORGANIZATION = 182;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Organization Name' of 'Intended Recipient Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTENDED_RECIPIENT_ORGANIZATION__ORGANIZATION_NAME = 183;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Legal Authenticator Time' of 'General Header Constraints Legal Authenticator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR__LEGAL_AUTHENTICATOR_TIME = 184;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Legal Authenticator Signature Code' of 'General Header Constraints Legal Authenticator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR__LEGAL_AUTHENTICATOR_SIGNATURE_CODE = 185;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Has National Provider Identifier' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 186;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Addr' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ADDR = 187;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 188;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 189;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Telecom' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_TELECOM = 190;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Assigned Person' of 'Legal Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ASSIGNED_PERSON = 191;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authenticator Time' of 'General Header Constraints Authenticator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR__AUTHENTICATOR_TIME = 192;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authenticator Signature Code' of 'General Header Constraints Authenticator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR__AUTHENTICATOR_SIGNATURE_CODE = 193;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authenticator Assigned Entity' of 'General Header Constraints Authenticator'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR__AUTHENTICATOR_ASSIGNED_ENTITY = 194;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Has National Provider Identifier' of 'Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 195;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Addr' of 'Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ADDR = 196;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 197;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 198;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Telecom' of 'Authenticator Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHENTICATOR_ASSIGNED_ENTITY__ASSIGNED_ENTITY_TELECOM = 199;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Informant Has Assigned Entity Or Related Entity' of 'General Header Constraints Informant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_INFORMANT__INFORMANT_HAS_ASSIGNED_ENTITY_OR_RELATED_ENTITY = 200;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Has National Provider Identifier' of 'Informant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 201;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Addr' of 'Informant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ADDR = 202;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Informant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 203;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Informant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 204;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Person' of 'Informant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_PERSON = 205;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Related Entity Addr' of 'Informant Related Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_RELATED_ENTITY__RELATED_ENTITY_ADDR = 206;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Related Entity Person' of 'Informant Related Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INFORMANT_RELATED_ENTITY__RELATED_ENTITY_PERSON = 207;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Participant Support Associated Entity Has Associated Person Or Scoping Organization' of 'General Header Constraints Participant Support'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_PARTICIPANT_SUPPORT__PARTICIPANT_SUPPORT_ASSOCIATED_ENTITY_HAS_ASSOCIATED_PERSON_OR_SCOPING_ORGANIZATION = 208;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Participant Support Time' of 'General Header Constraints Participant Support'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_PARTICIPANT_SUPPORT__PARTICIPANT_SUPPORT_TIME = 209;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate In Fulfillment Of Order' of 'General Header Constraints In Fulfillment Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_HEADER_CONSTRAINTS_IN_FULFILLMENT_OF__IN_FULFILLMENT_OF_ORDER = 210;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Order Id' of 'In Fulfillment Of Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IN_FULFILLMENT_OF_ORDER__ORDER_ID = 211;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Effective Time Low' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_EFFECTIVE_TIME_LOW = 212;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Effective Time High' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_EFFECTIVE_TIME_HIGH = 213;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Template Id' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_TEMPLATE_ID = 214;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Class Code' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_CLASS_CODE = 215;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Mood Code' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_MOOD_CODE = 216;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Id' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_ID = 217;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Code' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_CODE = 218;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Status Code' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_STATUS_CODE = 219;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Effective Time' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_EFFECTIVE_TIME = 220;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Problem Act Allergy Observation' of 'Allergy Problem Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_PROBLEM_ACT__ALLERGY_PROBLEM_ACT_ALLERGY_OBSERVATION = 221;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Allergy Status Inversion Indicator' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_ALLERGY_STATUS_INVERSION_INDICATOR = 222;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Reaction Inversion Indicator' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_REACTION_INVERSION_INDICATOR = 223;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Severity Inversion Indicator' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_SEVERITY_INVERSION_INDICATOR = 224;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Template Id' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_TEMPLATE_ID = 225;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Class Code' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_CLASS_CODE = 226;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Mood Code' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_MOOD_CODE = 227;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Id' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_ID = 228;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Code' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_CODE = 229;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Status Code' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_STATUS_CODE = 230;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Effective Time' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_EFFECTIVE_TIME = 231;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Value' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_VALUE = 232;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Problem Entry Reaction Observation Container' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_PROBLEM_ENTRY_REACTION_OBSERVATION_CONTAINER = 233;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Severity' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_SEVERITY = 234;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Allergy Status Observation' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_ALLERGY_STATUS_OBSERVATION = 235;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Participant' of 'Allergy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION__ALLERGY_OBSERVATION_PARTICIPANT = 236;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Text Reference' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_TEXT_REFERENCE = 237;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Reference Value' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_REFERENCE_VALUE = 238;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Effective Time Low' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_EFFECTIVE_TIME_LOW = 239;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Effective Time High' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_EFFECTIVE_TIME_HIGH = 240;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Severity Observation Inversion Ind' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_SEVERITY_OBSERVATION_INVERSION_IND = 241;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Procedure Activity Procedure Inversion Ind' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_PROCEDURE_ACTIVITY_PROCEDURE_INVERSION_IND = 242;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Medication Activity Inversion Ind' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_MEDICATION_ACTIVITY_INVERSION_IND = 243;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Template Id' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_TEMPLATE_ID = 244;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Class Code' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_CLASS_CODE = 245;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Mood Code' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_MOOD_CODE = 246;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Id' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_ID = 247;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Code' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_CODE = 248;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Text' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_TEXT = 249;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Status Code' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_STATUS_CODE = 250;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Effective Time' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_EFFECTIVE_TIME = 251;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Value' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_VALUE = 252;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Severity Observation' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_SEVERITY_OBSERVATION = 253;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Procedure Activity Procedure' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_PROCEDURE_ACTIVITY_PROCEDURE = 254;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reaction Observation Medication Activity' of 'Reaction Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REACTION_OBSERVATION__REACTION_OBSERVATION_MEDICATION_ACTIVITY = 255;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Text Reference' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_TEXT_REFERENCE = 256;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Reference Value' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_REFERENCE_VALUE = 257;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Template Id' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_TEMPLATE_ID = 258;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Class Code' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_CLASS_CODE = 259;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Mood Code' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_MOOD_CODE = 260;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Code' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_CODE = 261;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Text' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_TEXT = 262;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Status Code' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_STATUS_CODE = 263;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Severity Observation Value' of 'Severity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SEVERITY_OBSERVATION__SEVERITY_OBSERVATION_VALUE = 264;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Code Code Systems' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_CODE_CODE_SYSTEMS = 265;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Code Original Text' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_CODE_ORIGINAL_TEXT = 266;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Original Text Reference Value' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_ORIGINAL_TEXT_REFERENCE_VALUE = 267;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Reference Value' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_REFERENCE_VALUE = 268;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Encounter Inversion' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_ENCOUNTER_INVERSION = 269;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Product Instance Type Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PRODUCT_INSTANCE_TYPE_CODE = 270;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Service Delivery Location Type Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_SERVICE_DELIVERY_LOCATION_TYPE_CODE = 271;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Instructions Inversion' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_INSTRUCTIONS_INVERSION = 272;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Template Id' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_TEMPLATE_ID = 273;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Class Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_CLASS_CODE = 274;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Id' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_ID = 275;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_CODE = 276;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Status Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_STATUS_CODE = 277;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Effective Time' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_EFFECTIVE_TIME = 278;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Priority Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PRIORITY_CODE = 279;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Method Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_METHOD_CODE = 280;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Target Site Code' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_TARGET_SITE_CODE = 281;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Indication' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_INDICATION = 282;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Specimen' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_SPECIMEN = 283;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Service Delivery Location' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_SERVICE_DELIVERY_LOCATION = 284;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Performer' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PERFORMER = 285;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Medication Activity' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_MEDICATION_ACTIVITY = 286;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Patient Instruction' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PATIENT_INSTRUCTION = 287;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Procedure Encounter' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PROCEDURE_ENCOUNTER = 288;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Procedure Product Instance' of 'Procedure Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_PROCEDURE__PROCEDURE_ACTIVITY_PROCEDURE_PRODUCT_INSTANCE = 289;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Code Null Flavor' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_CODE_NULL_FLAVOR = 290;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Template Id' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_TEMPLATE_ID = 291;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Class Code' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_CLASS_CODE = 292;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Mood Code' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_MOOD_CODE = 293;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Id' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_ID = 294;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Code' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_CODE = 295;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Status Code' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_STATUS_CODE = 296;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Effective Time' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_EFFECTIVE_TIME = 297;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Indication Value' of 'Indication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INDICATION__INDICATION_VALUE = 298;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Has Playing Entity' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_HAS_PLAYING_ENTITY = 299;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Has Playing Entity Class Code' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_HAS_PLAYING_ENTITY_CLASS_CODE = 300;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Template Id' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_TEMPLATE_ID = 301;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Code' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_CODE = 302;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Addr' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_ADDR = 303;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Delivery Location Telecom' of 'Service Delivery Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_DELIVERY_LOCATION__SERVICE_DELIVERY_LOCATION_TELECOM = 304;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Dose Quantityorrate Quantity' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_DOSE_QUANTITYORRATE_QUANTITY = 305;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Text Reference' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_TEXT_REFERENCE = 306;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Effective Time IVLTS' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_EFFECTIVE_TIME_IVLTS = 307;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Effective Time PIVLTS' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_EFFECTIVE_TIME_PIVLTS = 308;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Dose Quantity Unit' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_DOSE_QUANTITY_UNIT = 309;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Drug Vehicle Type Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_DRUG_VEHICLE_TYPE_CODE = 310;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Instructions Inversion Ind' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_INSTRUCTIONS_INVERSION_IND = 311;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Precondition Substance Adm Type Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_PRECONDITION_SUBSTANCE_ADM_TYPE_CODE = 312;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Template Id' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_TEMPLATE_ID = 313;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Class Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_CLASS_CODE = 314;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Id' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_ID = 315;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_CODE = 316;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Status Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_STATUS_CODE = 317;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Route Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_ROUTE_CODE = 318;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Approach Site Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_APPROACH_SITE_CODE = 319;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Dose Quantity' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_DOSE_QUANTITY = 320;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Rate Quantity' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_RATE_QUANTITY = 321;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Max Dose Quantity' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_MAX_DOSE_QUANTITY = 322;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Administration Unit Code' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_ADMINISTRATION_UNIT_CODE = 323;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Text' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_TEXT = 324;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Repeat Number' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_REPEAT_NUMBER = 325;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Medication Supply Order' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_MEDICATION_SUPPLY_ORDER = 326;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Reaction Observation' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_REACTION_OBSERVATION = 327;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Performer' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_PERFORMER = 328;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Instructions' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_INSTRUCTIONS = 329;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Indication' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_INDICATION = 330;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Medication Dispense' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_MEDICATION_DISPENSE = 331;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Precondition' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_PRECONDITION = 332;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Drug Vehicle' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_DRUG_VEHICLE = 333;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Activity Consumable' of 'Medication Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_ACTIVITY__MEDICATION_ACTIVITY_CONSUMABLE = 334;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Instruction Inversion Ind' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_INSTRUCTION_INVERSION_IND = 335;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Template Id' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_TEMPLATE_ID = 336;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Class Code' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_CLASS_CODE = 337;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Effective Time' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_EFFECTIVE_TIME = 338;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Mood Code' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_MOOD_CODE = 339;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Quantity' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_QUANTITY = 340;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Repeat Number' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_REPEAT_NUMBER = 341;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Status Code' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_STATUS_CODE = 342;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Id' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_ID = 343;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Product' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_PRODUCT = 344;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Author' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_AUTHOR = 345;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Supply Order Instructions' of 'Medication Supply Order'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_SUPPLY_ORDER__MEDICATION_SUPPLY_ORDER_INSTRUCTIONS = 346;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Text Reference' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_TEXT_REFERENCE = 347;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Text Reference Value' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_TEXT_REFERENCE_VALUE = 348;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Template Id' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_TEMPLATE_ID = 349;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Class Code' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_CLASS_CODE = 350;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Mood Code' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_MOOD_CODE = 351;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Text' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_TEXT = 352;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Status Code' of 'Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS__INSTRUCTIONS_STATUS_CODE = 353;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Template Id' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_TEMPLATE_ID = 354;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Class Code' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_CLASS_CODE = 355;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Effective Time' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_EFFECTIVE_TIME = 356;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Id' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_ID = 357;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Mood Code' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_MOOD_CODE = 358;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Repeat Number' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_REPEAT_NUMBER = 359;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Status Code' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_STATUS_CODE = 360;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Quantity' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_QUANTITY = 361;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Performer2' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_PERFORMER2 = 362;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Medication Supply Order' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_MEDICATION_SUPPLY_ORDER = 363;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Assigned Entity' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_ASSIGNED_ENTITY = 364;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Product' of 'Medication Dispense'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE__MEDICATION_DISPENSE_PRODUCT = 365;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Playing Entity Code' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_PLAYING_ENTITY_CODE = 366;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Playing Entity Name' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_PLAYING_ENTITY_NAME = 367;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Template Id' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_TEMPLATE_ID = 368;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Class Code' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_CLASS_CODE = 369;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Code' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_CODE = 370;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Drug Vehicle Playing Entity' of 'Drug Vehicle'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DRUG_VEHICLE__DRUG_VEHICLE_PLAYING_ENTITY = 371;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Template Id' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_TEMPLATE_ID = 372;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Class Code' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_CLASS_CODE = 373;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Id' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_ID = 374;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Scoping Entity' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_SCOPING_ENTITY = 375;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Playing Device' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_PLAYING_DEVICE = 376;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Scoping Entity Id' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_SCOPING_ENTITY_ID = 377;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Product Instance Playing Device Code' of 'Product Instance'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE__PRODUCT_INSTANCE_PLAYING_DEVICE_CODE = 378;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scoping Entity Id' of 'Product Instance Scoping Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE_SCOPING_ENTITY__SCOPING_ENTITY_ID = 379;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Playing Device Code' of 'Product Instance Playing Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRODUCT_INSTANCE_PLAYING_DEVICE__PLAYING_DEVICE_CODE = 380;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Template Id' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_TEMPLATE_ID = 381;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Class Code' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_CLASS_CODE = 382;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Mood Code' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_MOOD_CODE = 383;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Code' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_CODE = 384;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Status Code' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_STATUS_CODE = 385;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Status Observation Value' of 'Allergy Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_STATUS_OBSERVATION__ALLERGY_STATUS_OBSERVATION_VALUE = 386;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Template Id' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_TEMPLATE_ID = 387;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Class Code' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_CLASS_CODE = 388;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Mood Code' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_MOOD_CODE = 389;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Code' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_CODE = 390;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Status Code' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_STATUS_CODE = 391;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Age Observation Value' of 'Age Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AGE_OBSERVATION__AGE_OBSERVATION_VALUE = 392;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Has Text Reference' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_HAS_TEXT_REFERENCE = 393;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Has Text Reference Value' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_HAS_TEXT_REFERENCE_VALUE = 394;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Template Id' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_TEMPLATE_ID = 395;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Class Code' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_CLASS_CODE = 396;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Mood Code' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_MOOD_CODE = 397;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Code' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_CODE = 398;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Text' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_TEXT = 399;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Status Code' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_STATUS_CODE = 400;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Status Observation Value' of 'Health Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HEALTH_STATUS_OBSERVATION__HEALTH_STATUS_OBSERVATION_VALUE = 401;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Has Text Reference' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_HAS_TEXT_REFERENCE = 402;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Effective Time When Author Present' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_EFFECTIVE_TIME_WHEN_AUTHOR_PRESENT = 403;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Has Author Id' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_HAS_AUTHOR_ID = 404;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Has Author Organization' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_HAS_AUTHOR_ORGANIZATION = 405;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Template Id' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_TEMPLATE_ID = 406;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Class Code' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_CLASS_CODE = 407;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Mood Code' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_MOOD_CODE = 408;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Code' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_CODE = 409;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Text' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_TEXT = 410;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Status Code' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_STATUS_CODE = 411;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Comment Author' of 'Comment'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMMENT__COMMENT_AUTHOR = 412;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Internal Reference Id' of 'Internal Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERNAL_REFERENCE__INTERNAL_REFERENCE_ID = 413;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Internal Reference Code' of 'Internal Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERNAL_REFERENCE__INTERNAL_REFERENCE_CODE = 414;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Type Code' of 'Medication Type'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_TYPE__MEDICATION_TYPE_CODE = 415;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Product Instance Type Code' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_PRODUCT_INSTANCE_TYPE_CODE = 416;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Template Id' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_TEMPLATE_ID = 417;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Class Code' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_CLASS_CODE = 418;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Id' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_ID = 419;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Status Code' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_STATUS_CODE = 420;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Effective Time' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_EFFECTIVE_TIME = 421;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Quantity' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_QUANTITY = 422;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non Medicinal Supply Activity Product Instance' of 'Non Medicinal Supply Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int NON_MEDICINAL_SUPPLY_ACTIVITY__NON_MEDICINAL_SUPPLY_ACTIVITY_PRODUCT_INSTANCE = 423;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Fullfillment Instructions Mood Code' of 'Medication Fullfillment Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_FULLFILLMENT_INSTRUCTIONS__MEDICATION_FULLFILLMENT_INSTRUCTIONS_MOOD_CODE = 424;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Fullfillment Instructions Code' of 'Medication Fullfillment Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_FULLFILLMENT_INSTRUCTIONS__MEDICATION_FULLFILLMENT_INSTRUCTIONS_CODE = 425;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Fullfillment Instructions Text' of 'Medication Fullfillment Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_FULLFILLMENT_INSTRUCTIONS__MEDICATION_FULLFILLMENT_INSTRUCTIONS_TEXT = 426;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Fullfillment Instructions Status Code' of 'Medication Fullfillment Instructions'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_FULLFILLMENT_INSTRUCTIONS__MEDICATION_FULLFILLMENT_INSTRUCTIONS_STATUS_CODE = 427;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Effective Time Low' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_EFFECTIVE_TIME_LOW = 428;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Effective Time High' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_EFFECTIVE_TIME_HIGH = 429;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Template Id' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_TEMPLATE_ID = 430;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Class Code' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_CLASS_CODE = 431;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Mood Code' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_MOOD_CODE = 432;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Id' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_ID = 433;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Code' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_CODE = 434;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Effective Time' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_EFFECTIVE_TIME = 435;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Concern Act Problem Observation' of 'Problem Concern Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_CONCERN_ACT__PROBLEM_CONCERN_ACT_PROBLEM_OBSERVATION = 436;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Has Text Reference' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_HAS_TEXT_REFERENCE = 437;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Has Text Reference Value' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_HAS_TEXT_REFERENCE_VALUE = 438;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Age Observation Inversion' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_AGE_OBSERVATION_INVERSION = 439;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Template Id' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_TEMPLATE_ID = 440;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Class Code' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_CLASS_CODE = 441;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Mood Code' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_MOOD_CODE = 442;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Negation Ind' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_NEGATION_IND = 443;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Id' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_ID = 444;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Code' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_CODE = 445;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Text' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_TEXT = 446;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Status Code' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_STATUS_CODE = 447;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Effective Time' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_EFFECTIVE_TIME = 448;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Value' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_VALUE = 449;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Age Observation' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_AGE_OBSERVATION = 450;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Health Status Observation' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_HEALTH_STATUS_OBSERVATION = 451;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Observation Problem Status' of 'Problem Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_OBSERVATION__PROBLEM_OBSERVATION_PROBLEM_STATUS = 452;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Text Reference' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_TEXT_REFERENCE = 453;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Text Reference Value' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_TEXT_REFERENCE_VALUE = 454;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Template Id' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_TEMPLATE_ID = 455;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Class Code' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_CLASS_CODE = 456;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Mood Code' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_MOOD_CODE = 457;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Code' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_CODE = 458;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Text' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_TEXT = 459;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Status Code' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_STATUS_CODE = 460;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Status Value' of 'Problem Status'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_STATUS__PROBLEM_STATUS_VALUE = 461;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Language Code' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_LANGUAGE_CODE = 462;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF = 463;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Author' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_AUTHOR = 464;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Allergies Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_ALLERGIES_SECTION = 465;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Medications Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_MEDICATIONS_SECTION = 466;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Problem Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_PROBLEM_SECTION = 467;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Procedures Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_PROCEDURES_SECTION = 468;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Results Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_RESULTS_SECTION = 469;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Advance Directives Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_ADVANCE_DIRECTIVES_SECTION = 470;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Encounters Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_ENCOUNTERS_SECTION = 471;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Family History Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_FAMILY_HISTORY_SECTION = 472;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Functional Status Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_FUNCTIONAL_STATUS_SECTION = 473;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Immunizations Section Entries Optional' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL = 474;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Medical Equipment Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_MEDICAL_EQUIPMENT_SECTION = 475;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Payers Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_PAYERS_SECTION = 476;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Plan Of Care Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_PLAN_OF_CARE_SECTION = 477;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Social History Section' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_SOCIAL_HISTORY_SECTION = 478;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Vital Signs Section Entries Optional' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL = 479;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer Assigned Entity Has National Provider Identifier' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER_ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 480;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer Assigned Entity Code' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER_ASSIGNED_ENTITY_CODE = 481;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer Assigned Entity Id' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER_ASSIGNED_ENTITY_ID = 482;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer Type Code' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER_TYPE_CODE = 483;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer Assigned Entity' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER_ASSIGNED_ENTITY = 484;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Effective Time Low' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_EFFECTIVE_TIME_LOW = 485;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Effective Time High' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_EFFECTIVE_TIME_HIGH = 486;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Class Code' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_CLASS_CODE = 487;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Effective Time' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_EFFECTIVE_TIME = 488;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event3 Performer' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT3_PERFORMER = 489;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Documentation Of Service Event' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF_SERVICE_EVENT = 490;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Continuity Of Care Document Author Assigned Author3' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__CONTINUITY_OF_CARE_DOCUMENT_AUTHOR_ASSIGNED_AUTHOR3 = 491;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 492;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Continuity Of Care Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT__GENERAL_HEADER_CONSTRAINTS_CODE = 493;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Documentation Of Service Event' of 'Continuity Of Care Document Documentation Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF__DOCUMENTATION_OF_SERVICE_EVENT = 494;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event3 Effective Time Low' of 'Documentation Of Service Event3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT3__SERVICE_EVENT3_EFFECTIVE_TIME_LOW = 495;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event3 Effective Time High' of 'Documentation Of Service Event3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT3__SERVICE_EVENT3_EFFECTIVE_TIME_HIGH = 496;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event3 Class Code' of 'Documentation Of Service Event3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT3__SERVICE_EVENT3_CLASS_CODE = 497;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event3 Effective Time' of 'Documentation Of Service Event3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT3__SERVICE_EVENT3_EFFECTIVE_TIME = 498;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event3 Performer' of 'Documentation Of Service Event3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT3__SERVICE_EVENT3_PERFORMER = 499;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Performer Type Code' of 'Service Event3 Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_EVENT3_PERFORMER__PERFORMER_TYPE_CODE = 500;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Performer Assigned Entity' of 'Service Event3 Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_EVENT3_PERFORMER__PERFORMER_ASSIGNED_ENTITY = 501;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Has National Provider Identifier' of 'Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERFORMER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_HAS_NATIONAL_PROVIDER_IDENTIFIER = 502;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERFORMER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 503;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PERFORMER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 504;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Author Assigned Author3' of 'Continuity Of Care Document Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONTINUITY_OF_CARE_DOCUMENT_AUTHOR__AUTHOR_ASSIGNED_AUTHOR3 = 505;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Title' of 'Allergies Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION__ALLERGIES_SECTION_TITLE = 506;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Text' of 'Allergies Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION__ALLERGIES_SECTION_TEXT = 507;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Allergy Drug Sensitivity' of 'Allergies Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION__ALLERGIES_SECTION_ALLERGY_DRUG_SENSITIVITY = 508;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Template Id' of 'Allergies Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION__ALLERGIES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 509;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Code' of 'Allergies Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION__ALLERGIES_SECTION_ENTRIES_OPTIONAL_CODE = 510;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Template Id' of 'Allergies Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION_ENTRIES_OPTIONAL__ALLERGIES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 511;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Code' of 'Allergies Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION_ENTRIES_OPTIONAL__ALLERGIES_SECTION_ENTRIES_OPTIONAL_CODE = 512;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Title' of 'Allergies Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION_ENTRIES_OPTIONAL__ALLERGIES_SECTION_ENTRIES_OPTIONAL_TITLE = 513;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Text' of 'Allergies Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION_ENTRIES_OPTIONAL__ALLERGIES_SECTION_ENTRIES_OPTIONAL_TEXT = 514;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergies Section Entries Optional Allergy Problem Act' of 'Allergies Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGIES_SECTION_ENTRIES_OPTIONAL__ALLERGIES_SECTION_ENTRIES_OPTIONAL_ALLERGY_PROBLEM_ACT = 515;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Title' of 'Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION__MEDICATIONS_SECTION_TITLE = 516;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Text' of 'Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION__MEDICATIONS_SECTION_TEXT = 517;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Medication' of 'Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION__MEDICATIONS_SECTION_MEDICATION = 518;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Template Id' of 'Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 519;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Code' of 'Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 520;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Template Id' of 'Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION_ENTRIES_OPTIONAL__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 521;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Code' of 'Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION_ENTRIES_OPTIONAL__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 522;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Title' of 'Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION_ENTRIES_OPTIONAL__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TITLE = 523;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Text' of 'Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION_ENTRIES_OPTIONAL__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEXT = 524;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Section Entries Optional Medication Activity' of 'Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_SECTION_ENTRIES_OPTIONAL__MEDICATIONS_SECTION_ENTRIES_OPTIONAL_MEDICATION_ACTIVITY = 525;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Text' of 'Problem Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION__PROBLEM_SECTION_TEXT = 526;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Title' of 'Problem Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION__PROBLEM_SECTION_TITLE = 527;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Problem Concern' of 'Problem Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION__PROBLEM_SECTION_PROBLEM_CONCERN = 528;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Template Id' of 'Problem Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION__PROBLEM_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 529;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Code' of 'Problem Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION__PROBLEM_SECTION_ENTRIES_OPTIONAL_CODE = 530;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Template Id' of 'Problem Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION_ENTRIES_OPTIONAL__PROBLEM_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 531;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Code' of 'Problem Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION_ENTRIES_OPTIONAL__PROBLEM_SECTION_ENTRIES_OPTIONAL_CODE = 532;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Title' of 'Problem Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION_ENTRIES_OPTIONAL__PROBLEM_SECTION_ENTRIES_OPTIONAL_TITLE = 533;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Text' of 'Problem Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION_ENTRIES_OPTIONAL__PROBLEM_SECTION_ENTRIES_OPTIONAL_TEXT = 534;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Problem Section Entries Optional Problem Concern' of 'Problem Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROBLEM_SECTION_ENTRIES_OPTIONAL__PROBLEM_SECTION_ENTRIES_OPTIONAL_PROBLEM_CONCERN = 535;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Has Procedure Activity' of 'Procedures Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION__PROCEDURES_SECTION_HAS_PROCEDURE_ACTIVITY = 536;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Title' of 'Procedures Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION__PROCEDURES_SECTION_TITLE = 537;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Text' of 'Procedures Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION__PROCEDURES_SECTION_TEXT = 538;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Template Id' of 'Procedures Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION__PROCEDURES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 539;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Code' of 'Procedures Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION__PROCEDURES_SECTION_ENTRIES_OPTIONAL_CODE = 540;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Template Id' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 541;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Code' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_CODE = 542;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Text' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_TEXT = 543;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Procedure Activity Procedure' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_PROCEDURE_ACTIVITY_PROCEDURE = 544;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Procedure Acivity Observation' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_PROCEDURE_ACIVITY_OBSERVATION = 545;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedures Section Entries Optional Procedure Activity Act' of 'Procedures Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURES_SECTION_ENTRIES_OPTIONAL__PROCEDURES_SECTION_ENTRIES_OPTIONAL_PROCEDURE_ACTIVITY_ACT = 546;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Code Code Systems' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_CODE_CODE_SYSTEMS = 547;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Code Original Text' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_CODE_ORIGINAL_TEXT = 548;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Original Text Reference Value' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_ORIGINAL_TEXT_REFERENCE_VALUE = 549;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Reference Value' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_REFERENCE_VALUE = 550;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Encounter Inversion' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_ENCOUNTER_INVERSION = 551;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Service Delivery Location Type Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_SERVICE_DELIVERY_LOCATION_TYPE_CODE = 552;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Instructions Inversion' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_INSTRUCTIONS_INVERSION = 553;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Template Id' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_TEMPLATE_ID = 554;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Class Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_CLASS_CODE = 555;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Id' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_ID = 556;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_CODE = 557;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Status Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_STATUS_CODE = 558;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Value' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_VALUE = 559;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Effective Time' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_EFFECTIVE_TIME = 560;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Priority Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_PRIORITY_CODE = 561;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Method Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_METHOD_CODE = 562;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Target Site Code' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_TARGET_SITE_CODE = 563;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Performer' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_PERFORMER = 564;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Service Delivery Location' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_SERVICE_DELIVERY_LOCATION = 565;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Procedure Encounter' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_PROCEDURE_ENCOUNTER = 566;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Instructions' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_INSTRUCTIONS = 567;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Indication' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_INDICATION = 568;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Observation Medication Activity' of 'Procedure Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_OBSERVATION__PROCEDURE_ACTIVITY_OBSERVATION_MEDICATION_ACTIVITY = 569;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Code Code Systems' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_CODE_CODE_SYSTEMS = 570;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Code Original Text' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_CODE_ORIGINAL_TEXT = 571;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Original Text Reference Value' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_ORIGINAL_TEXT_REFERENCE_VALUE = 572;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Reference Value' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_REFERENCE_VALUE = 573;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Encounter Inversion' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_ENCOUNTER_INVERSION = 574;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Service Delivery Location Type Code' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_SERVICE_DELIVERY_LOCATION_TYPE_CODE = 575;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Instructions Inversion' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_INSTRUCTIONS_INVERSION = 576;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Template Id' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_TEMPLATE_ID = 577;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Class Code' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_CLASS_CODE = 578;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Id' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_ID = 579;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Code' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_CODE = 580;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Status Code' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_STATUS_CODE = 581;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Effective Time' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_EFFECTIVE_TIME = 582;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Priority Code' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_PRIORITY_CODE = 583;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Performer' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_PERFORMER = 584;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Service Delivery Location' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_SERVICE_DELIVERY_LOCATION = 585;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Procedure Encounter' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_PROCEDURE_ENCOUNTER = 586;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Instructions' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_INSTRUCTIONS = 587;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Indication' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_INDICATION = 588;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Activity Act Medication Activity' of 'Procedure Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ACTIVITY_ACT__PROCEDURE_ACTIVITY_ACT_MEDICATION_ACTIVITY = 589;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Title' of 'Results Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION__RESULTS_SECTION_TITLE = 590;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Text' of 'Results Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION__RESULTS_SECTION_TEXT = 591;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Result Organizer' of 'Results Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION__RESULTS_SECTION_RESULT_ORGANIZER = 592;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Template Id' of 'Results Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION__RESULTS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 593;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Code' of 'Results Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION__RESULTS_SECTION_ENTRIES_OPTIONAL_CODE = 594;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Template Id' of 'Results Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION_ENTRIES_OPTIONAL__RESULTS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 595;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Code' of 'Results Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION_ENTRIES_OPTIONAL__RESULTS_SECTION_ENTRIES_OPTIONAL_CODE = 596;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Title' of 'Results Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION_ENTRIES_OPTIONAL__RESULTS_SECTION_ENTRIES_OPTIONAL_TITLE = 597;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Text' of 'Results Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION_ENTRIES_OPTIONAL__RESULTS_SECTION_ENTRIES_OPTIONAL_TEXT = 598;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Results Section Entries Optional Result Organizer' of 'Results Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULTS_SECTION_ENTRIES_OPTIONAL__RESULTS_SECTION_ENTRIES_OPTIONAL_RESULT_ORGANIZER = 599;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Code Value' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_CODE_VALUE = 600;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Class Code Value' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_CLASS_CODE_VALUE = 601;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Template Id' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_TEMPLATE_ID = 602;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Id' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_ID = 603;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Status Code' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_STATUS_CODE = 604;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Code' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_CODE = 605;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Organizer Result Observation' of 'Result Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_ORGANIZER__RESULT_ORGANIZER_RESULT_OBSERVATION = 606;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Text Reference' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_TEXT_REFERENCE = 607;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Text Reference Value' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_TEXT_REFERENCE_VALUE = 608;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Code Value' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_CODE_VALUE = 609;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation No Observation Range Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_NO_OBSERVATION_RANGE_CODE = 610;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Author Multiplicity' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_AUTHOR_MULTIPLICITY = 611;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Template Id' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_TEMPLATE_ID = 612;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Id' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_ID = 613;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_CODE = 614;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Text' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_TEXT = 615;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Status Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_STATUS_CODE = 616;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Effective Time' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_EFFECTIVE_TIME = 617;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Value' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_VALUE = 618;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Interpretation Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_INTERPRETATION_CODE = 619;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Method Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_METHOD_CODE = 620;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Result Observation Target Site Code' of 'Result Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RESULT_OBSERVATION__RESULT_OBSERVATION_TARGET_SITE_CODE = 621;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Title' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_TITLE = 622;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Text' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_TEXT = 623;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Advance Directive Observation' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_ADVANCE_DIRECTIVE_OBSERVATION = 624;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Template Id' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 625;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Code' of 'Advance Directives Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_CODE = 626;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Template Id' of 'Advance Directives Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 627;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Code' of 'Advance Directives Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_CODE = 628;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Title' of 'Advance Directives Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_TITLE = 629;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Text' of 'Advance Directives Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_TEXT = 630;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directives Section Entries Optional Advance Directive Observation' of 'Advance Directives Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL__ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL_ADVANCE_DIRECTIVE_OBSERVATION = 631;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Has Starting Time' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_HAS_STARTING_TIME = 632;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Has Ending Time' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_HAS_ENDING_TIME = 633;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Template Id' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_TEMPLATE_ID = 634;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Class Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CLASS_CODE = 635;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Mood Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_MOOD_CODE = 636;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Id' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_ID = 637;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CODE = 638;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Status Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_STATUS_CODE = 639;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Effective Time' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_EFFECTIVE_TIME = 640;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Verifier' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER = 641;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN = 642;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Reference' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE = 643;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Verifier Time' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER_TIME = 644;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Verifier Type Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER_TYPE_CODE = 645;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Verifier Participant Role' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER_PARTICIPANT_ROLE = 646;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Custodian Role Custodian Entity Name' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_CUSTODIAN_ROLE_CUSTODIAN_ENTITY_NAME = 647;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Custodian Role Addr' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_CUSTODIAN_ROLE_ADDR = 648;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Custodian Role Class Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_CUSTODIAN_ROLE_CLASS_CODE = 649;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Custodian Role Telecom' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_CUSTODIAN_ROLE_TELECOM = 650;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Custodian Role Playing Entity' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_CUSTODIAN_ROLE_PLAYING_ENTITY = 651;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Type Code' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_TYPE_CODE = 652;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Custodian Advance Directive Observation Custodian Role' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_ROLE = 653;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Reference External Document Id' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE_EXTERNAL_DOCUMENT_ID = 654;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Reference External Document Text' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE_EXTERNAL_DOCUMENT_TEXT = 655;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Observation Reference External Document' of 'Advance Directive Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION__ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE_EXTERNAL_DOCUMENT = 656;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reference External Document' of 'Advance Directive Observation Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE__REFERENCE_EXTERNAL_DOCUMENT = 657;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Document Id' of 'Reference External Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCE_EXTERNAL_DOCUMENT__EXTERNAL_DOCUMENT_ID = 658;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Document Text' of 'Reference External Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCE_EXTERNAL_DOCUMENT__EXTERNAL_DOCUMENT_TEXT = 659;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Type Code' of 'Advance Directive Observation Custodian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN__CUSTODIAN_TYPE_CODE = 660;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Advance Directive Observation Custodian Role' of 'Advance Directive Observation Custodian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN__CUSTODIAN_ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN_ROLE = 661;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Role Addr' of 'Custodian Custodian Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_CUSTODIAN_ROLE__CUSTODIAN_ROLE_ADDR = 662;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Role Class Code' of 'Custodian Custodian Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_CUSTODIAN_ROLE__CUSTODIAN_ROLE_CLASS_CODE = 663;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Role Telecom' of 'Custodian Custodian Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_CUSTODIAN_ROLE__CUSTODIAN_ROLE_TELECOM = 664;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Role Playing Entity' of 'Custodian Custodian Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_CUSTODIAN_ROLE__CUSTODIAN_ROLE_PLAYING_ENTITY = 665;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Entity Name' of 'Custodian Role Custodian Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CUSTODIAN_ROLE_CUSTODIAN_ENTITY__CUSTODIAN_ENTITY_NAME = 666;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Verifier Time' of 'Advance Directive Observation Verifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER__VERIFIER_TIME = 667;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Verifier Type Code' of 'Advance Directive Observation Verifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER__VERIFIER_TYPE_CODE = 668;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Verifier Participant Role' of 'Advance Directive Observation Verifier'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER__VERIFIER_PARTICIPANT_ROLE = 669;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Text' of 'Encounters Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION__ENCOUNTERS_SECTION_TEXT = 670;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Title' of 'Encounters Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION__ENCOUNTERS_SECTION_TITLE = 671;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Encounter Activities' of 'Encounters Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION__ENCOUNTERS_SECTION_ENCOUNTER_ACTIVITIES = 672;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Template Id' of 'Encounters Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 673;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Code' of 'Encounters Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_CODE = 674;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Template Id' of 'Encounters Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION_ENTRIES_OPTIONAL__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 675;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Code' of 'Encounters Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION_ENTRIES_OPTIONAL__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_CODE = 676;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Title' of 'Encounters Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION_ENTRIES_OPTIONAL__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_TITLE = 677;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Text' of 'Encounters Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION_ENTRIES_OPTIONAL__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_TEXT = 678;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounters Section Entries Optional Encounter Activities' of 'Encounters Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTERS_SECTION_ENTRIES_OPTIONAL__ENCOUNTERS_SECTION_ENTRIES_OPTIONAL_ENCOUNTER_ACTIVITIES = 679;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Code Original Text' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_CODE_ORIGINAL_TEXT = 680;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Code Original Text Reference' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_CODE_ORIGINAL_TEXT_REFERENCE = 681;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Code Original Text Reference Value' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_CODE_ORIGINAL_TEXT_REFERENCE_VALUE = 682;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Service Delivery Type Code' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_SERVICE_DELIVERY_TYPE_CODE = 683;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Template Id' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_TEMPLATE_ID = 684;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Class Code' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_CLASS_CODE = 685;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Mood Code' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_MOOD_CODE = 686;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Id' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_ID = 687;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Code' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_CODE = 688;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Effective Time' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_EFFECTIVE_TIME = 689;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Service Delivery Location' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_SERVICE_DELIVERY_LOCATION = 690;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Activities Indication' of 'Encounter Activities'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_ACTIVITIES__ENCOUNTER_ACTIVITIES_INDICATION = 691;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Section Template Id' of 'Family History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SECTION__FAMILY_HISTORY_SECTION_TEMPLATE_ID = 692;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Section Code' of 'Family History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SECTION__FAMILY_HISTORY_SECTION_CODE = 693;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Section Title' of 'Family History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SECTION__FAMILY_HISTORY_SECTION_TITLE = 694;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Section Text' of 'Family History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SECTION__FAMILY_HISTORY_SECTION_TEXT = 695;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Section Family History' of 'Family History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SECTION__FAMILY_HISTORY_SECTION_FAMILY_HISTORY = 696;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Template Id' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_TEMPLATE_ID = 697;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Class Code' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_CLASS_CODE = 698;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Mood Code' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_MOOD_CODE = 699;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Status Code' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_STATUS_CODE = 700;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Family History Observation' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_FAMILY_HISTORY_OBSERVATION = 701;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Organizer Subject' of 'Family History Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_ORGANIZER__FAMILY_HISTORY_ORGANIZER_SUBJECT = 702;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Age Observation Inversion' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_AGE_OBSERVATION_INVERSION = 703;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Template Id' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_TEMPLATE_ID = 704;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Class Code' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_CLASS_CODE = 705;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Mood Code' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_MOOD_CODE = 706;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Id' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_ID = 707;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Code' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_CODE = 708;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Status Code' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_STATUS_CODE = 709;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Effective Time' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_EFFECTIVE_TIME = 710;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Value' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_VALUE = 711;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Age Observation' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_AGE_OBSERVATION = 712;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Observation Family History Death Observation' of 'Family History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_OBSERVATION__FAMILY_HISTORY_OBSERVATION_FAMILY_HISTORY_DEATH_OBSERVATION = 713;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Template Id' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_TEMPLATE_ID = 714;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Class Code' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_CLASS_CODE = 715;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Mood Code' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_MOOD_CODE = 716;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Code' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_CODE = 717;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Status Code' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_STATUS_CODE = 718;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Death Observation Value' of 'Family History Death Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_DEATH_OBSERVATION__FAMILY_HISTORY_DEATH_OBSERVATION_VALUE = 719;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Template Id' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_TEMPLATE_ID = 720;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Code' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_CODE = 721;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Title' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_TITLE = 722;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Text' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_TEXT = 723;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Problem Observation' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_PROBLEM_OBSERVATION = 724;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Functional Status Section Result Observation' of 'Functional Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FUNCTIONAL_STATUS_SECTION__FUNCTIONAL_STATUS_SECTION_RESULT_OBSERVATION = 725;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Template Id' of 'Immunizations Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 726;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Code' of 'Immunizations Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 727;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Title' of 'Immunizations Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_TITLE = 728;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Text' of 'Immunizations Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_TEXT = 729;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Immunization Activity' of 'Immunizations Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_IMMUNIZATION_ACTIVITY = 730;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Text Reference' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_TEXT_REFERENCE = 731;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Dose Quantity Unit' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_DOSE_QUANTITY_UNIT = 732;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Instruction Inversion' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_INSTRUCTION_INVERSION = 733;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Drug Vehicle Type Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_DRUG_VEHICLE_TYPE_CODE = 734;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Precondition Type Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_PRECONDITION_TYPE_CODE = 735;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Template Id' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_TEMPLATE_ID = 736;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Class Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_CLASS_CODE = 737;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Id' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_ID = 738;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_CODE = 739;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Status Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_STATUS_CODE = 740;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Effective Time' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_EFFECTIVE_TIME = 741;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Route Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_ROUTE_CODE = 742;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Approach Site Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_APPROACH_SITE_CODE = 743;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Dose Quantity' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_DOSE_QUANTITY = 744;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Negation Ind' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_NEGATION_IND = 745;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Text' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_TEXT = 746;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Repeat Number' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_REPEAT_NUMBER = 747;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Administration Unit Code' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_ADMINISTRATION_UNIT_CODE = 748;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Drug Vehicle' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_DRUG_VEHICLE = 749;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Indication' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_INDICATION = 750;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Instructions' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_INSTRUCTIONS = 751;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Medication Dispense' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_MEDICATION_DISPENSE = 752;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Reaction Observation' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_REACTION_OBSERVATION = 753;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Precondition' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_PRECONDITION = 754;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Immunization Refusal Reason' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_IMMUNIZATION_REFUSAL_REASON = 755;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Consumable' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_CONSUMABLE = 756;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Performer' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_PERFORMER = 757;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Activity Medication Supply Order' of 'Immunization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_ACTIVITY__IMMUNIZATION_ACTIVITY_MEDICATION_SUPPLY_ORDER = 758;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Template Id' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_TEMPLATE_ID = 759;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Class Code' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_CLASS_CODE = 760;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Code' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_CODE = 761;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Id' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_ID = 762;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Mood Code' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_MOOD_CODE = 763;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Refusal Reason Status Code' of 'Immunization Refusal Reason'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_REFUSAL_REASON__IMMUNIZATION_REFUSAL_REASON_STATUS_CODE = 764;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Equipment Section Template Id' of 'Medical Equipment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_EQUIPMENT_SECTION__MEDICAL_EQUIPMENT_SECTION_TEMPLATE_ID = 765;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Equipment Section Code' of 'Medical Equipment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_EQUIPMENT_SECTION__MEDICAL_EQUIPMENT_SECTION_CODE = 766;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Equipment Section Title' of 'Medical Equipment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_EQUIPMENT_SECTION__MEDICAL_EQUIPMENT_SECTION_TITLE = 767;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Equipment Section Text' of 'Medical Equipment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_EQUIPMENT_SECTION__MEDICAL_EQUIPMENT_SECTION_TEXT = 768;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical Equipment Section Non Medicinal Supply Activity' of 'Medical Equipment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_EQUIPMENT_SECTION__MEDICAL_EQUIPMENT_SECTION_NON_MEDICINAL_SUPPLY_ACTIVITY = 769;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payers Section Template Id' of 'Payers Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYERS_SECTION__PAYERS_SECTION_TEMPLATE_ID = 770;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payers Section Code' of 'Payers Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYERS_SECTION__PAYERS_SECTION_CODE = 771;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payers Section Title' of 'Payers Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYERS_SECTION__PAYERS_SECTION_TITLE = 772;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payers Section Text' of 'Payers Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYERS_SECTION__PAYERS_SECTION_TEXT = 773;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payers Section Coverage Activity' of 'Payers Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYERS_SECTION__PAYERS_SECTION_COVERAGE_ACTIVITY = 774;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Template Id' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_TEMPLATE_ID = 775;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Class Code' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_CLASS_CODE = 776;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Code' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_CODE = 777;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Id' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_ID = 778;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Mood Code' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_MOOD_CODE = 779;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Status Code' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_STATUS_CODE = 780;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Coverage Activity Policy Activity' of 'Coverage Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERAGE_ACTIVITY__COVERAGE_ACTIVITY_POLICY_ACTIVITY = 781;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Template Id' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_TEMPLATE_ID = 782;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Class Code' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_CLASS_CODE = 783;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Code' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_CODE = 784;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Id' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_ID = 785;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Mood Code' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_MOOD_CODE = 786;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Authorization Activity' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_AUTHORIZATION_ACTIVITY = 787;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Activity Performer' of 'Policy Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_ACTIVITY__POLICY_ACTIVITY_PERFORMER = 788;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Authorization Activity Template Id' of 'Authorization Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHORIZATION_ACTIVITY__AUTHORIZATION_ACTIVITY_TEMPLATE_ID = 789;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Template Id' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_TEMPLATE_ID = 790;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Code' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_CODE = 791;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Text' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_TEXT = 792;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Act' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_ACT = 793;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Encounter' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_ENCOUNTER = 794;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Observation' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_OBSERVATION = 795;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Procedure' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_PROCEDURE = 796;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Substance Administration' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION = 797;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Section Plan Of Care Activity Supply' of 'Plan Of Care Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_SECTION__PLAN_OF_CARE_SECTION_PLAN_OF_CARE_ACTIVITY_SUPPLY = 798;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Act Template Id' of 'Plan Of Care Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_ACT__PLAN_OF_CARE_ACTIVITY_ACT_TEMPLATE_ID = 799;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Act Id' of 'Plan Of Care Activity Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_ACT__PLAN_OF_CARE_ACTIVITY_ACT_ID = 800;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Encounter Template Id' of 'Plan Of Care Activity Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_ENCOUNTER__PLAN_OF_CARE_ACTIVITY_ENCOUNTER_TEMPLATE_ID = 801;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Encounter Id' of 'Plan Of Care Activity Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_ENCOUNTER__PLAN_OF_CARE_ACTIVITY_ENCOUNTER_ID = 802;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Observation Template Id' of 'Plan Of Care Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_OBSERVATION__PLAN_OF_CARE_ACTIVITY_OBSERVATION_TEMPLATE_ID = 803;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Observation Id' of 'Plan Of Care Activity Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_OBSERVATION__PLAN_OF_CARE_ACTIVITY_OBSERVATION_ID = 804;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Procedure Template Id' of 'Plan Of Care Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_PROCEDURE__PLAN_OF_CARE_ACTIVITY_PROCEDURE_TEMPLATE_ID = 805;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Procedure Id' of 'Plan Of Care Activity Procedure'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_PROCEDURE__PLAN_OF_CARE_ACTIVITY_PROCEDURE_ID = 806;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Substance Administration Template Id' of 'Plan Of Care Activity Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION__PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION_TEMPLATE_ID = 807;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Substance Administration Id' of 'Plan Of Care Activity Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION__PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION_ID = 808;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Supply Template Id' of 'Plan Of Care Activity Supply'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_SUPPLY__PLAN_OF_CARE_ACTIVITY_SUPPLY_TEMPLATE_ID = 809;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Plan Of Care Activity Supply Id' of 'Plan Of Care Activity Supply'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLAN_OF_CARE_ACTIVITY_SUPPLY__PLAN_OF_CARE_ACTIVITY_SUPPLY_ID = 810;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Template Id' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TEMPLATE_ID = 811;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Code' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_CODE = 812;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Title' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TITLE = 813;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Text' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_TEXT = 814;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Social History Observation' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_SOCIAL_HISTORY_OBSERVATION = 815;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Section Pregnancy Observation' of 'Social History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_SECTION__SOCIAL_HISTORY_SECTION_PREGNANCY_OBSERVATION = 816;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Original Text' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_ORIGINAL_TEXT = 817;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Reference' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_REFERENCE = 818;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Reference Value' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_REFERENCE_VALUE = 819;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Template Id' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_TEMPLATE_ID = 820;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Class Code' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_CLASS_CODE = 821;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Mood Code' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_MOOD_CODE = 822;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Id' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_ID = 823;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Code' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_CODE = 824;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Status Code' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_STATUS_CODE = 825;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Observation Value' of 'Social History Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_OBSERVATION__SOCIAL_HISTORY_OBSERVATION_VALUE = 826;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Template Id' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_TEMPLATE_ID = 827;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Class Code' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_CLASS_CODE = 828;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Mood Code' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_MOOD_CODE = 829;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Code' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_CODE = 830;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Status Code' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_STATUS_CODE = 831;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Value' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_VALUE = 832;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Effective Time' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_EFFECTIVE_TIME = 833;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Pregnancy Observation Estimated Date Of Delivery' of 'Pregnancy Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREGNANCY_OBSERVATION__PREGNANCY_OBSERVATION_ESTIMATED_DATE_OF_DELIVERY = 834;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Template Id' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_TEMPLATE_ID = 835;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Class Code' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_CLASS_CODE = 836;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Code' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_CODE = 837;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Mood Code' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_MOOD_CODE = 838;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Status Code' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_STATUS_CODE = 839;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Estimated Date Of Delivery Value' of 'Estimated Date Of Delivery'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ESTIMATED_DATE_OF_DELIVERY__ESTIMATED_DATE_OF_DELIVERY_VALUE = 840;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Template Id' of 'Vital Signs Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 841;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Code' of 'Vital Signs Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_CODE = 842;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Text' of 'Vital Signs Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_TEXT = 843;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Title' of 'Vital Signs Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_TITLE = 844;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Vital Signs Organizer' of 'Vital Signs Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_VITAL_SIGNS_ORGANIZER = 845;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Template Id' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_TEMPLATE_ID = 846;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Class Code' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_CLASS_CODE = 847;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Mood Code' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_MOOD_CODE = 848;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Id' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_ID = 849;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Code' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_CODE = 850;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Status Code' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_STATUS_CODE = 851;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Effective Time' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_EFFECTIVE_TIME = 852;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Organizer Vital Sign Observation' of 'Vital Signs Organizer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_ORGANIZER__VITAL_SIGNS_ORGANIZER_VITAL_SIGN_OBSERVATION = 853;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Template Id' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_TEMPLATE_ID = 854;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Class Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_CLASS_CODE = 855;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Mood Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_MOOD_CODE = 856;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Id' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_ID = 857;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_CODE = 858;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Status Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_STATUS_CODE = 859;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Effective Time' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_EFFECTIVE_TIME = 860;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Value' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_VALUE = 861;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Interpretation Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_INTERPRETATION_CODE = 862;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Method Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_METHOD_CODE = 863;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Target Site Code' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_TARGET_SITE_CODE = 864;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Text' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_TEXT = 865;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Sign Observation Author' of 'Vital Sign Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGN_OBSERVATION__VITAL_SIGN_OBSERVATION_AUTHOR = 866;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation No Additional Participants' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_NO_ADDITIONAL_PARTICIPANTS = 867;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation No Additional Relationships' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_NO_ADDITIONAL_RELATIONSHIPS = 868;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Template Id' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_TEMPLATE_ID = 869;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Class Code' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_CLASS_CODE = 870;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Mood Code' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_MOOD_CODE = 871;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Code' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_CODE = 872;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Status Code' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_STATUS_CODE = 873;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Social History Status Observation Value' of 'Social History Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOCIAL_HISTORY_STATUS_OBSERVATION__SOCIAL_HISTORY_STATUS_OBSERVATION_VALUE = 874;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Section Template Id' of 'Purpose Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_SECTION__PURPOSE_SECTION_TEMPLATE_ID = 875;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Section Code' of 'Purpose Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_SECTION__PURPOSE_SECTION_CODE = 876;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Section Title' of 'Purpose Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_SECTION__PURPOSE_SECTION_TITLE = 877;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Section Text' of 'Purpose Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_SECTION__PURPOSE_SECTION_TEXT = 878;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Section Purpose Activity' of 'Purpose Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_SECTION__PURPOSE_SECTION_PURPOSE_ACTIVITY = 879;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Has Reason' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_HAS_REASON = 880;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Reason Type' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_REASON_TYPE = 881;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Template Id' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_TEMPLATE_ID = 882;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Class Code' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_CLASS_CODE = 883;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Mood Code' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_MOOD_CODE = 884;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Code' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_CODE = 885;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purpose Activity Status Code' of 'Purpose Activity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSE_ACTIVITY__PURPOSE_ACTIVITY_STATUS_CODE = 886;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Verification Template Id' of 'Advance Directive Verification'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_VERIFICATION__ADVANCE_DIRECTIVE_VERIFICATION_TEMPLATE_ID = 887;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Verification Type Code' of 'Advance Directive Verification'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_VERIFICATION__ADVANCE_DIRECTIVE_VERIFICATION_TYPE_CODE = 888;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Verification Time' of 'Advance Directive Verification'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_VERIFICATION__ADVANCE_DIRECTIVE_VERIFICATION_TIME = 889;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation No Additional Participants' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_NO_ADDITIONAL_PARTICIPANTS = 890;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation No Additional Relationships' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_NO_ADDITIONAL_RELATIONSHIPS = 891;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation Template Id' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_TEMPLATE_ID = 892;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation Class Code' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_CLASS_CODE = 893;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation Mood Code' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_MOOD_CODE = 894;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation Code' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_CODE = 895;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Advance Directive Status Observation Status Code' of 'Advance Directive Status Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADVANCE_DIRECTIVE_STATUS_OBSERVATION__ADVANCE_DIRECTIVE_STATUS_OBSERVATION_STATUS_CODE = 896;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consol Encounter Admission Source Value Set' of 'Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER__CONSOL_ENCOUNTER_ADMISSION_SOURCE_VALUE_SET = 897;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consol Encounter Class Code' of 'Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER__CONSOL_ENCOUNTER_CLASS_CODE = 898;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consol Encounter Id' of 'Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER__CONSOL_ENCOUNTER_ID = 899;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consol Encounter Code' of 'Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER__CONSOL_ENCOUNTER_CODE = 900;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consol Encounter Text' of 'Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER__CONSOL_ENCOUNTER_TEXT = 901;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Title' of 'Immunizations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION__IMMUNIZATIONS_SECTION_TITLE = 902;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Text' of 'Immunizations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION__IMMUNIZATIONS_SECTION_TEXT = 903;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Immunization' of 'Immunizations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION__IMMUNIZATIONS_SECTION_IMMUNIZATION = 904;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Template Id' of 'Immunizations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 905;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunizations Section Entries Optional Code' of 'Immunizations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATIONS_SECTION__IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 906;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Information Source' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_INFORMATION_SOURCE = 907;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Sequence Number' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_SEQUENCE_NUMBER = 908;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Payment Providers' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_PAYMENT_PROVIDERS = 909;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Payer Entry ID' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_PAYER_ENTRY_ID = 910;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Health Insurance Type' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_HEALTH_INSURANCE_TYPE = 911;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Insurance Information' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_INSURANCE_INFORMATION = 912;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Insurance Info Source ID' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_INSURANCE_INFO_SOURCE_ID = 913;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Insurance Info Source Addr' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_INSURANCE_INFO_SOURCE_ADDR = 914;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Health Plan Coverage Start Time' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_HEALTH_PLAN_COVERAGE_START_TIME = 915;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Health Plan Coverage Stop Time' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_HEALTH_PLAN_COVERAGE_STOP_TIME = 916;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Patient Information' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_PATIENT_INFORMATION = 917;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Member Id' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_MEMBER_ID = 918;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Member Id Root' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_MEMBER_ID_ROOT = 919;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Relationship To Subscriber' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_RELATIONSHIP_TO_SUBSCRIBER = 920;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Relationship To Subscriber Code System' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_RELATIONSHIP_TO_SUBSCRIBER_CODE_SYSTEM = 921;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Patient Name' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_PATIENT_NAME = 922;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Subscriber Information' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_SUBSCRIBER_INFORMATION = 923;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Subscriber Id' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_SUBSCRIBER_ID = 924;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Subscriber Id Root' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_SUBSCRIBER_ID_ROOT = 925;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Subscriber Address' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_SUBSCRIBER_ADDRESS = 926;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Financial Responsibility Party Type' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_FINANCIAL_RESPONSIBILITY_PARTY_TYPE = 927;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Financial Responsibility Party Type Code' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_FINANCIAL_RESPONSIBILITY_PARTY_TYPE_CODE = 928;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Financial Responsibility Party Address' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_FINANCIAL_RESPONSIBILITY_PARTY_ADDRESS = 929;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Class Code' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_CLASS_CODE = 930;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Mood Code' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_MOOD_CODE = 931;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Id' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_ID = 932;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Code' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_CODE = 933;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Status Code' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_STATUS_CODE = 934;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Insurance Provider Payer Entry' of 'Insurance Provider'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSURANCE_PROVIDER__INSURANCE_PROVIDER_PAYER_ENTRY = 935;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Payer Entity Is Required' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_PAYER_ENTITY_IS_REQUIRED = 936;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Covered Party Is Required' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_COVERED_PARTY_IS_REQUIRED = 937;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Covered Party Time' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_COVERED_PARTY_TIME = 938;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Subscriber Is Allowed' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_SUBSCRIBER_IS_ALLOWED = 939;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Subscriber Time' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_SUBSCRIBER_TIME = 940;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Entry Relationship REFR' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_ENTRY_RELATIONSHIP_REFR = 941;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Class Code' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_CLASS_CODE = 942;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Mood Code' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_MOOD_CODE = 943;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Id' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_ID = 944;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Status Code' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_STATUS_CODE = 945;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Payer Entity' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_PAYER_ENTITY = 946;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Covered Party' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_COVERED_PARTY = 947;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Payer Entry Subscriber' of 'Payer Entry'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYER_ENTRY__PAYER_ENTRY_SUBSCRIBER = 948;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Covered Party Id' of 'Covered Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERED_PARTY__COVERED_PARTY_ID = 949;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Covered Party Code' of 'Covered Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COVERED_PARTY__COVERED_PARTY_CODE = 950;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Policy Subscriber Id' of 'Policy Subscriber'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POLICY_SUBSCRIBER__POLICY_SUBSCRIBER_ID = 951;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Has No Code' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_HAS_NO_CODE = 952;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Has Reference' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_HAS_REFERENCE = 953;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Has Reference External Document' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_HAS_REFERENCE_EXTERNAL_DOCUMENT = 954;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Has Reference External Document ID' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_HAS_REFERENCE_EXTERNAL_DOCUMENT_ID = 955;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Has Reference External Document Text' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_HAS_REFERENCE_EXTERNAL_DOCUMENT_TEXT = 956;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Template Id' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_TEMPLATE_ID = 957;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Class Code' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_CLASS_CODE = 958;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Mood Code' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_MOOD_CODE = 959;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Id' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_ID = 960;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate External Reference Text' of 'External Reference'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int EXTERNAL_REFERENCE__EXTERNAL_REFERENCE_TEXT = 961;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Text' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_TEXT = 962;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Title' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_TITLE = 963;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Vital Signs Organizer' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_VITAL_SIGNS_ORGANIZER = 964;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Template Id' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 965;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Vital Signs Section Entries Optional Code' of 'Vital Signs Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VITAL_SIGNS_SECTION__VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL_CODE = 966;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Past Illness Section Template Id' of 'History Of Past Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PAST_ILLNESS_SECTION__HISTORY_OF_PAST_ILLNESS_SECTION_TEMPLATE_ID = 967;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Past Illness Section Code' of 'History Of Past Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PAST_ILLNESS_SECTION__HISTORY_OF_PAST_ILLNESS_SECTION_CODE = 968;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Past Illness Section Title' of 'History Of Past Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PAST_ILLNESS_SECTION__HISTORY_OF_PAST_ILLNESS_SECTION_TITLE = 969;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Past Illness Section Text' of 'History Of Past Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PAST_ILLNESS_SECTION__HISTORY_OF_PAST_ILLNESS_SECTION_TEXT = 970;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Past Illness Section Problem Observation' of 'History Of Past Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PAST_ILLNESS_SECTION__HISTORY_OF_PAST_ILLNESS_SECTION_PROBLEM_OBSERVATION = 971;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint Section Template Id' of 'Chief Complaint Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_SECTION__CHIEF_COMPLAINT_SECTION_TEMPLATE_ID = 972;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint Section Code' of 'Chief Complaint Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_SECTION__CHIEF_COMPLAINT_SECTION_CODE = 973;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint Section Text' of 'Chief Complaint Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_SECTION__CHIEF_COMPLAINT_SECTION_TEXT = 974;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint Section Title' of 'Chief Complaint Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_SECTION__CHIEF_COMPLAINT_SECTION_TITLE = 975;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Referral Section Template Id' of 'Reason For Referral Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_REFERRAL_SECTION__REASON_FOR_REFERRAL_SECTION_TEMPLATE_ID = 976;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Referral Section Code' of 'Reason For Referral Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_REFERRAL_SECTION__REASON_FOR_REFERRAL_SECTION_CODE = 977;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Referral Section Title' of 'Reason For Referral Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_REFERRAL_SECTION__REASON_FOR_REFERRAL_SECTION_TITLE = 978;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Referral Section Text' of 'Reason For Referral Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_REFERRAL_SECTION__REASON_FOR_REFERRAL_SECTION_TEXT = 979;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Present Illness Section Template Id' of 'History Of Present Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PRESENT_ILLNESS_SECTION__HISTORY_OF_PRESENT_ILLNESS_SECTION_TEMPLATE_ID = 980;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Present Illness Section Code' of 'History Of Present Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PRESENT_ILLNESS_SECTION__HISTORY_OF_PRESENT_ILLNESS_SECTION_CODE = 981;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Present Illness Section Title' of 'History Of Present Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PRESENT_ILLNESS_SECTION__HISTORY_OF_PRESENT_ILLNESS_SECTION_TITLE = 982;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History Of Present Illness Section Text' of 'History Of Present Illness Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_OF_PRESENT_ILLNESS_SECTION__HISTORY_OF_PRESENT_ILLNESS_SECTION_TEXT = 983;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Section Template Id' of 'Hospital Admission Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS_SECTION__HOSPITAL_ADMISSION_DIAGNOSIS_SECTION_TEMPLATE_ID = 984;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Section Code' of 'Hospital Admission Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS_SECTION__HOSPITAL_ADMISSION_DIAGNOSIS_SECTION_CODE = 985;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Medications Section Entries Optional Template Id' of 'Hospital Admission Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 986;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Medications Section Entries Optional Code' of 'Hospital Admission Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 987;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Medications Section Entries Optional Text' of 'Hospital Admission Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEXT = 988;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Medications Section Entries Optional Title' of 'Hospital Admission Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TITLE = 989;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Medications Section Entries Optional Admission Medication' of 'Hospital Admission Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_ADMISSION_MEDICATION = 990;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Admission Medication Template Id' of 'Admission Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADMISSION_MEDICATION__ADMISSION_MEDICATION_TEMPLATE_ID = 991;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Admission Medication Class Code' of 'Admission Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADMISSION_MEDICATION__ADMISSION_MEDICATION_CLASS_CODE = 992;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Admission Medication Code' of 'Admission Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADMISSION_MEDICATION__ADMISSION_MEDICATION_CODE = 993;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Admission Medication Mood Code' of 'Admission Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADMISSION_MEDICATION__ADMISSION_MEDICATION_MOOD_CODE = 994;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Admission Medication Medication Activity' of 'Admission Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ADMISSION_MEDICATION__ADMISSION_MEDICATION_MEDICATION_ACTIVITY = 995;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Administered Section Template Id' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__MEDICATIONS_ADMINISTERED_SECTION_TEMPLATE_ID = 996;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medications Administered Section Code' of 'Medications Administered Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATIONS_ADMINISTERED_SECTION__MEDICATIONS_ADMINISTERED_SECTION_CODE = 997;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Exam Section Template Id' of 'Physical Exam Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_EXAM_SECTION__PHYSICAL_EXAM_SECTION_TEMPLATE_ID = 998;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Exam Section Code' of 'Physical Exam Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_EXAM_SECTION__PHYSICAL_EXAM_SECTION_CODE = 999;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Exam Section Title' of 'Physical Exam Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_EXAM_SECTION__PHYSICAL_EXAM_SECTION_TITLE = 1000;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physical Exam Section Text' of 'Physical Exam Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICAL_EXAM_SECTION__PHYSICAL_EXAM_SECTION_TEXT = 1001;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Status Section Template Id' of 'General Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_STATUS_SECTION__GENERAL_STATUS_SECTION_TEMPLATE_ID = 1002;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Status Section Code' of 'General Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_STATUS_SECTION__GENERAL_STATUS_SECTION_CODE = 1003;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Status Section Title' of 'General Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_STATUS_SECTION__GENERAL_STATUS_SECTION_TITLE = 1004;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Status Section Text' of 'General Status Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int GENERAL_STATUS_SECTION__GENERAL_STATUS_SECTION_TEXT = 1005;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Review Of Systems Section Template Id' of 'Review Of Systems Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REVIEW_OF_SYSTEMS_SECTION__REVIEW_OF_SYSTEMS_SECTION_TEMPLATE_ID = 1006;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Review Of Systems Section Code' of 'Review Of Systems Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REVIEW_OF_SYSTEMS_SECTION__REVIEW_OF_SYSTEMS_SECTION_CODE = 1007;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Review Of Systems Section Title' of 'Review Of Systems Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REVIEW_OF_SYSTEMS_SECTION__REVIEW_OF_SYSTEMS_SECTION_TITLE = 1008;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Review Of Systems Section Text' of 'Review Of Systems Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REVIEW_OF_SYSTEMS_SECTION__REVIEW_OF_SYSTEMS_SECTION_TEXT = 1009;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment And Plan Section Template Id' of 'Assessment And Plan Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_AND_PLAN_SECTION__ASSESSMENT_AND_PLAN_SECTION_TEMPLATE_ID = 1010;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment And Plan Section Code' of 'Assessment And Plan Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_AND_PLAN_SECTION__ASSESSMENT_AND_PLAN_SECTION_CODE = 1011;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment And Plan Section Text' of 'Assessment And Plan Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_AND_PLAN_SECTION__ASSESSMENT_AND_PLAN_SECTION_TEXT = 1012;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment And Plan Section Plan Of Care Activity Act' of 'Assessment And Plan Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_AND_PLAN_SECTION__ASSESSMENT_AND_PLAN_SECTION_PLAN_OF_CARE_ACTIVITY_ACT = 1013;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Spoken No Proficiency Level Code' of 'Language Spoken'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LANGUAGE_SPOKEN__LANGUAGE_SPOKEN_NO_PROFICIENCY_LEVEL_CODE = 1014;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Spoken Language Code' of 'Language Spoken'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LANGUAGE_SPOKEN__LANGUAGE_SPOKEN_LANGUAGE_CODE = 1015;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Language Spoken Mode Code' of 'Language Spoken'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LANGUAGE_SPOKEN__LANGUAGE_SPOKEN_MODE_CODE = 1016;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Surgical Drains Section Template Id' of 'Surgical Drains Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SURGICAL_DRAINS_SECTION__SURGICAL_DRAINS_SECTION_TEMPLATE_ID = 1017;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Surgical Drains Section Code' of 'Surgical Drains Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SURGICAL_DRAINS_SECTION__SURGICAL_DRAINS_SECTION_CODE = 1018;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Surgical Drains Section Text' of 'Surgical Drains Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SURGICAL_DRAINS_SECTION__SURGICAL_DRAINS_SECTION_TEXT = 1019;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Surgical Drains Section Title' of 'Surgical Drains Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SURGICAL_DRAINS_SECTION__SURGICAL_DRAINS_SECTION_TITLE = 1020;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Template Id' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_TEMPLATE_ID = 1021;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Record Target' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_RECORD_TARGET = 1022;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Author' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_AUTHOR = 1023;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Component' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_COMPONENT = 1024;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN = 1025;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Record Target Patient Role2 Id' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_RECORD_TARGET_PATIENT_ROLE2_ID = 1026;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Author Assigned Author2 Addr' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_AUTHOR_ASSIGNED_AUTHOR2_ADDR = 1027;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Author Assigned Author2 Telecom' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_AUTHOR_ASSIGNED_AUTHOR2_TELECOM = 1028;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian Assigned Custodian3 Custodian Organization Addr' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN_ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION_ADDR = 1029;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian Assigned Custodian3 Custodian Organization Id' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN_ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION_ID = 1030;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian Assigned Custodian3 Custodian Organization Name' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN_ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION_NAME = 1031;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian Assigned Custodian3 Custodian Organization Telecom' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN_ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION_TELECOM = 1032;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Document Custodian Assigned Custodian2' of 'Unstructured Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT__UNSTRUCTURED_DOCUMENT_CUSTODIAN_ASSIGNED_CUSTODIAN2 = 1033;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Patient Role2 Id' of 'Record Target Patient Role2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RECORD_TARGET_PATIENT_ROLE2__PATIENT_ROLE2_ID = 1034;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author2 Addr' of 'Author Assigned Author2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR2__ASSIGNED_AUTHOR2_ADDR = 1035;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Author2 Telecom' of 'Author Assigned Author2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int AUTHOR_ASSIGNED_AUTHOR2__ASSIGNED_AUTHOR2_TELECOM = 1036;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Assigned Custodian2' of 'Unstructured Document Custodian'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_DOCUMENT_CUSTODIAN__CUSTODIAN_ASSIGNED_CUSTODIAN2 = 1037;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Addr' of 'Assigned Custodian3 Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_ADDR = 1038;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Id' of 'Assigned Custodian3 Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_ID = 1039;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Name' of 'Assigned Custodian3 Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_NAME = 1040;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Custodian Organization Telecom' of 'Assigned Custodian3 Custodian Organization'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION__CUSTODIAN_ORGANIZATION_TELECOM = 1041;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non XML Body Has Reference Or Representation' of 'Component Non XML Body'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_NON_XML_BODY__NON_XML_BODY_HAS_REFERENCE_OR_REPRESENTATION = 1042;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non XML Body Media Type File Formats' of 'Component Non XML Body'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_NON_XML_BODY__NON_XML_BODY_MEDIA_TYPE_FILE_FORMATS = 1043;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Non XML Body Text' of 'Component Non XML Body'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_NON_XML_BODY__NON_XML_BODY_TEXT = 1044;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scan Original Author Has Assigned Author Id' of 'Scan Original Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCAN_ORIGINAL_AUTHOR__SCAN_ORIGINAL_AUTHOR_HAS_ASSIGNED_AUTHOR_ID = 1045;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scan Original Author Has Assigned Author Represented Organization Id' of 'Scan Original Author'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCAN_ORIGINAL_AUTHOR__SCAN_ORIGINAL_AUTHOR_HAS_ASSIGNED_AUTHOR_REPRESENTED_ORGANIZATION_ID = 1046;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Time Equals Document Effective Time' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_TIME_EQUALS_DOCUMENT_EFFECTIVE_TIME = 1047;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Has Assigned Author Id' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_HAS_ASSIGNED_AUTHOR_ID = 1048;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Has Assigned Authoring Device Code' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_HAS_ASSIGNED_AUTHORING_DEVICE_CODE = 1049;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Has Device Manufacturer Model Name' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_HAS_DEVICE_MANUFACTURER_MODEL_NAME = 1050;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Has Device Software Name' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_HAS_DEVICE_SOFTWARE_NAME = 1051;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scanning Device Has Assigned Author Represented Organization Id' of 'Scanning Device'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCANNING_DEVICE__SCANNING_DEVICE_HAS_ASSIGNED_AUTHOR_REPRESENTED_ORGANIZATION_ID = 1052;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scan Data Enterer Time Equals Document Effective Time' of 'Scan Data Enterer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCAN_DATA_ENTERER__SCAN_DATA_ENTERER_TIME_EQUALS_DOCUMENT_EFFECTIVE_TIME = 1053;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scan Data Enterer Has Assigned Entity Id' of 'Scan Data Enterer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCAN_DATA_ENTERER__SCAN_DATA_ENTERER_HAS_ASSIGNED_ENTITY_ID = 1054;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Scan Data Enterer Time' of 'Scan Data Enterer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SCAN_DATA_ENTERER__SCAN_DATA_ENTERER_TIME = 1055;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Template Id' of 'Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION__MEDICATION_INFORMATION_TEMPLATE_ID = 1056;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Id' of 'Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION__MEDICATION_INFORMATION_ID = 1057;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Class Code' of 'Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION__MEDICATION_INFORMATION_CLASS_CODE = 1058;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufacturer Organization' of 'Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION__MEDICATION_INFORMATION_MANUFACTURER_ORGANIZATION = 1059;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufactured Material' of 'Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION__MEDICATION_INFORMATION_MANUFACTURED_MATERIAL = 1060;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Type Id Fixed' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_TYPE_ID_FIXED = 1061;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has One Record Target' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_ONE_RECORD_TARGET = 1062;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Assigned Author' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_ASSIGNED_AUTHOR = 1063;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Patient Role Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_PATIENT_ROLE_ID = 1064;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Patient Role Address' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_PATIENT_ROLE_ADDRESS = 1065;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Patient Name' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_PATIENT_NAME = 1066;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Patient Gender Code' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_PATIENT_GENDER_CODE = 1067;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Patient Birth Year' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_PATIENT_BIRTH_YEAR = 1068;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Original Author' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_ORIGINAL_AUTHOR = 1069;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Scanning Device' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_SCANNING_DEVICE = 1070;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Scan Data Enterer' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_SCAN_DATA_ENTERER = 1071;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Legal Authenticator Assigned Entity Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY_ID = 1072;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Non XML Body' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_NON_XML_BODY = 1073;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Non XML Body Binary Text' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_NON_XML_BODY_BINARY_TEXT = 1074;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Non XML Body Text Media Type' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_NON_XML_BODY_TEXT_MEDIA_TYPE = 1075;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Non XML Body Text Representation' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_NON_XML_BODY_TEXT_REPRESENTATION = 1076;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document No Structured Data' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_NO_STRUCTURED_DATA = 1077;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document One Patient Per Document' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_ONE_PATIENT_PER_DOCUMENT = 1078;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Patient Role Has Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_PATIENT_ROLE_HAS_ID = 1079;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Assigned Author Has Addr' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_ASSIGNED_AUTHOR_HAS_ADDR = 1080;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Assigned Author Has Telecom' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_ASSIGNED_AUTHOR_HAS_TELECOM = 1081;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Represented Custodian Organization' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_REPRESENTED_CUSTODIAN_ORGANIZATION = 1082;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Represented Custodian Organization Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_REPRESENTED_CUSTODIAN_ORGANIZATION_ID = 1083;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Represented Custodian Organization Name' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_REPRESENTED_CUSTODIAN_ORGANIZATION_NAME = 1084;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Represented Custodian Organization Telecom' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_REPRESENTED_CUSTODIAN_ORGANIZATION_TELECOM = 1085;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Represented Custodian Organization Addr' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_REPRESENTED_CUSTODIAN_ORGANIZATION_ADDR = 1086;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Non XML Body Text' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_NON_XML_BODY_TEXT = 1087;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Text Reference Or Representation' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_TEXT_REFERENCE_OR_REPRESENTATION = 1088;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Has Text Media Type Value Set' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_HAS_TEXT_MEDIA_TYPE_VALUE_SET = 1089;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Code' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_CODE = 1090;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Effective Time' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_EFFECTIVE_TIME = 1091;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_ID = 1092;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Language Code' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_LANGUAGE_CODE = 1093;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Title' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_TITLE = 1094;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Type Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_TYPE_ID = 1095;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Scan Original Author' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_SCAN_ORIGINAL_AUTHOR = 1096;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Scanning Device' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_SCANNING_DEVICE = 1097;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Scan Data Enterer' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_SCAN_DATA_ENTERER = 1098;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Legal Authenticator' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_LEGAL_AUTHENTICATOR = 1099;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Documentation Of' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_DOCUMENTATION_OF = 1100;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Unstructured Or Scanned Document Custodian' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__UNSTRUCTURED_OR_SCANNED_DOCUMENT_CUSTODIAN = 1101;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'Unstructured Or Scanned Document'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int UNSTRUCTURED_OR_SCANNED_DOCUMENT__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 1102;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'Referral Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERRAL_SUMMARY__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 1103;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Referral Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERRAL_SUMMARY__GENERAL_HEADER_CONSTRAINTS_CODE = 1104;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Admission Medications Section Entries Optional' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1105;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Admission Diagnosis Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_ADMISSION_DIAGNOSIS_SECTION = 1106;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Advance Directives Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_ADVANCE_DIRECTIVES_SECTION = 1107;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Allergies Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_ALLERGIES_SECTION = 1108;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Discharge Diagnosis Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION = 1109;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Discharge Diet Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_DISCHARGE_DIET_SECTION = 1110;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Discharge Medications Section Entries Optional' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1111;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Functional Status Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_FUNCTIONAL_STATUS_SECTION = 1112;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary History Of Present Illness Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HISTORY_OF_PRESENT_ILLNESS_SECTION = 1113;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Course Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_COURSE_SECTION = 1114;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Medical Equipment Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_MEDICAL_EQUIPMENT_SECTION = 1115;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Physical Exam Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_PHYSICAL_EXAM_SECTION = 1116;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Plan Of Care Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_PLAN_OF_CARE_SECTION = 1117;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary History Of Past Illness Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HISTORY_OF_PAST_ILLNESS_SECTION = 1118;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Vital Signs Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_VITAL_SIGNS_SECTION = 1119;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF = 1120;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Chief Complaint And Reason For Visit Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION = 1121;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Chief Complaint Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_CHIEF_COMPLAINT_SECTION = 1122;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Family History Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_FAMILY_HISTORY_SECTION = 1123;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Consultations Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_CONSULTATIONS_SECTION = 1124;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Discharge Instructions Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION = 1125;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Discharge Physical Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_DISCHARGE_PHYSICAL_SECTION = 1126;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Hospital Discharge Studies Summary Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION = 1127;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Immunizations Section Entries Optional' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL = 1128;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Problem Section Entries Optional' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_PROBLEM_SECTION_ENTRIES_OPTIONAL = 1129;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Procedures Section Entries Optional' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_PROCEDURES_SECTION_ENTRIES_OPTIONAL = 1130;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Reason For Visit Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_REASON_FOR_VISIT_SECTION = 1131;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Review Of Systems Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_REVIEW_OF_SYSTEMS_SECTION = 1132;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Social History Section' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_SOCIAL_HISTORY_SECTION = 1133;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Responsible Party Assigned Entity Has Person Or Organization' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1134;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Responsible Party Assigned Entity' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1135;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Encounter Participant Assigned Entity Has Person Or Organization' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1136;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Encounter Participant Assigned Entity' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1137;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Encompassing Encounter Has Effective Time Low' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_ENCOMPASSING_ENCOUNTER_HAS_EFFECTIVE_TIME_LOW = 1138;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Encompassing Encounter Has Effective Time High' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_ENCOMPASSING_ENCOUNTER_HAS_EFFECTIVE_TIME_HIGH = 1139;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Effective Time' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_EFFECTIVE_TIME = 1140;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Responsible Party' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY = 1141;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter3 Encounter Participant' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT = 1142;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Summary Component Of Encompassing Encounter' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__DISCHARGE_SUMMARY_COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1143;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Template Id' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__GENERAL_HEADER_CONSTRAINTS_TEMPLATE_ID = 1144;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Discharge Summary'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY__GENERAL_HEADER_CONSTRAINTS_CODE = 1145;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter' of 'Discharge Summary Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_SUMMARY_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1146;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter3 Encompassing Encounter Has Effective Time Low' of 'Component Of Encompassing Encounter3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER3__ENCOMPASSING_ENCOUNTER3_ENCOMPASSING_ENCOUNTER_HAS_EFFECTIVE_TIME_LOW = 1147;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter3 Encompassing Encounter Has Effective Time High' of 'Component Of Encompassing Encounter3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER3__ENCOMPASSING_ENCOUNTER3_ENCOMPASSING_ENCOUNTER_HAS_EFFECTIVE_TIME_HIGH = 1148;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter3 Effective Time' of 'Component Of Encompassing Encounter3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER3__ENCOMPASSING_ENCOUNTER3_EFFECTIVE_TIME = 1149;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter3 Responsible Party' of 'Component Of Encompassing Encounter3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER3__ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY = 1150;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter3 Encounter Participant' of 'Component Of Encompassing Encounter3'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER3__ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT = 1151;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity Has Person Or Organization' of 'Encompassing Encounter3 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1152;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity' of 'Encompassing Encounter3 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1153;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity Has Person Or Organization' of 'Encompassing Encounter3 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1154;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity' of 'Encompassing Encounter3 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1155;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Section Template Id' of 'Hospital Discharge Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION__HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION_TEMPLATE_ID = 1156;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Section Code' of 'Hospital Discharge Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION__HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION_CODE = 1157;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Section Title' of 'Hospital Discharge Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION__HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION_TITLE = 1158;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Section Text' of 'Hospital Discharge Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION__HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION_TEXT = 1159;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Section Hospital Discharge Diagnosis' of 'Hospital Discharge Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION__HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION_HOSPITAL_DISCHARGE_DIAGNOSIS = 1160;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Problem Observation' of 'Hospital Discharge Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS__HOSPITAL_DISCHARGE_DIAGNOSIS_PROBLEM_OBSERVATION = 1161;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Template Id' of 'Hospital Discharge Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS__HOSPITAL_DISCHARGE_DIAGNOSIS_TEMPLATE_ID = 1162;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Class Code' of 'Hospital Discharge Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS__HOSPITAL_DISCHARGE_DIAGNOSIS_CLASS_CODE = 1163;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Mood Code' of 'Hospital Discharge Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS__HOSPITAL_DISCHARGE_DIAGNOSIS_MOOD_CODE = 1164;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Diagnosis Code' of 'Hospital Discharge Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_DIAGNOSIS__HOSPITAL_DISCHARGE_DIAGNOSIS_CODE = 1165;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Diet Section Template Id' of 'Discharge Diet Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_DIET_SECTION__DISCHARGE_DIET_SECTION_TEMPLATE_ID = 1166;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Diet Section Code' of 'Discharge Diet Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_DIET_SECTION__DISCHARGE_DIET_SECTION_CODE = 1167;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Diet Section Title' of 'Discharge Diet Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_DIET_SECTION__DISCHARGE_DIET_SECTION_TITLE = 1168;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Diet Section Text' of 'Discharge Diet Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_DIET_SECTION__DISCHARGE_DIET_SECTION_TEXT = 1169;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Template Id' of 'Hospital Discharge Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 1170;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Code' of 'Hospital Discharge Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 1171;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Title' of 'Hospital Discharge Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TITLE = 1172;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Text' of 'Hospital Discharge Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEXT = 1173;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Discharge Medication' of 'Hospital Discharge Medications Section Entries Optional'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_DISCHARGE_MEDICATION = 1174;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Medication Medication Activity' of 'Discharge Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_MEDICATION__DISCHARGE_MEDICATION_MEDICATION_ACTIVITY = 1175;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Medication Template Id' of 'Discharge Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_MEDICATION__DISCHARGE_MEDICATION_TEMPLATE_ID = 1176;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Medication Class Code' of 'Discharge Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_MEDICATION__DISCHARGE_MEDICATION_CLASS_CODE = 1177;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Medication Mood Code' of 'Discharge Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_MEDICATION__DISCHARGE_MEDICATION_MOOD_CODE = 1178;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Discharge Medication Code' of 'Discharge Medication'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DISCHARGE_MEDICATION__DISCHARGE_MEDICATION_CODE = 1179;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Course Section Template Id' of 'Hospital Course Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_COURSE_SECTION__HOSPITAL_COURSE_SECTION_TEMPLATE_ID = 1180;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Course Section Code' of 'Hospital Course Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_COURSE_SECTION__HOSPITAL_COURSE_SECTION_CODE = 1181;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Course Section Title' of 'Hospital Course Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_COURSE_SECTION__HOSPITAL_COURSE_SECTION_TITLE = 1182;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Course Section Text' of 'Hospital Course Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_COURSE_SECTION__HOSPITAL_COURSE_SECTION_TEXT = 1183;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint And Reason For Visit Section Template Id' of 'Chief Complaint And Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION__CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION_TEMPLATE_ID = 1184;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint And Reason For Visit Section Code' of 'Chief Complaint And Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION__CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION_CODE = 1185;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint And Reason For Visit Section Text' of 'Chief Complaint And Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION__CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION_TEXT = 1186;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Chief Complaint And Reason For Visit Section Title' of 'Chief Complaint And Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION__CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION_TITLE = 1187;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Consultations Section Template Id' of 'Hospital Consultations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_CONSULTATIONS_SECTION__HOSPITAL_CONSULTATIONS_SECTION_TEMPLATE_ID = 1188;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Consultations Section Code' of 'Hospital Consultations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_CONSULTATIONS_SECTION__HOSPITAL_CONSULTATIONS_SECTION_CODE = 1189;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Consultations Section Text' of 'Hospital Consultations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_CONSULTATIONS_SECTION__HOSPITAL_CONSULTATIONS_SECTION_TEXT = 1190;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Consultations Section Title' of 'Hospital Consultations Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_CONSULTATIONS_SECTION__HOSPITAL_CONSULTATIONS_SECTION_TITLE = 1191;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Instructions Section Template Id' of 'Hospital Discharge Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION__HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION_TEMPLATE_ID = 1192;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Instructions Section Code' of 'Hospital Discharge Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION__HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION_CODE = 1193;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Instructions Section Title' of 'Hospital Discharge Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION__HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION_TITLE = 1194;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Instructions Section Text' of 'Hospital Discharge Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION__HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION_TEXT = 1195;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Physical Section Template Id' of 'Hospital Discharge Physical Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_PHYSICAL_SECTION__HOSPITAL_DISCHARGE_PHYSICAL_SECTION_TEMPLATE_ID = 1196;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Physical Section Code' of 'Hospital Discharge Physical Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_PHYSICAL_SECTION__HOSPITAL_DISCHARGE_PHYSICAL_SECTION_CODE = 1197;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Physical Section Title' of 'Hospital Discharge Physical Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_PHYSICAL_SECTION__HOSPITAL_DISCHARGE_PHYSICAL_SECTION_TITLE = 1198;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Physical Section Text' of 'Hospital Discharge Physical Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_PHYSICAL_SECTION__HOSPITAL_DISCHARGE_PHYSICAL_SECTION_TEXT = 1199;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Studies Summary Section Template Id' of 'Hospital Discharge Studies Summary Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION__HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION_TEMPLATE_ID = 1200;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Studies Summary Section Code' of 'Hospital Discharge Studies Summary Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION__HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION_CODE = 1201;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Studies Summary Section Title' of 'Hospital Discharge Studies Summary Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION__HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION_TITLE = 1202;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Studies Summary Section Text' of 'Hospital Discharge Studies Summary Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION__HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION_TEXT = 1203;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Visit Section Template Id' of 'Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_VISIT_SECTION__REASON_FOR_VISIT_SECTION_TEMPLATE_ID = 1204;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Visit Section Code' of 'Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_VISIT_SECTION__REASON_FOR_VISIT_SECTION_CODE = 1205;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Visit Section Text' of 'Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_VISIT_SECTION__REASON_FOR_VISIT_SECTION_TEXT = 1206;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Reason For Visit Section Title' of 'Reason For Visit Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REASON_FOR_VISIT_SECTION__REASON_FOR_VISIT_SECTION_TITLE = 1207;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Precondition For Substance Administration Criterion Code' of 'Precondition For Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION__PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION_CRITERION_CODE = 1208;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Precondition For Substance Administration Criterion Text' of 'Precondition For Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION__PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION_CRITERION_TEXT = 1209;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Precondition For Substance Administration Criterion Value' of 'Precondition For Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION__PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION_CRITERION_VALUE = 1210;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Precondition For Substance Administration Template Id' of 'Precondition For Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION__PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION_TEMPLATE_ID = 1211;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Precondition For Substance Administration Criterion' of 'Precondition For Substance Administration'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION__PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION_CRITERION = 1212;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Template Id' of 'Immunization Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION__IMMUNIZATION_MEDICATION_INFORMATION_TEMPLATE_ID = 1213;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Class Code' of 'Immunization Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION__IMMUNIZATION_MEDICATION_INFORMATION_CLASS_CODE = 1214;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Id' of 'Immunization Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION__IMMUNIZATION_MEDICATION_INFORMATION_ID = 1215;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufacturer Organization' of 'Immunization Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURER_ORGANIZATION = 1216;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufactured Material' of 'Immunization Medication Information'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL = 1217;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimen Specimen Role' of 'Procedure Specimen'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMEN__PROCEDURE_SPECIMEN_SPECIMEN_ROLE = 1218;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimen Speciment Role Id' of 'Procedure Specimen'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMEN__PROCEDURE_SPECIMEN_SPECIMENT_ROLE_ID = 1219;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimen Template Id' of 'Procedure Specimen'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMEN__PROCEDURE_SPECIMEN_TEMPLATE_ID = 1220;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY = 1221;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Id' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_ID = 1222;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Addr' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_ADDR = 1223;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Telecom' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_TELECOM = 1224;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Rep Org' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_REP_ORG = 1225;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Rep Org Id' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_REP_ORG_ID = 1226;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Rep Org Name' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_REP_ORG_NAME = 1227;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Rep Org Addr' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_REP_ORG_ADDR = 1228;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Performer Assigned Entity Rep Org Telecom' of 'Procedure Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_PERFORMER__PROCEDURE_PERFORMER_ASSIGNED_ENTITY_REP_ORG_TELECOM = 1229;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Encounter Class Code' of 'Procedure Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ENCOUNTER__PROCEDURE_ENCOUNTER_CLASS_CODE = 1230;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Encounter Mood Code' of 'Procedure Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ENCOUNTER__PROCEDURE_ENCOUNTER_MOOD_CODE = 1231;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Encounter Id' of 'Procedure Encounter'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ENCOUNTER__PROCEDURE_ENCOUNTER_ID = 1232;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufactured Material Code Original Text' of 'Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_CODE_ORIGINAL_TEXT = 1233;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufactured Material Reference' of 'Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_REFERENCE = 1234;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufactured Material Code Translation' of 'Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_CODE_TRANSLATION = 1235;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Information Manufactured Material Code' of 'Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_CODE = 1236;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Class Code' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_CLASS_CODE = 1237;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Code' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_CODE = 1238;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Code Value Set' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_CODE_VALUE_SET = 1239;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Subject' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_SUBJECT = 1240;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Subject Adm Gender Code' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_SUBJECT_ADM_GENDER_CODE = 1241;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Subject Birth Time' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_SUBJECT_BIRTH_TIME = 1242;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Subject Deceased Ind' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_SUBJECT_DECEASED_IND = 1243;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Family History Subject Related Subject Subject Deceased Time' of 'Family History Subject'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FAMILY_HISTORY_SUBJECT__FAMILY_HISTORY_SUBJECT_RELATED_SUBJECT_SUBJECT_DECEASED_TIME = 1244;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Text' of 'Hospital Discharge Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_TEXT = 1245;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Title' of 'Hospital Discharge Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_TITLE = 1246;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Discharge Medication' of 'Hospital Discharge Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_DISCHARGE_MEDICATION = 1247;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Template Id' of 'Hospital Discharge Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_TEMPLATE_ID = 1248;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Discharge Medications Section Entries Optional Code' of 'Hospital Discharge Medications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_DISCHARGE_MEDICATIONS_SECTION__HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL_CODE = 1249;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Related Informant Addr' of 'Related Informant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RELATED_INFORMANT__RELATED_INFORMANT_ADDR = 1250;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Related Informant Code' of 'Related Informant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int RELATED_INFORMANT__RELATED_INFORMANT_CODE = 1251;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Performer Assigned Entity Code' of 'Encounter Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOUNTER_PERFORMER_ASSIGNED_ENTITY__ENCOUNTER_PERFORMER_ASSIGNED_ENTITY_CODE = 1252;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Participant Participant Role' of 'Allergy Observation Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PARTICIPANT__ALLERGY_OBSERVATION_PARTICIPANT_PARTICIPANT_ROLE = 1253;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Participant Role Playing Entity' of 'Allergy Observation Participant Role'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PARTICIPANT_ROLE__ALLERGY_OBSERVATION_PARTICIPANT_ROLE_PLAYING_ENTITY = 1254;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Playing Entity Code Original Text' of 'Allergy Observation Playing Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PLAYING_ENTITY__ALLERGY_OBSERVATION_PLAYING_ENTITY_CODE_ORIGINAL_TEXT = 1255;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Playing Entity Code Translation' of 'Allergy Observation Playing Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PLAYING_ENTITY__ALLERGY_OBSERVATION_PLAYING_ENTITY_CODE_TRANSLATION = 1256;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Playing Entity Class Code' of 'Allergy Observation Playing Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PLAYING_ENTITY__ALLERGY_OBSERVATION_PLAYING_ENTITY_CLASS_CODE = 1257;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Allergy Observation Playing Entity Code' of 'Allergy Observation Playing Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ALLERGY_OBSERVATION_PLAYING_ENTITY__ALLERGY_OBSERVATION_PLAYING_ENTITY_CODE = 1258;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Template Id' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_TEMPLATE_ID = 1259;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Code' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_CODE = 1260;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Text' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_TEXT = 1261;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Title' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_TITLE = 1262;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Procedure Activity Procedure' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_PROCEDURE_ACTIVITY_PROCEDURE = 1263;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Anesthesia Section Medication Activity' of 'Anesthesia Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ANESTHESIA_SECTION__ANESTHESIA_SECTION_MEDICATION_ACTIVITY = 1264;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Complications Section Template Id' of 'Complications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPLICATIONS_SECTION__COMPLICATIONS_SECTION_TEMPLATE_ID = 1265;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate DICOM Object Catalog Section Template Id' of 'DICOM Object Catalog Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DICOM_OBJECT_CATALOG_SECTION__DICOM_OBJECT_CATALOG_SECTION_TEMPLATE_ID = 1266;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate DICOM Object Catalog Section Code' of 'DICOM Object Catalog Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DICOM_OBJECT_CATALOG_SECTION__DICOM_OBJECT_CATALOG_SECTION_CODE = 1267;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate DICOM Object Catalog Section Study Act' of 'DICOM Object Catalog Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DICOM_OBJECT_CATALOG_SECTION__DICOM_OBJECT_CATALOG_SECTION_STUDY_ACT = 1268;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Template Id' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_TEMPLATE_ID = 1269;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Class Code' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_CLASS_CODE = 1270;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Mood Code' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_MOOD_CODE = 1271;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Id' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_ID = 1272;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Code' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_CODE = 1273;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Effective Time' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_EFFECTIVE_TIME = 1274;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Text' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_TEXT = 1275;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Study Act Series Act' of 'Study Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STUDY_ACT__STUDY_ACT_SERIES_ACT = 1276;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Template Id' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_TEMPLATE_ID = 1277;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Class Code' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_CLASS_CODE = 1278;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Mood Code' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_MOOD_CODE = 1279;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Code' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_CODE = 1280;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Effective Time' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_EFFECTIVE_TIME = 1281;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Id' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_ID = 1282;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act Text' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_TEXT = 1283;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Series Act SOP Instance Observation' of 'Series Act'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERIES_ACT__SERIES_ACT_SOP_INSTANCE_OBSERVATION = 1284;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Template Id' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_TEMPLATE_ID = 1285;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Class Code' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_CLASS_CODE = 1286;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Effective Time' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_EFFECTIVE_TIME = 1287;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Id' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_ID = 1288;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Mood Code' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_MOOD_CODE = 1289;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Text' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_TEXT = 1290;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation SOP Instance Observation' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_SOP_INSTANCE_OBSERVATION = 1291;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Purposeof Reference Observation' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_PURPOSEOF_REFERENCE_OBSERVATION = 1292;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate SOP Instance Observation Referenced Frames Observation' of 'SOP Instance Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SOP_INSTANCE_OBSERVATION__SOP_INSTANCE_OBSERVATION_REFERENCED_FRAMES_OBSERVATION = 1293;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purposeof Reference Observation Template Id' of 'Purposeof Reference Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSEOF_REFERENCE_OBSERVATION__PURPOSEOF_REFERENCE_OBSERVATION_TEMPLATE_ID = 1294;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purposeof Reference Observation Class Code' of 'Purposeof Reference Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSEOF_REFERENCE_OBSERVATION__PURPOSEOF_REFERENCE_OBSERVATION_CLASS_CODE = 1295;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purposeof Reference Observation Code' of 'Purposeof Reference Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSEOF_REFERENCE_OBSERVATION__PURPOSEOF_REFERENCE_OBSERVATION_CODE = 1296;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purposeof Reference Observation Mood Code' of 'Purposeof Reference Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSEOF_REFERENCE_OBSERVATION__PURPOSEOF_REFERENCE_OBSERVATION_MOOD_CODE = 1297;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Purposeof Reference Observation Value' of 'Purposeof Reference Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PURPOSEOF_REFERENCE_OBSERVATION__PURPOSEOF_REFERENCE_OBSERVATION_VALUE = 1298;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Referenced Frames Observation Template Id' of 'Referenced Frames Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCED_FRAMES_OBSERVATION__REFERENCED_FRAMES_OBSERVATION_TEMPLATE_ID = 1299;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Referenced Frames Observation Class Code' of 'Referenced Frames Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCED_FRAMES_OBSERVATION__REFERENCED_FRAMES_OBSERVATION_CLASS_CODE = 1300;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Referenced Frames Observation Code' of 'Referenced Frames Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCED_FRAMES_OBSERVATION__REFERENCED_FRAMES_OBSERVATION_CODE = 1301;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Referenced Frames Observation Mood Code' of 'Referenced Frames Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCED_FRAMES_OBSERVATION__REFERENCED_FRAMES_OBSERVATION_MOOD_CODE = 1302;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Referenced Frames Observation Boundary Observation' of 'Referenced Frames Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int REFERENCED_FRAMES_OBSERVATION__REFERENCED_FRAMES_OBSERVATION_BOUNDARY_OBSERVATION = 1303;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Boundary Observation Template Id' of 'Boundary Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BOUNDARY_OBSERVATION__BOUNDARY_OBSERVATION_TEMPLATE_ID = 1304;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Boundary Observation Class Code' of 'Boundary Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BOUNDARY_OBSERVATION__BOUNDARY_OBSERVATION_CLASS_CODE = 1305;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Boundary Observation Code' of 'Boundary Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BOUNDARY_OBSERVATION__BOUNDARY_OBSERVATION_CODE = 1306;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Boundary Observation Mood Code' of 'Boundary Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BOUNDARY_OBSERVATION__BOUNDARY_OBSERVATION_MOOD_CODE = 1307;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Boundary Observation Value' of 'Boundary Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int BOUNDARY_OBSERVATION__BOUNDARY_OBSERVATION_VALUE = 1308;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Findings Section Template Id' of 'Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int FINDINGS_SECTION__FINDINGS_SECTION_TEMPLATE_ID = 1309;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Interventions Section Template Id' of 'Interventions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERVENTIONS_SECTION__INTERVENTIONS_SECTION_TEMPLATE_ID = 1310;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Interventions Section Code' of 'Interventions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERVENTIONS_SECTION__INTERVENTIONS_SECTION_CODE = 1311;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Interventions Section Text' of 'Interventions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERVENTIONS_SECTION__INTERVENTIONS_SECTION_TEXT = 1312;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Interventions Section Title' of 'Interventions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INTERVENTIONS_SECTION__INTERVENTIONS_SECTION_TITLE = 1313;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical History Section Template Id' of 'Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_HISTORY_SECTION__MEDICAL_HISTORY_SECTION_TEMPLATE_ID = 1314;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical History Section Code' of 'Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_HISTORY_SECTION__MEDICAL_HISTORY_SECTION_CODE = 1315;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical History Section Text' of 'Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_HISTORY_SECTION__MEDICAL_HISTORY_SECTION_TEXT = 1316;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medical History Section Title' of 'Medical History Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICAL_HISTORY_SECTION__MEDICAL_HISTORY_SECTION_TITLE = 1317;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Objective Section Template Id' of 'Objective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OBJECTIVE_SECTION__OBJECTIVE_SECTION_TEMPLATE_ID = 1318;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Objective Section Code' of 'Objective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OBJECTIVE_SECTION__OBJECTIVE_SECTION_CODE = 1319;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Objective Section Text' of 'Objective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OBJECTIVE_SECTION__OBJECTIVE_SECTION_TEXT = 1320;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Objective Section Title' of 'Objective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OBJECTIVE_SECTION__OBJECTIVE_SECTION_TITLE = 1321;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Fluid Section Template Id' of 'Operative Note Fluid Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_FLUID_SECTION__OPERATIVE_NOTE_FLUID_SECTION_TEMPLATE_ID = 1322;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Fluid Section Code' of 'Operative Note Fluid Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_FLUID_SECTION__OPERATIVE_NOTE_FLUID_SECTION_CODE = 1323;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Fluid Section Text' of 'Operative Note Fluid Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_FLUID_SECTION__OPERATIVE_NOTE_FLUID_SECTION_TEXT = 1324;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Fluid Section Title' of 'Operative Note Fluid Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_FLUID_SECTION__OPERATIVE_NOTE_FLUID_SECTION_TITLE = 1325;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Surgical Procedure Section Template Id' of 'Operative Note Surgical Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION__OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION_TEMPLATE_ID = 1326;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Surgical Procedure Section Code' of 'Operative Note Surgical Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION__OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION_CODE = 1327;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Surgical Procedure Section Text' of 'Operative Note Surgical Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION__OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION_TEXT = 1328;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Surgical Procedure Section Title' of 'Operative Note Surgical Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION__OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION_TITLE = 1329;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Planned Procedure Section Template Id' of 'Planned Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLANNED_PROCEDURE_SECTION__PLANNED_PROCEDURE_SECTION_TEMPLATE_ID = 1330;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Planned Procedure Section Code' of 'Planned Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLANNED_PROCEDURE_SECTION__PLANNED_PROCEDURE_SECTION_CODE = 1331;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Planned Procedure Section Text' of 'Planned Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLANNED_PROCEDURE_SECTION__PLANNED_PROCEDURE_SECTION_TEXT = 1332;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Planned Procedure Section Title' of 'Planned Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLANNED_PROCEDURE_SECTION__PLANNED_PROCEDURE_SECTION_TITLE = 1333;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Planned Procedure Section Plan Of Care Activity Procedure' of 'Planned Procedure Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PLANNED_PROCEDURE_SECTION__PLANNED_PROCEDURE_SECTION_PLAN_OF_CARE_ACTIVITY_PROCEDURE = 1334;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postoperative Diagnosis Section Template Id' of 'Postoperative Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTOPERATIVE_DIAGNOSIS_SECTION__POSTOPERATIVE_DIAGNOSIS_SECTION_TEMPLATE_ID = 1335;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postoperative Diagnosis Section Code' of 'Postoperative Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTOPERATIVE_DIAGNOSIS_SECTION__POSTOPERATIVE_DIAGNOSIS_SECTION_CODE = 1336;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postoperative Diagnosis Section Text' of 'Postoperative Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTOPERATIVE_DIAGNOSIS_SECTION__POSTOPERATIVE_DIAGNOSIS_SECTION_TEXT = 1337;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postoperative Diagnosis Section Title' of 'Postoperative Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTOPERATIVE_DIAGNOSIS_SECTION__POSTOPERATIVE_DIAGNOSIS_SECTION_TITLE = 1338;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Section Template Id' of 'Postprocedure Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS_SECTION__POSTPROCEDURE_DIAGNOSIS_SECTION_TEMPLATE_ID = 1339;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Section Code' of 'Postprocedure Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS_SECTION__POSTPROCEDURE_DIAGNOSIS_SECTION_CODE = 1340;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Section Text' of 'Postprocedure Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS_SECTION__POSTPROCEDURE_DIAGNOSIS_SECTION_TEXT = 1341;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Section Title' of 'Postprocedure Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS_SECTION__POSTPROCEDURE_DIAGNOSIS_SECTION_TITLE = 1342;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Section Postprocedure Diagnosis' of 'Postprocedure Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS_SECTION__POSTPROCEDURE_DIAGNOSIS_SECTION_POSTPROCEDURE_DIAGNOSIS = 1343;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Template Id' of 'Postprocedure Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS__POSTPROCEDURE_DIAGNOSIS_TEMPLATE_ID = 1344;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Class Code' of 'Postprocedure Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS__POSTPROCEDURE_DIAGNOSIS_CLASS_CODE = 1345;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Code' of 'Postprocedure Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS__POSTPROCEDURE_DIAGNOSIS_CODE = 1346;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Mood Code' of 'Postprocedure Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS__POSTPROCEDURE_DIAGNOSIS_MOOD_CODE = 1347;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Postprocedure Diagnosis Problem Observation' of 'Postprocedure Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int POSTPROCEDURE_DIAGNOSIS__POSTPROCEDURE_DIAGNOSIS_PROBLEM_OBSERVATION = 1348;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Section Template Id' of 'Preoperative Diagnosis Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS_SECTION__PREOPERATIVE_DIAGNOSIS_SECTION_TEMPLATE_ID = 1349;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Description Section Template Id' of 'Procedure Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DESCRIPTION_SECTION__PROCEDURE_DESCRIPTION_SECTION_TEMPLATE_ID = 1350;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Description Section Code' of 'Procedure Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DESCRIPTION_SECTION__PROCEDURE_DESCRIPTION_SECTION_CODE = 1351;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Description Section Text' of 'Procedure Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DESCRIPTION_SECTION__PROCEDURE_DESCRIPTION_SECTION_TEXT = 1352;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Description Section Title' of 'Procedure Description Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DESCRIPTION_SECTION__PROCEDURE_DESCRIPTION_SECTION_TITLE = 1353;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Disposition Section Template Id' of 'Procedure Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DISPOSITION_SECTION__PROCEDURE_DISPOSITION_SECTION_TEMPLATE_ID = 1354;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Disposition Section Code' of 'Procedure Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DISPOSITION_SECTION__PROCEDURE_DISPOSITION_SECTION_CODE = 1355;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Disposition Section Text' of 'Procedure Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DISPOSITION_SECTION__PROCEDURE_DISPOSITION_SECTION_TEXT = 1356;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Disposition Section Title' of 'Procedure Disposition Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_DISPOSITION_SECTION__PROCEDURE_DISPOSITION_SECTION_TITLE = 1357;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Estimated Blood Loss Section Template Id' of 'Procedure Estimated Blood Loss Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION__PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION_TEMPLATE_ID = 1358;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Estimated Blood Loss Section Code' of 'Procedure Estimated Blood Loss Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION__PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION_CODE = 1359;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Estimated Blood Loss Section Text' of 'Procedure Estimated Blood Loss Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION__PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION_TEXT = 1360;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Estimated Blood Loss Section Title' of 'Procedure Estimated Blood Loss Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION__PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION_TITLE = 1361;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Findings Section Template Id' of 'Procedure Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_FINDINGS_SECTION__PROCEDURE_FINDINGS_SECTION_TEMPLATE_ID = 1362;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Findings Section Code' of 'Procedure Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_FINDINGS_SECTION__PROCEDURE_FINDINGS_SECTION_CODE = 1363;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Findings Section Text' of 'Procedure Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_FINDINGS_SECTION__PROCEDURE_FINDINGS_SECTION_TEXT = 1364;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Findings Section Title' of 'Procedure Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_FINDINGS_SECTION__PROCEDURE_FINDINGS_SECTION_TITLE = 1365;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Findings Section Problem Observation' of 'Procedure Findings Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_FINDINGS_SECTION__PROCEDURE_FINDINGS_SECTION_PROBLEM_OBSERVATION = 1366;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Implants Section Template Id' of 'Procedure Implants Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_IMPLANTS_SECTION__PROCEDURE_IMPLANTS_SECTION_TEMPLATE_ID = 1367;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Implants Section Code' of 'Procedure Implants Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_IMPLANTS_SECTION__PROCEDURE_IMPLANTS_SECTION_CODE = 1368;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Implants Section Text' of 'Procedure Implants Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_IMPLANTS_SECTION__PROCEDURE_IMPLANTS_SECTION_TEXT = 1369;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Implants Section Title' of 'Procedure Implants Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_IMPLANTS_SECTION__PROCEDURE_IMPLANTS_SECTION_TITLE = 1370;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Indications Section Template Id' of 'Procedure Indications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_INDICATIONS_SECTION__PROCEDURE_INDICATIONS_SECTION_TEMPLATE_ID = 1371;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Indications Section Code' of 'Procedure Indications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_INDICATIONS_SECTION__PROCEDURE_INDICATIONS_SECTION_CODE = 1372;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Indications Section Text' of 'Procedure Indications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_INDICATIONS_SECTION__PROCEDURE_INDICATIONS_SECTION_TEXT = 1373;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Indications Section Title' of 'Procedure Indications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_INDICATIONS_SECTION__PROCEDURE_INDICATIONS_SECTION_TITLE = 1374;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Indications Section Indication' of 'Procedure Indications Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_INDICATIONS_SECTION__PROCEDURE_INDICATIONS_SECTION_INDICATION = 1375;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimens Taken Section Template Id' of 'Procedure Specimens Taken Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMENS_TAKEN_SECTION__PROCEDURE_SPECIMENS_TAKEN_SECTION_TEMPLATE_ID = 1376;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimens Taken Section Code' of 'Procedure Specimens Taken Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMENS_TAKEN_SECTION__PROCEDURE_SPECIMENS_TAKEN_SECTION_CODE = 1377;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimens Taken Section Text' of 'Procedure Specimens Taken Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMENS_TAKEN_SECTION__PROCEDURE_SPECIMENS_TAKEN_SECTION_TEXT = 1378;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Specimens Taken Section Title' of 'Procedure Specimens Taken Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_SPECIMENS_TAKEN_SECTION__PROCEDURE_SPECIMENS_TAKEN_SECTION_TITLE = 1379;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Subjective Section Template Id' of 'Subjective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SUBJECTIVE_SECTION__SUBJECTIVE_SECTION_TEMPLATE_ID = 1380;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Subjective Section Code' of 'Subjective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SUBJECTIVE_SECTION__SUBJECTIVE_SECTION_CODE = 1381;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Subjective Section Text' of 'Subjective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SUBJECTIVE_SECTION__SUBJECTIVE_SECTION_TEXT = 1382;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Subjective Section Title' of 'Subjective Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SUBJECTIVE_SECTION__SUBJECTIVE_SECTION_TITLE = 1383;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Template Id' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_TEMPLATE_ID = 1384;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note In Fulfillment Of' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_IN_FULFILLMENT_OF = 1385;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF = 1386;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Assessment Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_ASSESSMENT_SECTION = 1387;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Assessment And Plan Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_ASSESSMENT_AND_PLAN_SECTION = 1388;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Plan Of Care Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_PLAN_OF_CARE_SECTION = 1389;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note History Of Present Illness' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_HISTORY_OF_PRESENT_ILLNESS = 1390;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Physical Exam Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_PHYSICAL_EXAM_SECTION = 1391;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Reason For Referral Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_REASON_FOR_REFERRAL_SECTION = 1392;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Reason For Visit Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_REASON_FOR_VISIT_SECTION = 1393;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Allergies Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_ALLERGIES_SECTION = 1394;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Chief Complaint Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_CHIEF_COMPLAINT_SECTION = 1395;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Chief Complaint And Reason For Visit Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION = 1396;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Family History Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_FAMILY_HISTORY_SECTION = 1397;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note General Status Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_GENERAL_STATUS_SECTION = 1398;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note History Of Past Illness Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_HISTORY_OF_PAST_ILLNESS_SECTION = 1399;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Immunizations Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_IMMUNIZATIONS_SECTION = 1400;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Medications Section Entries Optional' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1401;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Problem Section Entries Optional' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_PROBLEM_SECTION_ENTRIES_OPTIONAL = 1402;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Procedures Section Entries Optional' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_PROCEDURES_SECTION_ENTRIES_OPTIONAL = 1403;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Results Section Entries Optional' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_RESULTS_SECTION_ENTRIES_OPTIONAL = 1404;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Review Of Systems Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_REVIEW_OF_SYSTEMS_SECTION = 1405;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Social History Section' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_SOCIAL_HISTORY_SECTION = 1406;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Vital Signs Section Entries Optional' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL = 1407;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note In Fulfillment Of Order Id' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_IN_FULFILLMENT_OF_ORDER_ID = 1408;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note In Fulfillment Of Order' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_IN_FULFILLMENT_OF_ORDER = 1409;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Encounter Participant Assigned Entity Has Person Organization Or Both' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_ORGANIZATION_OR_BOTH = 1410;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Encounter Participant Assigned Entity' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1411;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Responsible Party Assigned Entity Has Person Organization Or Both' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_ORGANIZATION_OR_BOTH = 1412;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Responsible Party Assigned Entity' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1413;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Effective Time' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_EFFECTIVE_TIME = 1414;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Id' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_ID = 1415;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Responsible Party' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY = 1416;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter2 Encounter Participant' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT = 1417;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Consultation Note Component Of Encompassing Encounter' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__CONSULTATION_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1418;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Consultation Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE__GENERAL_HEADER_CONSTRAINTS_CODE = 1419;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter' of 'Consultation Note Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CONSULTATION_NOTE_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1420;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter2 Effective Time' of 'Component Of Encompassing Encounter2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER2__ENCOMPASSING_ENCOUNTER2_EFFECTIVE_TIME = 1421;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter2 Id' of 'Component Of Encompassing Encounter2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER2__ENCOMPASSING_ENCOUNTER2_ID = 1422;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter2 Responsible Party' of 'Component Of Encompassing Encounter2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER2__ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY = 1423;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter2 Encounter Participant' of 'Component Of Encompassing Encounter2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER2__ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT = 1424;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity Has Person Organization Or Both' of 'Encompassing Encounter2 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_ORGANIZATION_OR_BOTH = 1425;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity' of 'Encompassing Encounter2 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1426;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity Has Person Organization Or Both' of 'Encompassing Encounter2 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_ORGANIZATION_OR_BOTH = 1427;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity' of 'Encompassing Encounter2 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1428;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment Section Template Id' of 'Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_SECTION__ASSESSMENT_SECTION_TEMPLATE_ID = 1429;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment Section Code' of 'Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_SECTION__ASSESSMENT_SECTION_CODE = 1430;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assessment Section Text' of 'Assessment Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSESSMENT_SECTION__ASSESSMENT_SECTION_TEXT = 1431;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Has An Assement And Plan Section Or Individual Assement And Plan Sections' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_HAS_AN_ASSEMENT_AND_PLAN_SECTION_OR_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS = 1432;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Does Not Have Individual Assement And Plan Sections When Assement And Plan Section Present' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_DOES_NOT_HAVE_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS_WHEN_ASSEMENT_AND_PLAN_SECTION_PRESENT = 1433;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Template Id' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_TEMPLATE_ID = 1434;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note In Fulfillment Of' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_IN_FULFILLMENT_OF = 1435;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF = 1436;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Allergies Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_ALLERGIES_SECTION_ENTRIES_OPTIONAL = 1437;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Assessment Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_ASSESSMENT_SECTION = 1438;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Plan Of Care Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_PLAN_OF_CARE_SECTION = 1439;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Assessment And Plan Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_ASSESSMENT_AND_PLAN_SECTION = 1440;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Chief Complaint Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_CHIEF_COMPLAINT_SECTION = 1441;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Chief Complaint And Reason For Visit Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION = 1442;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Family History Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_FAMILY_HISTORY_SECTION = 1443;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note General Status Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_GENERAL_STATUS_SECTION = 1444;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note History Of Past Illness Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_HISTORY_OF_PAST_ILLNESS_SECTION = 1445;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Medications Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1446;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Physical Exam Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_PHYSICAL_EXAM_SECTION = 1447;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Reason For Visit Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_REASON_FOR_VISIT_SECTION = 1448;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Results Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_RESULTS_SECTION_ENTRIES_OPTIONAL = 1449;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Review Of Systems Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_REVIEW_OF_SYSTEMS_SECTION = 1450;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Social History Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_SOCIAL_HISTORY_SECTION = 1451;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note History Of Present Illness Section' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_HISTORY_OF_PRESENT_ILLNESS_SECTION = 1452;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Immunizations Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL = 1453;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Problem Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_PROBLEM_SECTION_ENTRIES_OPTIONAL = 1454;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Procedures Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_PROCEDURES_SECTION_ENTRIES_OPTIONAL = 1455;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Vital Signs Section Entries Optional' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL = 1456;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Responsible Party Assigned Entity Has Person Or Organization' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1457;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Responsible Party Assigned Entity' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1458;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Encounter Participant Assigned Entity Has Person Or Organization' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1459;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Encounter Participant Assigned Entity' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1460;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Effective Time' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_EFFECTIVE_TIME = 1461;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Id' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_ID = 1462;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Location' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_LOCATION = 1463;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Responsible Party' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY = 1464;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter4 Encounter Participant' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT = 1465;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate History And Physical Note Component Of Encompassing Encounter' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1466;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'History And Physical Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE__GENERAL_HEADER_CONSTRAINTS_CODE = 1467;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter' of 'History And Physical Note Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1468;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter4 Effective Time' of 'Component Of Encompassing Encounter4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER4__ENCOMPASSING_ENCOUNTER4_EFFECTIVE_TIME = 1469;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter4 Id' of 'Component Of Encompassing Encounter4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER4__ENCOMPASSING_ENCOUNTER4_ID = 1470;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter4 Location' of 'Component Of Encompassing Encounter4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER4__ENCOMPASSING_ENCOUNTER4_LOCATION = 1471;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter4 Responsible Party' of 'Component Of Encompassing Encounter4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER4__ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY = 1472;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter4 Encounter Participant' of 'Component Of Encompassing Encounter4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER4__ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT = 1473;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity Has Person Or Organization' of 'Encompassing Encounter4 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1474;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity' of 'Encompassing Encounter4 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1475;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity Has Person Or Organization' of 'Encompassing Encounter4 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY_HAS_PERSON_OR_ORGANIZATION = 1476;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Assigned Entity' of 'Encompassing Encounter4 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_ASSIGNED_ENTITY = 1477;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Template Id' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_TEMPLATE_ID = 1478;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF = 1479;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Anesthesia Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_ANESTHESIA_SECTION = 1480;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Complications Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_COMPLICATIONS_SECTION = 1481;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Postoperative Diagnosis Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_POSTOPERATIVE_DIAGNOSIS_SECTION = 1482;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Preoperative Diagnosis Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PREOPERATIVE_DIAGNOSIS_SECTION = 1483;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Estimated Blood Loss Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION = 1484;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Findings Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_FINDINGS_SECTION = 1485;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Specimens Taken Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_SPECIMENS_TAKEN_SECTION = 1486;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Description Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_DESCRIPTION_SECTION = 1487;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Implants Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_IMPLANTS_SECTION = 1488;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Operative Note Fluid Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_OPERATIVE_NOTE_FLUID_SECTION = 1489;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Operative Note Surgical Procedure Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION = 1490;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Plan Of Care Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PLAN_OF_CARE_SECTION = 1491;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Planned Procedure Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PLANNED_PROCEDURE_SECTION = 1492;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Disposition Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_DISPOSITION_SECTION = 1493;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Procedure Indications Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_PROCEDURE_INDICATIONS_SECTION = 1494;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Surgical Drains Section' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_SURGICAL_DRAINS_SECTION = 1495;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Primary Performer Function Code' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_PRIMARY_PERFORMER_FUNCTION_CODE = 1496;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Primary Performer Type Code' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_PRIMARY_PERFORMER_TYPE_CODE = 1497;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Procedure Codes' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_PROCEDURE_CODES = 1498;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Effective Time Has Low' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_EFFECTIVE_TIME_HAS_LOW = 1499;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Effective Time Has High When No Width' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_EFFECTIVE_TIME_HAS_HIGH_WHEN_NO_WIDTH = 1500;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Effective Time No High If Width' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_EFFECTIVE_TIME_NO_HIGH_IF_WIDTH = 1501;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Any Assistants As Secondary' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_ANY_ASSISTANTS_AS_SECONDARY = 1502;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Code' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_CODE = 1503;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event Effective Time' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT_EFFECTIVE_TIME = 1504;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Operative Note Documentation Of Service Event' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__OPERATIVE_NOTE_DOCUMENTATION_OF_SERVICE_EVENT = 1505;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Operative Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE__GENERAL_HEADER_CONSTRAINTS_CODE = 1506;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Documentation Of Service Event' of 'Operative Note Documentation Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int OPERATIVE_NOTE_DOCUMENTATION_OF__DOCUMENTATION_OF_SERVICE_EVENT = 1507;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Procedure Codes' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_PROCEDURE_CODES = 1508;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Effective Time Has Low' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_EFFECTIVE_TIME_HAS_LOW = 1509;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Effective Time Has High When No Width' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_EFFECTIVE_TIME_HAS_HIGH_WHEN_NO_WIDTH = 1510;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Effective Time No High If Width' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_EFFECTIVE_TIME_NO_HIGH_IF_WIDTH = 1511;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Any Assistants As Secondary' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_ANY_ASSISTANTS_AS_SECONDARY = 1512;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Code' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_CODE = 1513;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event Effective Time' of 'Documentation Of Service Event'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT__SERVICE_EVENT_EFFECTIVE_TIME = 1514;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Performer Function Code' of 'Service Event Primary Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_EVENT_PRIMARY_PERFORMER__PRIMARY_PERFORMER_FUNCTION_CODE = 1515;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Performer Type Code' of 'Service Event Primary Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_EVENT_PRIMARY_PERFORMER__PRIMARY_PERFORMER_TYPE_CODE = 1516;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Has An Assement And Plan Section Or Individual Assement And Plan Sections' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_HAS_AN_ASSEMENT_AND_PLAN_SECTION_OR_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS = 1517;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Does Not Have Individual Assement And Plan Sections When Assement And Plan Section Present' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_DOES_NOT_HAVE_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS_WHEN_ASSEMENT_AND_PLAN_SECTION_PRESENT = 1518;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Template Id' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_TEMPLATE_ID = 1519;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Individual' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_INDIVIDUAL = 1520;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF = 1521;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Primary Care Physician' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PRIMARY_CARE_PHYSICIAN = 1522;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Provider' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROVIDER = 1523;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Assessment Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_ASSESSMENT_SECTION = 1524;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Plan Of Care Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PLAN_OF_CARE_SECTION = 1525;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Assessment And Plan Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_ASSESSMENT_AND_PLAN_SECTION = 1526;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Complications Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPLICATIONS_SECTION = 1527;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Postprocedure Diagnosis Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_POSTPROCEDURE_DIAGNOSIS_SECTION = 1528;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Description Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_DESCRIPTION_SECTION = 1529;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Indications Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_INDICATIONS_SECTION = 1530;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Allergies Section Entries Optional' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_ALLERGIES_SECTION_ENTRIES_OPTIONAL = 1531;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Anesthesia Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_ANESTHESIA_SECTION = 1532;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Chief Complaint Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_CHIEF_COMPLAINT_SECTION = 1533;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Chief Complaint And Reason For Visit Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION = 1534;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Family History Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_FAMILY_HISTORY_SECTION = 1535;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note History Of Past Illness Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_HISTORY_OF_PAST_ILLNESS_SECTION = 1536;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note History Of Present Illness Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_HISTORY_OF_PRESENT_ILLNESS_SECTION = 1537;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Medical History Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_MEDICAL_HISTORY_SECTION = 1538;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Medications Section Entries Optional' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1539;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Medications Administered Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_MEDICATIONS_ADMINISTERED_SECTION = 1540;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Physical Exam Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PHYSICAL_EXAM_SECTION = 1541;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Planned Procedure Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PLANNED_PROCEDURE_SECTION = 1542;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Disposition Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_DISPOSITION_SECTION = 1543;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Estimated Blood Loss Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION = 1544;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Findings Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_FINDINGS_SECTION = 1545;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Implants Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_IMPLANTS_SECTION = 1546;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedure Specimens Taken Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURE_SPECIMENS_TAKEN_SECTION = 1547;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Procedures Section Entries Optional' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROCEDURES_SECTION_ENTRIES_OPTIONAL = 1548;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Reason For Visit Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_REASON_FOR_VISIT_SECTION = 1549;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Review Of Systems Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_REVIEW_OF_SYSTEMS_SECTION = 1550;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Social History Section' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_SOCIAL_HISTORY_SECTION = 1551;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Individual Type Id' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_INDIVIDUAL_TYPE_ID = 1552;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Location Health Care Facility Id' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_LOCATION_HEALTH_CARE_FACILITY_ID = 1553;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Location Health Care Facility' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_LOCATION_HEALTH_CARE_FACILITY = 1554;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Encounter Participant Type Code' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_ENCOUNTER_PARTICIPANT_TYPE_CODE = 1555;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Code' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_CODE = 1556;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Location' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_LOCATION = 1557;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5 Encounter Participant' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5_ENCOUNTER_PARTICIPANT = 1558;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Component Of Encompassing Encounter5' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER5 = 1559;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Note Provider Associated Entity Associated Person' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__PROCEDURE_NOTE_PROVIDER_ASSOCIATED_ENTITY_ASSOCIATED_PERSON = 1560;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Procedure Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE__GENERAL_HEADER_CONSTRAINTS_CODE = 1561;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter5' of 'Procedure Note Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER5 = 1562;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter5 Code' of 'Component Of Encompassing Encounter5'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER5__ENCOMPASSING_ENCOUNTER5_CODE = 1563;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter5 Location' of 'Component Of Encompassing Encounter5'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER5__ENCOMPASSING_ENCOUNTER5_LOCATION = 1564;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter5 Encounter Participant' of 'Component Of Encompassing Encounter5'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER5__ENCOMPASSING_ENCOUNTER5_ENCOUNTER_PARTICIPANT = 1565;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Location Health Care Facility' of 'Encompassing Encounter5 Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER5_LOCATION__LOCATION_HEALTH_CARE_FACILITY = 1566;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Care Facility Id' of 'Location Health Care Facility'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_HEALTH_CARE_FACILITY__HEALTH_CARE_FACILITY_ID = 1567;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encounter Participant Type Code' of 'Encompassing Encounter5 Encounter Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER5_ENCOUNTER_PARTICIPANT__ENCOUNTER_PARTICIPANT_TYPE_CODE = 1568;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Individual Type Id' of 'Procedure Note Individual'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_NOTE_INDIVIDUAL__INDIVIDUAL_TYPE_ID = 1569;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Associated Entity Associated Person' of 'Provider Associated Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROVIDER_ASSOCIATED_ENTITY__ASSOCIATED_ENTITY_ASSOCIATED_PERSON = 1570;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Procedure Codes' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_PROCEDURE_CODES = 1571;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Effective Time Has Low' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_EFFECTIVE_TIME_HAS_LOW = 1572;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Effective Time Has High When No Width' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_EFFECTIVE_TIME_HAS_HIGH_WHEN_NO_WIDTH = 1573;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Effective Time No High If Width' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_EFFECTIVE_TIME_NO_HIGH_IF_WIDTH = 1574;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Any Assistants As Secondary' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_ANY_ASSISTANTS_AS_SECONDARY = 1575;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Code' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_CODE = 1576;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event1 Effective Time' of 'Documentation Of Service Event1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT1__SERVICE_EVENT1_EFFECTIVE_TIME = 1577;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Primary Performer Function Code' of 'Service Event1 Primary Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int SERVICE_EVENT1_PRIMARY_PERFORMER__PRIMARY_PERFORMER_FUNCTION_CODE = 1578;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Has An Assement And Plan Section Or Individual Assement And Plan Sections' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_HAS_AN_ASSEMENT_AND_PLAN_SECTION_OR_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS = 1579;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Does Not Have Individual Assement And Plan Sections When Assement And Plan Section Present' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_DOES_NOT_HAVE_INDIVIDUAL_ASSEMENT_AND_PLAN_SECTIONS_WHEN_ASSEMENT_AND_PLAN_SECTION_PRESENT = 1580;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Template Id' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_TEMPLATE_ID = 1581;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Documentation Of' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_DOCUMENTATION_OF = 1582;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Component Of' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_COMPONENT_OF = 1583;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Assessment Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_ASSESSMENT_SECTION = 1584;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Plan Of Care Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_PLAN_OF_CARE_SECTION = 1585;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Assessment And Plan Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_ASSESSMENT_AND_PLAN_SECTION = 1586;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Allergies Section Entries Optional' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_ALLERGIES_SECTION_ENTRIES_OPTIONAL = 1587;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Chief Complaint Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_CHIEF_COMPLAINT_SECTION = 1588;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Interventions Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_INTERVENTIONS_SECTION = 1589;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Medications Section Entries Optional' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL = 1590;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Objective Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_OBJECTIVE_SECTION = 1591;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Physical Exam Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_PHYSICAL_EXAM_SECTION = 1592;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Problem Section Entries Optional' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_PROBLEM_SECTION_ENTRIES_OPTIONAL = 1593;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Results Section Entries Optional' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_RESULTS_SECTION_ENTRIES_OPTIONAL = 1594;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Review Of Systems Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_REVIEW_OF_SYSTEMS_SECTION = 1595;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Subjective Section' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_SUBJECTIVE_SECTION = 1596;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Vital Signs Section Entries Optional' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL = 1597;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Documentation Of Service Event2 Class Code' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_DOCUMENTATION_OF_SERVICE_EVENT2_CLASS_CODE = 1598;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Documentation Of Service Event2 Effective Time' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_DOCUMENTATION_OF_SERVICE_EVENT2_EFFECTIVE_TIME = 1599;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Documentation Of Service Event2' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_DOCUMENTATION_OF_SERVICE_EVENT2 = 1600;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Component Of Encompassing Encounter6 Location Health Care Facility1 Id' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER6_LOCATION_HEALTH_CARE_FACILITY1_ID = 1601;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Component Of Encompassing Encounter6 Effective Time' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER6_EFFECTIVE_TIME = 1602;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Component Of Encompassing Encounter6 Id' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER6_ID = 1603;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Progress Note Component Of Encompassing Encounter6 Location' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__PROGRESS_NOTE_COMPONENT_OF_ENCOMPASSING_ENCOUNTER6_LOCATION = 1604;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Progress Note'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE__GENERAL_HEADER_CONSTRAINTS_CODE = 1605;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Documentation Of Service Event2' of 'Progress Note Documentation Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROGRESS_NOTE_DOCUMENTATION_OF__DOCUMENTATION_OF_SERVICE_EVENT2 = 1606;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event2 Class Code' of 'Documentation Of Service Event2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT2__SERVICE_EVENT2_CLASS_CODE = 1607;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event2 Effective Time' of 'Documentation Of Service Event2'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT2__SERVICE_EVENT2_EFFECTIVE_TIME = 1608;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter6 Effective Time' of 'Component Of Encompassing Encounter6'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER6__ENCOMPASSING_ENCOUNTER6_EFFECTIVE_TIME = 1609;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter6 Id' of 'Component Of Encompassing Encounter6'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER6__ENCOMPASSING_ENCOUNTER6_ID = 1610;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter6 Location' of 'Component Of Encompassing Encounter6'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER6__ENCOMPASSING_ENCOUNTER6_LOCATION = 1611;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Health Care Facility1 Id' of 'Location Health Care Facility1'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION_HEALTH_CARE_FACILITY1__HEALTH_CARE_FACILITY1_ID = 1612;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Template Id' of 'Preoperative Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS__PREOPERATIVE_DIAGNOSIS_TEMPLATE_ID = 1613;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Class Code' of 'Preoperative Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS__PREOPERATIVE_DIAGNOSIS_CLASS_CODE = 1614;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Code' of 'Preoperative Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS__PREOPERATIVE_DIAGNOSIS_CODE = 1615;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Mood Code' of 'Preoperative Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS__PREOPERATIVE_DIAGNOSIS_MOOD_CODE = 1616;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Preoperative Diagnosis Problem Observation' of 'Preoperative Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PREOPERATIVE_DIAGNOSIS__PREOPERATIVE_DIAGNOSIS_PROBLEM_OBSERVATION = 1617;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Section Code' of 'Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS_SECTION__INSTRUCTIONS_SECTION_CODE = 1618;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Section Text' of 'Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS_SECTION__INSTRUCTIONS_SECTION_TEXT = 1619;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Section Title' of 'Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS_SECTION__INSTRUCTIONS_SECTION_TITLE = 1620;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Instructions Section Instructions' of 'Instructions Section'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INSTRUCTIONS_SECTION__INSTRUCTIONS_SECTION_INSTRUCTIONS = 1621;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Template Id' of 'Hospital Admission Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS__HOSPITAL_ADMISSION_DIAGNOSIS_TEMPLATE_ID = 1622;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Class Code' of 'Hospital Admission Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS__HOSPITAL_ADMISSION_DIAGNOSIS_CLASS_CODE = 1623;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Code' of 'Hospital Admission Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS__HOSPITAL_ADMISSION_DIAGNOSIS_CODE = 1624;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Mood Code' of 'Hospital Admission Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS__HOSPITAL_ADMISSION_DIAGNOSIS_MOOD_CODE = 1625;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Hospital Admission Diagnosis Problem Observation' of 'Hospital Admission Diagnosis'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HOSPITAL_ADMISSION_DIAGNOSIS__HOSPITAL_ADMISSION_DIAGNOSIS_PROBLEM_OBSERVATION = 1626;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Medication Dispense Assigned Entity Addr' of 'Medication Dispense Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int MEDICATION_DISPENSE_ASSIGNED_ENTITY__MEDICATION_DISPENSE_ASSIGNED_ENTITY_ADDR = 1627;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufactured Material Code Original Text' of 'Immunization Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_CODE_ORIGINAL_TEXT = 1628;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufactured Material Original Text Reference' of 'Immunization Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_ORIGINAL_TEXT_REFERENCE = 1629;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufactured Material Code Translation' of 'Immunization Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_CODE_TRANSLATION = 1630;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Immunization Medication Information Manufactured Material Lot Number Text' of 'Immunization Medication Information Manufactured Material'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL__IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL_LOT_NUMBER_TEXT = 1631;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Template Id' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_TEMPLATE_ID = 1632;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Id' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_ID = 1633;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Informant' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_INFORMANT = 1634;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Information Recipient' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_INFORMATION_RECIPIENT = 1635;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Participant1' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_PARTICIPANT1 = 1636;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report In Fulfillment Of' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_IN_FULFILLMENT_OF = 1637;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Documentation Of' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_DOCUMENTATION_OF = 1638;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Related Document' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_RELATED_DOCUMENT = 1639;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Component Of' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_COMPONENT_OF = 1640;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Diagnostic Imaging Report Findings Section' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__DIAGNOSTIC_IMAGING_REPORT_FINDINGS_SECTION = 1641;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate General Header Constraints Code' of 'Diagnostic Imaging Report'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT__GENERAL_HEADER_CONSTRAINTS_CODE = 1642;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Participant Associated Entity' of 'Diagnostic Imaging Report Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT_PARTICIPANT__PARTICIPANT_ASSOCIATED_ENTITY = 1643;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Associated Entity Associated Person' of 'Participant Associated Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PARTICIPANT_ASSOCIATED_ENTITY__ASSOCIATED_ENTITY_ASSOCIATED_PERSON = 1644;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Person Name' of 'Associated Entity Person'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSOCIATED_ENTITY_PERSON__PERSON_NAME = 1645;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Documentation Of Service Event3' of 'Diagnostic Imaging Report Documentation Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT_DOCUMENTATION_OF__DOCUMENTATION_OF_SERVICE_EVENT3 = 1646;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event4 Class Code' of 'Documentation Of Service Event4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT4__SERVICE_EVENT4_CLASS_CODE = 1647;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event4 Code' of 'Documentation Of Service Event4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT4__SERVICE_EVENT4_CODE = 1648;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event4 Id' of 'Documentation Of Service Event4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT4__SERVICE_EVENT4_ID = 1649;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Service Event4 Physician Reading Study Performer' of 'Documentation Of Service Event4'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DOCUMENTATION_OF_SERVICE_EVENT4__SERVICE_EVENT4_PHYSICIAN_READING_STUDY_PERFORMER = 1650;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Component Of Encompassing Encounter' of 'Diagnostic Imaging Report Component Of'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int DIAGNOSTIC_IMAGING_REPORT_COMPONENT_OF__COMPONENT_OF_ENCOMPASSING_ENCOUNTER = 1651;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter7 Effective Time' of 'Component Of Encompassing Encounter7'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER7__ENCOMPASSING_ENCOUNTER7_EFFECTIVE_TIME = 1652;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter7 Id' of 'Component Of Encompassing Encounter7'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER7__ENCOMPASSING_ENCOUNTER7_ID = 1653;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter7 Physicianof Record Participant' of 'Component Of Encompassing Encounter7'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER7__ENCOMPASSING_ENCOUNTER7_PHYSICIANOF_RECORD_PARTICIPANT = 1654;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Encompassing Encounter7 Responsible Party' of 'Component Of Encompassing Encounter7'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int COMPONENT_OF_ENCOMPASSING_ENCOUNTER7__ENCOMPASSING_ENCOUNTER7_RESPONSIBLE_PARTY = 1655;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Responsible Party Assigned Entity' of 'Encompassing Encounter7 Responsible Party'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ENCOMPASSING_ENCOUNTER7_RESPONSIBLE_PARTY__RESPONSIBLE_PARTY_ASSIGNED_ENTITY = 1656;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physician Reading Study Performer Template Id' of 'Physician Reading Study Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER__PHYSICIAN_READING_STUDY_PERFORMER_TEMPLATE_ID = 1657;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physician Reading Study Performer Time' of 'Physician Reading Study Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER__PHYSICIAN_READING_STUDY_PERFORMER_TIME = 1658;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physician Reading Study Performer Type Code' of 'Physician Reading Study Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER__PHYSICIAN_READING_STUDY_PERFORMER_TYPE_CODE = 1659;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physician Reading Study Performer Assigned Entity' of 'Physician Reading Study Performer'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER__PHYSICIAN_READING_STUDY_PERFORMER_ASSIGNED_ENTITY = 1660;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Physician Reading Study Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 1661;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Physician Reading Study Performer Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIAN_READING_STUDY_PERFORMER_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 1662;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physicianof Record Participant Template Id' of 'Physicianof Record Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIANOF_RECORD_PARTICIPANT__PHYSICIANOF_RECORD_PARTICIPANT_TEMPLATE_ID = 1663;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physicianof Record Participant Type Code' of 'Physicianof Record Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIANOF_RECORD_PARTICIPANT__PHYSICIANOF_RECORD_PARTICIPANT_TYPE_CODE = 1664;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Physicianof Record Participant Assigned Entity' of 'Physicianof Record Participant'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIANOF_RECORD_PARTICIPANT__PHYSICIANOF_RECORD_PARTICIPANT_ASSIGNED_ENTITY = 1665;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Code' of 'Physicianof Record Participant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIANOF_RECORD_PARTICIPANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_CODE = 1666;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Entity Id' of 'Physicianof Record Participant Assigned Entity'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PHYSICIANOF_RECORD_PARTICIPANT_ASSIGNED_ENTITY__ASSIGNED_ENTITY_ID = 1667;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Assigned Person Name' of 'Assigned Entity Assigned Person'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ASSIGNED_ENTITY_ASSIGNED_PERSON__ASSIGNED_PERSON_NAME = 1668;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Text Observation Template Id' of 'Text Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int TEXT_OBSERVATION__TEXT_OBSERVATION_TEMPLATE_ID = 1669;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Quantity Measurement Observation Template Id' of 'Quantity Measurement Observation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int QUANTITY_MEASUREMENT_OBSERVATION__QUANTITY_MEASUREMENT_OBSERVATION_TEMPLATE_ID = 1670;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Code Observations Template Id' of 'Code Observations'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int CODE_OBSERVATIONS__CODE_OBSERVATIONS_TEMPLATE_ID = 1671;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Validate Procedure Context Template Id' of 'Procedure Context'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PROCEDURE_CONTEXT__PROCEDURE_CONTEXT_TEMPLATE_ID = 1672;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final int GENERATED_DIAGNOSTIC_CODE_COUNT = 1672;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants in a derived class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final int DIAGNOSTIC_CODE_COUNT = GENERATED_DIAGNOSTIC_CODE_COUNT;

	/**
	 * The cached base package validator.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CDAValidator cdaValidator;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConsolValidator() {
		super();
		cdaValidator = CDAValidator.INSTANCE;
	}

	/**
	 * Returns the package of this validator switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EPackage getEPackage() {
	  return ConsolPackage.eINSTANCE;
	}

	/**
	 * Calls <code>validateXXX</code> for the corresponding classifier of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
		switch (classifierID) {
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS:
				return validateGeneralHeaderConstraints((GeneralHeaderConstraints)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_RECORD_TARGET:
				return validateGeneralHeaderConstraints_RecordTarget((GeneralHeaderConstraints_RecordTarget)value, diagnostics, context);
			case ConsolPackage.RECORD_TARGET_PATIENT_ROLE:
				return validateRecordTarget_PatientRole((RecordTarget_PatientRole)value, diagnostics, context);
			case ConsolPackage.PATIENT_ROLE_PATIENT:
				return validatePatientRole_Patient((PatientRole_Patient)value, diagnostics, context);
			case ConsolPackage.PATIENT_GUARDIAN:
				return validatePatient_Guardian((Patient_Guardian)value, diagnostics, context);
			case ConsolPackage.PATIENT_LANGUAGE_COMMUNICATION:
				return validatePatient_LanguageCommunication((Patient_LanguageCommunication)value, diagnostics, context);
			case ConsolPackage.PATIENT_BIRTHPLACE:
				return validatePatient_Birthplace((Patient_Birthplace)value, diagnostics, context);
			case ConsolPackage.BIRTHPLACE_PLACE:
				return validateBirthplace_Place((Birthplace_Place)value, diagnostics, context);
			case ConsolPackage.PATIENT_ROLE_PROVIDER_ORGANIZATION:
				return validatePatientRole_ProviderOrganization((PatientRole_ProviderOrganization)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_COMPONENT_OF:
				return validateGeneralHeaderConstraints_ComponentOf((GeneralHeaderConstraints_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER:
				return validateComponentOf_EncompassingEncounter((ComponentOf_EncompassingEncounter)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_AUTHOR:
				return validateGeneralHeaderConstraints_Author((GeneralHeaderConstraints_Author)value, diagnostics, context);
			case ConsolPackage.AUTHOR_ASSIGNED_AUTHOR:
				return validateAuthor_AssignedAuthor((Author_AssignedAuthor)value, diagnostics, context);
			case ConsolPackage.ASSIGNED_AUTHOR_AUTHORING_DEVICE:
				return validateAssignedAuthor_AuthoringDevice((AssignedAuthor_AuthoringDevice)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_PERSON:
				return validateGeneralHeaderConstraints_Person((GeneralHeaderConstraints_Person)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_DATA_ENTERER:
				return validateGeneralHeaderConstraints_DataEnterer((GeneralHeaderConstraints_DataEnterer)value, diagnostics, context);
			case ConsolPackage.DATA_ENTERER_ASSIGNED_ENTITY:
				return validateDataEnterer_AssignedEntity((DataEnterer_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_CUSTODIAN:
				return validateGeneralHeaderConstraints_Custodian((GeneralHeaderConstraints_Custodian)value, diagnostics, context);
			case ConsolPackage.CUSTODIAN_ASSIGNED_CUSTODIAN:
				return validateCustodian_AssignedCustodian((Custodian_AssignedCustodian)value, diagnostics, context);
			case ConsolPackage.ASSIGNED_CUSTODIAN_CUSTODIAN_ORGANIZATION:
				return validateAssignedCustodian_CustodianOrganization((AssignedCustodian_CustodianOrganization)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_INFORMATION_RECIPIENT:
				return validateGeneralHeaderConstraints_InformationRecipient((GeneralHeaderConstraints_InformationRecipient)value, diagnostics, context);
			case ConsolPackage.INFORMATION_RECIPIENT_INTENDED_RECIPIENT:
				return validateInformationRecipient_IntendedRecipient((InformationRecipient_IntendedRecipient)value, diagnostics, context);
			case ConsolPackage.INTENDED_RECIPIENT_ORGANIZATION:
				return validateIntendedRecipient_Organization((IntendedRecipient_Organization)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_LEGAL_AUTHENTICATOR:
				return validateGeneralHeaderConstraints_LegalAuthenticator((GeneralHeaderConstraints_LegalAuthenticator)value, diagnostics, context);
			case ConsolPackage.LEGAL_AUTHENTICATOR_ASSIGNED_ENTITY:
				return validateLegalAuthenticator_AssignedEntity((LegalAuthenticator_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_AUTHENTICATOR:
				return validateGeneralHeaderConstraints_Authenticator((GeneralHeaderConstraints_Authenticator)value, diagnostics, context);
			case ConsolPackage.AUTHENTICATOR_ASSIGNED_ENTITY:
				return validateAuthenticator_AssignedEntity((Authenticator_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_INFORMANT:
				return validateGeneralHeaderConstraints_Informant((GeneralHeaderConstraints_Informant)value, diagnostics, context);
			case ConsolPackage.INFORMANT_ASSIGNED_ENTITY:
				return validateInformant_AssignedEntity((Informant_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.INFORMANT_RELATED_ENTITY:
				return validateInformant_RelatedEntity((Informant_RelatedEntity)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_PARTICIPANT_SUPPORT:
				return validateGeneralHeaderConstraints_ParticipantSupport((GeneralHeaderConstraints_ParticipantSupport)value, diagnostics, context);
			case ConsolPackage.GENERAL_HEADER_CONSTRAINTS_IN_FULFILLMENT_OF:
				return validateGeneralHeaderConstraints_InFulfillmentOf((GeneralHeaderConstraints_InFulfillmentOf)value, diagnostics, context);
			case ConsolPackage.IN_FULFILLMENT_OF_ORDER:
				return validateInFulfillmentOf_Order((InFulfillmentOf_Order)value, diagnostics, context);
			case ConsolPackage.ALLERGY_PROBLEM_ACT:
				return validateAllergyProblemAct((AllergyProblemAct)value, diagnostics, context);
			case ConsolPackage.ALLERGY_OBSERVATION:
				return validateAllergyObservation((AllergyObservation)value, diagnostics, context);
			case ConsolPackage.REACTION_OBSERVATION:
				return validateReactionObservation((ReactionObservation)value, diagnostics, context);
			case ConsolPackage.SEVERITY_OBSERVATION:
				return validateSeverityObservation((SeverityObservation)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_ACTIVITY_PROCEDURE:
				return validateProcedureActivityProcedure((ProcedureActivityProcedure)value, diagnostics, context);
			case ConsolPackage.INDICATION:
				return validateIndication((Indication)value, diagnostics, context);
			case ConsolPackage.SERVICE_DELIVERY_LOCATION:
				return validateServiceDeliveryLocation((ServiceDeliveryLocation)value, diagnostics, context);
			case ConsolPackage.MEDICATION_ACTIVITY:
				return validateMedicationActivity((MedicationActivity)value, diagnostics, context);
			case ConsolPackage.MEDICATION_SUPPLY_ORDER:
				return validateMedicationSupplyOrder((MedicationSupplyOrder)value, diagnostics, context);
			case ConsolPackage.MEDICATION_SUPPLY_ORDER_PRODUCT:
				return validateMedicationSupplyOrder_Product((MedicationSupplyOrder_Product)value, diagnostics, context);
			case ConsolPackage.INSTRUCTIONS:
				return validateInstructions((Instructions)value, diagnostics, context);
			case ConsolPackage.MEDICATION_DISPENSE:
				return validateMedicationDispense((MedicationDispense)value, diagnostics, context);
			case ConsolPackage.MEDICATION_DISPENSE_PRODUCT:
				return validateMedicationDispense_Product((MedicationDispense_Product)value, diagnostics, context);
			case ConsolPackage.DRUG_VEHICLE:
				return validateDrugVehicle((DrugVehicle)value, diagnostics, context);
			case ConsolPackage.PRODUCT_INSTANCE:
				return validateProductInstance((ProductInstance)value, diagnostics, context);
			case ConsolPackage.PRODUCT_INSTANCE_SCOPING_ENTITY:
				return validateProductInstance_ScopingEntity((ProductInstance_ScopingEntity)value, diagnostics, context);
			case ConsolPackage.PRODUCT_INSTANCE_PLAYING_DEVICE:
				return validateProductInstance_PlayingDevice((ProductInstance_PlayingDevice)value, diagnostics, context);
			case ConsolPackage.ALLERGY_STATUS_OBSERVATION:
				return validateAllergyStatusObservation((AllergyStatusObservation)value, diagnostics, context);
			case ConsolPackage.AGE_OBSERVATION:
				return validateAgeObservation((AgeObservation)value, diagnostics, context);
			case ConsolPackage.HEALTH_STATUS_OBSERVATION:
				return validateHealthStatusObservation((HealthStatusObservation)value, diagnostics, context);
			case ConsolPackage.COMMENT:
				return validateComment((Comment)value, diagnostics, context);
			case ConsolPackage.INTERNAL_REFERENCE:
				return validateInternalReference((InternalReference)value, diagnostics, context);
			case ConsolPackage.MEDICATION_TYPE:
				return validateMedicationType((MedicationType)value, diagnostics, context);
			case ConsolPackage.NON_MEDICINAL_SUPPLY_ACTIVITY:
				return validateNonMedicinalSupplyActivity((NonMedicinalSupplyActivity)value, diagnostics, context);
			case ConsolPackage.MEDICATION_FULLFILLMENT_INSTRUCTIONS:
				return validateMedicationFullfillmentInstructions((MedicationFullfillmentInstructions)value, diagnostics, context);
			case ConsolPackage.PROBLEM_CONCERN_ACT:
				return validateProblemConcernAct((ProblemConcernAct)value, diagnostics, context);
			case ConsolPackage.PROBLEM_OBSERVATION:
				return validateProblemObservation((ProblemObservation)value, diagnostics, context);
			case ConsolPackage.PROBLEM_STATUS:
				return validateProblemStatus((ProblemStatus)value, diagnostics, context);
			case ConsolPackage.CONTINUITY_OF_CARE_DOCUMENT:
				return validateContinuityOfCareDocument((ContinuityOfCareDocument)value, diagnostics, context);
			case ConsolPackage.CONTINUITY_OF_CARE_DOCUMENT_DOCUMENTATION_OF:
				return validateContinuityOfCareDocument_DocumentationOf((ContinuityOfCareDocument_DocumentationOf)value, diagnostics, context);
			case ConsolPackage.DOCUMENTATION_OF_SERVICE_EVENT3:
				return validateDocumentationOf_ServiceEvent3((DocumentationOf_ServiceEvent3)value, diagnostics, context);
			case ConsolPackage.SERVICE_EVENT3_PERFORMER:
				return validateServiceEvent3_Performer((ServiceEvent3_Performer)value, diagnostics, context);
			case ConsolPackage.PERFORMER_ASSIGNED_ENTITY:
				return validatePerformer_AssignedEntity((Performer_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.CONTINUITY_OF_CARE_DOCUMENT_AUTHOR:
				return validateContinuityOfCareDocument_Author((ContinuityOfCareDocument_Author)value, diagnostics, context);
			case ConsolPackage.AUTHOR_ASSIGNED_AUTHOR3:
				return validateAuthor_AssignedAuthor3((Author_AssignedAuthor3)value, diagnostics, context);
			case ConsolPackage.ALLERGIES_SECTION:
				return validateAllergiesSection((AllergiesSection)value, diagnostics, context);
			case ConsolPackage.ALLERGIES_SECTION_ENTRIES_OPTIONAL:
				return validateAllergiesSectionEntriesOptional((AllergiesSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.MEDICATIONS_SECTION:
				return validateMedicationsSection((MedicationsSection)value, diagnostics, context);
			case ConsolPackage.MEDICATIONS_SECTION_ENTRIES_OPTIONAL:
				return validateMedicationsSectionEntriesOptional((MedicationsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.PROBLEM_SECTION:
				return validateProblemSection((ProblemSection)value, diagnostics, context);
			case ConsolPackage.PROBLEM_SECTION_ENTRIES_OPTIONAL:
				return validateProblemSectionEntriesOptional((ProblemSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.PROCEDURES_SECTION:
				return validateProceduresSection((ProceduresSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURES_SECTION_ENTRIES_OPTIONAL:
				return validateProceduresSectionEntriesOptional((ProceduresSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_ACTIVITY_OBSERVATION:
				return validateProcedureActivityObservation((ProcedureActivityObservation)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_ACTIVITY_ACT:
				return validateProcedureActivityAct((ProcedureActivityAct)value, diagnostics, context);
			case ConsolPackage.RESULTS_SECTION:
				return validateResultsSection((ResultsSection)value, diagnostics, context);
			case ConsolPackage.RESULTS_SECTION_ENTRIES_OPTIONAL:
				return validateResultsSectionEntriesOptional((ResultsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.RESULT_ORGANIZER:
				return validateResultOrganizer((ResultOrganizer)value, diagnostics, context);
			case ConsolPackage.RESULT_OBSERVATION:
				return validateResultObservation((ResultObservation)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVES_SECTION:
				return validateAdvanceDirectivesSection((AdvanceDirectivesSection)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVES_SECTION_ENTRIES_OPTIONAL:
				return validateAdvanceDirectivesSectionEntriesOptional((AdvanceDirectivesSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_OBSERVATION:
				return validateAdvanceDirectiveObservation((AdvanceDirectiveObservation)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_OBSERVATION_REFERENCE:
				return validateAdvanceDirectiveObservation_Reference((AdvanceDirectiveObservation_Reference)value, diagnostics, context);
			case ConsolPackage.REFERENCE_EXTERNAL_DOCUMENT:
				return validateReference_ExternalDocument((Reference_ExternalDocument)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_OBSERVATION_CUSTODIAN:
				return validateAdvanceDirectiveObservation_Custodian((AdvanceDirectiveObservation_Custodian)value, diagnostics, context);
			case ConsolPackage.CUSTODIAN_CUSTODIAN_ROLE:
				return validateCustodian_CustodianRole((Custodian_CustodianRole)value, diagnostics, context);
			case ConsolPackage.CUSTODIAN_ROLE_CUSTODIAN_ENTITY:
				return validateCustodianRole_CustodianEntity((CustodianRole_CustodianEntity)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_OBSERVATION_VERIFIER:
				return validateAdvanceDirectiveObservation_Verifier((AdvanceDirectiveObservation_Verifier)value, diagnostics, context);
			case ConsolPackage.ENCOUNTERS_SECTION:
				return validateEncountersSection((EncountersSection)value, diagnostics, context);
			case ConsolPackage.ENCOUNTERS_SECTION_ENTRIES_OPTIONAL:
				return validateEncountersSectionEntriesOptional((EncountersSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.ENCOUNTER_ACTIVITIES:
				return validateEncounterActivities((EncounterActivities)value, diagnostics, context);
			case ConsolPackage.FAMILY_HISTORY_SECTION:
				return validateFamilyHistorySection((FamilyHistorySection)value, diagnostics, context);
			case ConsolPackage.FAMILY_HISTORY_ORGANIZER:
				return validateFamilyHistoryOrganizer((FamilyHistoryOrganizer)value, diagnostics, context);
			case ConsolPackage.FAMILY_HISTORY_OBSERVATION:
				return validateFamilyHistoryObservation((FamilyHistoryObservation)value, diagnostics, context);
			case ConsolPackage.FAMILY_HISTORY_DEATH_OBSERVATION:
				return validateFamilyHistoryDeathObservation((FamilyHistoryDeathObservation)value, diagnostics, context);
			case ConsolPackage.FUNCTIONAL_STATUS_SECTION:
				return validateFunctionalStatusSection((FunctionalStatusSection)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATIONS_SECTION_ENTRIES_OPTIONAL:
				return validateImmunizationsSectionEntriesOptional((ImmunizationsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATION_ACTIVITY:
				return validateImmunizationActivity((ImmunizationActivity)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATION_REFUSAL_REASON:
				return validateImmunizationRefusalReason((ImmunizationRefusalReason)value, diagnostics, context);
			case ConsolPackage.MEDICAL_EQUIPMENT_SECTION:
				return validateMedicalEquipmentSection((MedicalEquipmentSection)value, diagnostics, context);
			case ConsolPackage.PAYERS_SECTION:
				return validatePayersSection((PayersSection)value, diagnostics, context);
			case ConsolPackage.COVERAGE_ACTIVITY:
				return validateCoverageActivity((CoverageActivity)value, diagnostics, context);
			case ConsolPackage.POLICY_ACTIVITY:
				return validatePolicyActivity((PolicyActivity)value, diagnostics, context);
			case ConsolPackage.AUTHORIZATION_ACTIVITY:
				return validateAuthorizationActivity((AuthorizationActivity)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_SECTION:
				return validatePlanOfCareSection((PlanOfCareSection)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_ACT:
				return validatePlanOfCareActivityAct((PlanOfCareActivityAct)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_ENCOUNTER:
				return validatePlanOfCareActivityEncounter((PlanOfCareActivityEncounter)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_OBSERVATION:
				return validatePlanOfCareActivityObservation((PlanOfCareActivityObservation)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_PROCEDURE:
				return validatePlanOfCareActivityProcedure((PlanOfCareActivityProcedure)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_SUBSTANCE_ADMINISTRATION:
				return validatePlanOfCareActivitySubstanceAdministration((PlanOfCareActivitySubstanceAdministration)value, diagnostics, context);
			case ConsolPackage.PLAN_OF_CARE_ACTIVITY_SUPPLY:
				return validatePlanOfCareActivitySupply((PlanOfCareActivitySupply)value, diagnostics, context);
			case ConsolPackage.SOCIAL_HISTORY_SECTION:
				return validateSocialHistorySection((SocialHistorySection)value, diagnostics, context);
			case ConsolPackage.SOCIAL_HISTORY_OBSERVATION:
				return validateSocialHistoryObservation((SocialHistoryObservation)value, diagnostics, context);
			case ConsolPackage.PREGNANCY_OBSERVATION:
				return validatePregnancyObservation((PregnancyObservation)value, diagnostics, context);
			case ConsolPackage.ESTIMATED_DATE_OF_DELIVERY:
				return validateEstimatedDateOfDelivery((EstimatedDateOfDelivery)value, diagnostics, context);
			case ConsolPackage.VITAL_SIGNS_SECTION_ENTRIES_OPTIONAL:
				return validateVitalSignsSectionEntriesOptional((VitalSignsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.VITAL_SIGNS_ORGANIZER:
				return validateVitalSignsOrganizer((VitalSignsOrganizer)value, diagnostics, context);
			case ConsolPackage.VITAL_SIGN_OBSERVATION:
				return validateVitalSignObservation((VitalSignObservation)value, diagnostics, context);
			case ConsolPackage.SOCIAL_HISTORY_STATUS_OBSERVATION:
				return validateSocialHistoryStatusObservation((SocialHistoryStatusObservation)value, diagnostics, context);
			case ConsolPackage.PURPOSE_SECTION:
				return validatePurposeSection((PurposeSection)value, diagnostics, context);
			case ConsolPackage.PURPOSE_ACTIVITY:
				return validatePurposeActivity((PurposeActivity)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_VERIFICATION:
				return validateAdvanceDirectiveVerification((AdvanceDirectiveVerification)value, diagnostics, context);
			case ConsolPackage.ADVANCE_DIRECTIVE_STATUS_OBSERVATION:
				return validateAdvanceDirectiveStatusObservation((AdvanceDirectiveStatusObservation)value, diagnostics, context);
			case ConsolPackage.ENCOUNTER:
				return validateEncounter((Encounter)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATIONS_SECTION:
				return validateImmunizationsSection((ImmunizationsSection)value, diagnostics, context);
			case ConsolPackage.INSURANCE_PROVIDER:
				return validateInsuranceProvider((InsuranceProvider)value, diagnostics, context);
			case ConsolPackage.PAYER_ENTRY:
				return validatePayerEntry((PayerEntry)value, diagnostics, context);
			case ConsolPackage.COVERED_PARTY:
				return validateCoveredParty((CoveredParty)value, diagnostics, context);
			case ConsolPackage.POLICY_SUBSCRIBER:
				return validatePolicySubscriber((PolicySubscriber)value, diagnostics, context);
			case ConsolPackage.EXTERNAL_REFERENCE:
				return validateExternalReference((ExternalReference)value, diagnostics, context);
			case ConsolPackage.SUPPORT:
				return validateSupport((Support)value, diagnostics, context);
			case ConsolPackage.VITAL_SIGNS_SECTION:
				return validateVitalSignsSection((VitalSignsSection)value, diagnostics, context);
			case ConsolPackage.HISTORY_OF_PAST_ILLNESS_SECTION:
				return validateHistoryOfPastIllnessSection((HistoryOfPastIllnessSection)value, diagnostics, context);
			case ConsolPackage.CHIEF_COMPLAINT_SECTION:
				return validateChiefComplaintSection((ChiefComplaintSection)value, diagnostics, context);
			case ConsolPackage.REASON_FOR_REFERRAL_SECTION:
				return validateReasonForReferralSection((ReasonForReferralSection)value, diagnostics, context);
			case ConsolPackage.HISTORY_OF_PRESENT_ILLNESS_SECTION:
				return validateHistoryOfPresentIllnessSection((HistoryOfPresentIllnessSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_ADMISSION_DIAGNOSIS_SECTION:
				return validateHospitalAdmissionDiagnosisSection((HospitalAdmissionDiagnosisSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_ADMISSION_MEDICATIONS_SECTION_ENTRIES_OPTIONAL:
				return validateHospitalAdmissionMedicationsSectionEntriesOptional((HospitalAdmissionMedicationsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.ADMISSION_MEDICATION:
				return validateAdmissionMedication((AdmissionMedication)value, diagnostics, context);
			case ConsolPackage.MEDICATIONS_ADMINISTERED_SECTION:
				return validateMedicationsAdministeredSection((MedicationsAdministeredSection)value, diagnostics, context);
			case ConsolPackage.PHYSICAL_EXAM_SECTION:
				return validatePhysicalExamSection((PhysicalExamSection)value, diagnostics, context);
			case ConsolPackage.GENERAL_STATUS_SECTION:
				return validateGeneralStatusSection((GeneralStatusSection)value, diagnostics, context);
			case ConsolPackage.REVIEW_OF_SYSTEMS_SECTION:
				return validateReviewOfSystemsSection((ReviewOfSystemsSection)value, diagnostics, context);
			case ConsolPackage.ASSESSMENT_AND_PLAN_SECTION:
				return validateAssessmentAndPlanSection((AssessmentAndPlanSection)value, diagnostics, context);
			case ConsolPackage.LANGUAGE_SPOKEN:
				return validateLanguageSpoken((LanguageSpoken)value, diagnostics, context);
			case ConsolPackage.HEALTHCARE_PROVIDER:
				return validateHealthcareProvider((HealthcareProvider)value, diagnostics, context);
			case ConsolPackage.SUPPORT_GUARDIAN:
				return validateSupportGuardian((SupportGuardian)value, diagnostics, context);
			case ConsolPackage.SUPPORT_PARTICIPANT:
				return validateSupportParticipant((SupportParticipant)value, diagnostics, context);
			case ConsolPackage.SURGICAL_DRAINS_SECTION:
				return validateSurgicalDrainsSection((SurgicalDrainsSection)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_DOCUMENT:
				return validateUnstructuredDocument((UnstructuredDocument)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_DOCUMENT_RECORD_TARGET:
				return validateUnstructuredDocument_RecordTarget((UnstructuredDocument_RecordTarget)value, diagnostics, context);
			case ConsolPackage.RECORD_TARGET_PATIENT_ROLE2:
				return validateRecordTarget_PatientRole2((RecordTarget_PatientRole2)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_DOCUMENT_AUTHOR:
				return validateUnstructuredDocument_Author((UnstructuredDocument_Author)value, diagnostics, context);
			case ConsolPackage.AUTHOR_ASSIGNED_AUTHOR2:
				return validateAuthor_AssignedAuthor2((Author_AssignedAuthor2)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_DOCUMENT_CUSTODIAN:
				return validateUnstructuredDocument_Custodian((UnstructuredDocument_Custodian)value, diagnostics, context);
			case ConsolPackage.CUSTODIAN_ASSIGNED_CUSTODIAN3:
				return validateCustodian_AssignedCustodian3((Custodian_AssignedCustodian3)value, diagnostics, context);
			case ConsolPackage.ASSIGNED_CUSTODIAN3_CUSTODIAN_ORGANIZATION:
				return validateAssignedCustodian3_CustodianOrganization((AssignedCustodian3_CustodianOrganization)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_DOCUMENT_COMPONENT:
				return validateUnstructuredDocument_Component((UnstructuredDocument_Component)value, diagnostics, context);
			case ConsolPackage.COMPONENT_NON_XML_BODY:
				return validateComponent_NonXMLBody((Component_NonXMLBody)value, diagnostics, context);
			case ConsolPackage.SCAN_ORIGINAL_AUTHOR:
				return validateScanOriginalAuthor((ScanOriginalAuthor)value, diagnostics, context);
			case ConsolPackage.SCANNING_DEVICE:
				return validateScanningDevice((ScanningDevice)value, diagnostics, context);
			case ConsolPackage.SCAN_DATA_ENTERER:
				return validateScanDataEnterer((ScanDataEnterer)value, diagnostics, context);
			case ConsolPackage.MEDICATION_INFORMATION:
				return validateMedicationInformation((MedicationInformation)value, diagnostics, context);
			case ConsolPackage.UNSTRUCTURED_OR_SCANNED_DOCUMENT:
				return validateUnstructuredOrScannedDocument((UnstructuredOrScannedDocument)value, diagnostics, context);
			case ConsolPackage.REFERRAL_SUMMARY:
				return validateReferralSummary((ReferralSummary)value, diagnostics, context);
			case ConsolPackage.DISCHARGE_SUMMARY:
				return validateDischargeSummary((DischargeSummary)value, diagnostics, context);
			case ConsolPackage.DISCHARGE_SUMMARY_COMPONENT_OF:
				return validateDischargeSummary_ComponentOf((DischargeSummary_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER3:
				return validateComponentOf_EncompassingEncounter3((ComponentOf_EncompassingEncounter3)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER3_RESPONSIBLE_PARTY:
				return validateEncompassingEncounter3_ResponsibleParty((EncompassingEncounter3_ResponsibleParty)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER3_ENCOUNTER_PARTICIPANT:
				return validateEncompassingEncounter3_EncounterParticipant((EncompassingEncounter3_EncounterParticipant)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_DIAGNOSIS_SECTION:
				return validateHospitalDischargeDiagnosisSection((HospitalDischargeDiagnosisSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_DIAGNOSIS:
				return validateHospitalDischargeDiagnosis((HospitalDischargeDiagnosis)value, diagnostics, context);
			case ConsolPackage.DISCHARGE_DIET_SECTION:
				return validateDischargeDietSection((DischargeDietSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_MEDICATIONS_SECTION_ENTRIES_OPTIONAL:
				return validateHospitalDischargeMedicationsSectionEntriesOptional((HospitalDischargeMedicationsSectionEntriesOptional)value, diagnostics, context);
			case ConsolPackage.DISCHARGE_MEDICATION:
				return validateDischargeMedication((DischargeMedication)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_COURSE_SECTION:
				return validateHospitalCourseSection((HospitalCourseSection)value, diagnostics, context);
			case ConsolPackage.CHIEF_COMPLAINT_AND_REASON_FOR_VISIT_SECTION:
				return validateChiefComplaintAndReasonForVisitSection((ChiefComplaintAndReasonForVisitSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_CONSULTATIONS_SECTION:
				return validateHospitalConsultationsSection((HospitalConsultationsSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_INSTRUCTIONS_SECTION:
				return validateHospitalDischargeInstructionsSection((HospitalDischargeInstructionsSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_PHYSICAL_SECTION:
				return validateHospitalDischargePhysicalSection((HospitalDischargePhysicalSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_STUDIES_SUMMARY_SECTION:
				return validateHospitalDischargeStudiesSummarySection((HospitalDischargeStudiesSummarySection)value, diagnostics, context);
			case ConsolPackage.REASON_FOR_VISIT_SECTION:
				return validateReasonForVisitSection((ReasonForVisitSection)value, diagnostics, context);
			case ConsolPackage.PRECONDITION_FOR_SUBSTANCE_ADMINISTRATION:
				return validatePreconditionForSubstanceAdministration((PreconditionForSubstanceAdministration)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATION_MEDICATION_INFORMATION:
				return validateImmunizationMedicationInformation((ImmunizationMedicationInformation)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_SPECIMEN:
				return validateProcedureSpecimen((ProcedureSpecimen)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_PERFORMER:
				return validateProcedurePerformer((ProcedurePerformer)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_ENCOUNTER:
				return validateProcedureEncounter((ProcedureEncounter)value, diagnostics, context);
			case ConsolPackage.MEDICATION_INFORMATION_MANUFACTURED_MATERIAL:
				return validateMedicationInformationManufacturedMaterial((MedicationInformationManufacturedMaterial)value, diagnostics, context);
			case ConsolPackage.FAMILY_HISTORY_SUBJECT:
				return validateFamilyHistorySubject((FamilyHistorySubject)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_DISCHARGE_MEDICATIONS_SECTION:
				return validateHospitalDischargeMedicationsSection((HospitalDischargeMedicationsSection)value, diagnostics, context);
			case ConsolPackage.RELATED_INFORMANT:
				return validateRelatedInformant((RelatedInformant)value, diagnostics, context);
			case ConsolPackage.ENCOUNTER_PERFORMER:
				return validateEncounterPerformer((EncounterPerformer)value, diagnostics, context);
			case ConsolPackage.ENCOUNTER_PERFORMER_ASSIGNED_ENTITY:
				return validateEncounterPerformerAssignedEntity((EncounterPerformerAssignedEntity)value, diagnostics, context);
			case ConsolPackage.ALLERGY_OBSERVATION_PARTICIPANT:
				return validateAllergyObservationParticipant((AllergyObservationParticipant)value, diagnostics, context);
			case ConsolPackage.ALLERGY_OBSERVATION_PARTICIPANT_ROLE:
				return validateAllergyObservationParticipantRole((AllergyObservationParticipantRole)value, diagnostics, context);
			case ConsolPackage.ALLERGY_OBSERVATION_PLAYING_ENTITY:
				return validateAllergyObservationPlayingEntity((AllergyObservationPlayingEntity)value, diagnostics, context);
			case ConsolPackage.ANESTHESIA_SECTION:
				return validateAnesthesiaSection((AnesthesiaSection)value, diagnostics, context);
			case ConsolPackage.COMPLICATIONS_SECTION:
				return validateComplicationsSection((ComplicationsSection)value, diagnostics, context);
			case ConsolPackage.DICOM_OBJECT_CATALOG_SECTION:
				return validateDICOMObjectCatalogSection((DICOMObjectCatalogSection)value, diagnostics, context);
			case ConsolPackage.STUDY_ACT:
				return validateStudyAct((StudyAct)value, diagnostics, context);
			case ConsolPackage.SERIES_ACT:
				return validateSeriesAct((SeriesAct)value, diagnostics, context);
			case ConsolPackage.SOP_INSTANCE_OBSERVATION:
				return validateSOPInstanceObservation((SOPInstanceObservation)value, diagnostics, context);
			case ConsolPackage.PURPOSEOF_REFERENCE_OBSERVATION:
				return validatePurposeofReferenceObservation((PurposeofReferenceObservation)value, diagnostics, context);
			case ConsolPackage.REFERENCED_FRAMES_OBSERVATION:
				return validateReferencedFramesObservation((ReferencedFramesObservation)value, diagnostics, context);
			case ConsolPackage.BOUNDARY_OBSERVATION:
				return validateBoundaryObservation((BoundaryObservation)value, diagnostics, context);
			case ConsolPackage.FINDINGS_SECTION:
				return validateFindingsSection((FindingsSection)value, diagnostics, context);
			case ConsolPackage.INTERVENTIONS_SECTION:
				return validateInterventionsSection((InterventionsSection)value, diagnostics, context);
			case ConsolPackage.MEDICAL_HISTORY_SECTION:
				return validateMedicalHistorySection((MedicalHistorySection)value, diagnostics, context);
			case ConsolPackage.OBJECTIVE_SECTION:
				return validateObjectiveSection((ObjectiveSection)value, diagnostics, context);
			case ConsolPackage.OPERATIVE_NOTE_FLUID_SECTION:
				return validateOperativeNoteFluidSection((OperativeNoteFluidSection)value, diagnostics, context);
			case ConsolPackage.OPERATIVE_NOTE_SURGICAL_PROCEDURE_SECTION:
				return validateOperativeNoteSurgicalProcedureSection((OperativeNoteSurgicalProcedureSection)value, diagnostics, context);
			case ConsolPackage.PLANNED_PROCEDURE_SECTION:
				return validatePlannedProcedureSection((PlannedProcedureSection)value, diagnostics, context);
			case ConsolPackage.POSTOPERATIVE_DIAGNOSIS_SECTION:
				return validatePostoperativeDiagnosisSection((PostoperativeDiagnosisSection)value, diagnostics, context);
			case ConsolPackage.POSTPROCEDURE_DIAGNOSIS_SECTION:
				return validatePostprocedureDiagnosisSection((PostprocedureDiagnosisSection)value, diagnostics, context);
			case ConsolPackage.POSTPROCEDURE_DIAGNOSIS:
				return validatePostprocedureDiagnosis((PostprocedureDiagnosis)value, diagnostics, context);
			case ConsolPackage.PREOPERATIVE_DIAGNOSIS_SECTION:
				return validatePreoperativeDiagnosisSection((PreoperativeDiagnosisSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_DESCRIPTION_SECTION:
				return validateProcedureDescriptionSection((ProcedureDescriptionSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_DISPOSITION_SECTION:
				return validateProcedureDispositionSection((ProcedureDispositionSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_ESTIMATED_BLOOD_LOSS_SECTION:
				return validateProcedureEstimatedBloodLossSection((ProcedureEstimatedBloodLossSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_FINDINGS_SECTION:
				return validateProcedureFindingsSection((ProcedureFindingsSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_IMPLANTS_SECTION:
				return validateProcedureImplantsSection((ProcedureImplantsSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_INDICATIONS_SECTION:
				return validateProcedureIndicationsSection((ProcedureIndicationsSection)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_SPECIMENS_TAKEN_SECTION:
				return validateProcedureSpecimensTakenSection((ProcedureSpecimensTakenSection)value, diagnostics, context);
			case ConsolPackage.SUBJECTIVE_SECTION:
				return validateSubjectiveSection((SubjectiveSection)value, diagnostics, context);
			case ConsolPackage.CONSULTATION_NOTE:
				return validateConsultationNote((ConsultationNote)value, diagnostics, context);
			case ConsolPackage.CONSULTATION_NOTE_COMPONENT_OF:
				return validateConsultationNote_ComponentOf((ConsultationNote_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER2:
				return validateComponentOf_EncompassingEncounter2((ComponentOf_EncompassingEncounter2)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER2_RESPONSIBLE_PARTY:
				return validateEncompassingEncounter2_ResponsibleParty((EncompassingEncounter2_ResponsibleParty)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER2_ENCOUNTER_PARTICIPANT:
				return validateEncompassingEncounter2_EncounterParticipant((EncompassingEncounter2_EncounterParticipant)value, diagnostics, context);
			case ConsolPackage.ASSESSMENT_SECTION:
				return validateAssessmentSection((AssessmentSection)value, diagnostics, context);
			case ConsolPackage.HISTORY_AND_PHYSICAL_NOTE:
				return validateHistoryAndPhysicalNote((HistoryAndPhysicalNote)value, diagnostics, context);
			case ConsolPackage.HISTORY_AND_PHYSICAL_NOTE_COMPONENT_OF:
				return validateHistoryAndPhysicalNote_ComponentOf((HistoryAndPhysicalNote_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER4:
				return validateComponentOf_EncompassingEncounter4((ComponentOf_EncompassingEncounter4)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER4_RESPONSIBLE_PARTY:
				return validateEncompassingEncounter4_ResponsibleParty((EncompassingEncounter4_ResponsibleParty)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER4_ENCOUNTER_PARTICIPANT:
				return validateEncompassingEncounter4_EncounterParticipant((EncompassingEncounter4_EncounterParticipant)value, diagnostics, context);
			case ConsolPackage.OPERATIVE_NOTE:
				return validateOperativeNote((OperativeNote)value, diagnostics, context);
			case ConsolPackage.OPERATIVE_NOTE_DOCUMENTATION_OF:
				return validateOperativeNote_DocumentationOf((OperativeNote_DocumentationOf)value, diagnostics, context);
			case ConsolPackage.DOCUMENTATION_OF_SERVICE_EVENT:
				return validateDocumentationOf_ServiceEvent((DocumentationOf_ServiceEvent)value, diagnostics, context);
			case ConsolPackage.SERVICE_EVENT_PRIMARY_PERFORMER:
				return validateServiceEvent_PrimaryPerformer((ServiceEvent_PrimaryPerformer)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE:
				return validateProcedureNote((ProcedureNote)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE_COMPONENT_OF:
				return validateProcedureNote_ComponentOf((ProcedureNote_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER5:
				return validateComponentOf_EncompassingEncounter5((ComponentOf_EncompassingEncounter5)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER5_LOCATION:
				return validateEncompassingEncounter5_Location((EncompassingEncounter5_Location)value, diagnostics, context);
			case ConsolPackage.LOCATION_HEALTH_CARE_FACILITY:
				return validateLocation_HealthCareFacility((Location_HealthCareFacility)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER5_ENCOUNTER_PARTICIPANT:
				return validateEncompassingEncounter5_EncounterParticipant((EncompassingEncounter5_EncounterParticipant)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE_INDIVIDUAL:
				return validateProcedureNote_Individual((ProcedureNote_Individual)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE_PRIMARY_CARE_PHYSICIAN:
				return validateProcedureNote_PrimaryCarePhysician((ProcedureNote_PrimaryCarePhysician)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE_PROVIDER:
				return validateProcedureNote_Provider((ProcedureNote_Provider)value, diagnostics, context);
			case ConsolPackage.PROVIDER_ASSOCIATED_ENTITY:
				return validateProvider_AssociatedEntity((Provider_AssociatedEntity)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_NOTE_DOCUMENTATION_OF:
				return validateProcedureNote_DocumentationOf((ProcedureNote_DocumentationOf)value, diagnostics, context);
			case ConsolPackage.DOCUMENTATION_OF_SERVICE_EVENT1:
				return validateDocumentationOf_ServiceEvent1((DocumentationOf_ServiceEvent1)value, diagnostics, context);
			case ConsolPackage.SERVICE_EVENT1_PRIMARY_PERFORMER:
				return validateServiceEvent1_PrimaryPerformer((ServiceEvent1_PrimaryPerformer)value, diagnostics, context);
			case ConsolPackage.PROGRESS_NOTE:
				return validateProgressNote((ProgressNote)value, diagnostics, context);
			case ConsolPackage.PROGRESS_NOTE_DOCUMENTATION_OF:
				return validateProgressNote_DocumentationOf((ProgressNote_DocumentationOf)value, diagnostics, context);
			case ConsolPackage.DOCUMENTATION_OF_SERVICE_EVENT2:
				return validateDocumentationOf_ServiceEvent2((DocumentationOf_ServiceEvent2)value, diagnostics, context);
			case ConsolPackage.PROGRESS_NOTE_COMPONENT_OF:
				return validateProgressNote_ComponentOf((ProgressNote_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER6:
				return validateComponentOf_EncompassingEncounter6((ComponentOf_EncompassingEncounter6)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER6_LOCATION:
				return validateEncompassingEncounter6_Location((EncompassingEncounter6_Location)value, diagnostics, context);
			case ConsolPackage.LOCATION_HEALTH_CARE_FACILITY1:
				return validateLocation_HealthCareFacility1((Location_HealthCareFacility1)value, diagnostics, context);
			case ConsolPackage.PREOPERATIVE_DIAGNOSIS:
				return validatePreoperativeDiagnosis((PreoperativeDiagnosis)value, diagnostics, context);
			case ConsolPackage.INSTRUCTIONS_SECTION:
				return validateInstructionsSection((InstructionsSection)value, diagnostics, context);
			case ConsolPackage.HOSPITAL_ADMISSION_DIAGNOSIS:
				return validateHospitalAdmissionDiagnosis((HospitalAdmissionDiagnosis)value, diagnostics, context);
			case ConsolPackage.MEDICATION_DISPENSE_ASSIGNED_ENTITY:
				return validateMedicationDispenseAssignedEntity((MedicationDispenseAssignedEntity)value, diagnostics, context);
			case ConsolPackage.IMMUNIZATION_MEDICATION_INFORMATION_MANUFACTURED_MATERIAL:
				return validateImmunizationMedicationInformationManufacturedMaterial((ImmunizationMedicationInformationManufacturedMaterial)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT:
				return validateDiagnosticImagingReport((DiagnosticImagingReport)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT_PARTICIPANT:
				return validateDiagnosticImagingReport_Participant((DiagnosticImagingReport_Participant)value, diagnostics, context);
			case ConsolPackage.PARTICIPANT_ASSOCIATED_ENTITY:
				return validateParticipant_AssociatedEntity((Participant_AssociatedEntity)value, diagnostics, context);
			case ConsolPackage.ASSOCIATED_ENTITY_PERSON:
				return validateAssociatedEntity_Person((AssociatedEntity_Person)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT_IN_FULFILLMENT_OF:
				return validateDiagnosticImagingReport_InFulfillmentOf((DiagnosticImagingReport_InFulfillmentOf)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT_DOCUMENTATION_OF:
				return validateDiagnosticImagingReport_DocumentationOf((DiagnosticImagingReport_DocumentationOf)value, diagnostics, context);
			case ConsolPackage.DOCUMENTATION_OF_SERVICE_EVENT4:
				return validateDocumentationOf_ServiceEvent4((DocumentationOf_ServiceEvent4)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT_RELATED_DOCUMENT:
				return validateDiagnosticImagingReport_RelatedDocument((DiagnosticImagingReport_RelatedDocument)value, diagnostics, context);
			case ConsolPackage.DIAGNOSTIC_IMAGING_REPORT_COMPONENT_OF:
				return validateDiagnosticImagingReport_ComponentOf((DiagnosticImagingReport_ComponentOf)value, diagnostics, context);
			case ConsolPackage.COMPONENT_OF_ENCOMPASSING_ENCOUNTER7:
				return validateComponentOf_EncompassingEncounter7((ComponentOf_EncompassingEncounter7)value, diagnostics, context);
			case ConsolPackage.ENCOMPASSING_ENCOUNTER7_RESPONSIBLE_PARTY:
				return validateEncompassingEncounter7_ResponsibleParty((EncompassingEncounter7_ResponsibleParty)value, diagnostics, context);
			case ConsolPackage.RESPONSIBLE_PARTY_ASSIGNED_ENTITY:
				return validateResponsibleParty_AssignedEntity((ResponsibleParty_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.PHYSICIAN_READING_STUDY_PERFORMER:
				return validatePhysicianReadingStudyPerformer((PhysicianReadingStudyPerformer)value, diagnostics, context);
			case ConsolPackage.PHYSICIAN_READING_STUDY_PERFORMER_ASSIGNED_ENTITY:
				return validatePhysicianReadingStudyPerformer_AssignedEntity((PhysicianReadingStudyPerformer_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.PHYSICIANOF_RECORD_PARTICIPANT:
				return validatePhysicianofRecordParticipant((PhysicianofRecordParticipant)value, diagnostics, context);
			case ConsolPackage.PHYSICIANOF_RECORD_PARTICIPANT_ASSIGNED_ENTITY:
				return validatePhysicianofRecordParticipant_AssignedEntity((PhysicianofRecordParticipant_AssignedEntity)value, diagnostics, context);
			case ConsolPackage.ASSIGNED_ENTITY_ASSIGNED_PERSON:
				return validateAssignedEntity_AssignedPerson((AssignedEntity_AssignedPerson)value, diagnostics, context);
			case ConsolPackage.TEXT_OBSERVATION:
				return validateTextObservation((TextObservation)value, diagnostics, context);
			case ConsolPackage.QUANTITY_MEASUREMENT_OBSERVATION:
				return validateQuantityMeasurementObservation((QuantityMeasurementObservation)value, diagnostics, context);
			case ConsolPackage.CODE_OBSERVATIONS:
				return validateCodeObservations((CodeObservations)value, diagnostics, context);
			case ConsolPackage.PROCEDURE_CONTEXT:
				return validateProcedureContext((ProcedureContext)value, diagnostics, context);
			default:
				return true;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints(GeneralHeaderConstraints generalHeaderConstraints,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(generalHeaderConstraints, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(generalHeaderConstraints, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsUSRealmAddress constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsUSRealmAddress(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsUSRealmPatientName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsUSRealmPatientName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRealmCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRealmCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTypeId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsTypeId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTitle constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsTitle(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsEffectiveTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsConfidentialityCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsConfidentialityCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLanguageCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsSetId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsSetId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsVersionNumber constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsVersionNumber(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthor constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEnterer constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEnterer(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodian constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodian(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipient constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipient(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticator constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticator(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticator constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticator(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTarget constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTarget(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsComponentOf constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformant constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformant(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsSupportParticipant constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsSupportParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInFulfillmentOf constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInFulfillmentOf(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthorAssignedAuthor constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthorAssignedAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsDataEntererAssignedEntity constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsDataEntererAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCustodianAssignedCustodian constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsCustodianAssignedCustodian(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorSignatureCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorSignatureCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsAuthenticatorAssignedEntity constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRolePatient constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsRecordTargetPatientRole constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsRecordTargetPatientRole(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsComponentOfEncompassingEncounter constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantRelatedEntityPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantRelatedEntityAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantRelatedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantRelatedEntityPerson constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantRelatedEntityPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityPersonName constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityAddr constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityCode constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantAssignedEntityPerson constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantAssignedEntityPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsParticipantSupportTime constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsParticipantSupportTime(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInFulfillmentOfOrderId constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInFulfillmentOfOrderId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsInFulfillmentOfOrder constraint of '<em>General Header Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(
			GeneralHeaderConstraints generalHeaderConstraints, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints.validateGeneralHeaderConstraintsInFulfillmentOfOrder(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_RecordTarget(
			GeneralHeaderConstraints_RecordTarget generalHeaderConstraints_RecordTarget, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_RecordTarget, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateRecordTarget_validateTypeCode(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateRecordTarget_validateContextControlCode(generalHeaderConstraints_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_RecordTarget_validateRecordTargetPatientRole(generalHeaderConstraints_RecordTarget, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateRecordTargetPatientRole constraint of '<em>General Header Constraints Record Target</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_RecordTarget_validateRecordTargetPatientRole(
			GeneralHeaderConstraints_RecordTarget generalHeaderConstraints_RecordTarget, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_RecordTarget.validateRecordTargetPatientRole(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole(RecordTarget_PatientRole recordTarget_PatientRole,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(recordTarget_PatientRole, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePatientRole_validateClassCode(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateRecordTarget_PatientRole_validatePatientRoleAddr(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateRecordTarget_PatientRole_validatePatientRoleId(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateRecordTarget_PatientRole_validatePatientRoleTelecom(recordTarget_PatientRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateRecordTarget_PatientRole_validatePatientRolePatient(recordTarget_PatientRole, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientRoleAddr constraint of '<em>Record Target Patient Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole_validatePatientRoleAddr(
			RecordTarget_PatientRole recordTarget_PatientRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return recordTarget_PatientRole.validatePatientRoleAddr(diagnostics, context);
	}

	/**
	 * Validates the validatePatientRoleId constraint of '<em>Record Target Patient Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole_validatePatientRoleId(
			RecordTarget_PatientRole recordTarget_PatientRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return recordTarget_PatientRole.validatePatientRoleId(diagnostics, context);
	}

	/**
	 * Validates the validatePatientRoleTelecom constraint of '<em>Record Target Patient Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole_validatePatientRoleTelecom(
			RecordTarget_PatientRole recordTarget_PatientRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return recordTarget_PatientRole.validatePatientRoleTelecom(diagnostics, context);
	}

	/**
	 * Validates the validatePatientRolePatient constraint of '<em>Record Target Patient Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole_validatePatientRolePatient(
			RecordTarget_PatientRole recordTarget_PatientRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return recordTarget_PatientRole.validatePatientRolePatient(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient(PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientRole_Patient, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePatient_validateClassCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePatient_validateDeterminerCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientBirthTimePreciseToYear(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientBirthTimePreciseToDay(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientBirthTime(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientEthnicGroupCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientMaritalStatusCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientName(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientRaceCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientReligiousAffiliationCode(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientGuardian(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientBirthplace(patientRole_Patient, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_Patient_validatePatientLanguageCommunication(patientRole_Patient, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientBirthTimePreciseToYear constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientBirthTimePreciseToYear(
			PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientBirthTimePreciseToYear(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBirthTimePreciseToDay constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientBirthTimePreciseToDay(
			PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientBirthTimePreciseToDay(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBirthTime constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientBirthTime(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientBirthTime(diagnostics, context);
	}

	/**
	 * Validates the validatePatientEthnicGroupCode constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientEthnicGroupCode(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientEthnicGroupCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientMaritalStatusCode constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientMaritalStatusCode(
			PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientMaritalStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientName constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientName(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientName(diagnostics, context);
	}

	/**
	 * Validates the validatePatientRaceCode constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientRaceCode(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientRaceCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientReligiousAffiliationCode constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientReligiousAffiliationCode(
			PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientReligiousAffiliationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePatientGuardian constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientGuardian(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientGuardian(diagnostics, context);
	}

	/**
	 * Validates the validatePatientBirthplace constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientBirthplace(PatientRole_Patient patientRole_Patient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientBirthplace(diagnostics, context);
	}

	/**
	 * Validates the validatePatientLanguageCommunication constraint of '<em>Patient Role Patient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_Patient_validatePatientLanguageCommunication(
			PatientRole_Patient patientRole_Patient, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patientRole_Patient.validatePatientLanguageCommunication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Guardian(Patient_Guardian patient_Guardian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patient_Guardian, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateGuardian_validateGuardianChoice(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateGuardian_validateClassCode(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_Guardian_validateGuardianAddr(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_Guardian_validateGuardianCode(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_Guardian_validateGuardianTelecom(patient_Guardian, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_Guardian_validateGuardianGuardianPerson(patient_Guardian, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGuardianAddr constraint of '<em>Patient Guardian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Guardian_validateGuardianAddr(Patient_Guardian patient_Guardian,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patient_Guardian.validateGuardianAddr(diagnostics, context);
	}

	/**
	 * Validates the validateGuardianCode constraint of '<em>Patient Guardian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Guardian_validateGuardianCode(Patient_Guardian patient_Guardian,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patient_Guardian.validateGuardianCode(diagnostics, context);
	}

	/**
	 * Validates the validateGuardianTelecom constraint of '<em>Patient Guardian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Guardian_validateGuardianTelecom(Patient_Guardian patient_Guardian,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patient_Guardian.validateGuardianTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateGuardianGuardianPerson constraint of '<em>Patient Guardian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Guardian_validateGuardianGuardianPerson(Patient_Guardian patient_Guardian,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patient_Guardian.validateGuardianGuardianPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_LanguageCommunication(Patient_LanguageCommunication patient_LanguageCommunication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patient_LanguageCommunication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_LanguageCommunication_validateLanguageCommunicationLanguageCode(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_LanguageCommunication_validateLanguageCommunicationPreferenceInd(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_LanguageCommunication_validateLanguageCommunicationProficiencyLevelCode(patient_LanguageCommunication, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_LanguageCommunication_validateLanguageCommunicationModeCode(patient_LanguageCommunication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLanguageCommunicationLanguageCode constraint of '<em>Patient Language Communication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_LanguageCommunication_validateLanguageCommunicationLanguageCode(
			Patient_LanguageCommunication patient_LanguageCommunication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patient_LanguageCommunication.validateLanguageCommunicationLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateLanguageCommunicationPreferenceInd constraint of '<em>Patient Language Communication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_LanguageCommunication_validateLanguageCommunicationPreferenceInd(
			Patient_LanguageCommunication patient_LanguageCommunication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patient_LanguageCommunication.validateLanguageCommunicationPreferenceInd(diagnostics, context);
	}

	/**
	 * Validates the validateLanguageCommunicationProficiencyLevelCode constraint of '<em>Patient Language Communication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_LanguageCommunication_validateLanguageCommunicationProficiencyLevelCode(
			Patient_LanguageCommunication patient_LanguageCommunication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patient_LanguageCommunication.validateLanguageCommunicationProficiencyLevelCode(diagnostics, context);
	}

	/**
	 * Validates the validateLanguageCommunicationModeCode constraint of '<em>Patient Language Communication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_LanguageCommunication_validateLanguageCommunicationModeCode(
			Patient_LanguageCommunication patient_LanguageCommunication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patient_LanguageCommunication.validateLanguageCommunicationModeCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Birthplace(Patient_Birthplace patient_Birthplace, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patient_Birthplace, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateBirthplace_validateClassCode(patient_Birthplace, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatient_Birthplace_validateBirthplacePlace(patient_Birthplace, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBirthplacePlace constraint of '<em>Patient Birthplace</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatient_Birthplace_validateBirthplacePlace(Patient_Birthplace patient_Birthplace,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return patient_Birthplace.validateBirthplacePlace(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBirthplace_Place(Birthplace_Place birthplace_Place, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(birthplace_Place, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePlace_validateClassCode(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePlace_validateDeterminerCode(birthplace_Place, diagnostics, context);
		if (result || diagnostics != null) result &= validateBirthplace_Place_validatePlaceAddr(birthplace_Place, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlaceAddr constraint of '<em>Birthplace Place</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBirthplace_Place_validatePlaceAddr(Birthplace_Place birthplace_Place,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return birthplace_Place.validatePlaceAddr(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(patientRole_ProviderOrganization, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateOrganization_validateClassCode(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateOrganization_validateDeterminerCode(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_ProviderOrganization_validateProviderOrganizationHasNationalProviderIdentifier(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_ProviderOrganization_validateProviderOrganizationAddr(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_ProviderOrganization_validateProviderOrganizationId(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_ProviderOrganization_validateProviderOrganizationName(patientRole_ProviderOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validatePatientRole_ProviderOrganization_validateProviderOrganizationTelecom(patientRole_ProviderOrganization, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProviderOrganizationHasNationalProviderIdentifier constraint of '<em>Patient Role Provider Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization_validateProviderOrganizationHasNationalProviderIdentifier(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientRole_ProviderOrganization.validateProviderOrganizationHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateProviderOrganizationAddr constraint of '<em>Patient Role Provider Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization_validateProviderOrganizationAddr(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientRole_ProviderOrganization.validateProviderOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateProviderOrganizationId constraint of '<em>Patient Role Provider Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization_validateProviderOrganizationId(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientRole_ProviderOrganization.validateProviderOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateProviderOrganizationName constraint of '<em>Patient Role Provider Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization_validateProviderOrganizationName(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientRole_ProviderOrganization.validateProviderOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateProviderOrganizationTelecom constraint of '<em>Patient Role Provider Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePatientRole_ProviderOrganization_validateProviderOrganizationTelecom(
			PatientRole_ProviderOrganization patientRole_ProviderOrganization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return patientRole_ProviderOrganization.validateProviderOrganizationTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_ComponentOf(
			GeneralHeaderConstraints_ComponentOf generalHeaderConstraints_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(generalHeaderConstraints_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_ComponentOf_validateComponentOfEncompassingEncounter(generalHeaderConstraints_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter constraint of '<em>General Header Constraints Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_ComponentOf_validateComponentOfEncompassingEncounter(
			GeneralHeaderConstraints_ComponentOf generalHeaderConstraints_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_ComponentOf.validateComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter(
			ComponentOf_EncompassingEncounter componentOf_EncompassingEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter_validateEncompassingEncounterEffectiveTime(componentOf_EncompassingEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter_validateEncompassingEncounterId(componentOf_EncompassingEncounter, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounterEffectiveTime constraint of '<em>Component Of Encompassing Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter_validateEncompassingEncounterEffectiveTime(
			ComponentOf_EncompassingEncounter componentOf_EncompassingEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter.validateEncompassingEncounterEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounterId constraint of '<em>Component Of Encompassing Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter_validateEncompassingEncounterId(
			ComponentOf_EncompassingEncounter componentOf_EncompassingEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter.validateEncompassingEncounterId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Author(
			GeneralHeaderConstraints_Author generalHeaderConstraints_Author, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_Author, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateTypeCode(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateContextControlCode(generalHeaderConstraints_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Author_validateAuthorAssignedAuthor(generalHeaderConstraints_Author, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAuthorAssignedAuthor constraint of '<em>General Header Constraints Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Author_validateAuthorAssignedAuthor(
			GeneralHeaderConstraints_Author generalHeaderConstraints_Author, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Author.validateAuthorAssignedAuthor(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor(Author_AssignedAuthor author_AssignedAuthor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(author_AssignedAuthor, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateAssignedAuthorChoice(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateClassCode(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorHasNationalProviderIdentifier(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorAddr(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorCode(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorId(author_AssignedAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor_validateAssignedAuthorTelecom(author_AssignedAuthor, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(
			Author_AssignedAuthor author_AssignedAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthorHasNationalProviderIdentifier constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorHasNationalProviderIdentifier(
			Author_AssignedAuthor author_AssignedAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthorAddr constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorAddr(
			Author_AssignedAuthor author_AssignedAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthorCode constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorCode(
			Author_AssignedAuthor author_AssignedAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthorId constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorId(Author_AssignedAuthor author_AssignedAuthor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorId(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthorTelecom constraint of '<em>Author Assigned Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor_validateAssignedAuthorTelecom(
			Author_AssignedAuthor author_AssignedAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor.validateAssignedAuthorTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedAuthor_AuthoringDevice(
			AssignedAuthor_AuthoringDevice assignedAuthor_AuthoringDevice, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assignedAuthor_AuthoringDevice, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthoringDevice_validateClassCode(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthoringDevice_validateDeterminerCode(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedAuthor_AuthoringDevice_validateAuthoringDeviceManufacturerModelName(assignedAuthor_AuthoringDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedAuthor_AuthoringDevice_validateAuthoringDeviceSoftwareName(assignedAuthor_AuthoringDevice, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAuthoringDeviceManufacturerModelName constraint of '<em>Assigned Author Authoring Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedAuthor_AuthoringDevice_validateAuthoringDeviceManufacturerModelName(
			AssignedAuthor_AuthoringDevice assignedAuthor_AuthoringDevice, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return assignedAuthor_AuthoringDevice.validateAuthoringDeviceManufacturerModelName(diagnostics, context);
	}

	/**
	 * Validates the validateAuthoringDeviceSoftwareName constraint of '<em>Assigned Author Authoring Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedAuthor_AuthoringDevice_validateAuthoringDeviceSoftwareName(
			AssignedAuthor_AuthoringDevice assignedAuthor_AuthoringDevice, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return assignedAuthor_AuthoringDevice.validateAuthoringDeviceSoftwareName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Person(
			GeneralHeaderConstraints_Person generalHeaderConstraints_Person, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_Person, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateClassCode(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateDeterminerCode(generalHeaderConstraints_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Person_validatePersonName(generalHeaderConstraints_Person, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePersonName constraint of '<em>General Header Constraints Person</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Person_validatePersonName(GeneralHeaderConstraints_Person generalHeaderConstraints_Person, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_Person.validatePersonName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_DataEnterer(
			GeneralHeaderConstraints_DataEnterer generalHeaderConstraints_DataEnterer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_DataEnterer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDataEnterer_validateTypeCode(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDataEnterer_validateContextControlCode(generalHeaderConstraints_DataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_DataEnterer_validateDataEntererAssignedEntity(generalHeaderConstraints_DataEnterer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDataEntererAssignedEntity constraint of '<em>General Header Constraints Data Enterer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_DataEnterer_validateDataEntererAssignedEntity(GeneralHeaderConstraints_DataEnterer generalHeaderConstraints_DataEnterer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_DataEnterer.validateDataEntererAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity(DataEnterer_AssignedEntity dataEnterer_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dataEnterer_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityAddr(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityCode(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityId(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityTelecom(dataEnterer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateDataEnterer_AssignedEntity_validateAssignedEntityAssignedPerson(dataEnterer_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityHasNationalProviderIdentifier constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAddr constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityAddr(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityCode(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityId(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityTelecom constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityTelecom(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAssignedPerson constraint of '<em>Data Enterer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDataEnterer_AssignedEntity_validateAssignedEntityAssignedPerson(
			DataEnterer_AssignedEntity dataEnterer_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dataEnterer_AssignedEntity.validateAssignedEntityAssignedPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Custodian(
			GeneralHeaderConstraints_Custodian generalHeaderConstraints_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_Custodian, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodian_validateTypeCode(generalHeaderConstraints_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Custodian_validateCustodianAssignedCustodian(generalHeaderConstraints_Custodian, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianAssignedCustodian constraint of '<em>General Header Constraints Custodian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Custodian_validateCustodianAssignedCustodian(
			GeneralHeaderConstraints_Custodian generalHeaderConstraints_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Custodian.validateCustodianAssignedCustodian(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_AssignedCustodian(Custodian_AssignedCustodian custodian_AssignedCustodian,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(custodian_AssignedCustodian, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedCustodian_validateClassCode(custodian_AssignedCustodian, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodian_AssignedCustodian_validateAssignedCustodianRepresentedCustodianOrganization(custodian_AssignedCustodian, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedCustodianRepresentedCustodianOrganization constraint of '<em>Custodian Assigned Custodian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_AssignedCustodian_validateAssignedCustodianRepresentedCustodianOrganization(
			Custodian_AssignedCustodian custodian_AssignedCustodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return custodian_AssignedCustodian.validateAssignedCustodianRepresentedCustodianOrganization(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assignedCustodian_CustodianOrganization, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodianOrganization_validateClassCode(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodianOrganization_validateDeterminerCode(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationHasNationalProviderIdentifier(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationAddr(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationId(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationName(assignedCustodian_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationTelecom(assignedCustodian_CustodianOrganization, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianOrganizationHasNationalProviderIdentifier constraint of '<em>Assigned Custodian Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationHasNationalProviderIdentifier(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian_CustodianOrganization.validateCustodianOrganizationHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationAddr constraint of '<em>Assigned Custodian Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationAddr(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian_CustodianOrganization.validateCustodianOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationId constraint of '<em>Assigned Custodian Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationId(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian_CustodianOrganization.validateCustodianOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationName constraint of '<em>Assigned Custodian Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationName(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian_CustodianOrganization.validateCustodianOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationTelecom constraint of '<em>Assigned Custodian Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian_CustodianOrganization_validateCustodianOrganizationTelecom(
			AssignedCustodian_CustodianOrganization assignedCustodian_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian_CustodianOrganization.validateCustodianOrganizationTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_InformationRecipient(
			GeneralHeaderConstraints_InformationRecipient generalHeaderConstraints_InformationRecipient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_InformationRecipient, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_InformationRecipient_validateInformationRecipientIntendedRecipient(generalHeaderConstraints_InformationRecipient, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInformationRecipientIntendedRecipient constraint of '<em>General Header Constraints Information Recipient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_InformationRecipient_validateInformationRecipientIntendedRecipient(
			GeneralHeaderConstraints_InformationRecipient generalHeaderConstraints_InformationRecipient,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_InformationRecipient.validateInformationRecipientIntendedRecipient(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformationRecipient_IntendedRecipient(
			InformationRecipient_IntendedRecipient informationRecipient_IntendedRecipient, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(informationRecipient_IntendedRecipient, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformationRecipient_IntendedRecipient_validateIntendedRecipientInformationRecipient(informationRecipient_IntendedRecipient, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformationRecipient_IntendedRecipient_validateIntendedRecipientRecievedOrganization(informationRecipient_IntendedRecipient, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateIntendedRecipientInformationRecipient constraint of '<em>Information Recipient Intended Recipient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformationRecipient_IntendedRecipient_validateIntendedRecipientInformationRecipient(
			InformationRecipient_IntendedRecipient informationRecipient_IntendedRecipient, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return informationRecipient_IntendedRecipient.validateIntendedRecipientInformationRecipient(diagnostics, context);
	}

	/**
	 * Validates the validateIntendedRecipientRecievedOrganization constraint of '<em>Information Recipient Intended Recipient</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformationRecipient_IntendedRecipient_validateIntendedRecipientRecievedOrganization(
			InformationRecipient_IntendedRecipient informationRecipient_IntendedRecipient, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return informationRecipient_IntendedRecipient.validateIntendedRecipientRecievedOrganization(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIntendedRecipient_Organization(
			IntendedRecipient_Organization intendedRecipient_Organization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(intendedRecipient_Organization, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateOrganization_validateClassCode(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateOrganization_validateDeterminerCode(intendedRecipient_Organization, diagnostics, context);
		if (result || diagnostics != null) result &= validateIntendedRecipient_Organization_validateOrganizationName(intendedRecipient_Organization, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOrganizationName constraint of '<em>Intended Recipient Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIntendedRecipient_Organization_validateOrganizationName(
			IntendedRecipient_Organization intendedRecipient_Organization, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return intendedRecipient_Organization.validateOrganizationName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_LegalAuthenticator(
			GeneralHeaderConstraints_LegalAuthenticator generalHeaderConstraints_LegalAuthenticator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_LegalAuthenticator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateLegalAuthenticator_validateTypeCode(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateLegalAuthenticator_validateContextControlCode(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_LegalAuthenticator_validateLegalAuthenticatorTime(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_LegalAuthenticator_validateLegalAuthenticatorSignatureCode(generalHeaderConstraints_LegalAuthenticator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLegalAuthenticatorTime constraint of '<em>General Header Constraints Legal Authenticator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_LegalAuthenticator_validateLegalAuthenticatorTime(
			GeneralHeaderConstraints_LegalAuthenticator generalHeaderConstraints_LegalAuthenticator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_LegalAuthenticator.validateLegalAuthenticatorTime(diagnostics, context);
	}

	/**
	 * Validates the validateLegalAuthenticatorSignatureCode constraint of '<em>General Header Constraints Legal Authenticator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_LegalAuthenticator_validateLegalAuthenticatorSignatureCode(
			GeneralHeaderConstraints_LegalAuthenticator generalHeaderConstraints_LegalAuthenticator,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_LegalAuthenticator.validateLegalAuthenticatorSignatureCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(legalAuthenticator_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityAddr(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityCode(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityId(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityTelecom(legalAuthenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateLegalAuthenticator_AssignedEntity_validateAssignedEntityAssignedPerson(legalAuthenticator_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityHasNationalProviderIdentifier constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAddr constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityAddr(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityCode(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityId(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityTelecom constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityTelecom(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAssignedPerson constraint of '<em>Legal Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLegalAuthenticator_AssignedEntity_validateAssignedEntityAssignedPerson(
			LegalAuthenticator_AssignedEntity legalAuthenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return legalAuthenticator_AssignedEntity.validateAssignedEntityAssignedPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Authenticator(
			GeneralHeaderConstraints_Authenticator generalHeaderConstraints_Authenticator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_Authenticator, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthenticator_validateTypeCode(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorTime(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorSignatureCode(generalHeaderConstraints_Authenticator, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorAssignedEntity(generalHeaderConstraints_Authenticator, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAuthenticatorTime constraint of '<em>General Header Constraints Authenticator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorTime(
			GeneralHeaderConstraints_Authenticator generalHeaderConstraints_Authenticator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Authenticator.validateAuthenticatorTime(diagnostics, context);
	}

	/**
	 * Validates the validateAuthenticatorSignatureCode constraint of '<em>General Header Constraints Authenticator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorSignatureCode(
			GeneralHeaderConstraints_Authenticator generalHeaderConstraints_Authenticator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Authenticator.validateAuthenticatorSignatureCode(diagnostics, context);
	}

	/**
	 * Validates the validateAuthenticatorAssignedEntity constraint of '<em>General Header Constraints Authenticator</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Authenticator_validateAuthenticatorAssignedEntity(
			GeneralHeaderConstraints_Authenticator generalHeaderConstraints_Authenticator, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Authenticator.validateAuthenticatorAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity(Authenticator_AssignedEntity authenticator_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(authenticator_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthenticator_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthenticator_AssignedEntity_validateAssignedEntityAddr(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthenticator_AssignedEntity_validateAssignedEntityCode(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthenticator_AssignedEntity_validateAssignedEntityId(authenticator_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthenticator_AssignedEntity_validateAssignedEntityTelecom(authenticator_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityHasNationalProviderIdentifier constraint of '<em>Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(
			Authenticator_AssignedEntity authenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return authenticator_AssignedEntity.validateAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAddr constraint of '<em>Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity_validateAssignedEntityAddr(
			Authenticator_AssignedEntity authenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return authenticator_AssignedEntity.validateAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity_validateAssignedEntityCode(
			Authenticator_AssignedEntity authenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return authenticator_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity_validateAssignedEntityId(
			Authenticator_AssignedEntity authenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return authenticator_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityTelecom constraint of '<em>Authenticator Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthenticator_AssignedEntity_validateAssignedEntityTelecom(
			Authenticator_AssignedEntity authenticator_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return authenticator_AssignedEntity.validateAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Informant(
			GeneralHeaderConstraints_Informant generalHeaderConstraints_Informant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_Informant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateInformant12_validateInformantChoice(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateInformant12_validateTypeCode(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateInformant12_validateContextControlCode(generalHeaderConstraints_Informant, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_Informant_validateInformantHasAssignedEntityOrRelatedEntity(generalHeaderConstraints_Informant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInformantHasAssignedEntityOrRelatedEntity constraint of '<em>General Header Constraints Informant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_Informant_validateInformantHasAssignedEntityOrRelatedEntity(
			GeneralHeaderConstraints_Informant generalHeaderConstraints_Informant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return generalHeaderConstraints_Informant.validateInformantHasAssignedEntityOrRelatedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity(Informant_AssignedEntity informant_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(informant_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_AssignedEntity_validateAssignedEntityAddr(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_AssignedEntity_validateAssignedEntityCode(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_AssignedEntity_validateAssignedEntityId(informant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_AssignedEntity_validateAssignedEntityPerson(informant_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityHasNationalProviderIdentifier constraint of '<em>Informant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(
			Informant_AssignedEntity informant_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_AssignedEntity.validateAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityAddr constraint of '<em>Informant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity_validateAssignedEntityAddr(
			Informant_AssignedEntity informant_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_AssignedEntity.validateAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Informant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity_validateAssignedEntityCode(
			Informant_AssignedEntity informant_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Informant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity_validateAssignedEntityId(
			Informant_AssignedEntity informant_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityPerson constraint of '<em>Informant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_AssignedEntity_validateAssignedEntityPerson(
			Informant_AssignedEntity informant_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_AssignedEntity.validateAssignedEntityPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_RelatedEntity(Informant_RelatedEntity informant_RelatedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(informant_RelatedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_RelatedEntity_validateRelatedEntityAddr(informant_RelatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateInformant_RelatedEntity_validateRelatedEntityPerson(informant_RelatedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateRelatedEntityAddr constraint of '<em>Informant Related Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_RelatedEntity_validateRelatedEntityAddr(
			Informant_RelatedEntity informant_RelatedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_RelatedEntity.validateRelatedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateRelatedEntityPerson constraint of '<em>Informant Related Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInformant_RelatedEntity_validateRelatedEntityPerson(
			Informant_RelatedEntity informant_RelatedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return informant_RelatedEntity.validateRelatedEntityPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_ParticipantSupport(
			GeneralHeaderConstraints_ParticipantSupport generalHeaderConstraints_ParticipantSupport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_ParticipantSupport, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant1_validateContextControlCode(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_ParticipantSupport_validateParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_ParticipantSupport_validateParticipantSupportTime(generalHeaderConstraints_ParticipantSupport, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization constraint of '<em>General Header Constraints Participant Support</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_ParticipantSupport_validateParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(
			GeneralHeaderConstraints_ParticipantSupport generalHeaderConstraints_ParticipantSupport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_ParticipantSupport.validateParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateParticipantSupportTime constraint of '<em>General Header Constraints Participant Support</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_ParticipantSupport_validateParticipantSupportTime(
			GeneralHeaderConstraints_ParticipantSupport generalHeaderConstraints_ParticipantSupport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_ParticipantSupport.validateParticipantSupportTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_InFulfillmentOf(
			GeneralHeaderConstraints_InFulfillmentOf generalHeaderConstraints_InFulfillmentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalHeaderConstraints_InFulfillmentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateInFulfillmentOf_validateTypeCode(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_InFulfillmentOf_validateInFulfillmentOfOrder(generalHeaderConstraints_InFulfillmentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInFulfillmentOfOrder constraint of '<em>General Header Constraints In Fulfillment Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralHeaderConstraints_InFulfillmentOf_validateInFulfillmentOfOrder(
			GeneralHeaderConstraints_InFulfillmentOf generalHeaderConstraints_InFulfillmentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalHeaderConstraints_InFulfillmentOf.validateInFulfillmentOfOrder(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInFulfillmentOf_Order(InFulfillmentOf_Order inFulfillmentOf_Order,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(inFulfillmentOf_Order, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateOrder_validateMoodCode(inFulfillmentOf_Order, diagnostics, context);
		if (result || diagnostics != null) result &= validateInFulfillmentOf_Order_validateOrderId(inFulfillmentOf_Order, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOrderId constraint of '<em>In Fulfillment Of Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInFulfillmentOf_Order_validateOrderId(InFulfillmentOf_Order inFulfillmentOf_Order,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return inFulfillmentOf_Order.validateOrderId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct(AllergyProblemAct allergyProblemAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyProblemAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeLow(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeHigh(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActTemplateId(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActClassCode(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActMoodCode(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActId(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActCode(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActStatusCode(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActEffectiveTime(allergyProblemAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyProblemAct_validateAllergyProblemActAllergyObservation(allergyProblemAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyProblemActEffectiveTimeLow constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeLow(
			AllergyProblemAct allergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActEffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActEffectiveTimeHigh constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActEffectiveTimeHigh(
			AllergyProblemAct allergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActEffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActTemplateId constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActTemplateId(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActClassCode constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActClassCode(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActMoodCode constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActMoodCode(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActId constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActId(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActCode constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActCode(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActStatusCode constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActStatusCode(AllergyProblemAct allergyProblemAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActEffectiveTime constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActEffectiveTime(
			AllergyProblemAct allergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyProblemActAllergyObservation constraint of '<em>Allergy Problem Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyProblemAct_validateAllergyProblemActAllergyObservation(
			AllergyProblemAct allergyProblemAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyProblemAct.validateAllergyProblemActAllergyObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation(AllergyObservation allergyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationAllergyStatusInversionIndicator(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationReactionInversionIndicator(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationSeverityInversionIndicator(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationTemplateId(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationClassCode(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationMoodCode(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationId(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationCode(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationStatusCode(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationEffectiveTime(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationValue(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationProblemEntryReactionObservationContainer(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationSeverity(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationAllergyStatusObservation(allergyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservation_validateAllergyObservationParticipant(allergyObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyObservationAllergyStatusInversionIndicator constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationAllergyStatusInversionIndicator(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationAllergyStatusInversionIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationReactionInversionIndicator constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationReactionInversionIndicator(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationReactionInversionIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationSeverityInversionIndicator constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationSeverityInversionIndicator(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationSeverityInversionIndicator(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationTemplateId constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationTemplateId(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationClassCode constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationClassCode(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationMoodCode constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationMoodCode(AllergyObservation allergyObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationId constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationId(AllergyObservation allergyObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationCode constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationCode(AllergyObservation allergyObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationStatusCode constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationStatusCode(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationEffectiveTime constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationEffectiveTime(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationValue constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationValue(AllergyObservation allergyObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationProblemEntryReactionObservationContainer constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationProblemEntryReactionObservationContainer(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationProblemEntryReactionObservationContainer(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationSeverity constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationSeverity(AllergyObservation allergyObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationSeverity(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationAllergyStatusObservation constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationAllergyStatusObservation(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationAllergyStatusObservation(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationParticipant constraint of '<em>Allergy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservation_validateAllergyObservationParticipant(
			AllergyObservation allergyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyObservation.validateAllergyObservationParticipant(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation(ReactionObservation reactionObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reactionObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationTextReference(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationReferenceValue(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationEffectiveTimeLow(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationEffectiveTimeHigh(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationSeverityObservationInversionInd(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationProcedureActivityProcedureInversionInd(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationMedicationActivityInversionInd(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationTemplateId(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationClassCode(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationMoodCode(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationId(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationCode(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationText(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationStatusCode(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationEffectiveTime(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationValue(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationSeverityObservation(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationProcedureActivityProcedure(reactionObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReactionObservation_validateReactionObservationMedicationActivity(reactionObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReactionObservationTextReference constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationTextReference(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationReferenceValue constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationReferenceValue(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationEffectiveTimeLow constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationEffectiveTimeLow(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationEffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationEffectiveTimeHigh constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationEffectiveTimeHigh(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationEffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationSeverityObservationInversionInd constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationSeverityObservationInversionInd(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationSeverityObservationInversionInd(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationProcedureActivityProcedureInversionInd constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationProcedureActivityProcedureInversionInd(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationProcedureActivityProcedureInversionInd(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationMedicationActivityInversionInd constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationMedicationActivityInversionInd(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationMedicationActivityInversionInd(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationTemplateId constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationTemplateId(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationClassCode constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationClassCode(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationMoodCode constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationMoodCode(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationId constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationId(ReactionObservation reactionObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationCode constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationCode(ReactionObservation reactionObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationText constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationText(ReactionObservation reactionObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationStatusCode constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationStatusCode(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationEffectiveTime constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationEffectiveTime(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationValue constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationValue(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationSeverityObservation constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationSeverityObservation(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationSeverityObservation(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationProcedureActivityProcedure constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationProcedureActivityProcedure(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationProcedureActivityProcedure(diagnostics, context);
	}

	/**
	 * Validates the validateReactionObservationMedicationActivity constraint of '<em>Reaction Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReactionObservation_validateReactionObservationMedicationActivity(
			ReactionObservation reactionObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reactionObservation.validateReactionObservationMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation(SeverityObservation severityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(severityObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationTextReference(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationReferenceValue(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationTemplateId(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationClassCode(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationMoodCode(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationCode(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationText(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationStatusCode(severityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeverityObservation_validateSeverityObservationValue(severityObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSeverityObservationTextReference constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationTextReference(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationReferenceValue constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationReferenceValue(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationTemplateId constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationTemplateId(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationClassCode constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationClassCode(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationMoodCode constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationMoodCode(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationCode constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationCode(SeverityObservation severityObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationText constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationText(SeverityObservation severityObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationStatusCode constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationStatusCode(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeverityObservationValue constraint of '<em>Severity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeverityObservation_validateSeverityObservationValue(
			SeverityObservation severityObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return severityObservation.validateSeverityObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure(ProcedureActivityProcedure procedureActivityProcedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureActivityProcedure, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeCodeSystems(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeOriginalText(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureOriginalTextReferenceValue(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureReferenceValue(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureEncounterInversion(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstanceTypeCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocationTypeCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureInstructionsInversion(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureTemplateId(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureClassCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureId(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureStatusCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureEffectiveTime(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedurePriorityCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureMethodCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureTargetSiteCode(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureIndication(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureSpecimen(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocation(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedurePerformer(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureMedicationActivity(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedurePatientInstruction(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureEncounter(procedureActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstance(procedureActivityProcedure, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureActivityProcedureCodeCodeSystems constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeCodeSystems(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureCodeCodeSystems(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureCodeOriginalText constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureCodeOriginalText(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureOriginalTextReferenceValue constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureOriginalTextReferenceValue(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureOriginalTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureReferenceValue constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureReferenceValue(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureEncounterInversion constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureEncounterInversion(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureEncounterInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureProductInstanceTypeCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstanceTypeCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureProductInstanceTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureServiceDeliveryLocationTypeCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocationTypeCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureServiceDeliveryLocationTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureInstructionsInversion constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureInstructionsInversion(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureInstructionsInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureTemplateId constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureTemplateId(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureClassCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureClassCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureId constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureId(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureStatusCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureStatusCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureEffectiveTime constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureEffectiveTime(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedurePriorityCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedurePriorityCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedurePriorityCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureMethodCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureMethodCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureTargetSiteCode constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureTargetSiteCode(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureIndication constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureIndication(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureIndication(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureSpecimen constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureSpecimen(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureSpecimen(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureServiceDeliveryLocation constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureServiceDeliveryLocation(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureServiceDeliveryLocation(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedurePerformer constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedurePerformer(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedurePerformer(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureMedicationActivity constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureMedicationActivity(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureMedicationActivity(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedurePatientInstruction constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedurePatientInstruction(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedurePatientInstruction(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureProcedureEncounter constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureProcedureEncounter(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureProcedureEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityProcedureProductInstance constraint of '<em>Procedure Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityProcedure_validateProcedureActivityProcedureProductInstance(
			ProcedureActivityProcedure procedureActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityProcedure.validateProcedureActivityProcedureProductInstance(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication(Indication indication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(indication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationCodeNullFlavor(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationTemplateId(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationClassCode(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationMoodCode(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationId(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationCode(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationStatusCode(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationEffectiveTime(indication, diagnostics, context);
		if (result || diagnostics != null) result &= validateIndication_validateIndicationValue(indication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateIndicationCodeNullFlavor constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationCodeNullFlavor(Indication indication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return indication.validateIndicationCodeNullFlavor(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationTemplateId constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationTemplateId(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationClassCode constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationClassCode(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationMoodCode constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationMoodCode(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationId constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationId(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationId(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationCode constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationCode(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationStatusCode constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationStatusCode(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationEffectiveTime constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationEffectiveTime(Indication indication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return indication.validateIndicationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateIndicationValue constraint of '<em>Indication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateIndication_validateIndicationValue(Indication indication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return indication.validateIndicationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation(ServiceDeliveryLocation serviceDeliveryLocation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(serviceDeliveryLocation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationHasPlayingEntity(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationHasPlayingEntityClassCode(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationTemplateId(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationCode(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationAddr(serviceDeliveryLocation, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceDeliveryLocation_validateServiceDeliveryLocationTelecom(serviceDeliveryLocation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceDeliveryLocationHasPlayingEntity constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationHasPlayingEntity(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationHasPlayingEntity(diagnostics, context);
	}

	/**
	 * Validates the validateServiceDeliveryLocationHasPlayingEntityClassCode constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationHasPlayingEntityClassCode(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationHasPlayingEntityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceDeliveryLocationTemplateId constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationTemplateId(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateServiceDeliveryLocationCode constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationCode(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceDeliveryLocationAddr constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationAddr(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateServiceDeliveryLocationTelecom constraint of '<em>Service Delivery Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceDeliveryLocation_validateServiceDeliveryLocationTelecom(
			ServiceDeliveryLocation serviceDeliveryLocation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceDeliveryLocation.validateServiceDeliveryLocationTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity(MedicationActivity medicationActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubstanceAdministration_validateClassCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityDoseQuantityorrateQuantity(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityTextReference(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityEffectiveTimeIVLTS(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityEffectiveTimePIVLTS(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityDoseQuantityUnit(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityDrugVehicleTypeCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityInstructionsInversionInd(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityPreconditionSubstanceAdmTypeCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityTemplateId(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityClassCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityId(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityStatusCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityRouteCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityApproachSiteCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityDoseQuantity(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityRateQuantity(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityMaxDoseQuantity(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityAdministrationUnitCode(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityText(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityRepeatNumber(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityMedicationSupplyOrder(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityReactionObservation(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityPerformer(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityInstructions(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityIndication(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityMedicationDispense(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityPrecondition(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityDrugVehicle(medicationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationActivity_validateMedicationActivityConsumable(medicationActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationActivityDoseQuantityorrateQuantity constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityDoseQuantityorrateQuantity(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityDoseQuantityorrateQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityTextReference constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityTextReference(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityEffectiveTimeIVLTS constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityEffectiveTimeIVLTS(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityEffectiveTimeIVLTS(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityEffectiveTimePIVLTS constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityEffectiveTimePIVLTS(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityEffectiveTimePIVLTS(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityDoseQuantityUnit constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityDoseQuantityUnit(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityDoseQuantityUnit(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityDrugVehicleTypeCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityDrugVehicleTypeCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityDrugVehicleTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityInstructionsInversionInd constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityInstructionsInversionInd(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityInstructionsInversionInd(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityPreconditionSubstanceAdmTypeCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityPreconditionSubstanceAdmTypeCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityPreconditionSubstanceAdmTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityTemplateId constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityTemplateId(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityClassCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityClassCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityId constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityId(MedicationActivity medicationActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityCode(MedicationActivity medicationActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityStatusCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityStatusCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityRouteCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityRouteCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityRouteCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityApproachSiteCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityApproachSiteCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityApproachSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityDoseQuantity constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityDoseQuantity(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityRateQuantity constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityRateQuantity(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityRateQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityMaxDoseQuantity constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityMaxDoseQuantity(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityMaxDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityAdministrationUnitCode constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityAdministrationUnitCode(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityAdministrationUnitCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityText constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityText(MedicationActivity medicationActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityRepeatNumber constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityRepeatNumber(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityRepeatNumber(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityMedicationSupplyOrder constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityMedicationSupplyOrder(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityMedicationSupplyOrder(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityReactionObservation constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityReactionObservation(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityReactionObservation(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityPerformer constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityPerformer(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityPerformer(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityInstructions constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityInstructions(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityInstructions(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityIndication constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityIndication(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityIndication(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityMedicationDispense constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityMedicationDispense(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityMedicationDispense(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityPrecondition constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityPrecondition(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityPrecondition(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityDrugVehicle constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityDrugVehicle(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityDrugVehicle(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationActivityConsumable constraint of '<em>Medication Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationActivity_validateMedicationActivityConsumable(
			MedicationActivity medicationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationActivity.validateMedicationActivityConsumable(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder(MedicationSupplyOrder medicationSupplyOrder,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationSupplyOrder, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSupply_validateClassCode(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderInstructionInversionInd(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderTemplateId(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderClassCode(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderEffectiveTime(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderMoodCode(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderQuantity(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderRepeatNumber(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderStatusCode(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderId(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderProduct(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderAuthor(medicationSupplyOrder, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationSupplyOrder_validateMedicationSupplyOrderInstructions(medicationSupplyOrder, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationSupplyOrderInstructionInversionInd constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderInstructionInversionInd(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderInstructionInversionInd(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderTemplateId constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderTemplateId(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderClassCode constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderClassCode(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderEffectiveTime constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderEffectiveTime(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderMoodCode constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderMoodCode(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderQuantity constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderQuantity(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderRepeatNumber constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderRepeatNumber(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderRepeatNumber(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderStatusCode constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderStatusCode(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderId constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderId(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderProduct constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderProduct(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderProduct(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderAuthor constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderAuthor(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationSupplyOrderInstructions constraint of '<em>Medication Supply Order</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_validateMedicationSupplyOrderInstructions(
			MedicationSupplyOrder medicationSupplyOrder, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationSupplyOrder.validateMedicationSupplyOrderInstructions(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationSupplyOrder_Product(MedicationSupplyOrder_Product medicationSupplyOrder_Product,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationSupplyOrder_Product, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationSupplyOrder_Product, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateProduct_validateTypeCode(medicationSupplyOrder_Product, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions(Instructions instructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(instructions, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsTextReference(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsTextReferenceValue(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsTemplateId(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsClassCode(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsMoodCode(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsText(instructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructions_validateInstructionsStatusCode(instructions, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInstructionsTextReference constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsTextReference(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsTextReferenceValue constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsTextReferenceValue(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsTemplateId constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsTemplateId(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsClassCode constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsClassCode(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsMoodCode constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsMoodCode(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsText constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsText(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsText(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsStatusCode constraint of '<em>Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructions_validateInstructionsStatusCode(Instructions instructions,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructions.validateInstructionsStatusCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense(MedicationDispense medicationDispense, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationDispense, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSupply_validateClassCode(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseTemplateId(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseClassCode(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseEffectiveTime(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseId(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseMoodCode(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseRepeatNumber(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseStatusCode(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseQuantity(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispensePerformer2(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseMedicationSupplyOrder(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseAssignedEntity(medicationDispense, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispense_validateMedicationDispenseProduct(medicationDispense, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationDispenseTemplateId constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseTemplateId(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseClassCode constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseClassCode(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseEffectiveTime constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseEffectiveTime(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseId constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseId(MedicationDispense medicationDispense,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseMoodCode constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseMoodCode(MedicationDispense medicationDispense,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseRepeatNumber constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseRepeatNumber(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseRepeatNumber(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseStatusCode constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseStatusCode(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseQuantity constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseQuantity(MedicationDispense medicationDispense,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispensePerformer2 constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispensePerformer2(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispensePerformer2(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseMedicationSupplyOrder constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseMedicationSupplyOrder(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseMedicationSupplyOrder(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseAssignedEntity constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseAssignedEntity(
			MedicationDispense medicationDispense, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationDispenseProduct constraint of '<em>Medication Dispense</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_validateMedicationDispenseProduct(MedicationDispense medicationDispense,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationDispense.validateMedicationDispenseProduct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispense_Product(MedicationDispense_Product medicationDispense_Product,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationDispense_Product, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationDispense_Product, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateProduct_validateTypeCode(medicationDispense_Product, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle(DrugVehicle drugVehicle, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(drugVehicle, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehiclePlayingEntityCode(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehiclePlayingEntityName(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehicleTemplateId(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehicleClassCode(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehicleCode(drugVehicle, diagnostics, context);
		if (result || diagnostics != null) result &= validateDrugVehicle_validateDrugVehiclePlayingEntity(drugVehicle, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDrugVehiclePlayingEntityCode constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehiclePlayingEntityCode(DrugVehicle drugVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugVehicle.validateDrugVehiclePlayingEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugVehiclePlayingEntityName constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehiclePlayingEntityName(DrugVehicle drugVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugVehicle.validateDrugVehiclePlayingEntityName(diagnostics, context);
	}

	/**
	 * Validates the validateDrugVehicleTemplateId constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehicleTemplateId(DrugVehicle drugVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugVehicle.validateDrugVehicleTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDrugVehicleClassCode constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehicleClassCode(DrugVehicle drugVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugVehicle.validateDrugVehicleClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugVehicleCode constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehicleCode(DrugVehicle drugVehicle, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return drugVehicle.validateDrugVehicleCode(diagnostics, context);
	}

	/**
	 * Validates the validateDrugVehiclePlayingEntity constraint of '<em>Drug Vehicle</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDrugVehicle_validateDrugVehiclePlayingEntity(DrugVehicle drugVehicle,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return drugVehicle.validateDrugVehiclePlayingEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance(ProductInstance productInstance, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(productInstance, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstanceTemplateId(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstanceClassCode(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstanceId(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstanceScopingEntity(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstancePlayingDevice(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstanceScopingEntityId(productInstance, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_validateProductInstancePlayingDeviceCode(productInstance, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProductInstanceTemplateId constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstanceTemplateId(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstanceTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstanceClassCode constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstanceClassCode(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstanceClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstanceId constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstanceId(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstanceId(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstanceScopingEntity constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstanceScopingEntity(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstanceScopingEntity(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstancePlayingDevice constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstancePlayingDevice(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstancePlayingDevice(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstanceScopingEntityId constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstanceScopingEntityId(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstanceScopingEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateProductInstancePlayingDeviceCode constraint of '<em>Product Instance</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_validateProductInstancePlayingDeviceCode(ProductInstance productInstance,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return productInstance.validateProductInstancePlayingDeviceCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_ScopingEntity(ProductInstance_ScopingEntity productInstance_ScopingEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(productInstance_ScopingEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEntity_validateDeterminerCode(productInstance_ScopingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_ScopingEntity_validateScopingEntityId(productInstance_ScopingEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateScopingEntityId constraint of '<em>Product Instance Scoping Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_ScopingEntity_validateScopingEntityId(
			ProductInstance_ScopingEntity productInstance_ScopingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return productInstance_ScopingEntity.validateScopingEntityId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_PlayingDevice(ProductInstance_PlayingDevice productInstance_PlayingDevice,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(productInstance_PlayingDevice, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDevice_validateDeterminerCode(productInstance_PlayingDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateProductInstance_PlayingDevice_validatePlayingDeviceCode(productInstance_PlayingDevice, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlayingDeviceCode constraint of '<em>Product Instance Playing Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProductInstance_PlayingDevice_validatePlayingDeviceCode(
			ProductInstance_PlayingDevice productInstance_PlayingDevice, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return productInstance_PlayingDevice.validatePlayingDeviceCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation(AllergyStatusObservation allergyStatusObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyStatusObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationTemplateId(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationClassCode(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationMoodCode(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationCode(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationStatusCode(allergyStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyStatusObservation_validateAllergyStatusObservationValue(allergyStatusObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyStatusObservationTemplateId constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationTemplateId(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyStatusObservationClassCode constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationClassCode(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyStatusObservationMoodCode constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationMoodCode(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyStatusObservationCode constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationCode(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyStatusObservationStatusCode constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationStatusCode(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyStatusObservationValue constraint of '<em>Allergy Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyStatusObservation_validateAllergyStatusObservationValue(
			AllergyStatusObservation allergyStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergyStatusObservation.validateAllergyStatusObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation(AgeObservation ageObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(ageObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationTemplateId(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationClassCode(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationMoodCode(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationCode(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationStatusCode(ageObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAgeObservation_validateAgeObservationValue(ageObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAgeObservationTemplateId constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationTemplateId(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAgeObservationClassCode constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationClassCode(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAgeObservationMoodCode constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationMoodCode(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAgeObservationCode constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationCode(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAgeObservationStatusCode constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationStatusCode(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAgeObservationValue constraint of '<em>Age Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAgeObservation_validateAgeObservationValue(AgeObservation ageObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return ageObservation.validateAgeObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation(HealthStatusObservation healthStatusObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(healthStatusObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationHasTextReference(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationHasTextReferenceValue(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationTemplateId(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationClassCode(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationMoodCode(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationCode(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationText(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationStatusCode(healthStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateHealthStatusObservation_validateHealthStatusObservationValue(healthStatusObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHealthStatusObservationHasTextReference constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationHasTextReference(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationHasTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationHasTextReferenceValue constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationHasTextReferenceValue(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationHasTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationTemplateId constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationTemplateId(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationClassCode constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationClassCode(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationMoodCode constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationMoodCode(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationCode constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationCode(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationText constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationText(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationStatusCode constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationStatusCode(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateHealthStatusObservationValue constraint of '<em>Health Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthStatusObservation_validateHealthStatusObservationValue(
			HealthStatusObservation healthStatusObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return healthStatusObservation.validateHealthStatusObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment(Comment comment, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(comment, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentHasTextReference(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentEffectiveTimeWhenAuthorPresent(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentHasAuthorId(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentHasAuthorOrganization(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentTemplateId(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentClassCode(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentMoodCode(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentCode(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentText(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentStatusCode(comment, diagnostics, context);
		if (result || diagnostics != null) result &= validateComment_validateCommentAuthor(comment, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCommentHasTextReference constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentHasTextReference(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentHasTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateCommentEffectiveTimeWhenAuthorPresent constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentEffectiveTimeWhenAuthorPresent(Comment comment,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return comment.validateCommentEffectiveTimeWhenAuthorPresent(diagnostics, context);
	}

	/**
	 * Validates the validateCommentHasAuthorId constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentHasAuthorId(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentHasAuthorId(diagnostics, context);
	}

	/**
	 * Validates the validateCommentHasAuthorOrganization constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentHasAuthorOrganization(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentHasAuthorOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateCommentTemplateId constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentTemplateId(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCommentClassCode constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentClassCode(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateCommentMoodCode constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentMoodCode(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCommentCode constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentCode(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentCode(diagnostics, context);
	}

	/**
	 * Validates the validateCommentText constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentText(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentText(diagnostics, context);
	}

	/**
	 * Validates the validateCommentStatusCode constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentStatusCode(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateCommentAuthor constraint of '<em>Comment</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComment_validateCommentAuthor(Comment comment, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return comment.validateCommentAuthor(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInternalReference(InternalReference internalReference, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(internalReference, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateInternalReference_validateInternalReferenceId(internalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateInternalReference_validateInternalReferenceCode(internalReference, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInternalReferenceId constraint of '<em>Internal Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInternalReference_validateInternalReferenceId(InternalReference internalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return internalReference.validateInternalReferenceId(diagnostics, context);
	}

	/**
	 * Validates the validateInternalReferenceCode constraint of '<em>Internal Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInternalReference_validateInternalReferenceCode(InternalReference internalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return internalReference.validateInternalReferenceCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationType(MedicationType medicationType, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationType, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationType, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationType_validateMedicationTypeCode(medicationType, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationTypeCode constraint of '<em>Medication Type</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationType_validateMedicationTypeCode(MedicationType medicationType,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationType.validateMedicationTypeCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity(NonMedicinalSupplyActivity nonMedicinalSupplyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(nonMedicinalSupplyActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSupply_validateClassCode(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityProductInstanceTypeCode(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityTemplateId(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityClassCode(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityId(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityStatusCode(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityEffectiveTime(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityQuantity(nonMedicinalSupplyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityProductInstance(nonMedicinalSupplyActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityProductInstanceTypeCode constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityProductInstanceTypeCode(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityProductInstanceTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityTemplateId constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityTemplateId(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityClassCode constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityClassCode(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityId constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityId(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityId(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityStatusCode constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityStatusCode(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityEffectiveTime constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityEffectiveTime(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityQuantity constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityQuantity(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateNonMedicinalSupplyActivityProductInstance constraint of '<em>Non Medicinal Supply Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNonMedicinalSupplyActivity_validateNonMedicinalSupplyActivityProductInstance(
			NonMedicinalSupplyActivity nonMedicinalSupplyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return nonMedicinalSupplyActivity.validateNonMedicinalSupplyActivityProductInstance(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationFullfillmentInstructions(
			MedicationFullfillmentInstructions medicationFullfillmentInstructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationFullfillmentInstructions, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsMoodCode(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsCode(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsText(medicationFullfillmentInstructions, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsStatusCode(medicationFullfillmentInstructions, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationFullfillmentInstructionsMoodCode constraint of '<em>Medication Fullfillment Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsMoodCode(
			MedicationFullfillmentInstructions medicationFullfillmentInstructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationFullfillmentInstructions.validateMedicationFullfillmentInstructionsMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationFullfillmentInstructionsCode constraint of '<em>Medication Fullfillment Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsCode(
			MedicationFullfillmentInstructions medicationFullfillmentInstructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationFullfillmentInstructions.validateMedicationFullfillmentInstructionsCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationFullfillmentInstructionsText constraint of '<em>Medication Fullfillment Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsText(
			MedicationFullfillmentInstructions medicationFullfillmentInstructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationFullfillmentInstructions.validateMedicationFullfillmentInstructionsText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationFullfillmentInstructionsStatusCode constraint of '<em>Medication Fullfillment Instructions</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationFullfillmentInstructions_validateMedicationFullfillmentInstructionsStatusCode(
			MedicationFullfillmentInstructions medicationFullfillmentInstructions, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationFullfillmentInstructions.validateMedicationFullfillmentInstructionsStatusCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct(ProblemConcernAct problemConcernAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(problemConcernAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActEffectiveTimeLow(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActEffectiveTimeHigh(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActTemplateId(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActClassCode(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActMoodCode(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActId(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActCode(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActEffectiveTime(problemConcernAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemConcernAct_validateProblemConcernActProblemObservation(problemConcernAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProblemConcernActEffectiveTimeLow constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActEffectiveTimeLow(
			ProblemConcernAct problemConcernAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActEffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActEffectiveTimeHigh constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActEffectiveTimeHigh(
			ProblemConcernAct problemConcernAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActEffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActTemplateId constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActTemplateId(ProblemConcernAct problemConcernAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActClassCode constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActClassCode(ProblemConcernAct problemConcernAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActMoodCode constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActMoodCode(ProblemConcernAct problemConcernAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActId constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActId(ProblemConcernAct problemConcernAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActCode constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActCode(ProblemConcernAct problemConcernAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActEffectiveTime constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActEffectiveTime(
			ProblemConcernAct problemConcernAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProblemConcernActProblemObservation constraint of '<em>Problem Concern Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemConcernAct_validateProblemConcernActProblemObservation(
			ProblemConcernAct problemConcernAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemConcernAct.validateProblemConcernActProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation(ProblemObservation problemObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(problemObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationHasTextReference(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationHasTextReferenceValue(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationAgeObservationInversion(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationTemplateId(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationClassCode(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationMoodCode(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationNegationInd(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationId(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationCode(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationText(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationStatusCode(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationEffectiveTime(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationValue(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationAgeObservation(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationHealthStatusObservation(problemObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemObservation_validateProblemObservationProblemStatus(problemObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProblemObservationHasTextReference constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationHasTextReference(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationHasTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationHasTextReferenceValue constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationHasTextReferenceValue(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationHasTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationAgeObservationInversion constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationAgeObservationInversion(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationAgeObservationInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationTemplateId constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationTemplateId(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationClassCode constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationClassCode(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationMoodCode constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationMoodCode(ProblemObservation problemObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationNegationInd constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationNegationInd(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationId constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationId(ProblemObservation problemObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationCode constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationCode(ProblemObservation problemObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationText constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationText(ProblemObservation problemObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationStatusCode constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationStatusCode(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationEffectiveTime constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationEffectiveTime(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationValue constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationValue(ProblemObservation problemObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationAgeObservation constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationAgeObservation(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationAgeObservation(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationHealthStatusObservation constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationHealthStatusObservation(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationHealthStatusObservation(diagnostics, context);
	}

	/**
	 * Validates the validateProblemObservationProblemStatus constraint of '<em>Problem Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemObservation_validateProblemObservationProblemStatus(
			ProblemObservation problemObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemObservation.validateProblemObservationProblemStatus(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus(ProblemStatus problemStatus, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(problemStatus, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusTextReference(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusTextReferenceValue(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusTemplateId(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusClassCode(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusMoodCode(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusCode(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusText(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusStatusCode(problemStatus, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemStatus_validateProblemStatusValue(problemStatus, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProblemStatusTextReference constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusTextReference(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusTextReferenceValue constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusTextReferenceValue(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusTemplateId constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusTemplateId(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusClassCode constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusClassCode(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusMoodCode constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusMoodCode(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusCode constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusCode(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusText constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusText(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusText(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusStatusCode constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusStatusCode(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemStatusValue constraint of '<em>Problem Status</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemStatus_validateProblemStatusValue(ProblemStatus problemStatus,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemStatus.validateProblemStatusValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument(ContinuityOfCareDocument continuityOfCareDocument,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(continuityOfCareDocument, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateGeneralHeaderConstraintsTemplateId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateGeneralHeaderConstraintsCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentLanguageCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOf(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentAuthor(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentAllergiesSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentMedicationsSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentProblemSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentProceduresSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentResultsSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentAdvanceDirectivesSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentEncountersSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentFamilyHistorySection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentFunctionalStatusSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentImmunizationsSectionEntriesOptional(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentMedicalEquipmentSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentPayersSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentPlanOfCareSection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentSocialHistorySection(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentVitalSignsSectionEntriesOptional(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityHasNationalProviderIdentifier(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityId(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerTypeCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntity(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeLow(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeHigh(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3ClassCode(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTime(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3Performer(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent(continuityOfCareDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_validateContinuityOfCareDocumentAuthorAssignedAuthor3(continuityOfCareDocument, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateContinuityOfCareDocumentLanguageCode constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentLanguageCode(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOf constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOf(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentAuthor constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentAuthor(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentAllergiesSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentAllergiesSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentAllergiesSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentMedicationsSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentMedicationsSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentMedicationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentProblemSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentProblemSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentProblemSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentProceduresSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentProceduresSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentProceduresSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentResultsSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentResultsSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentResultsSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentAdvanceDirectivesSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentAdvanceDirectivesSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentAdvanceDirectivesSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentEncountersSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentEncountersSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentEncountersSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentFamilyHistorySection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentFamilyHistorySection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentFamilyHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentFunctionalStatusSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentFunctionalStatusSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentFunctionalStatusSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentImmunizationsSectionEntriesOptional constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentImmunizationsSectionEntriesOptional(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentImmunizationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentMedicalEquipmentSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentMedicalEquipmentSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentMedicalEquipmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentPayersSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentPayersSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentPayersSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentPlanOfCareSection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentPlanOfCareSection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentPlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentSocialHistorySection constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentSocialHistorySection(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentSocialHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentVitalSignsSectionEntriesOptional constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentVitalSignsSectionEntriesOptional(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentVitalSignsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityHasNationalProviderIdentifier constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityHasNationalProviderIdentifier(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityCode constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityCode(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityId constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityId(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerTypeCode constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerTypeCode(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntity constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntity(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3PerformerAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeLow constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeLow(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeHigh constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeHigh(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3ClassCode constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3ClassCode(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3ClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTime constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTime(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent3Performer constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent3Performer(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent3Performer(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentDocumentationOfServiceEvent constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentDocumentationOfServiceEvent(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentDocumentationOfServiceEvent(diagnostics, context);
	}

	/**
	 * Validates the validateContinuityOfCareDocumentAuthorAssignedAuthor3 constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateContinuityOfCareDocumentAuthorAssignedAuthor3(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateContinuityOfCareDocumentAuthorAssignedAuthor3(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateGeneralHeaderConstraintsTemplateId(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Continuity Of Care Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_validateGeneralHeaderConstraintsCode(
			ContinuityOfCareDocument continuityOfCareDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_DocumentationOf(
			ContinuityOfCareDocument_DocumentationOf continuityOfCareDocument_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(continuityOfCareDocument_DocumentationOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDocumentationOf_validateTypeCode(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_DocumentationOf_validateDocumentationOfServiceEvent(continuityOfCareDocument_DocumentationOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDocumentationOfServiceEvent constraint of '<em>Continuity Of Care Document Documentation Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_DocumentationOf_validateDocumentationOfServiceEvent(
			ContinuityOfCareDocument_DocumentationOf continuityOfCareDocument_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return continuityOfCareDocument_DocumentationOf.validateDocumentationOfServiceEvent(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3(DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(documentationOf_ServiceEvent3, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateServiceEvent_validateMoodCode(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTimeLow(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTimeHigh(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent3_validateServiceEvent3ClassCode(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTime(documentationOf_ServiceEvent3, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent3_validateServiceEvent3Performer(documentationOf_ServiceEvent3, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceEvent3EffectiveTimeLow constraint of '<em>Documentation Of Service Event3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTimeLow(
			DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent3.validateServiceEvent3EffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent3EffectiveTimeHigh constraint of '<em>Documentation Of Service Event3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTimeHigh(
			DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent3.validateServiceEvent3EffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent3ClassCode constraint of '<em>Documentation Of Service Event3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3_validateServiceEvent3ClassCode(
			DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent3.validateServiceEvent3ClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent3EffectiveTime constraint of '<em>Documentation Of Service Event3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3_validateServiceEvent3EffectiveTime(
			DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent3.validateServiceEvent3EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent3Performer constraint of '<em>Documentation Of Service Event3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent3_validateServiceEvent3Performer(
			DocumentationOf_ServiceEvent3 documentationOf_ServiceEvent3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent3.validateServiceEvent3Performer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent3_Performer(ServiceEvent3_Performer serviceEvent3_Performer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(serviceEvent3_Performer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceEvent3_Performer_validatePerformerTypeCode(serviceEvent3_Performer, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceEvent3_Performer_validatePerformerAssignedEntity(serviceEvent3_Performer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePerformerTypeCode constraint of '<em>Service Event3 Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent3_Performer_validatePerformerTypeCode(
			ServiceEvent3_Performer serviceEvent3_Performer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceEvent3_Performer.validatePerformerTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePerformerAssignedEntity constraint of '<em>Service Event3 Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent3_Performer_validatePerformerAssignedEntity(
			ServiceEvent3_Performer serviceEvent3_Performer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return serviceEvent3_Performer.validatePerformerAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePerformer_AssignedEntity(Performer_AssignedEntity performer_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(performer_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePerformer_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePerformer_AssignedEntity_validateAssignedEntityCode(performer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePerformer_AssignedEntity_validateAssignedEntityId(performer_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityHasNationalProviderIdentifier constraint of '<em>Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePerformer_AssignedEntity_validateAssignedEntityHasNationalProviderIdentifier(
			Performer_AssignedEntity performer_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return performer_AssignedEntity.validateAssignedEntityHasNationalProviderIdentifier(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePerformer_AssignedEntity_validateAssignedEntityCode(
			Performer_AssignedEntity performer_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return performer_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePerformer_AssignedEntity_validateAssignedEntityId(
			Performer_AssignedEntity performer_AssignedEntity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return performer_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_Author(
			ContinuityOfCareDocument_Author continuityOfCareDocument_Author, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(continuityOfCareDocument_Author, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateTypeCode(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateContextControlCode(continuityOfCareDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validateContinuityOfCareDocument_Author_validateAuthorAssignedAuthor3(continuityOfCareDocument_Author, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAuthorAssignedAuthor3 constraint of '<em>Continuity Of Care Document Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateContinuityOfCareDocument_Author_validateAuthorAssignedAuthor3(
			ContinuityOfCareDocument_Author continuityOfCareDocument_Author, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return continuityOfCareDocument_Author.validateAuthorAssignedAuthor3(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor3(Author_AssignedAuthor3 author_AssignedAuthor3,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(author_AssignedAuthor3, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateAssignedAuthorChoice(author_AssignedAuthor3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateClassCode(author_AssignedAuthor3, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection(AllergiesSection allergiesSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergiesSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSection_validateAllergiesSectionEntriesOptionalTemplateId(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSection_validateAllergiesSectionEntriesOptionalCode(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalTitle(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalText(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalAllergyProblemAct(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSection_validateAllergiesSectionTitle(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSection_validateAllergiesSectionText(allergiesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSection_validateAllergiesSectionAllergyDrugSensitivity(allergiesSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergiesSectionTitle constraint of '<em>Allergies Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection_validateAllergiesSectionTitle(AllergiesSection allergiesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergiesSection.validateAllergiesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionText constraint of '<em>Allergies Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection_validateAllergiesSectionText(AllergiesSection allergiesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergiesSection.validateAllergiesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionAllergyDrugSensitivity constraint of '<em>Allergies Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection_validateAllergiesSectionAllergyDrugSensitivity(
			AllergiesSection allergiesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergiesSection.validateAllergiesSectionAllergyDrugSensitivity(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalTemplateId constraint of '<em>Allergies Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection_validateAllergiesSectionEntriesOptionalTemplateId(
			AllergiesSection allergiesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergiesSection.validateAllergiesSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalCode constraint of '<em>Allergies Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSection_validateAllergiesSectionEntriesOptionalCode(
			AllergiesSection allergiesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return allergiesSection.validateAllergiesSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergiesSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalTemplateId(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalCode(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalTitle(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalText(allergiesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalAllergyProblemAct(allergiesSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalTemplateId constraint of '<em>Allergies Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalTemplateId(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesSectionEntriesOptional.validateAllergiesSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalCode constraint of '<em>Allergies Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalCode(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesSectionEntriesOptional.validateAllergiesSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalTitle constraint of '<em>Allergies Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalTitle(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesSectionEntriesOptional.validateAllergiesSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalText constraint of '<em>Allergies Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalText(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesSectionEntriesOptional.validateAllergiesSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateAllergiesSectionEntriesOptionalAllergyProblemAct constraint of '<em>Allergies Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergiesSectionEntriesOptional_validateAllergiesSectionEntriesOptionalAllergyProblemAct(
			AllergiesSectionEntriesOptional allergiesSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergiesSectionEntriesOptional.validateAllergiesSectionEntriesOptionalAllergyProblemAct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection(MedicationsSection medicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSection_validateMedicationsSectionEntriesOptionalTemplateId(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSection_validateMedicationsSectionEntriesOptionalCode(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTitle(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalText(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalMedicationActivity(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSection_validateMedicationsSectionTitle(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSection_validateMedicationsSectionText(medicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSection_validateMedicationsSectionMedication(medicationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationsSectionTitle constraint of '<em>Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection_validateMedicationsSectionTitle(MedicationsSection medicationsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationsSection.validateMedicationsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionText constraint of '<em>Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection_validateMedicationsSectionText(MedicationsSection medicationsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationsSection.validateMedicationsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionMedication constraint of '<em>Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection_validateMedicationsSectionMedication(
			MedicationsSection medicationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationsSection.validateMedicationsSectionMedication(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection_validateMedicationsSectionEntriesOptionalTemplateId(
			MedicationsSection medicationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationsSection.validateMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalCode constraint of '<em>Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSection_validateMedicationsSectionEntriesOptionalCode(
			MedicationsSection medicationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationsSection.validateMedicationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTemplateId(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalCode(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTitle(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalText(medicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalMedicationActivity(medicationsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTemplateId(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsSectionEntriesOptional.validateMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalCode constraint of '<em>Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalCode(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsSectionEntriesOptional.validateMedicationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalTitle constraint of '<em>Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalTitle(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsSectionEntriesOptional.validateMedicationsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalText constraint of '<em>Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalText(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsSectionEntriesOptional.validateMedicationsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsSectionEntriesOptionalMedicationActivity constraint of '<em>Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsSectionEntriesOptional_validateMedicationsSectionEntriesOptionalMedicationActivity(
			MedicationsSectionEntriesOptional medicationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsSectionEntriesOptional.validateMedicationsSectionEntriesOptionalMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection(ProblemSection problemSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(problemSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSection_validateProblemSectionEntriesOptionalTemplateId(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSection_validateProblemSectionEntriesOptionalCode(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalTitle(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalText(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalProblemConcern(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSection_validateProblemSectionText(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSection_validateProblemSectionTitle(problemSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSection_validateProblemSectionProblemConcern(problemSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProblemSectionText constraint of '<em>Problem Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection_validateProblemSectionText(ProblemSection problemSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemSection.validateProblemSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionTitle constraint of '<em>Problem Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection_validateProblemSectionTitle(ProblemSection problemSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemSection.validateProblemSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionProblemConcern constraint of '<em>Problem Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection_validateProblemSectionProblemConcern(ProblemSection problemSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemSection.validateProblemSectionProblemConcern(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalTemplateId constraint of '<em>Problem Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection_validateProblemSectionEntriesOptionalTemplateId(
			ProblemSection problemSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemSection.validateProblemSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalCode constraint of '<em>Problem Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSection_validateProblemSectionEntriesOptionalCode(ProblemSection problemSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return problemSection.validateProblemSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional(ProblemSectionEntriesOptional problemSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(problemSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalTemplateId(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalCode(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalTitle(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalText(problemSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalProblemConcern(problemSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalTemplateId constraint of '<em>Problem Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalTemplateId(
			ProblemSectionEntriesOptional problemSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return problemSectionEntriesOptional.validateProblemSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalCode constraint of '<em>Problem Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalCode(
			ProblemSectionEntriesOptional problemSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return problemSectionEntriesOptional.validateProblemSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalTitle constraint of '<em>Problem Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalTitle(
			ProblemSectionEntriesOptional problemSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return problemSectionEntriesOptional.validateProblemSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalText constraint of '<em>Problem Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalText(
			ProblemSectionEntriesOptional problemSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return problemSectionEntriesOptional.validateProblemSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateProblemSectionEntriesOptionalProblemConcern constraint of '<em>Problem Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProblemSectionEntriesOptional_validateProblemSectionEntriesOptionalProblemConcern(
			ProblemSectionEntriesOptional problemSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return problemSectionEntriesOptional.validateProblemSectionEntriesOptionalProblemConcern(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection(ProceduresSection proceduresSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(proceduresSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSection_validateProceduresSectionEntriesOptionalTemplateId(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSection_validateProceduresSectionEntriesOptionalCode(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalText(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityProcedure(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureAcivityObservation(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityAct(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSection_validateProceduresSectionHasProcedureActivity(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSection_validateProceduresSectionTitle(proceduresSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSection_validateProceduresSectionText(proceduresSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProceduresSectionHasProcedureActivity constraint of '<em>Procedures Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection_validateProceduresSectionHasProcedureActivity(
			ProceduresSection proceduresSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return proceduresSection.validateProceduresSectionHasProcedureActivity(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionTitle constraint of '<em>Procedures Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection_validateProceduresSectionTitle(ProceduresSection proceduresSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return proceduresSection.validateProceduresSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionText constraint of '<em>Procedures Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection_validateProceduresSectionText(ProceduresSection proceduresSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return proceduresSection.validateProceduresSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalTemplateId constraint of '<em>Procedures Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection_validateProceduresSectionEntriesOptionalTemplateId(
			ProceduresSection proceduresSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return proceduresSection.validateProceduresSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalCode constraint of '<em>Procedures Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSection_validateProceduresSectionEntriesOptionalCode(
			ProceduresSection proceduresSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return proceduresSection.validateProceduresSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(proceduresSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalTemplateId(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalCode(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalText(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityProcedure(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureAcivityObservation(proceduresSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityAct(proceduresSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalTemplateId constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalTemplateId(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalCode constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalCode(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalText constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalText(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalProcedureActivityProcedure constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityProcedure(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalProcedureActivityProcedure(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalProcedureAcivityObservation constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureAcivityObservation(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalProcedureAcivityObservation(diagnostics, context);
	}

	/**
	 * Validates the validateProceduresSectionEntriesOptionalProcedureActivityAct constraint of '<em>Procedures Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProceduresSectionEntriesOptional_validateProceduresSectionEntriesOptionalProcedureActivityAct(
			ProceduresSectionEntriesOptional proceduresSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return proceduresSectionEntriesOptional.validateProceduresSectionEntriesOptionalProcedureActivityAct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation(ProcedureActivityObservation procedureActivityObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureActivityObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationCodeCodeSystems(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationCodeOriginalText(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationOriginalTextReferenceValue(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationReferenceValue(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationEncounterInversion(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationServiceDeliveryLocationTypeCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationInstructionsInversion(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationTemplateId(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationClassCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationId(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationStatusCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationValue(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationEffectiveTime(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationPriorityCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationMethodCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationTargetSiteCode(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationPerformer(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationServiceDeliveryLocation(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationProcedureEncounter(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationInstructions(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationIndication(procedureActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityObservation_validateProcedureActivityObservationMedicationActivity(procedureActivityObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureActivityObservationCodeCodeSystems constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationCodeCodeSystems(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationCodeCodeSystems(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationCodeOriginalText constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationCodeOriginalText(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationOriginalTextReferenceValue constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationOriginalTextReferenceValue(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationOriginalTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationReferenceValue constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationReferenceValue(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationEncounterInversion constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationEncounterInversion(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationEncounterInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationServiceDeliveryLocationTypeCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationServiceDeliveryLocationTypeCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationServiceDeliveryLocationTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationInstructionsInversion constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationInstructionsInversion(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationInstructionsInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationTemplateId constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationTemplateId(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationClassCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationClassCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationId constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationId(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationStatusCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationStatusCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationValue constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationValue(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationEffectiveTime constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationEffectiveTime(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationPriorityCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationPriorityCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationPriorityCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationMethodCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationMethodCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationTargetSiteCode constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationTargetSiteCode(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationPerformer constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationPerformer(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationPerformer(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationServiceDeliveryLocation constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationServiceDeliveryLocation(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationServiceDeliveryLocation(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationProcedureEncounter constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationProcedureEncounter(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationProcedureEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationInstructions constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationInstructions(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationInstructions(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationIndication constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationIndication(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationIndication(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityObservationMedicationActivity constraint of '<em>Procedure Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityObservation_validateProcedureActivityObservationMedicationActivity(
			ProcedureActivityObservation procedureActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureActivityObservation.validateProcedureActivityObservationMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct(ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureActivityAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActCodeCodeSystems(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActCodeOriginalText(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActOriginalTextReferenceValue(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActReferenceValue(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActEncounterInversion(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActServiceDeliveryLocationTypeCode(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActInstructionsInversion(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActTemplateId(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActClassCode(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActId(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActCode(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActStatusCode(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActEffectiveTime(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActPriorityCode(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActPerformer(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActServiceDeliveryLocation(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActProcedureEncounter(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActInstructions(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActIndication(procedureActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureActivityAct_validateProcedureActivityActMedicationActivity(procedureActivityAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureActivityActCodeCodeSystems constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActCodeCodeSystems(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActCodeCodeSystems(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActCodeOriginalText constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActCodeOriginalText(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActOriginalTextReferenceValue constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActOriginalTextReferenceValue(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActOriginalTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActReferenceValue constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActReferenceValue(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActEncounterInversion constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActEncounterInversion(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActEncounterInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActServiceDeliveryLocationTypeCode constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActServiceDeliveryLocationTypeCode(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActServiceDeliveryLocationTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActInstructionsInversion constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActInstructionsInversion(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActInstructionsInversion(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActTemplateId constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActTemplateId(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActClassCode constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActClassCode(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActId constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActId(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActCode constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActCode(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActStatusCode constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActStatusCode(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActEffectiveTime constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActEffectiveTime(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActPriorityCode constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActPriorityCode(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActPriorityCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActPerformer constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActPerformer(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActPerformer(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActServiceDeliveryLocation constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActServiceDeliveryLocation(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActServiceDeliveryLocation(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActProcedureEncounter constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActProcedureEncounter(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActProcedureEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActInstructions constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActInstructions(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActInstructions(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActIndication constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActIndication(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActIndication(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureActivityActMedicationActivity constraint of '<em>Procedure Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureActivityAct_validateProcedureActivityActMedicationActivity(
			ProcedureActivityAct procedureActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureActivityAct.validateProcedureActivityActMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection(ResultsSection resultsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(resultsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSection_validateResultsSectionEntriesOptionalTemplateId(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSection_validateResultsSectionEntriesOptionalCode(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalTitle(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalText(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalResultOrganizer(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSection_validateResultsSectionTitle(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSection_validateResultsSectionText(resultsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSection_validateResultsSectionResultOrganizer(resultsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResultsSectionTitle constraint of '<em>Results Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection_validateResultsSectionTitle(ResultsSection resultsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultsSection.validateResultsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionText constraint of '<em>Results Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection_validateResultsSectionText(ResultsSection resultsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultsSection.validateResultsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionResultOrganizer constraint of '<em>Results Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection_validateResultsSectionResultOrganizer(ResultsSection resultsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultsSection.validateResultsSectionResultOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalTemplateId constraint of '<em>Results Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection_validateResultsSectionEntriesOptionalTemplateId(
			ResultsSection resultsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultsSection.validateResultsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalCode constraint of '<em>Results Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSection_validateResultsSectionEntriesOptionalCode(ResultsSection resultsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultsSection.validateResultsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional(ResultsSectionEntriesOptional resultsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(resultsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalTemplateId(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalCode(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalTitle(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalText(resultsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalResultOrganizer(resultsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalTemplateId constraint of '<em>Results Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalTemplateId(
			ResultsSectionEntriesOptional resultsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return resultsSectionEntriesOptional.validateResultsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalCode constraint of '<em>Results Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalCode(
			ResultsSectionEntriesOptional resultsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return resultsSectionEntriesOptional.validateResultsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalTitle constraint of '<em>Results Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalTitle(
			ResultsSectionEntriesOptional resultsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return resultsSectionEntriesOptional.validateResultsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalText constraint of '<em>Results Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalText(
			ResultsSectionEntriesOptional resultsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return resultsSectionEntriesOptional.validateResultsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateResultsSectionEntriesOptionalResultOrganizer constraint of '<em>Results Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultsSectionEntriesOptional_validateResultsSectionEntriesOptionalResultOrganizer(
			ResultsSectionEntriesOptional resultsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return resultsSectionEntriesOptional.validateResultsSectionEntriesOptionalResultOrganizer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer(ResultOrganizer resultOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(resultOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerCodeValue(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerClassCodeValue(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerTemplateId(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerId(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerStatusCode(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerCode(resultOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultOrganizer_validateResultOrganizerResultObservation(resultOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResultOrganizerCodeValue constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerCodeValue(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerCodeValue(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerClassCodeValue constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerClassCodeValue(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerClassCodeValue(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerTemplateId constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerTemplateId(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerId constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerId(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerId(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerStatusCode constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerStatusCode(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerCode constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerCode(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultOrganizerResultObservation constraint of '<em>Result Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultOrganizer_validateResultOrganizerResultObservation(ResultOrganizer resultOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultOrganizer.validateResultOrganizerResultObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation(ResultObservation resultObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(resultObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationTextReference(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationTextReferenceValue(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationCodeValue(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationNoObservationRangeCode(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationAuthorMultiplicity(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationTemplateId(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationId(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationCode(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationText(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationStatusCode(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationEffectiveTime(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationValue(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationInterpretationCode(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationMethodCode(resultObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateResultObservation_validateResultObservationTargetSiteCode(resultObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResultObservationTextReference constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationTextReference(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationTextReferenceValue constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationTextReferenceValue(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationCodeValue constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationCodeValue(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationCodeValue(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationNoObservationRangeCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationNoObservationRangeCode(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationNoObservationRangeCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationAuthorMultiplicity constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationAuthorMultiplicity(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationAuthorMultiplicity(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationTemplateId constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationTemplateId(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationId constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationId(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationCode(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationText constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationText(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationStatusCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationStatusCode(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationEffectiveTime constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationEffectiveTime(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationValue constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationValue(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationInterpretationCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationInterpretationCode(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationInterpretationCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationMethodCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationMethodCode(ResultObservation resultObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateResultObservationTargetSiteCode constraint of '<em>Result Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResultObservation_validateResultObservationTargetSiteCode(
			ResultObservation resultObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return resultObservation.validateResultObservationTargetSiteCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection(AdvanceDirectivesSection advanceDirectivesSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectivesSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionEntriesOptionalTemplateId(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionEntriesOptionalCode(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalTitle(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalText(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalAdvanceDirectiveObservation(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTitle(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionText(advanceDirectivesSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionAdvanceDirectiveObservation(advanceDirectivesSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionTitle constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionTitle(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionText constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionText(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionAdvanceDirectiveObservation constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionAdvanceDirectiveObservation(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionAdvanceDirectiveObservation(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalTemplateId constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionEntriesOptionalTemplateId(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalCode constraint of '<em>Advance Directives Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSection_validateAdvanceDirectivesSectionEntriesOptionalCode(
			AdvanceDirectivesSection advanceDirectivesSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSection.validateAdvanceDirectivesSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectivesSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalTemplateId(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalCode(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalTitle(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalText(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalAdvanceDirectiveObservation(advanceDirectivesSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalTemplateId constraint of '<em>Advance Directives Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalTemplateId(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSectionEntriesOptional.validateAdvanceDirectivesSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalCode constraint of '<em>Advance Directives Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalCode(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSectionEntriesOptional.validateAdvanceDirectivesSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalTitle constraint of '<em>Advance Directives Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalTitle(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSectionEntriesOptional.validateAdvanceDirectivesSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalText constraint of '<em>Advance Directives Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalText(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSectionEntriesOptional.validateAdvanceDirectivesSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectivesSectionEntriesOptionalAdvanceDirectiveObservation constraint of '<em>Advance Directives Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectivesSectionEntriesOptional_validateAdvanceDirectivesSectionEntriesOptionalAdvanceDirectiveObservation(
			AdvanceDirectivesSectionEntriesOptional advanceDirectivesSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return advanceDirectivesSectionEntriesOptional.validateAdvanceDirectivesSectionEntriesOptionalAdvanceDirectiveObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation(AdvanceDirectiveObservation advanceDirectiveObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationHasStartingTime(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationHasEndingTime(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationTemplateId(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationClassCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationMoodCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationId(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationStatusCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationEffectiveTime(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifier(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodian(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReference(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierTime(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierTypeCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierParticipantRole(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleCustodianEntityName(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleAddr(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleClassCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleTelecom(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRolePlayingEntity(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianTypeCode(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianAdvanceDirectiveObservationCustodianRole(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocumentId(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocumentText(advanceDirectiveObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocument(advanceDirectiveObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationHasStartingTime constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationHasStartingTime(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationHasStartingTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationHasEndingTime constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationHasEndingTime(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationHasEndingTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationTemplateId constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationTemplateId(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationClassCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationClassCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationMoodCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationMoodCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationId constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationId(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationStatusCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationStatusCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationEffectiveTime constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationEffectiveTime(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationVerifier constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifier(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationVerifier(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodian constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodian(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodian(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationReference constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReference(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationReference(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationVerifierTime constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierTime(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationVerifierTime(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationVerifierTypeCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierTypeCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationVerifierTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationVerifierParticipantRole constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationVerifierParticipantRole(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationVerifierParticipantRole(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianCustodianRoleCustodianEntityName constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleCustodianEntityName(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianCustodianRoleCustodianEntityName(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianCustodianRoleAddr constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleAddr(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianCustodianRoleAddr(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianCustodianRoleClassCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleClassCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianCustodianRoleClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianCustodianRoleTelecom constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRoleTelecom(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianCustodianRoleTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianCustodianRolePlayingEntity constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianCustodianRolePlayingEntity(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianCustodianRolePlayingEntity(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianTypeCode constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianTypeCode(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationCustodianAdvanceDirectiveObservationCustodianRole constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationCustodianAdvanceDirectiveObservationCustodianRole(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationCustodianAdvanceDirectiveObservationCustodianRole(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationReferenceExternalDocumentId constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocumentId(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationReferenceExternalDocumentId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationReferenceExternalDocumentText constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocumentText(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationReferenceExternalDocumentText(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveObservationReferenceExternalDocument constraint of '<em>Advance Directive Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_validateAdvanceDirectiveObservationReferenceExternalDocument(
			AdvanceDirectiveObservation advanceDirectiveObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation.validateAdvanceDirectiveObservationReferenceExternalDocument(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Reference(
			AdvanceDirectiveObservation_Reference advanceDirectiveObservation_Reference, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveObservation_Reference, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateReference_validateExternalActChoice(advanceDirectiveObservation_Reference, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Reference_validateReferenceExternalDocument(advanceDirectiveObservation_Reference, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReferenceExternalDocument constraint of '<em>Advance Directive Observation Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Reference_validateReferenceExternalDocument(
			AdvanceDirectiveObservation_Reference advanceDirectiveObservation_Reference, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Reference.validateReferenceExternalDocument(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReference_ExternalDocument(Reference_ExternalDocument reference_ExternalDocument,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reference_ExternalDocument, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateExternalDocument_validateMoodCode(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateReference_ExternalDocument_validateExternalDocumentId(reference_ExternalDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateReference_ExternalDocument_validateExternalDocumentText(reference_ExternalDocument, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExternalDocumentId constraint of '<em>Reference External Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReference_ExternalDocument_validateExternalDocumentId(
			Reference_ExternalDocument reference_ExternalDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reference_ExternalDocument.validateExternalDocumentId(diagnostics, context);
	}

	/**
	 * Validates the validateExternalDocumentText constraint of '<em>Reference External Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReference_ExternalDocument_validateExternalDocumentText(
			Reference_ExternalDocument reference_ExternalDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return reference_ExternalDocument.validateExternalDocumentText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Custodian(
			AdvanceDirectiveObservation_Custodian advanceDirectiveObservation_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveObservation_Custodian, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant2_validateContextControlCode(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Custodian_validateCustodianTypeCode(advanceDirectiveObservation_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Custodian_validateCustodianAdvanceDirectiveObservationCustodianRole(advanceDirectiveObservation_Custodian, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianTypeCode constraint of '<em>Advance Directive Observation Custodian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Custodian_validateCustodianTypeCode(
			AdvanceDirectiveObservation_Custodian advanceDirectiveObservation_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Custodian.validateCustodianTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianAdvanceDirectiveObservationCustodianRole constraint of '<em>Advance Directive Observation Custodian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Custodian_validateCustodianAdvanceDirectiveObservationCustodianRole(
			AdvanceDirectiveObservation_Custodian advanceDirectiveObservation_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Custodian.validateCustodianAdvanceDirectiveObservationCustodianRole(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_CustodianRole(Custodian_CustodianRole custodian_CustodianRole,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(custodian_CustodianRole, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodian_CustodianRole_validateCustodianRoleAddr(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodian_CustodianRole_validateCustodianRoleClassCode(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodian_CustodianRole_validateCustodianRoleTelecom(custodian_CustodianRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodian_CustodianRole_validateCustodianRolePlayingEntity(custodian_CustodianRole, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianRoleAddr constraint of '<em>Custodian Custodian Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_CustodianRole_validateCustodianRoleAddr(
			Custodian_CustodianRole custodian_CustodianRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return custodian_CustodianRole.validateCustodianRoleAddr(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianRoleClassCode constraint of '<em>Custodian Custodian Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_CustodianRole_validateCustodianRoleClassCode(
			Custodian_CustodianRole custodian_CustodianRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return custodian_CustodianRole.validateCustodianRoleClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianRoleTelecom constraint of '<em>Custodian Custodian Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_CustodianRole_validateCustodianRoleTelecom(
			Custodian_CustodianRole custodian_CustodianRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return custodian_CustodianRole.validateCustodianRoleTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianRolePlayingEntity constraint of '<em>Custodian Custodian Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_CustodianRole_validateCustodianRolePlayingEntity(
			Custodian_CustodianRole custodian_CustodianRole, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return custodian_CustodianRole.validateCustodianRolePlayingEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodianRole_CustodianEntity(CustodianRole_CustodianEntity custodianRole_CustodianEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(custodianRole_CustodianEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePlayingEntity_validateDeterminerCode(custodianRole_CustodianEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCustodianRole_CustodianEntity_validateCustodianEntityName(custodianRole_CustodianEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianEntityName constraint of '<em>Custodian Role Custodian Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodianRole_CustodianEntity_validateCustodianEntityName(
			CustodianRole_CustodianEntity custodianRole_CustodianEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return custodianRole_CustodianEntity.validateCustodianEntityName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Verifier(
			AdvanceDirectiveObservation_Verifier advanceDirectiveObservation_Verifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveObservation_Verifier, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant2_validateContextControlCode(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Verifier_validateVerifierTime(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Verifier_validateVerifierTypeCode(advanceDirectiveObservation_Verifier, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveObservation_Verifier_validateVerifierParticipantRole(advanceDirectiveObservation_Verifier, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVerifierTime constraint of '<em>Advance Directive Observation Verifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Verifier_validateVerifierTime(
			AdvanceDirectiveObservation_Verifier advanceDirectiveObservation_Verifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Verifier.validateVerifierTime(diagnostics, context);
	}

	/**
	 * Validates the validateVerifierTypeCode constraint of '<em>Advance Directive Observation Verifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Verifier_validateVerifierTypeCode(
			AdvanceDirectiveObservation_Verifier advanceDirectiveObservation_Verifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Verifier.validateVerifierTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateVerifierParticipantRole constraint of '<em>Advance Directive Observation Verifier</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveObservation_Verifier_validateVerifierParticipantRole(
			AdvanceDirectiveObservation_Verifier advanceDirectiveObservation_Verifier, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveObservation_Verifier.validateVerifierParticipantRole(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection(EncountersSection encountersSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encountersSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSection_validateEncountersSectionEntriesOptionalTemplateId(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSection_validateEncountersSectionEntriesOptionalCode(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalTitle(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalText(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalEncounterActivities(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSection_validateEncountersSectionText(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSection_validateEncountersSectionTitle(encountersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSection_validateEncountersSectionEncounterActivities(encountersSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncountersSectionText constraint of '<em>Encounters Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection_validateEncountersSectionText(EncountersSection encountersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encountersSection.validateEncountersSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionTitle constraint of '<em>Encounters Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection_validateEncountersSectionTitle(EncountersSection encountersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encountersSection.validateEncountersSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEncounterActivities constraint of '<em>Encounters Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection_validateEncountersSectionEncounterActivities(
			EncountersSection encountersSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encountersSection.validateEncountersSectionEncounterActivities(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalTemplateId constraint of '<em>Encounters Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection_validateEncountersSectionEntriesOptionalTemplateId(
			EncountersSection encountersSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encountersSection.validateEncountersSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalCode constraint of '<em>Encounters Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSection_validateEncountersSectionEntriesOptionalCode(
			EncountersSection encountersSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encountersSection.validateEncountersSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encountersSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalTemplateId(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalCode(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalTitle(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalText(encountersSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalEncounterActivities(encountersSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalTemplateId constraint of '<em>Encounters Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalTemplateId(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encountersSectionEntriesOptional.validateEncountersSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalCode constraint of '<em>Encounters Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalCode(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encountersSectionEntriesOptional.validateEncountersSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalTitle constraint of '<em>Encounters Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalTitle(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encountersSectionEntriesOptional.validateEncountersSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalText constraint of '<em>Encounters Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalText(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encountersSectionEntriesOptional.validateEncountersSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateEncountersSectionEntriesOptionalEncounterActivities constraint of '<em>Encounters Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncountersSectionEntriesOptional_validateEncountersSectionEntriesOptionalEncounterActivities(
			EncountersSectionEntriesOptional encountersSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encountersSectionEntriesOptional.validateEncountersSectionEntriesOptionalEncounterActivities(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities(EncounterActivities encounterActivities, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encounterActivities, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesCodeOriginalText(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesCodeOriginalTextReference(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesCodeOriginalTextReferenceValue(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesServiceDeliveryTypeCode(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesTemplateId(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesClassCode(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesMoodCode(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesId(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesCode(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesEffectiveTime(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesServiceDeliveryLocation(encounterActivities, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterActivities_validateEncounterActivitiesIndication(encounterActivities, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterActivitiesCodeOriginalText constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesCodeOriginalText(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesCodeOriginalTextReference constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesCodeOriginalTextReference(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesCodeOriginalTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesCodeOriginalTextReferenceValue constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesCodeOriginalTextReferenceValue(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesCodeOriginalTextReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesServiceDeliveryTypeCode constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesServiceDeliveryTypeCode(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesServiceDeliveryTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesTemplateId constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesTemplateId(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesClassCode constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesClassCode(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesMoodCode constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesMoodCode(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesId constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesId(EncounterActivities encounterActivities,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesId(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesCode constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesCode(EncounterActivities encounterActivities,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesCode(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesEffectiveTime constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesEffectiveTime(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesServiceDeliveryLocation constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesServiceDeliveryLocation(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesServiceDeliveryLocation(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterActivitiesIndication constraint of '<em>Encounter Activities</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterActivities_validateEncounterActivitiesIndication(
			EncounterActivities encounterActivities, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounterActivities.validateEncounterActivitiesIndication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection(FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(familyHistorySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySection_validateFamilyHistorySectionTemplateId(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySection_validateFamilyHistorySectionCode(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySection_validateFamilyHistorySectionTitle(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySection_validateFamilyHistorySectionText(familyHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySection_validateFamilyHistorySectionFamilyHistory(familyHistorySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFamilyHistorySectionTemplateId constraint of '<em>Family History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection_validateFamilyHistorySectionTemplateId(
			FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySection.validateFamilyHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySectionCode constraint of '<em>Family History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection_validateFamilyHistorySectionCode(
			FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySection.validateFamilyHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySectionTitle constraint of '<em>Family History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection_validateFamilyHistorySectionTitle(
			FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySection.validateFamilyHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySectionText constraint of '<em>Family History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection_validateFamilyHistorySectionText(
			FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySection.validateFamilyHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySectionFamilyHistory constraint of '<em>Family History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySection_validateFamilyHistorySectionFamilyHistory(
			FamilyHistorySection familyHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySection.validateFamilyHistorySectionFamilyHistory(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer(FamilyHistoryOrganizer familyHistoryOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(familyHistoryOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerTemplateId(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerClassCode(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerMoodCode(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerStatusCode(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerFamilyHistoryObservation(familyHistoryOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerSubject(familyHistoryOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerTemplateId constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerTemplateId(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerClassCode constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerClassCode(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerMoodCode constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerMoodCode(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerStatusCode constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerStatusCode(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerFamilyHistoryObservation constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerFamilyHistoryObservation(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerFamilyHistoryObservation(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryOrganizerSubject constraint of '<em>Family History Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryOrganizer_validateFamilyHistoryOrganizerSubject(
			FamilyHistoryOrganizer familyHistoryOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryOrganizer.validateFamilyHistoryOrganizerSubject(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation(FamilyHistoryObservation familyHistoryObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(familyHistoryObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationAgeObservationInversion(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationTemplateId(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationClassCode(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationMoodCode(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationId(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationCode(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationStatusCode(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationEffectiveTime(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationValue(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationAgeObservation(familyHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryObservation_validateFamilyHistoryObservationFamilyHistoryDeathObservation(familyHistoryObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFamilyHistoryObservationAgeObservationInversion constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationAgeObservationInversion(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationAgeObservationInversion(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationTemplateId constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationTemplateId(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationClassCode constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationClassCode(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationMoodCode constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationMoodCode(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationId constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationId(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationCode constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationCode(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationStatusCode constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationStatusCode(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationEffectiveTime constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationEffectiveTime(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationValue constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationValue(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationAgeObservation constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationAgeObservation(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationAgeObservation(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryObservationFamilyHistoryDeathObservation constraint of '<em>Family History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryObservation_validateFamilyHistoryObservationFamilyHistoryDeathObservation(
			FamilyHistoryObservation familyHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistoryObservation.validateFamilyHistoryObservationFamilyHistoryDeathObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation(FamilyHistoryDeathObservation familyHistoryDeathObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(familyHistoryDeathObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationTemplateId(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationClassCode(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationMoodCode(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationCode(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationStatusCode(familyHistoryDeathObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationValue(familyHistoryDeathObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationTemplateId constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationTemplateId(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationClassCode constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationClassCode(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationMoodCode constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationMoodCode(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationCode constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationCode(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationStatusCode constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationStatusCode(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistoryDeathObservationValue constraint of '<em>Family History Death Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistoryDeathObservation_validateFamilyHistoryDeathObservationValue(
			FamilyHistoryDeathObservation familyHistoryDeathObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return familyHistoryDeathObservation.validateFamilyHistoryDeathObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection(FunctionalStatusSection functionalStatusSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(functionalStatusSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionTemplateId(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionCode(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionTitle(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionText(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionProblemObservation(functionalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFunctionalStatusSection_validateFunctionalStatusSectionResultObservation(functionalStatusSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFunctionalStatusSectionTemplateId constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionTemplateId(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateFunctionalStatusSectionCode constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionCode(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateFunctionalStatusSectionTitle constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionTitle(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateFunctionalStatusSectionText constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionText(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateFunctionalStatusSectionProblemObservation constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionProblemObservation(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionProblemObservation(diagnostics, context);
	}

	/**
	 * Validates the validateFunctionalStatusSectionResultObservation constraint of '<em>Functional Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFunctionalStatusSection_validateFunctionalStatusSectionResultObservation(
			FunctionalStatusSection functionalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return functionalStatusSection.validateFunctionalStatusSectionResultObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalTemplateId(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalCode(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalTitle(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalText(immunizationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalImmunizationActivity(immunizationsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalTemplateId constraint of '<em>Immunizations Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalTemplateId(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationsSectionEntriesOptional.validateImmunizationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalCode constraint of '<em>Immunizations Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalCode(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationsSectionEntriesOptional.validateImmunizationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalTitle constraint of '<em>Immunizations Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalTitle(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationsSectionEntriesOptional.validateImmunizationsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalText constraint of '<em>Immunizations Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalText(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationsSectionEntriesOptional.validateImmunizationsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalImmunizationActivity constraint of '<em>Immunizations Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalImmunizationActivity(
			ImmunizationsSectionEntriesOptional immunizationsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationsSectionEntriesOptional.validateImmunizationsSectionEntriesOptionalImmunizationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity(ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubstanceAdministration_validateClassCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityTextReference(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityDoseQuantityUnit(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityInstructionInversion(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityDrugVehicleTypeCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityPreconditionTypeCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityTemplateId(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityClassCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityId(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityStatusCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityEffectiveTime(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityRouteCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityApproachSiteCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityDoseQuantity(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityNegationInd(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityText(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityRepeatNumber(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityAdministrationUnitCode(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityDrugVehicle(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityIndication(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityInstructions(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityMedicationDispense(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityReactionObservation(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityPrecondition(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityImmunizationRefusalReason(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityConsumable(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityPerformer(immunizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationActivity_validateImmunizationActivityMedicationSupplyOrder(immunizationActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationActivityTextReference constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityTextReference(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityDoseQuantityUnit constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityDoseQuantityUnit(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityDoseQuantityUnit(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityInstructionInversion constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityInstructionInversion(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityInstructionInversion(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityDrugVehicleTypeCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityDrugVehicleTypeCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityDrugVehicleTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityPreconditionTypeCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityPreconditionTypeCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityPreconditionTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityTemplateId constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityTemplateId(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityClassCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityClassCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityId constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityId(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityStatusCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityStatusCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityEffectiveTime constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityEffectiveTime(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityRouteCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityRouteCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityRouteCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityApproachSiteCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityApproachSiteCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityApproachSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityDoseQuantity constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityDoseQuantity(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityDoseQuantity(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityNegationInd constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityNegationInd(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityNegationInd(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityText constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityText(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityText(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityRepeatNumber constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityRepeatNumber(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityRepeatNumber(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityAdministrationUnitCode constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityAdministrationUnitCode(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityAdministrationUnitCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityDrugVehicle constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityDrugVehicle(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityDrugVehicle(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityIndication constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityIndication(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityIndication(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityInstructions constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityInstructions(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityInstructions(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityMedicationDispense constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityMedicationDispense(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityMedicationDispense(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityReactionObservation constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityReactionObservation(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityReactionObservation(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityPrecondition constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityPrecondition(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityPrecondition(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityImmunizationRefusalReason constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityImmunizationRefusalReason(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityImmunizationRefusalReason(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityConsumable constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityConsumable(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityConsumable(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityPerformer constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityPerformer(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityPerformer(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationActivityMedicationSupplyOrder constraint of '<em>Immunization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationActivity_validateImmunizationActivityMedicationSupplyOrder(
			ImmunizationActivity immunizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationActivity.validateImmunizationActivityMedicationSupplyOrder(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason(ImmunizationRefusalReason immunizationRefusalReason,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationRefusalReason, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonTemplateId(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonClassCode(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonCode(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonId(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonMoodCode(immunizationRefusalReason, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationRefusalReason_validateImmunizationRefusalReasonStatusCode(immunizationRefusalReason, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationRefusalReasonTemplateId constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonTemplateId(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationRefusalReasonClassCode constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonClassCode(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationRefusalReasonCode constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonCode(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationRefusalReasonId constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonId(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationRefusalReasonMoodCode constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonMoodCode(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationRefusalReasonStatusCode constraint of '<em>Immunization Refusal Reason</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationRefusalReason_validateImmunizationRefusalReasonStatusCode(
			ImmunizationRefusalReason immunizationRefusalReason, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationRefusalReason.validateImmunizationRefusalReasonStatusCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection(MedicalEquipmentSection medicalEquipmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicalEquipmentSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalEquipmentSection_validateMedicalEquipmentSectionTemplateId(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalEquipmentSection_validateMedicalEquipmentSectionCode(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalEquipmentSection_validateMedicalEquipmentSectionTitle(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalEquipmentSection_validateMedicalEquipmentSectionText(medicalEquipmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalEquipmentSection_validateMedicalEquipmentSectionNonMedicinalSupplyActivity(medicalEquipmentSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicalEquipmentSectionTemplateId constraint of '<em>Medical Equipment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection_validateMedicalEquipmentSectionTemplateId(
			MedicalEquipmentSection medicalEquipmentSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalEquipmentSection.validateMedicalEquipmentSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalEquipmentSectionCode constraint of '<em>Medical Equipment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection_validateMedicalEquipmentSectionCode(
			MedicalEquipmentSection medicalEquipmentSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalEquipmentSection.validateMedicalEquipmentSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalEquipmentSectionTitle constraint of '<em>Medical Equipment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection_validateMedicalEquipmentSectionTitle(
			MedicalEquipmentSection medicalEquipmentSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalEquipmentSection.validateMedicalEquipmentSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalEquipmentSectionText constraint of '<em>Medical Equipment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection_validateMedicalEquipmentSectionText(
			MedicalEquipmentSection medicalEquipmentSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalEquipmentSection.validateMedicalEquipmentSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalEquipmentSectionNonMedicinalSupplyActivity constraint of '<em>Medical Equipment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalEquipmentSection_validateMedicalEquipmentSectionNonMedicinalSupplyActivity(
			MedicalEquipmentSection medicalEquipmentSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalEquipmentSection.validateMedicalEquipmentSectionNonMedicinalSupplyActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection(PayersSection payersSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(payersSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayersSection_validatePayersSectionTemplateId(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayersSection_validatePayersSectionCode(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayersSection_validatePayersSectionTitle(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayersSection_validatePayersSectionText(payersSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayersSection_validatePayersSectionCoverageActivity(payersSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePayersSectionTemplateId constraint of '<em>Payers Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection_validatePayersSectionTemplateId(PayersSection payersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payersSection.validatePayersSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePayersSectionCode constraint of '<em>Payers Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection_validatePayersSectionCode(PayersSection payersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payersSection.validatePayersSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePayersSectionTitle constraint of '<em>Payers Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection_validatePayersSectionTitle(PayersSection payersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payersSection.validatePayersSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePayersSectionText constraint of '<em>Payers Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection_validatePayersSectionText(PayersSection payersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payersSection.validatePayersSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePayersSectionCoverageActivity constraint of '<em>Payers Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayersSection_validatePayersSectionCoverageActivity(PayersSection payersSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payersSection.validatePayersSectionCoverageActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity(CoverageActivity coverageActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(coverageActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityTemplateId(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityClassCode(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityCode(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityId(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityMoodCode(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityStatusCode(coverageActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoverageActivity_validateCoverageActivityPolicyActivity(coverageActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCoverageActivityTemplateId constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityTemplateId(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityClassCode constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityClassCode(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityCode constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityCode(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityCode(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityId constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityId(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityId(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityMoodCode constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityMoodCode(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityStatusCode constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityStatusCode(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateCoverageActivityPolicyActivity constraint of '<em>Coverage Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoverageActivity_validateCoverageActivityPolicyActivity(CoverageActivity coverageActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coverageActivity.validateCoverageActivityPolicyActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity(PolicyActivity policyActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(policyActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityTemplateId(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityClassCode(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityCode(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityId(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityMoodCode(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityAuthorizationActivity(policyActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicyActivity_validatePolicyActivityPerformer(policyActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePolicyActivityTemplateId constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityTemplateId(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityClassCode constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityClassCode(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityCode constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityCode(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityCode(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityId constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityId(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityId(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityMoodCode constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityMoodCode(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityAuthorizationActivity constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityAuthorizationActivity(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityAuthorizationActivity(diagnostics, context);
	}

	/**
	 * Validates the validatePolicyActivityPerformer constraint of '<em>Policy Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicyActivity_validatePolicyActivityPerformer(PolicyActivity policyActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policyActivity.validatePolicyActivityPerformer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthorizationActivity(AuthorizationActivity authorizationActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(authorizationActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(authorizationActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthorizationActivity_validateAuthorizationActivityTemplateId(authorizationActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAuthorizationActivityTemplateId constraint of '<em>Authorization Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthorizationActivity_validateAuthorizationActivityTemplateId(
			AuthorizationActivity authorizationActivity, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return authorizationActivity.validateAuthorizationActivityTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection(PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionTemplateId(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionCode(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionText(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityAct(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityEncounter(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityObservation(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityProcedure(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivitySubstanceAdministration(planOfCareSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivitySupply(planOfCareSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareSectionTemplateId constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionTemplateId(PlanOfCareSection planOfCareSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionCode constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionCode(PlanOfCareSection planOfCareSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionText constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionText(PlanOfCareSection planOfCareSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivityAct constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityAct(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivityAct(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivityEncounter constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityEncounter(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivityEncounter(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivityObservation constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityObservation(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivityObservation(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivityProcedure constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivityProcedure(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivityProcedure(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivitySubstanceAdministration constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivitySubstanceAdministration(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivitySubstanceAdministration(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareSectionPlanOfCareActivitySupply constraint of '<em>Plan Of Care Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareSection_validatePlanOfCareSectionPlanOfCareActivitySupply(
			PlanOfCareSection planOfCareSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareSection.validatePlanOfCareSectionPlanOfCareActivitySupply(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityAct(PlanOfCareActivityAct planOfCareActivityAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivityAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityAct_validatePlanOfCareActivityActTemplateId(planOfCareActivityAct, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityAct_validatePlanOfCareActivityActId(planOfCareActivityAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivityActTemplateId constraint of '<em>Plan Of Care Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityAct_validatePlanOfCareActivityActTemplateId(
			PlanOfCareActivityAct planOfCareActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivityAct.validatePlanOfCareActivityActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivityActId constraint of '<em>Plan Of Care Activity Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityAct_validatePlanOfCareActivityActId(
			PlanOfCareActivityAct planOfCareActivityAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivityAct.validatePlanOfCareActivityActId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityEncounter(PlanOfCareActivityEncounter planOfCareActivityEncounter,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivityEncounter, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityEncounter_validatePlanOfCareActivityEncounterTemplateId(planOfCareActivityEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityEncounter_validatePlanOfCareActivityEncounterId(planOfCareActivityEncounter, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivityEncounterTemplateId constraint of '<em>Plan Of Care Activity Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityEncounter_validatePlanOfCareActivityEncounterTemplateId(
			PlanOfCareActivityEncounter planOfCareActivityEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityEncounter.validatePlanOfCareActivityEncounterTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivityEncounterId constraint of '<em>Plan Of Care Activity Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityEncounter_validatePlanOfCareActivityEncounterId(
			PlanOfCareActivityEncounter planOfCareActivityEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityEncounter.validatePlanOfCareActivityEncounterId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityObservation(PlanOfCareActivityObservation planOfCareActivityObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivityObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityObservation_validatePlanOfCareActivityObservationTemplateId(planOfCareActivityObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityObservation_validatePlanOfCareActivityObservationId(planOfCareActivityObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivityObservationTemplateId constraint of '<em>Plan Of Care Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityObservation_validatePlanOfCareActivityObservationTemplateId(
			PlanOfCareActivityObservation planOfCareActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityObservation.validatePlanOfCareActivityObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivityObservationId constraint of '<em>Plan Of Care Activity Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityObservation_validatePlanOfCareActivityObservationId(
			PlanOfCareActivityObservation planOfCareActivityObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityObservation.validatePlanOfCareActivityObservationId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityProcedure(PlanOfCareActivityProcedure planOfCareActivityProcedure,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivityProcedure, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityProcedure_validatePlanOfCareActivityProcedureTemplateId(planOfCareActivityProcedure, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivityProcedure_validatePlanOfCareActivityProcedureId(planOfCareActivityProcedure, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivityProcedureTemplateId constraint of '<em>Plan Of Care Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityProcedure_validatePlanOfCareActivityProcedureTemplateId(
			PlanOfCareActivityProcedure planOfCareActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityProcedure.validatePlanOfCareActivityProcedureTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivityProcedureId constraint of '<em>Plan Of Care Activity Procedure</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivityProcedure_validatePlanOfCareActivityProcedureId(
			PlanOfCareActivityProcedure planOfCareActivityProcedure, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return planOfCareActivityProcedure.validatePlanOfCareActivityProcedureId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySubstanceAdministration(
			PlanOfCareActivitySubstanceAdministration planOfCareActivitySubstanceAdministration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivitySubstanceAdministration, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubstanceAdministration_validateClassCode(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivitySubstanceAdministration_validatePlanOfCareActivitySubstanceAdministrationTemplateId(planOfCareActivitySubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivitySubstanceAdministration_validatePlanOfCareActivitySubstanceAdministrationId(planOfCareActivitySubstanceAdministration, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivitySubstanceAdministrationTemplateId constraint of '<em>Plan Of Care Activity Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySubstanceAdministration_validatePlanOfCareActivitySubstanceAdministrationTemplateId(
			PlanOfCareActivitySubstanceAdministration planOfCareActivitySubstanceAdministration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivitySubstanceAdministration.validatePlanOfCareActivitySubstanceAdministrationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivitySubstanceAdministrationId constraint of '<em>Plan Of Care Activity Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySubstanceAdministration_validatePlanOfCareActivitySubstanceAdministrationId(
			PlanOfCareActivitySubstanceAdministration planOfCareActivitySubstanceAdministration,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivitySubstanceAdministration.validatePlanOfCareActivitySubstanceAdministrationId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySupply(PlanOfCareActivitySupply planOfCareActivitySupply,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(planOfCareActivitySupply, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSupply_validateClassCode(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivitySupply_validatePlanOfCareActivitySupplyTemplateId(planOfCareActivitySupply, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlanOfCareActivitySupply_validatePlanOfCareActivitySupplyId(planOfCareActivitySupply, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlanOfCareActivitySupplyTemplateId constraint of '<em>Plan Of Care Activity Supply</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySupply_validatePlanOfCareActivitySupplyTemplateId(
			PlanOfCareActivitySupply planOfCareActivitySupply, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivitySupply.validatePlanOfCareActivitySupplyTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlanOfCareActivitySupplyId constraint of '<em>Plan Of Care Activity Supply</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlanOfCareActivitySupply_validatePlanOfCareActivitySupplyId(
			PlanOfCareActivitySupply planOfCareActivitySupply, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return planOfCareActivitySupply.validatePlanOfCareActivitySupplyId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection(SocialHistorySection socialHistorySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(socialHistorySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionTemplateId(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionCode(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionTitle(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionText(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionSocialHistoryObservation(socialHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistorySection_validateSocialHistorySectionPregnancyObservation(socialHistorySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSocialHistorySectionTemplateId constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionTemplateId(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionCode constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionCode(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionTitle constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionTitle(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionText constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionText(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionSocialHistoryObservation constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionSocialHistoryObservation(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionSocialHistoryObservation(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistorySectionPregnancyObservation constraint of '<em>Social History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistorySection_validateSocialHistorySectionPregnancyObservation(
			SocialHistorySection socialHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistorySection.validateSocialHistorySectionPregnancyObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation(SocialHistoryObservation socialHistoryObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(socialHistoryObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationOriginalText(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationReference(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationReferenceValue(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationTemplateId(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationClassCode(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationMoodCode(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationId(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationCode(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationStatusCode(socialHistoryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryObservation_validateSocialHistoryObservationValue(socialHistoryObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSocialHistoryObservationOriginalText constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationOriginalText(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationReference constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationReference(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationReference(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationReferenceValue constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationReferenceValue(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationReferenceValue(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationTemplateId constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationTemplateId(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationClassCode constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationClassCode(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationMoodCode constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationMoodCode(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationId constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationId(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationCode constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationCode(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationStatusCode constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationStatusCode(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryObservationValue constraint of '<em>Social History Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryObservation_validateSocialHistoryObservationValue(
			SocialHistoryObservation socialHistoryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return socialHistoryObservation.validateSocialHistoryObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation(PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(pregnancyObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationTemplateId(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationClassCode(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationMoodCode(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationCode(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationStatusCode(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationValue(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationEffectiveTime(pregnancyObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePregnancyObservation_validatePregnancyObservationEstimatedDateOfDelivery(pregnancyObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePregnancyObservationTemplateId constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationTemplateId(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationClassCode constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationClassCode(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationMoodCode constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationMoodCode(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationCode constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationCode(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationStatusCode constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationStatusCode(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationValue constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationValue(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationEffectiveTime constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationEffectiveTime(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validatePregnancyObservationEstimatedDateOfDelivery constraint of '<em>Pregnancy Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePregnancyObservation_validatePregnancyObservationEstimatedDateOfDelivery(
			PregnancyObservation pregnancyObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return pregnancyObservation.validatePregnancyObservationEstimatedDateOfDelivery(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery(EstimatedDateOfDelivery estimatedDateOfDelivery,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(estimatedDateOfDelivery, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryTemplateId(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryClassCode(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryCode(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryMoodCode(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryStatusCode(estimatedDateOfDelivery, diagnostics, context);
		if (result || diagnostics != null) result &= validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryValue(estimatedDateOfDelivery, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryTemplateId constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryTemplateId(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryClassCode constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryClassCode(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryCode constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryCode(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryCode(diagnostics, context);
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryMoodCode constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryMoodCode(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryStatusCode constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryStatusCode(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateEstimatedDateOfDeliveryValue constraint of '<em>Estimated Date Of Delivery</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEstimatedDateOfDelivery_validateEstimatedDateOfDeliveryValue(
			EstimatedDateOfDelivery estimatedDateOfDelivery, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return estimatedDateOfDelivery.validateEstimatedDateOfDeliveryValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTemplateId(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalCode(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalText(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTitle(vitalSignsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer(vitalSignsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalTemplateId constraint of '<em>Vital Signs Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTemplateId(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vitalSignsSectionEntriesOptional.validateVitalSignsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalCode constraint of '<em>Vital Signs Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalCode(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vitalSignsSectionEntriesOptional.validateVitalSignsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalText constraint of '<em>Vital Signs Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalText(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vitalSignsSectionEntriesOptional.validateVitalSignsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalTitle constraint of '<em>Vital Signs Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTitle(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vitalSignsSectionEntriesOptional.validateVitalSignsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer constraint of '<em>Vital Signs Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer(
			VitalSignsSectionEntriesOptional vitalSignsSectionEntriesOptional, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vitalSignsSectionEntriesOptional.validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer(VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsOrganizer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerClassCode(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerMoodCode(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerId(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerCode(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerStatusCode(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerEffectiveTime(vitalSignsOrganizer, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsOrganizer_validateVitalSignsOrganizerVitalSignObservation(vitalSignsOrganizer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVitalSignsOrganizerTemplateId constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerTemplateId(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerClassCode constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerClassCode(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerMoodCode constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerMoodCode(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerId constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerId(VitalSignsOrganizer vitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerCode constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerCode(VitalSignsOrganizer vitalSignsOrganizer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerStatusCode constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerStatusCode(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerEffectiveTime constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerEffectiveTime(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsOrganizerVitalSignObservation constraint of '<em>Vital Signs Organizer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsOrganizer_validateVitalSignsOrganizerVitalSignObservation(
			VitalSignsOrganizer vitalSignsOrganizer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsOrganizer.validateVitalSignsOrganizerVitalSignObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation(VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationTemplateId(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationClassCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationMoodCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationId(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationStatusCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationEffectiveTime(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationValue(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationInterpretationCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationMethodCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationText(vitalSignObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignObservation_validateVitalSignObservationAuthor(vitalSignObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVitalSignObservationTemplateId constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationTemplateId(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationClassCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationClassCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationMoodCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationMoodCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationId constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationId(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationStatusCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationStatusCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationEffectiveTime constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationEffectiveTime(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationValue constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationValue(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationValue(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationInterpretationCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationInterpretationCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationInterpretationCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationMethodCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationMethodCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationMethodCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationTargetSiteCode constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationTargetSiteCode(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationTargetSiteCode(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationText constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationText(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignObservationAuthor constraint of '<em>Vital Sign Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignObservation_validateVitalSignObservationAuthor(
			VitalSignObservation vitalSignObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignObservation.validateVitalSignObservationAuthor(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(socialHistoryStatusObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationNoAdditionalParticipants(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationNoAdditionalRelationships(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationTemplateId(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationClassCode(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationMoodCode(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationCode(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationStatusCode(socialHistoryStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationValue(socialHistoryStatusObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationNoAdditionalParticipants constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationNoAdditionalParticipants(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationNoAdditionalParticipants(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationNoAdditionalRelationships constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationNoAdditionalRelationships(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationNoAdditionalRelationships(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationTemplateId constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationTemplateId(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationClassCode constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationClassCode(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationMoodCode constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationMoodCode(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationCode constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationCode(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationStatusCode constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationStatusCode(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateSocialHistoryStatusObservationValue constraint of '<em>Social History Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSocialHistoryStatusObservation_validateSocialHistoryStatusObservationValue(
			SocialHistoryStatusObservation socialHistoryStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return socialHistoryStatusObservation.validateSocialHistoryStatusObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection(PurposeSection purposeSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(purposeSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeSection_validatePurposeSectionTemplateId(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeSection_validatePurposeSectionCode(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeSection_validatePurposeSectionTitle(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeSection_validatePurposeSectionText(purposeSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeSection_validatePurposeSectionPurposeActivity(purposeSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePurposeSectionTemplateId constraint of '<em>Purpose Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection_validatePurposeSectionTemplateId(PurposeSection purposeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeSection.validatePurposeSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeSectionCode constraint of '<em>Purpose Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection_validatePurposeSectionCode(PurposeSection purposeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeSection.validatePurposeSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeSectionTitle constraint of '<em>Purpose Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection_validatePurposeSectionTitle(PurposeSection purposeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeSection.validatePurposeSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeSectionText constraint of '<em>Purpose Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection_validatePurposeSectionText(PurposeSection purposeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeSection.validatePurposeSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeSectionPurposeActivity constraint of '<em>Purpose Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeSection_validatePurposeSectionPurposeActivity(PurposeSection purposeSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeSection.validatePurposeSectionPurposeActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity(PurposeActivity purposeActivity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(purposeActivity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityHasReason(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityReasonType(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityTemplateId(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityClassCode(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityMoodCode(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityCode(purposeActivity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeActivity_validatePurposeActivityStatusCode(purposeActivity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePurposeActivityHasReason constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityHasReason(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityHasReason(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityReasonType constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityReasonType(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityReasonType(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityTemplateId constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityTemplateId(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityClassCode constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityClassCode(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityMoodCode constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityMoodCode(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityCode constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityCode(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeActivityStatusCode constraint of '<em>Purpose Activity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeActivity_validatePurposeActivityStatusCode(PurposeActivity purposeActivity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return purposeActivity.validatePurposeActivityStatusCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveVerification(AdvanceDirectiveVerification advanceDirectiveVerification,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveVerification, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant2_validateContextControlCode(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTemplateId(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTypeCode(advanceDirectiveVerification, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTime(advanceDirectiveVerification, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectiveVerificationTemplateId constraint of '<em>Advance Directive Verification</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTemplateId(
			AdvanceDirectiveVerification advanceDirectiveVerification, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveVerification.validateAdvanceDirectiveVerificationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveVerificationTypeCode constraint of '<em>Advance Directive Verification</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTypeCode(
			AdvanceDirectiveVerification advanceDirectiveVerification, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveVerification.validateAdvanceDirectiveVerificationTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveVerificationTime constraint of '<em>Advance Directive Verification</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveVerification_validateAdvanceDirectiveVerificationTime(
			AdvanceDirectiveVerification advanceDirectiveVerification, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveVerification.validateAdvanceDirectiveVerificationTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(advanceDirectiveStatusObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationNoAdditionalParticipants(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationNoAdditionalRelationships(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationTemplateId(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationClassCode(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationMoodCode(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationCode(advanceDirectiveStatusObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationStatusCode(advanceDirectiveStatusObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationNoAdditionalParticipants constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationNoAdditionalParticipants(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationNoAdditionalParticipants(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationNoAdditionalRelationships constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationNoAdditionalRelationships(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationNoAdditionalRelationships(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationTemplateId constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationTemplateId(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationClassCode constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationClassCode(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationMoodCode constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationMoodCode(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationCode constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationCode(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdvanceDirectiveStatusObservationStatusCode constraint of '<em>Advance Directive Status Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdvanceDirectiveStatusObservation_validateAdvanceDirectiveStatusObservationStatusCode(
			AdvanceDirectiveStatusObservation advanceDirectiveStatusObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return advanceDirectiveStatusObservation.validateAdvanceDirectiveStatusObservationStatusCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter(Encounter encounter, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encounter, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounter_validateConsolEncounterAdmissionSourceValueSet(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounter_validateConsolEncounterClassCode(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounter_validateConsolEncounterId(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounter_validateConsolEncounterCode(encounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounter_validateConsolEncounterText(encounter, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateConsolEncounterAdmissionSourceValueSet constraint of '<em>Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter_validateConsolEncounterAdmissionSourceValueSet(Encounter encounter,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encounter.validateConsolEncounterAdmissionSourceValueSet(diagnostics, context);
	}

	/**
	 * Validates the validateConsolEncounterClassCode constraint of '<em>Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter_validateConsolEncounterClassCode(Encounter encounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encounter.validateConsolEncounterClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateConsolEncounterId constraint of '<em>Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter_validateConsolEncounterId(Encounter encounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encounter.validateConsolEncounterId(diagnostics, context);
	}

	/**
	 * Validates the validateConsolEncounterCode constraint of '<em>Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter_validateConsolEncounterCode(Encounter encounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encounter.validateConsolEncounterCode(diagnostics, context);
	}

	/**
	 * Validates the validateConsolEncounterText constraint of '<em>Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounter_validateConsolEncounterText(Encounter encounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encounter.validateConsolEncounterText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection(ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSection_validateImmunizationsSectionEntriesOptionalTemplateId(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSection_validateImmunizationsSectionEntriesOptionalCode(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalTitle(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalText(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSectionEntriesOptional_validateImmunizationsSectionEntriesOptionalImmunizationActivity(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSection_validateImmunizationsSectionTitle(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSection_validateImmunizationsSectionText(immunizationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationsSection_validateImmunizationsSectionImmunization(immunizationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationsSectionTitle constraint of '<em>Immunizations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection_validateImmunizationsSectionTitle(
			ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationsSection.validateImmunizationsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionText constraint of '<em>Immunizations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection_validateImmunizationsSectionText(
			ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationsSection.validateImmunizationsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionImmunization constraint of '<em>Immunizations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection_validateImmunizationsSectionImmunization(
			ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationsSection.validateImmunizationsSectionImmunization(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalTemplateId constraint of '<em>Immunizations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection_validateImmunizationsSectionEntriesOptionalTemplateId(
			ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationsSection.validateImmunizationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationsSectionEntriesOptionalCode constraint of '<em>Immunizations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationsSection_validateImmunizationsSectionEntriesOptionalCode(
			ImmunizationsSection immunizationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationsSection.validateImmunizationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider(InsuranceProvider insuranceProvider, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(insuranceProvider, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderInformationSource(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderSequenceNumber(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderPaymentProviders(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderPayerEntryID(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderHealthInsuranceType(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderInsuranceInformation(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderInsuranceInfoSourceID(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderInsuranceInfoSourceAddr(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderHealthPlanCoverageStartTime(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderHealthPlanCoverageStopTime(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderPatientInformation(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderMemberId(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderMemberIdRoot(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderRelationshipToSubscriber(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderRelationshipToSubscriberCodeSystem(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderPatientName(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderSubscriberInformation(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderSubscriberId(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderSubscriberIdRoot(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderSubscriberAddress(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyType(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyTypeCode(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyAddress(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderClassCode(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderMoodCode(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderId(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderCode(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderStatusCode(insuranceProvider, diagnostics, context);
		if (result || diagnostics != null) result &= validateInsuranceProvider_validateInsuranceProviderPayerEntry(insuranceProvider, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInsuranceProviderInformationSource constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderInformationSource(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderInformationSource(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderSequenceNumber constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderSequenceNumber(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderSequenceNumber(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderPaymentProviders constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderPaymentProviders(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderPaymentProviders(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderPayerEntryID constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderPayerEntryID(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderPayerEntryID(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderHealthInsuranceType constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderHealthInsuranceType(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderHealthInsuranceType(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderInsuranceInformation constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderInsuranceInformation(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderInsuranceInformation(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderInsuranceInfoSourceID constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderInsuranceInfoSourceID(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderInsuranceInfoSourceID(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderInsuranceInfoSourceAddr constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderInsuranceInfoSourceAddr(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderInsuranceInfoSourceAddr(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderHealthPlanCoverageStartTime constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderHealthPlanCoverageStartTime(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderHealthPlanCoverageStartTime(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderHealthPlanCoverageStopTime constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderHealthPlanCoverageStopTime(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderHealthPlanCoverageStopTime(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderPatientInformation constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderPatientInformation(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderPatientInformation(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderMemberId constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderMemberId(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderMemberId(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderMemberIdRoot constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderMemberIdRoot(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderMemberIdRoot(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderRelationshipToSubscriber constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderRelationshipToSubscriber(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderRelationshipToSubscriber(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderRelationshipToSubscriberCodeSystem constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderRelationshipToSubscriberCodeSystem(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderRelationshipToSubscriberCodeSystem(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderPatientName constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderPatientName(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderPatientName(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderSubscriberInformation constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderSubscriberInformation(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderSubscriberInformation(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderSubscriberId constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderSubscriberId(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderSubscriberId(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderSubscriberIdRoot constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderSubscriberIdRoot(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderSubscriberIdRoot(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderSubscriberAddress constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderSubscriberAddress(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderSubscriberAddress(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderFinancialResponsibilityPartyType constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyType(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderFinancialResponsibilityPartyType(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderFinancialResponsibilityPartyTypeCode constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyTypeCode(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderFinancialResponsibilityPartyTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderFinancialResponsibilityPartyAddress constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderFinancialResponsibilityPartyAddress(
			InsuranceProvider insuranceProvider, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderFinancialResponsibilityPartyAddress(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderClassCode constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderClassCode(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderMoodCode constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderMoodCode(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderId constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderId(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderId(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderCode constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderCode(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderCode(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderStatusCode constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderStatusCode(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validateInsuranceProviderPayerEntry constraint of '<em>Insurance Provider</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInsuranceProvider_validateInsuranceProviderPayerEntry(InsuranceProvider insuranceProvider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return insuranceProvider.validateInsuranceProviderPayerEntry(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry(PayerEntry payerEntry, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(payerEntry, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryPayerEntityIsRequired(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryCoveredPartyIsRequired(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryCoveredPartyTime(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntrySubscriberIsAllowed(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntrySubscriberTime(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryEntryRelationshipREFR(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryClassCode(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryMoodCode(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryId(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryStatusCode(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryPayerEntity(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntryCoveredParty(payerEntry, diagnostics, context);
		if (result || diagnostics != null) result &= validatePayerEntry_validatePayerEntrySubscriber(payerEntry, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePayerEntryPayerEntityIsRequired constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryPayerEntityIsRequired(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntryPayerEntityIsRequired(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryCoveredPartyIsRequired constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryCoveredPartyIsRequired(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntryCoveredPartyIsRequired(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryCoveredPartyTime constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryCoveredPartyTime(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntryCoveredPartyTime(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntrySubscriberIsAllowed constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntrySubscriberIsAllowed(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntrySubscriberIsAllowed(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntrySubscriberTime constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntrySubscriberTime(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntrySubscriberTime(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryEntryRelationshipREFR constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryEntryRelationshipREFR(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntryEntryRelationshipREFR(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryClassCode constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryClassCode(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntryClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryMoodCode constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryMoodCode(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntryMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryId constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryId(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntryId(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryStatusCode constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryStatusCode(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntryStatusCode(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryPayerEntity constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryPayerEntity(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntryPayerEntity(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntryCoveredParty constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntryCoveredParty(PayerEntry payerEntry,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return payerEntry.validatePayerEntryCoveredParty(diagnostics, context);
	}

	/**
	 * Validates the validatePayerEntrySubscriber constraint of '<em>Payer Entry</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePayerEntry_validatePayerEntrySubscriber(PayerEntry payerEntry, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return payerEntry.validatePayerEntrySubscriber(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoveredParty(CoveredParty coveredParty, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(coveredParty, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoveredParty_validateCoveredPartyId(coveredParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateCoveredParty_validateCoveredPartyCode(coveredParty, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCoveredPartyId constraint of '<em>Covered Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoveredParty_validateCoveredPartyId(CoveredParty coveredParty, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return coveredParty.validateCoveredPartyId(diagnostics, context);
	}

	/**
	 * Validates the validateCoveredPartyCode constraint of '<em>Covered Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCoveredParty_validateCoveredPartyCode(CoveredParty coveredParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return coveredParty.validateCoveredPartyCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicySubscriber(PolicySubscriber policySubscriber, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(policySubscriber, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(policySubscriber, diagnostics, context);
		if (result || diagnostics != null) result &= validatePolicySubscriber_validatePolicySubscriberId(policySubscriber, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePolicySubscriberId constraint of '<em>Policy Subscriber</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePolicySubscriber_validatePolicySubscriberId(PolicySubscriber policySubscriber,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return policySubscriber.validatePolicySubscriberId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference(ExternalReference externalReference, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(externalReference, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceHasNoCode(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceHasReference(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceHasReferenceExternalDocument(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceHasReferenceExternalDocumentID(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceHasReferenceExternalDocumentText(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceTemplateId(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceClassCode(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceMoodCode(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceId(externalReference, diagnostics, context);
		if (result || diagnostics != null) result &= validateExternalReference_validateExternalReferenceText(externalReference, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateExternalReferenceHasNoCode constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceHasNoCode(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceHasNoCode(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceHasReference constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceHasReference(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceHasReference(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceHasReferenceExternalDocument constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceHasReferenceExternalDocument(
			ExternalReference externalReference, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceHasReferenceExternalDocument(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceHasReferenceExternalDocumentID constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceHasReferenceExternalDocumentID(
			ExternalReference externalReference, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceHasReferenceExternalDocumentID(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceHasReferenceExternalDocumentText constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceHasReferenceExternalDocumentText(
			ExternalReference externalReference, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceHasReferenceExternalDocumentText(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceTemplateId constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceTemplateId(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceClassCode constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceClassCode(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceMoodCode constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceMoodCode(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceId constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceId(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceId(diagnostics, context);
	}

	/**
	 * Validates the validateExternalReferenceText constraint of '<em>External Reference</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateExternalReference_validateExternalReferenceText(ExternalReference externalReference,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return externalReference.validateExternalReferenceText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSupport(Support support, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(support, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection(VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vitalSignsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalTemplateId(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalCode(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalText(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalTitle(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSectionEntriesOptional_validateVitalSignsSectionEntriesOptionalVitalSignsOrganizer(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSection_validateVitalSignsSectionText(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSection_validateVitalSignsSectionTitle(vitalSignsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateVitalSignsSection_validateVitalSignsSectionVitalSignsOrganizer(vitalSignsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateVitalSignsSectionText constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionText(VitalSignsSection vitalSignsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionTitle constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionTitle(VitalSignsSection vitalSignsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionVitalSignsOrganizer constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionVitalSignsOrganizer(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionVitalSignsOrganizer(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalTemplateId constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalTemplateId(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateVitalSignsSectionEntriesOptionalCode constraint of '<em>Vital Signs Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVitalSignsSection_validateVitalSignsSectionEntriesOptionalCode(
			VitalSignsSection vitalSignsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vitalSignsSection.validateVitalSignsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection(HistoryOfPastIllnessSection historyOfPastIllnessSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyOfPastIllnessSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionTemplateId(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionCode(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionTitle(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionText(historyOfPastIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionProblemObservation(historyOfPastIllnessSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHistoryOfPastIllnessSectionTemplateId constraint of '<em>History Of Past Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionTemplateId(
			HistoryOfPastIllnessSection historyOfPastIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPastIllnessSection.validateHistoryOfPastIllnessSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPastIllnessSectionCode constraint of '<em>History Of Past Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionCode(
			HistoryOfPastIllnessSection historyOfPastIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPastIllnessSection.validateHistoryOfPastIllnessSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPastIllnessSectionTitle constraint of '<em>History Of Past Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionTitle(
			HistoryOfPastIllnessSection historyOfPastIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPastIllnessSection.validateHistoryOfPastIllnessSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPastIllnessSectionText constraint of '<em>History Of Past Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionText(
			HistoryOfPastIllnessSection historyOfPastIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPastIllnessSection.validateHistoryOfPastIllnessSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPastIllnessSectionProblemObservation constraint of '<em>History Of Past Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPastIllnessSection_validateHistoryOfPastIllnessSectionProblemObservation(
			HistoryOfPastIllnessSection historyOfPastIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPastIllnessSection.validateHistoryOfPastIllnessSectionProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintSection(ChiefComplaintSection chiefComplaintSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(chiefComplaintSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintSection_validateChiefComplaintSectionTemplateId(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintSection_validateChiefComplaintSectionCode(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintSection_validateChiefComplaintSectionText(chiefComplaintSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintSection_validateChiefComplaintSectionTitle(chiefComplaintSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateChiefComplaintSectionTemplateId constraint of '<em>Chief Complaint Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintSection_validateChiefComplaintSectionTemplateId(
			ChiefComplaintSection chiefComplaintSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chiefComplaintSection.validateChiefComplaintSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintSectionCode constraint of '<em>Chief Complaint Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintSection_validateChiefComplaintSectionCode(
			ChiefComplaintSection chiefComplaintSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chiefComplaintSection.validateChiefComplaintSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintSectionText constraint of '<em>Chief Complaint Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintSection_validateChiefComplaintSectionText(
			ChiefComplaintSection chiefComplaintSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chiefComplaintSection.validateChiefComplaintSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintSectionTitle constraint of '<em>Chief Complaint Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintSection_validateChiefComplaintSectionTitle(
			ChiefComplaintSection chiefComplaintSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return chiefComplaintSection.validateChiefComplaintSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForReferralSection(ReasonForReferralSection reasonForReferralSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonForReferralSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForReferralSection_validateReasonForReferralSectionTemplateId(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForReferralSection_validateReasonForReferralSectionCode(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForReferralSection_validateReasonForReferralSectionTitle(reasonForReferralSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForReferralSection_validateReasonForReferralSectionText(reasonForReferralSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReasonForReferralSectionTemplateId constraint of '<em>Reason For Referral Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForReferralSection_validateReasonForReferralSectionTemplateId(
			ReasonForReferralSection reasonForReferralSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForReferralSection.validateReasonForReferralSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForReferralSectionCode constraint of '<em>Reason For Referral Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForReferralSection_validateReasonForReferralSectionCode(
			ReasonForReferralSection reasonForReferralSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForReferralSection.validateReasonForReferralSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForReferralSectionTitle constraint of '<em>Reason For Referral Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForReferralSection_validateReasonForReferralSectionTitle(
			ReasonForReferralSection reasonForReferralSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForReferralSection.validateReasonForReferralSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForReferralSectionText constraint of '<em>Reason For Referral Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForReferralSection_validateReasonForReferralSectionText(
			ReasonForReferralSection reasonForReferralSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForReferralSection.validateReasonForReferralSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPresentIllnessSection(
			HistoryOfPresentIllnessSection historyOfPresentIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyOfPresentIllnessSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionTemplateId(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionCode(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionTitle(historyOfPresentIllnessSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionText(historyOfPresentIllnessSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHistoryOfPresentIllnessSectionTemplateId constraint of '<em>History Of Present Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionTemplateId(
			HistoryOfPresentIllnessSection historyOfPresentIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPresentIllnessSection.validateHistoryOfPresentIllnessSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPresentIllnessSectionCode constraint of '<em>History Of Present Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionCode(
			HistoryOfPresentIllnessSection historyOfPresentIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPresentIllnessSection.validateHistoryOfPresentIllnessSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPresentIllnessSectionTitle constraint of '<em>History Of Present Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionTitle(
			HistoryOfPresentIllnessSection historyOfPresentIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPresentIllnessSection.validateHistoryOfPresentIllnessSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryOfPresentIllnessSectionText constraint of '<em>History Of Present Illness Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryOfPresentIllnessSection_validateHistoryOfPresentIllnessSectionText(
			HistoryOfPresentIllnessSection historyOfPresentIllnessSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyOfPresentIllnessSection.validateHistoryOfPresentIllnessSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosisSection(
			HospitalAdmissionDiagnosisSection hospitalAdmissionDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalAdmissionDiagnosisSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosisSection_validateHospitalAdmissionDiagnosisSectionTemplateId(hospitalAdmissionDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosisSection_validateHospitalAdmissionDiagnosisSectionCode(hospitalAdmissionDiagnosisSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisSectionTemplateId constraint of '<em>Hospital Admission Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosisSection_validateHospitalAdmissionDiagnosisSectionTemplateId(
			HospitalAdmissionDiagnosisSection hospitalAdmissionDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosisSection.validateHospitalAdmissionDiagnosisSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisSectionCode constraint of '<em>Hospital Admission Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosisSection_validateHospitalAdmissionDiagnosisSectionCode(
			HospitalAdmissionDiagnosisSection hospitalAdmissionDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosisSection.validateHospitalAdmissionDiagnosisSectionCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalTemplateId(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalCode(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalText(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalTitle(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalAdmissionMedication(hospitalAdmissionMedicationsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalAdmissionMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Hospital Admission Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalTemplateId(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalAdmissionMedicationsSectionEntriesOptional.validateHospitalAdmissionMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionMedicationsSectionEntriesOptionalCode constraint of '<em>Hospital Admission Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalCode(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalAdmissionMedicationsSectionEntriesOptional.validateHospitalAdmissionMedicationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionMedicationsSectionEntriesOptionalText constraint of '<em>Hospital Admission Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalText(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalAdmissionMedicationsSectionEntriesOptional.validateHospitalAdmissionMedicationsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionMedicationsSectionEntriesOptionalTitle constraint of '<em>Hospital Admission Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalTitle(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalAdmissionMedicationsSectionEntriesOptional.validateHospitalAdmissionMedicationsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionMedicationsSectionEntriesOptionalAdmissionMedication constraint of '<em>Hospital Admission Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionMedicationsSectionEntriesOptional_validateHospitalAdmissionMedicationsSectionEntriesOptionalAdmissionMedication(
			HospitalAdmissionMedicationsSectionEntriesOptional hospitalAdmissionMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalAdmissionMedicationsSectionEntriesOptional.validateHospitalAdmissionMedicationsSectionEntriesOptionalAdmissionMedication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication(AdmissionMedication admissionMedication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(admissionMedication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdmissionMedication_validateAdmissionMedicationTemplateId(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdmissionMedication_validateAdmissionMedicationClassCode(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdmissionMedication_validateAdmissionMedicationCode(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdmissionMedication_validateAdmissionMedicationMoodCode(admissionMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateAdmissionMedication_validateAdmissionMedicationMedicationActivity(admissionMedication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAdmissionMedicationTemplateId constraint of '<em>Admission Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication_validateAdmissionMedicationTemplateId(
			AdmissionMedication admissionMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return admissionMedication.validateAdmissionMedicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAdmissionMedicationClassCode constraint of '<em>Admission Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication_validateAdmissionMedicationClassCode(
			AdmissionMedication admissionMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return admissionMedication.validateAdmissionMedicationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdmissionMedicationCode constraint of '<em>Admission Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication_validateAdmissionMedicationCode(AdmissionMedication admissionMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return admissionMedication.validateAdmissionMedicationCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdmissionMedicationMoodCode constraint of '<em>Admission Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication_validateAdmissionMedicationMoodCode(
			AdmissionMedication admissionMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return admissionMedication.validateAdmissionMedicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateAdmissionMedicationMedicationActivity constraint of '<em>Admission Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAdmissionMedication_validateAdmissionMedicationMedicationActivity(
			AdmissionMedication admissionMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return admissionMedication.validateAdmissionMedicationMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationsAdministeredSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionTemplateId(medicationsAdministeredSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionCode(medicationsAdministeredSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationsAdministeredSectionTemplateId constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionTemplateId(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateMedicationsAdministeredSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationsAdministeredSectionCode constraint of '<em>Medications Administered Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationsAdministeredSection_validateMedicationsAdministeredSectionCode(
			MedicationsAdministeredSection medicationsAdministeredSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationsAdministeredSection.validateMedicationsAdministeredSectionCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalExamSection(PhysicalExamSection physicalExamSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicalExamSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalExamSection_validatePhysicalExamSectionTemplateId(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalExamSection_validatePhysicalExamSectionCode(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalExamSection_validatePhysicalExamSectionTitle(physicalExamSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicalExamSection_validatePhysicalExamSectionText(physicalExamSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePhysicalExamSectionTemplateId constraint of '<em>Physical Exam Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalExamSection_validatePhysicalExamSectionTemplateId(
			PhysicalExamSection physicalExamSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicalExamSection.validatePhysicalExamSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalExamSectionCode constraint of '<em>Physical Exam Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalExamSection_validatePhysicalExamSectionCode(PhysicalExamSection physicalExamSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicalExamSection.validatePhysicalExamSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalExamSectionTitle constraint of '<em>Physical Exam Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalExamSection_validatePhysicalExamSectionTitle(
			PhysicalExamSection physicalExamSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicalExamSection.validatePhysicalExamSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicalExamSectionText constraint of '<em>Physical Exam Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicalExamSection_validatePhysicalExamSectionText(PhysicalExamSection physicalExamSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicalExamSection.validatePhysicalExamSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralStatusSection(GeneralStatusSection generalStatusSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(generalStatusSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralStatusSection_validateGeneralStatusSectionTemplateId(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralStatusSection_validateGeneralStatusSectionCode(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralStatusSection_validateGeneralStatusSectionTitle(generalStatusSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralStatusSection_validateGeneralStatusSectionText(generalStatusSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGeneralStatusSectionTemplateId constraint of '<em>General Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralStatusSection_validateGeneralStatusSectionTemplateId(
			GeneralStatusSection generalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalStatusSection.validateGeneralStatusSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralStatusSectionCode constraint of '<em>General Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralStatusSection_validateGeneralStatusSectionCode(
			GeneralStatusSection generalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalStatusSection.validateGeneralStatusSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralStatusSectionTitle constraint of '<em>General Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralStatusSection_validateGeneralStatusSectionTitle(
			GeneralStatusSection generalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalStatusSection.validateGeneralStatusSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralStatusSectionText constraint of '<em>General Status Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateGeneralStatusSection_validateGeneralStatusSectionText(
			GeneralStatusSection generalStatusSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return generalStatusSection.validateGeneralStatusSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReviewOfSystemsSection(ReviewOfSystemsSection reviewOfSystemsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reviewOfSystemsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReviewOfSystemsSection_validateReviewOfSystemsSectionTemplateId(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReviewOfSystemsSection_validateReviewOfSystemsSectionCode(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReviewOfSystemsSection_validateReviewOfSystemsSectionTitle(reviewOfSystemsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReviewOfSystemsSection_validateReviewOfSystemsSectionText(reviewOfSystemsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReviewOfSystemsSectionTemplateId constraint of '<em>Review Of Systems Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReviewOfSystemsSection_validateReviewOfSystemsSectionTemplateId(
			ReviewOfSystemsSection reviewOfSystemsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reviewOfSystemsSection.validateReviewOfSystemsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReviewOfSystemsSectionCode constraint of '<em>Review Of Systems Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReviewOfSystemsSection_validateReviewOfSystemsSectionCode(
			ReviewOfSystemsSection reviewOfSystemsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reviewOfSystemsSection.validateReviewOfSystemsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateReviewOfSystemsSectionTitle constraint of '<em>Review Of Systems Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReviewOfSystemsSection_validateReviewOfSystemsSectionTitle(
			ReviewOfSystemsSection reviewOfSystemsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reviewOfSystemsSection.validateReviewOfSystemsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateReviewOfSystemsSectionText constraint of '<em>Review Of Systems Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReviewOfSystemsSection_validateReviewOfSystemsSectionText(
			ReviewOfSystemsSection reviewOfSystemsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reviewOfSystemsSection.validateReviewOfSystemsSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentAndPlanSection(AssessmentAndPlanSection assessmentAndPlanSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assessmentAndPlanSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionTemplateId(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionCode(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionText(assessmentAndPlanSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionPlanOfCareActivityAct(assessmentAndPlanSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssessmentAndPlanSectionTemplateId constraint of '<em>Assessment And Plan Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionTemplateId(
			AssessmentAndPlanSection assessmentAndPlanSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentAndPlanSection.validateAssessmentAndPlanSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAssessmentAndPlanSectionCode constraint of '<em>Assessment And Plan Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionCode(
			AssessmentAndPlanSection assessmentAndPlanSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentAndPlanSection.validateAssessmentAndPlanSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssessmentAndPlanSectionText constraint of '<em>Assessment And Plan Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionText(
			AssessmentAndPlanSection assessmentAndPlanSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentAndPlanSection.validateAssessmentAndPlanSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAssessmentAndPlanSectionPlanOfCareActivityAct constraint of '<em>Assessment And Plan Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentAndPlanSection_validateAssessmentAndPlanSectionPlanOfCareActivityAct(
			AssessmentAndPlanSection assessmentAndPlanSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentAndPlanSection.validateAssessmentAndPlanSectionPlanOfCareActivityAct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLanguageSpoken(LanguageSpoken languageSpoken, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(languageSpoken, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validateLanguageSpoken_validateLanguageSpokenNoProficiencyLevelCode(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validateLanguageSpoken_validateLanguageSpokenLanguageCode(languageSpoken, diagnostics, context);
		if (result || diagnostics != null) result &= validateLanguageSpoken_validateLanguageSpokenModeCode(languageSpoken, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLanguageSpokenNoProficiencyLevelCode constraint of '<em>Language Spoken</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLanguageSpoken_validateLanguageSpokenNoProficiencyLevelCode(LanguageSpoken languageSpoken,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return languageSpoken.validateLanguageSpokenNoProficiencyLevelCode(diagnostics, context);
	}

	/**
	 * Validates the validateLanguageSpokenLanguageCode constraint of '<em>Language Spoken</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLanguageSpoken_validateLanguageSpokenLanguageCode(LanguageSpoken languageSpoken,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return languageSpoken.validateLanguageSpokenLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateLanguageSpokenModeCode constraint of '<em>Language Spoken</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLanguageSpoken_validateLanguageSpokenModeCode(LanguageSpoken languageSpoken,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return languageSpoken.validateLanguageSpokenModeCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHealthcareProvider(HealthcareProvider healthcareProvider, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(healthcareProvider, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSupportGuardian(SupportGuardian supportGuardian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(supportGuardian, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSupportParticipant(SupportParticipant supportParticipant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(supportParticipant, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSurgicalDrainsSection(SurgicalDrainsSection surgicalDrainsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(surgicalDrainsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSurgicalDrainsSection_validateSurgicalDrainsSectionTemplateId(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSurgicalDrainsSection_validateSurgicalDrainsSectionCode(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSurgicalDrainsSection_validateSurgicalDrainsSectionText(surgicalDrainsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSurgicalDrainsSection_validateSurgicalDrainsSectionTitle(surgicalDrainsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSurgicalDrainsSectionTemplateId constraint of '<em>Surgical Drains Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSurgicalDrainsSection_validateSurgicalDrainsSectionTemplateId(
			SurgicalDrainsSection surgicalDrainsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return surgicalDrainsSection.validateSurgicalDrainsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSurgicalDrainsSectionCode constraint of '<em>Surgical Drains Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSurgicalDrainsSection_validateSurgicalDrainsSectionCode(
			SurgicalDrainsSection surgicalDrainsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return surgicalDrainsSection.validateSurgicalDrainsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSurgicalDrainsSectionText constraint of '<em>Surgical Drains Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSurgicalDrainsSection_validateSurgicalDrainsSectionText(
			SurgicalDrainsSection surgicalDrainsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return surgicalDrainsSection.validateSurgicalDrainsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSurgicalDrainsSectionTitle constraint of '<em>Surgical Drains Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSurgicalDrainsSection_validateSurgicalDrainsSectionTitle(
			SurgicalDrainsSection surgicalDrainsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return surgicalDrainsSection.validateSurgicalDrainsSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument(UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredDocument, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentTemplateId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentRecordTarget(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentAuthor(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentComponent(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodian(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentRecordTargetPatientRole2Id(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentAuthorAssignedAuthor2Addr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentAuthorAssignedAuthor2Telecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationAddr(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationId(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationName(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationTelecom(unstructuredDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian2(unstructuredDocument, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnstructuredDocumentTemplateId constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentTemplateId(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentRecordTarget constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentRecordTarget(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentRecordTarget(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentAuthor constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentAuthor(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentComponent constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentComponent(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentComponent(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodian constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodian(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodian(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentRecordTargetPatientRole2Id constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentRecordTargetPatientRole2Id(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentRecordTargetPatientRole2Id(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentAuthorAssignedAuthor2Addr constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentAuthorAssignedAuthor2Addr(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentAuthorAssignedAuthor2Addr(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentAuthorAssignedAuthor2Telecom constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentAuthorAssignedAuthor2Telecom(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentAuthorAssignedAuthor2Telecom(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationAddr constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationAddr(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationId constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationId(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationName constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationName(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationTelecom constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationTelecom(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodianAssignedCustodian3CustodianOrganizationTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredDocumentCustodianAssignedCustodian2 constraint of '<em>Unstructured Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_validateUnstructuredDocumentCustodianAssignedCustodian2(
			UnstructuredDocument unstructuredDocument, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return unstructuredDocument.validateUnstructuredDocumentCustodianAssignedCustodian2(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_RecordTarget(
			UnstructuredDocument_RecordTarget unstructuredDocument_RecordTarget, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredDocument_RecordTarget, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateRecordTarget_validateTypeCode(unstructuredDocument_RecordTarget, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateRecordTarget_validateContextControlCode(unstructuredDocument_RecordTarget, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole2(RecordTarget_PatientRole2 recordTarget_PatientRole2,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(recordTarget_PatientRole2, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePatientRole_validateClassCode(recordTarget_PatientRole2, diagnostics, context);
		if (result || diagnostics != null) result &= validateRecordTarget_PatientRole2_validatePatientRole2Id(recordTarget_PatientRole2, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePatientRole2Id constraint of '<em>Record Target Patient Role2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRecordTarget_PatientRole2_validatePatientRole2Id(
			RecordTarget_PatientRole2 recordTarget_PatientRole2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return recordTarget_PatientRole2.validatePatientRole2Id(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_Author(UnstructuredDocument_Author unstructuredDocument_Author,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredDocument_Author, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateTypeCode(unstructuredDocument_Author, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateContextControlCode(unstructuredDocument_Author, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor2(Author_AssignedAuthor2 author_AssignedAuthor2,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(author_AssignedAuthor2, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateAssignedAuthorChoice(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedAuthor_validateClassCode(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor2_validateAssignedAuthor2Addr(author_AssignedAuthor2, diagnostics, context);
		if (result || diagnostics != null) result &= validateAuthor_AssignedAuthor2_validateAssignedAuthor2Telecom(author_AssignedAuthor2, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedAuthor2Addr constraint of '<em>Author Assigned Author2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor2_validateAssignedAuthor2Addr(
			Author_AssignedAuthor2 author_AssignedAuthor2, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor2.validateAssignedAuthor2Addr(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedAuthor2Telecom constraint of '<em>Author Assigned Author2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAuthor_AssignedAuthor2_validateAssignedAuthor2Telecom(
			Author_AssignedAuthor2 author_AssignedAuthor2, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return author_AssignedAuthor2.validateAssignedAuthor2Telecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_Custodian(
			UnstructuredDocument_Custodian unstructuredDocument_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredDocument_Custodian, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodian_validateTypeCode(unstructuredDocument_Custodian, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredDocument_Custodian_validateCustodianAssignedCustodian2(unstructuredDocument_Custodian, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianAssignedCustodian2 constraint of '<em>Unstructured Document Custodian</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_Custodian_validateCustodianAssignedCustodian2(
			UnstructuredDocument_Custodian unstructuredDocument_Custodian, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredDocument_Custodian.validateCustodianAssignedCustodian2(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCustodian_AssignedCustodian3(Custodian_AssignedCustodian3 custodian_AssignedCustodian3,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(custodian_AssignedCustodian3, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(custodian_AssignedCustodian3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedCustodian_validateClassCode(custodian_AssignedCustodian3, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian3_CustodianOrganization(
			AssignedCustodian3_CustodianOrganization assignedCustodian3_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assignedCustodian3_CustodianOrganization, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodianOrganization_validateClassCode(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateCustodianOrganization_validateDeterminerCode(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationAddr(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationId(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationName(assignedCustodian3_CustodianOrganization, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationTelecom(assignedCustodian3_CustodianOrganization, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCustodianOrganizationAddr constraint of '<em>Assigned Custodian3 Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationAddr(
			AssignedCustodian3_CustodianOrganization assignedCustodian3_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian3_CustodianOrganization.validateCustodianOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationId constraint of '<em>Assigned Custodian3 Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationId(
			AssignedCustodian3_CustodianOrganization assignedCustodian3_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian3_CustodianOrganization.validateCustodianOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationName constraint of '<em>Assigned Custodian3 Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationName(
			AssignedCustodian3_CustodianOrganization assignedCustodian3_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian3_CustodianOrganization.validateCustodianOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateCustodianOrganizationTelecom constraint of '<em>Assigned Custodian3 Custodian Organization</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedCustodian3_CustodianOrganization_validateCustodianOrganizationTelecom(
			AssignedCustodian3_CustodianOrganization assignedCustodian3_CustodianOrganization,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assignedCustodian3_CustodianOrganization.validateCustodianOrganizationTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredDocument_Component(
			UnstructuredDocument_Component unstructuredDocument_Component, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredDocument_Component, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent2_validateBodyChoice(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent2_validateTypeCode(unstructuredDocument_Component, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent2_validateContextConductionInd(unstructuredDocument_Component, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponent_NonXMLBody(Component_NonXMLBody component_NonXMLBody, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(component_NonXMLBody, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateNonXMLBody_validateClassCode(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateNonXMLBody_validateMoodCode(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponent_NonXMLBody_validateNonXMLBodyHasReferenceOrRepresentation(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponent_NonXMLBody_validateNonXMLBodyMediaTypeFileFormats(component_NonXMLBody, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponent_NonXMLBody_validateNonXMLBodyText(component_NonXMLBody, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateNonXMLBodyHasReferenceOrRepresentation constraint of '<em>Component Non XML Body</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponent_NonXMLBody_validateNonXMLBodyHasReferenceOrRepresentation(
			Component_NonXMLBody component_NonXMLBody, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return component_NonXMLBody.validateNonXMLBodyHasReferenceOrRepresentation(diagnostics, context);
	}

	/**
	 * Validates the validateNonXMLBodyMediaTypeFileFormats constraint of '<em>Component Non XML Body</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponent_NonXMLBody_validateNonXMLBodyMediaTypeFileFormats(
			Component_NonXMLBody component_NonXMLBody, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return component_NonXMLBody.validateNonXMLBodyMediaTypeFileFormats(diagnostics, context);
	}

	/**
	 * Validates the validateNonXMLBodyText constraint of '<em>Component Non XML Body</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponent_NonXMLBody_validateNonXMLBodyText(Component_NonXMLBody component_NonXMLBody,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return component_NonXMLBody.validateNonXMLBodyText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanOriginalAuthor(ScanOriginalAuthor scanOriginalAuthor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(scanOriginalAuthor, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateTypeCode(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateContextControlCode(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanOriginalAuthor_validateScanOriginalAuthorHasAssignedAuthorId(scanOriginalAuthor, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanOriginalAuthor_validateScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId(scanOriginalAuthor, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateScanOriginalAuthorHasAssignedAuthorId constraint of '<em>Scan Original Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanOriginalAuthor_validateScanOriginalAuthorHasAssignedAuthorId(
			ScanOriginalAuthor scanOriginalAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanOriginalAuthor.validateScanOriginalAuthorHasAssignedAuthorId(diagnostics, context);
	}

	/**
	 * Validates the validateScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId constraint of '<em>Scan Original Author</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanOriginalAuthor_validateScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId(
			ScanOriginalAuthor scanOriginalAuthor, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanOriginalAuthor.validateScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice(ScanningDevice scanningDevice, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(scanningDevice, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateTypeCode(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAuthor_validateContextControlCode(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceTimeEqualsDocumentEffectiveTime(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceHasAssignedAuthorId(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceHasAssignedAuthoringDeviceCode(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceHasDeviceManufacturerModelName(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceHasDeviceSoftwareName(scanningDevice, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanningDevice_validateScanningDeviceHasAssignedAuthorRepresentedOrganizationId(scanningDevice, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateScanningDeviceTimeEqualsDocumentEffectiveTime constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceTimeEqualsDocumentEffectiveTime(
			ScanningDevice scanningDevice, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceTimeEqualsDocumentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateScanningDeviceHasAssignedAuthorId constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceHasAssignedAuthorId(ScanningDevice scanningDevice,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceHasAssignedAuthorId(diagnostics, context);
	}

	/**
	 * Validates the validateScanningDeviceHasAssignedAuthoringDeviceCode constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceHasAssignedAuthoringDeviceCode(
			ScanningDevice scanningDevice, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceHasAssignedAuthoringDeviceCode(diagnostics, context);
	}

	/**
	 * Validates the validateScanningDeviceHasDeviceManufacturerModelName constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceHasDeviceManufacturerModelName(
			ScanningDevice scanningDevice, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceHasDeviceManufacturerModelName(diagnostics, context);
	}

	/**
	 * Validates the validateScanningDeviceHasDeviceSoftwareName constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceHasDeviceSoftwareName(ScanningDevice scanningDevice,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceHasDeviceSoftwareName(diagnostics, context);
	}

	/**
	 * Validates the validateScanningDeviceHasAssignedAuthorRepresentedOrganizationId constraint of '<em>Scanning Device</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanningDevice_validateScanningDeviceHasAssignedAuthorRepresentedOrganizationId(
			ScanningDevice scanningDevice, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanningDevice.validateScanningDeviceHasAssignedAuthorRepresentedOrganizationId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanDataEnterer(ScanDataEnterer scanDataEnterer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(scanDataEnterer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDataEnterer_validateTypeCode(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDataEnterer_validateContextControlCode(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanDataEnterer_validateScanDataEntererTimeEqualsDocumentEffectiveTime(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanDataEnterer_validateScanDataEntererHasAssignedEntityId(scanDataEnterer, diagnostics, context);
		if (result || diagnostics != null) result &= validateScanDataEnterer_validateScanDataEntererTime(scanDataEnterer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateScanDataEntererTimeEqualsDocumentEffectiveTime constraint of '<em>Scan Data Enterer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanDataEnterer_validateScanDataEntererTimeEqualsDocumentEffectiveTime(
			ScanDataEnterer scanDataEnterer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanDataEnterer.validateScanDataEntererTimeEqualsDocumentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateScanDataEntererHasAssignedEntityId constraint of '<em>Scan Data Enterer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanDataEnterer_validateScanDataEntererHasAssignedEntityId(ScanDataEnterer scanDataEnterer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanDataEnterer.validateScanDataEntererHasAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateScanDataEntererTime constraint of '<em>Scan Data Enterer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateScanDataEnterer_validateScanDataEntererTime(ScanDataEnterer scanDataEnterer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return scanDataEnterer.validateScanDataEntererTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation(MedicationInformation medicationInformation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationInformation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateManufacturedProduct_validateManufacturedDrugOrOtherMaterial(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateManufacturedProduct_validateClassCode(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformation_validateMedicationInformationTemplateId(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformation_validateMedicationInformationId(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformation_validateMedicationInformationClassCode(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformation_validateMedicationInformationManufacturerOrganization(medicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformation_validateMedicationInformationManufacturedMaterial(medicationInformation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationInformationTemplateId constraint of '<em>Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation_validateMedicationInformationTemplateId(
			MedicationInformation medicationInformation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformation.validateMedicationInformationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationId constraint of '<em>Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation_validateMedicationInformationId(
			MedicationInformation medicationInformation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformation.validateMedicationInformationId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationClassCode constraint of '<em>Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation_validateMedicationInformationClassCode(
			MedicationInformation medicationInformation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformation.validateMedicationInformationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationManufacturerOrganization constraint of '<em>Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation_validateMedicationInformationManufacturerOrganization(
			MedicationInformation medicationInformation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformation.validateMedicationInformationManufacturerOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationManufacturedMaterial constraint of '<em>Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformation_validateMedicationInformationManufacturedMaterial(
			MedicationInformation medicationInformation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformation.validateMedicationInformationManufacturedMaterial(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument(UnstructuredOrScannedDocument unstructuredOrScannedDocument,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(unstructuredOrScannedDocument, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateGeneralHeaderConstraintsTemplateId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTypeIdFixed(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasOneRecordTarget(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasAssignedAuthor(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentPatientRoleId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientRoleAddress(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientGenderCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientBirthYear(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasOriginalAuthor(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasScanningDevice(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasScanDataEnterer(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBody(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyBinaryText(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentNoStructuredData(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentOnePatientPerDocument(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentPatientRoleHasId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentAssignedAuthorHasAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentAssignedAuthorHasTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganization(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyText(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasTextReferenceOrRepresentation(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasTextMediaTypeValueSet(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentEffectiveTime(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLanguageCode(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTitle(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTypeId(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanOriginalAuthor(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanningDevice(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanDataEnterer(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLegalAuthenticator(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentDocumentationOf(unstructuredOrScannedDocument, diagnostics, context);
		if (result || diagnostics != null) result &= validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentCustodian(unstructuredOrScannedDocument, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentTypeIdFixed constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTypeIdFixed(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentTypeIdFixed(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasOneRecordTarget constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasOneRecordTarget(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasOneRecordTarget(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasAssignedAuthor constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasAssignedAuthor(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasAssignedAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentPatientRoleId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentPatientRoleId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentPatientRoleId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasPatientRoleAddress constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientRoleAddress(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasPatientRoleAddress(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasPatientName constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientName(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasPatientName(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasPatientGenderCode constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientGenderCode(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasPatientGenderCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasPatientBirthYear constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasPatientBirthYear(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasPatientBirthYear(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasOriginalAuthor constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasOriginalAuthor(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasOriginalAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasScanningDevice constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasScanningDevice(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasScanningDevice(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasScanDataEnterer constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasScanDataEnterer(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasScanDataEnterer(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasNonXMLBody constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBody(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasNonXMLBody(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasNonXMLBodyBinaryText constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyBinaryText(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasNonXMLBodyBinaryText(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentNoStructuredData constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentNoStructuredData(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentNoStructuredData(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentOnePatientPerDocument constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentOnePatientPerDocument(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentOnePatientPerDocument(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentPatientRoleHasId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentPatientRoleHasId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentPatientRoleHasId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentAssignedAuthorHasAddr constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentAssignedAuthorHasAddr(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentAssignedAuthorHasAddr(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentAssignedAuthorHasTelecom constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentAssignedAuthorHasTelecom(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentAssignedAuthorHasTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganization constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganization(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasNonXMLBodyText constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasNonXMLBodyText(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasNonXMLBodyText(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasTextReferenceOrRepresentation constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasTextReferenceOrRepresentation(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasTextReferenceOrRepresentation(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentHasTextMediaTypeValueSet constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentHasTextMediaTypeValueSet(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentHasTextMediaTypeValueSet(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentCode constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentCode(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentEffectiveTime constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentEffectiveTime(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentLanguageCode constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLanguageCode(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentLanguageCode(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentTitle constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTitle(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentTitle(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentTypeId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentTypeId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentTypeId(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentScanOriginalAuthor constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanOriginalAuthor(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentScanOriginalAuthor(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentScanningDevice constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanningDevice(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentScanningDevice(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentScanDataEnterer constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentScanDataEnterer(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentScanDataEnterer(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentLegalAuthenticator constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentLegalAuthenticator(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentLegalAuthenticator(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentDocumentationOf constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentDocumentationOf(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validateUnstructuredOrScannedDocumentCustodian constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateUnstructuredOrScannedDocumentCustodian(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateUnstructuredOrScannedDocumentCustodian(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>Unstructured Or Scanned Document</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateUnstructuredOrScannedDocument_validateGeneralHeaderConstraintsTemplateId(
			UnstructuredOrScannedDocument unstructuredOrScannedDocument, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return unstructuredOrScannedDocument.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferralSummary(ReferralSummary referralSummary, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(referralSummary, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferralSummary_validateGeneralHeaderConstraintsTemplateId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferralSummary_validateGeneralHeaderConstraintsCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(referralSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(referralSummary, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>Referral Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferralSummary_validateGeneralHeaderConstraintsTemplateId(ReferralSummary referralSummary,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return referralSummary.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Referral Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferralSummary_validateGeneralHeaderConstraintsCode(ReferralSummary referralSummary,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return referralSummary.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary(DischargeSummary dischargeSummary, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dischargeSummary, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateGeneralHeaderConstraintsTemplateId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateGeneralHeaderConstraintsCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalAdmissionMedicationsSectionEntriesOptional(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalAdmissionDiagnosisSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryAdvanceDirectivesSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryAllergiesSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalDischargeDiagnosisSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryDischargeDietSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalDischargeMedicationsSectionEntriesOptional(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryFunctionalStatusSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHistoryOfPresentIllnessSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalCourseSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryMedicalEquipmentSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryPhysicalExamSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryPlanOfCareSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHistoryOfPastIllnessSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryVitalSignsSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOf(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryChiefComplaintAndReasonForVisitSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryChiefComplaintSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryFamilyHistorySection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalConsultationsSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalDischargeInstructionsSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalDischargePhysicalSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryHospitalDischargeStudiesSummarySection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryImmunizationsSectionEntriesOptional(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryProblemSectionEntriesOptional(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryProceduresSectionEntriesOptional(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryReasonForVisitSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryReviewOfSystemsSection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummarySocialHistorySection(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntityHasPersonOrOrganization(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntity(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntityHasPersonOrOrganization(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntity(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EffectiveTime(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsibleParty(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipant(dischargeSummary, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter(dischargeSummary, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDischargeSummaryHospitalAdmissionMedicationsSectionEntriesOptional constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalAdmissionMedicationsSectionEntriesOptional(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalAdmissionMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalAdmissionDiagnosisSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalAdmissionDiagnosisSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalAdmissionDiagnosisSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryAdvanceDirectivesSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryAdvanceDirectivesSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryAdvanceDirectivesSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryAllergiesSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryAllergiesSection(DischargeSummary dischargeSummary,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryAllergiesSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalDischargeDiagnosisSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalDischargeDiagnosisSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalDischargeDiagnosisSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryDischargeDietSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryDischargeDietSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryDischargeDietSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalDischargeMedicationsSectionEntriesOptional constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalDischargeMedicationsSectionEntriesOptional(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalDischargeMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryFunctionalStatusSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryFunctionalStatusSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryFunctionalStatusSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHistoryOfPresentIllnessSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHistoryOfPresentIllnessSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHistoryOfPresentIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalCourseSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalCourseSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalCourseSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryMedicalEquipmentSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryMedicalEquipmentSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryMedicalEquipmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryPhysicalExamSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryPhysicalExamSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryPhysicalExamSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryPlanOfCareSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryPlanOfCareSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryPlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHistoryOfPastIllnessSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHistoryOfPastIllnessSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHistoryOfPastIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryVitalSignsSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryVitalSignsSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryVitalSignsSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOf constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOf(DischargeSummary dischargeSummary,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryChiefComplaintAndReasonForVisitSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryChiefComplaintAndReasonForVisitSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryChiefComplaintAndReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryChiefComplaintSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryChiefComplaintSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryChiefComplaintSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryFamilyHistorySection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryFamilyHistorySection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryFamilyHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalConsultationsSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalConsultationsSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalConsultationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalDischargeInstructionsSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalDischargeInstructionsSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalDischargeInstructionsSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalDischargePhysicalSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalDischargePhysicalSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalDischargePhysicalSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryHospitalDischargeStudiesSummarySection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryHospitalDischargeStudiesSummarySection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryHospitalDischargeStudiesSummarySection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryImmunizationsSectionEntriesOptional constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryImmunizationsSectionEntriesOptional(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryImmunizationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryProblemSectionEntriesOptional constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryProblemSectionEntriesOptional(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryProblemSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryProceduresSectionEntriesOptional constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryProceduresSectionEntriesOptional(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryProceduresSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryReasonForVisitSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryReasonForVisitSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryReviewOfSystemsSection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryReviewOfSystemsSection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryReviewOfSystemsSection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummarySocialHistorySection constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummarySocialHistorySection(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummarySocialHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntityHasPersonOrOrganization constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntityHasPersonOrOrganization(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntity constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntity(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3ResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntityHasPersonOrOrganization constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntityHasPersonOrOrganization(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntity constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntity(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EffectiveTime constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EffectiveTime(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3ResponsibleParty constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3ResponsibleParty(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipant constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipant(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter3EncounterParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeSummaryComponentOfEncompassingEncounter constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateDischargeSummaryComponentOfEncompassingEncounter(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateDischargeSummaryComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsTemplateId constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateGeneralHeaderConstraintsTemplateId(
			DischargeSummary dischargeSummary, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateGeneralHeaderConstraintsTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Discharge Summary</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_validateGeneralHeaderConstraintsCode(DischargeSummary dischargeSummary,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeSummary.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_ComponentOf(DischargeSummary_ComponentOf dischargeSummary_ComponentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dischargeSummary_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(dischargeSummary_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeSummary_ComponentOf_validateComponentOfEncompassingEncounter(dischargeSummary_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter constraint of '<em>Discharge Summary Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeSummary_ComponentOf_validateComponentOfEncompassingEncounter(
			DischargeSummary_ComponentOf dischargeSummary_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dischargeSummary_ComponentOf.validateComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter3, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EffectiveTime(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3ResponsibleParty(componentOf_EncompassingEncounter3, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncounterParticipant(componentOf_EncompassingEncounter3, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow constraint of '<em>Component Of Encompassing Encounter3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter3.validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeLow(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh constraint of '<em>Component Of Encompassing Encounter3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter3.validateEncompassingEncounter3EncompassingEncounterHasEffectiveTimeHigh(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter3EffectiveTime constraint of '<em>Component Of Encompassing Encounter3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EffectiveTime(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter3.validateEncompassingEncounter3EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter3ResponsibleParty constraint of '<em>Component Of Encompassing Encounter3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3ResponsibleParty(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter3.validateEncompassingEncounter3ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter3EncounterParticipant constraint of '<em>Component Of Encompassing Encounter3</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter3_validateEncompassingEncounter3EncounterParticipant(
			ComponentOf_EncompassingEncounter3 componentOf_EncompassingEncounter3, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter3.validateEncompassingEncounter3EncounterParticipant(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_ResponsibleParty(
			EncompassingEncounter3_ResponsibleParty encompassingEncounter3_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter3_ResponsibleParty, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateResponsibleParty_validateTypeCode(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter3_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrOrganization(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter3_ResponsibleParty_validateResponsiblePartyAssignedEntity(encompassingEncounter3_ResponsibleParty, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntityHasPersonOrOrganization constraint of '<em>Encompassing Encounter3 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrOrganization(
			EncompassingEncounter3_ResponsibleParty encompassingEncounter3_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter3_ResponsibleParty.validateResponsiblePartyAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntity constraint of '<em>Encompassing Encounter3 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_ResponsibleParty_validateResponsiblePartyAssignedEntity(
			EncompassingEncounter3_ResponsibleParty encompassingEncounter3_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter3_ResponsibleParty.validateResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_EncounterParticipant(
			EncompassingEncounter3_EncounterParticipant encompassingEncounter3_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter3_EncounterParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter3_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrOrganization(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter3_EncounterParticipant_validateEncounterParticipantAssignedEntity(encompassingEncounter3_EncounterParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntityHasPersonOrOrganization constraint of '<em>Encompassing Encounter3 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrOrganization(
			EncompassingEncounter3_EncounterParticipant encompassingEncounter3_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter3_EncounterParticipant.validateEncounterParticipantAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntity constraint of '<em>Encompassing Encounter3 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter3_EncounterParticipant_validateEncounterParticipantAssignedEntity(
			EncompassingEncounter3_EncounterParticipant encompassingEncounter3_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter3_EncounterParticipant.validateEncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeDiagnosisSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionTemplateId(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionCode(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionTitle(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionText(hospitalDischargeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionHospitalDischargeDiagnosis(hospitalDischargeDiagnosisSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisSectionTemplateId constraint of '<em>Hospital Discharge Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionTemplateId(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosisSection.validateHospitalDischargeDiagnosisSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisSectionCode constraint of '<em>Hospital Discharge Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionCode(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosisSection.validateHospitalDischargeDiagnosisSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisSectionTitle constraint of '<em>Hospital Discharge Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionTitle(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosisSection.validateHospitalDischargeDiagnosisSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisSectionText constraint of '<em>Hospital Discharge Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionText(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosisSection.validateHospitalDischargeDiagnosisSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisSectionHospitalDischargeDiagnosis constraint of '<em>Hospital Discharge Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosisSection_validateHospitalDischargeDiagnosisSectionHospitalDischargeDiagnosis(
			HospitalDischargeDiagnosisSection hospitalDischargeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosisSection.validateHospitalDischargeDiagnosisSectionHospitalDischargeDiagnosis(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis(HospitalDischargeDiagnosis hospitalDischargeDiagnosis,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeDiagnosis, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisProblemObservation(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisTemplateId(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisClassCode(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisMoodCode(hospitalDischargeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisCode(hospitalDischargeDiagnosis, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisProblemObservation constraint of '<em>Hospital Discharge Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisProblemObservation(
			HospitalDischargeDiagnosis hospitalDischargeDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosis.validateHospitalDischargeDiagnosisProblemObservation(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisTemplateId constraint of '<em>Hospital Discharge Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisTemplateId(
			HospitalDischargeDiagnosis hospitalDischargeDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosis.validateHospitalDischargeDiagnosisTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisClassCode constraint of '<em>Hospital Discharge Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisClassCode(
			HospitalDischargeDiagnosis hospitalDischargeDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosis.validateHospitalDischargeDiagnosisClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisMoodCode constraint of '<em>Hospital Discharge Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisMoodCode(
			HospitalDischargeDiagnosis hospitalDischargeDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosis.validateHospitalDischargeDiagnosisMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeDiagnosisCode constraint of '<em>Hospital Discharge Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeDiagnosis_validateHospitalDischargeDiagnosisCode(
			HospitalDischargeDiagnosis hospitalDischargeDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeDiagnosis.validateHospitalDischargeDiagnosisCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeDietSection(DischargeDietSection dischargeDietSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dischargeDietSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeDietSection_validateDischargeDietSectionTemplateId(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeDietSection_validateDischargeDietSectionCode(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeDietSection_validateDischargeDietSectionTitle(dischargeDietSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeDietSection_validateDischargeDietSectionText(dischargeDietSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDischargeDietSectionTemplateId constraint of '<em>Discharge Diet Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeDietSection_validateDischargeDietSectionTemplateId(
			DischargeDietSection dischargeDietSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeDietSection.validateDischargeDietSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeDietSectionCode constraint of '<em>Discharge Diet Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeDietSection_validateDischargeDietSectionCode(
			DischargeDietSection dischargeDietSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeDietSection.validateDischargeDietSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeDietSectionTitle constraint of '<em>Discharge Diet Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeDietSection_validateDischargeDietSectionTitle(
			DischargeDietSection dischargeDietSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeDietSection.validateDischargeDietSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeDietSectionText constraint of '<em>Discharge Diet Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeDietSection_validateDischargeDietSectionText(
			DischargeDietSection dischargeDietSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeDietSection.validateDischargeDietSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalCode(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalTitle(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalText(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalDischargeMedication(hospitalDischargeMedicationsSectionEntriesOptional, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Hospital Discharge Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalDischargeMedicationsSectionEntriesOptional.validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalCode constraint of '<em>Hospital Discharge Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalCode(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalDischargeMedicationsSectionEntriesOptional.validateHospitalDischargeMedicationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalTitle constraint of '<em>Hospital Discharge Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalTitle(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalDischargeMedicationsSectionEntriesOptional.validateHospitalDischargeMedicationsSectionEntriesOptionalTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalText constraint of '<em>Hospital Discharge Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalText(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalDischargeMedicationsSectionEntriesOptional.validateHospitalDischargeMedicationsSectionEntriesOptionalText(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalDischargeMedication constraint of '<em>Hospital Discharge Medications Section Entries Optional</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalDischargeMedication(
			HospitalDischargeMedicationsSectionEntriesOptional hospitalDischargeMedicationsSectionEntriesOptional,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalDischargeMedicationsSectionEntriesOptional.validateHospitalDischargeMedicationsSectionEntriesOptionalDischargeMedication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication(DischargeMedication dischargeMedication, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dischargeMedication, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeMedication_validateDischargeMedicationMedicationActivity(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeMedication_validateDischargeMedicationTemplateId(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeMedication_validateDischargeMedicationClassCode(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeMedication_validateDischargeMedicationMoodCode(dischargeMedication, diagnostics, context);
		if (result || diagnostics != null) result &= validateDischargeMedication_validateDischargeMedicationCode(dischargeMedication, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDischargeMedicationMedicationActivity constraint of '<em>Discharge Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication_validateDischargeMedicationMedicationActivity(
			DischargeMedication dischargeMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeMedication.validateDischargeMedicationMedicationActivity(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeMedicationTemplateId constraint of '<em>Discharge Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication_validateDischargeMedicationTemplateId(
			DischargeMedication dischargeMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeMedication.validateDischargeMedicationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeMedicationClassCode constraint of '<em>Discharge Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication_validateDischargeMedicationClassCode(
			DischargeMedication dischargeMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeMedication.validateDischargeMedicationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeMedicationMoodCode constraint of '<em>Discharge Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication_validateDischargeMedicationMoodCode(
			DischargeMedication dischargeMedication, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeMedication.validateDischargeMedicationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateDischargeMedicationCode constraint of '<em>Discharge Medication</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDischargeMedication_validateDischargeMedicationCode(DischargeMedication dischargeMedication,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return dischargeMedication.validateDischargeMedicationCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalCourseSection(HospitalCourseSection hospitalCourseSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalCourseSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalCourseSection_validateHospitalCourseSectionTemplateId(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalCourseSection_validateHospitalCourseSectionCode(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalCourseSection_validateHospitalCourseSectionTitle(hospitalCourseSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalCourseSection_validateHospitalCourseSectionText(hospitalCourseSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalCourseSectionTemplateId constraint of '<em>Hospital Course Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalCourseSection_validateHospitalCourseSectionTemplateId(
			HospitalCourseSection hospitalCourseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalCourseSection.validateHospitalCourseSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalCourseSectionCode constraint of '<em>Hospital Course Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalCourseSection_validateHospitalCourseSectionCode(
			HospitalCourseSection hospitalCourseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalCourseSection.validateHospitalCourseSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalCourseSectionTitle constraint of '<em>Hospital Course Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalCourseSection_validateHospitalCourseSectionTitle(
			HospitalCourseSection hospitalCourseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalCourseSection.validateHospitalCourseSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalCourseSectionText constraint of '<em>Hospital Course Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalCourseSection_validateHospitalCourseSectionText(
			HospitalCourseSection hospitalCourseSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return hospitalCourseSection.validateHospitalCourseSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintAndReasonForVisitSection(
			ChiefComplaintAndReasonForVisitSection chiefComplaintAndReasonForVisitSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(chiefComplaintAndReasonForVisitSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionTemplateId(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionCode(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionText(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionTitle(chiefComplaintAndReasonForVisitSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateChiefComplaintAndReasonForVisitSectionTemplateId constraint of '<em>Chief Complaint And Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionTemplateId(
			ChiefComplaintAndReasonForVisitSection chiefComplaintAndReasonForVisitSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return chiefComplaintAndReasonForVisitSection.validateChiefComplaintAndReasonForVisitSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintAndReasonForVisitSectionCode constraint of '<em>Chief Complaint And Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionCode(
			ChiefComplaintAndReasonForVisitSection chiefComplaintAndReasonForVisitSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return chiefComplaintAndReasonForVisitSection.validateChiefComplaintAndReasonForVisitSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintAndReasonForVisitSectionText constraint of '<em>Chief Complaint And Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionText(
			ChiefComplaintAndReasonForVisitSection chiefComplaintAndReasonForVisitSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return chiefComplaintAndReasonForVisitSection.validateChiefComplaintAndReasonForVisitSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateChiefComplaintAndReasonForVisitSectionTitle constraint of '<em>Chief Complaint And Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateChiefComplaintAndReasonForVisitSection_validateChiefComplaintAndReasonForVisitSectionTitle(
			ChiefComplaintAndReasonForVisitSection chiefComplaintAndReasonForVisitSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return chiefComplaintAndReasonForVisitSection.validateChiefComplaintAndReasonForVisitSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalConsultationsSection(HospitalConsultationsSection hospitalConsultationsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalConsultationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalConsultationsSection_validateHospitalConsultationsSectionTemplateId(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalConsultationsSection_validateHospitalConsultationsSectionCode(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalConsultationsSection_validateHospitalConsultationsSectionText(hospitalConsultationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalConsultationsSection_validateHospitalConsultationsSectionTitle(hospitalConsultationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalConsultationsSectionTemplateId constraint of '<em>Hospital Consultations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalConsultationsSection_validateHospitalConsultationsSectionTemplateId(
			HospitalConsultationsSection hospitalConsultationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalConsultationsSection.validateHospitalConsultationsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalConsultationsSectionCode constraint of '<em>Hospital Consultations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalConsultationsSection_validateHospitalConsultationsSectionCode(
			HospitalConsultationsSection hospitalConsultationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalConsultationsSection.validateHospitalConsultationsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalConsultationsSectionText constraint of '<em>Hospital Consultations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalConsultationsSection_validateHospitalConsultationsSectionText(
			HospitalConsultationsSection hospitalConsultationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalConsultationsSection.validateHospitalConsultationsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalConsultationsSectionTitle constraint of '<em>Hospital Consultations Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalConsultationsSection_validateHospitalConsultationsSectionTitle(
			HospitalConsultationsSection hospitalConsultationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalConsultationsSection.validateHospitalConsultationsSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeInstructionsSection(
			HospitalDischargeInstructionsSection hospitalDischargeInstructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeInstructionsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionTemplateId(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionCode(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionTitle(hospitalDischargeInstructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionText(hospitalDischargeInstructionsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeInstructionsSectionTemplateId constraint of '<em>Hospital Discharge Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionTemplateId(
			HospitalDischargeInstructionsSection hospitalDischargeInstructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeInstructionsSection.validateHospitalDischargeInstructionsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeInstructionsSectionCode constraint of '<em>Hospital Discharge Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionCode(
			HospitalDischargeInstructionsSection hospitalDischargeInstructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeInstructionsSection.validateHospitalDischargeInstructionsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeInstructionsSectionTitle constraint of '<em>Hospital Discharge Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionTitle(
			HospitalDischargeInstructionsSection hospitalDischargeInstructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeInstructionsSection.validateHospitalDischargeInstructionsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeInstructionsSectionText constraint of '<em>Hospital Discharge Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeInstructionsSection_validateHospitalDischargeInstructionsSectionText(
			HospitalDischargeInstructionsSection hospitalDischargeInstructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeInstructionsSection.validateHospitalDischargeInstructionsSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargePhysicalSection(
			HospitalDischargePhysicalSection hospitalDischargePhysicalSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargePhysicalSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionTemplateId(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionCode(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionTitle(hospitalDischargePhysicalSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionText(hospitalDischargePhysicalSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargePhysicalSectionTemplateId constraint of '<em>Hospital Discharge Physical Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionTemplateId(
			HospitalDischargePhysicalSection hospitalDischargePhysicalSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargePhysicalSection.validateHospitalDischargePhysicalSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargePhysicalSectionCode constraint of '<em>Hospital Discharge Physical Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionCode(
			HospitalDischargePhysicalSection hospitalDischargePhysicalSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargePhysicalSection.validateHospitalDischargePhysicalSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargePhysicalSectionTitle constraint of '<em>Hospital Discharge Physical Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionTitle(
			HospitalDischargePhysicalSection hospitalDischargePhysicalSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargePhysicalSection.validateHospitalDischargePhysicalSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargePhysicalSectionText constraint of '<em>Hospital Discharge Physical Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargePhysicalSection_validateHospitalDischargePhysicalSectionText(
			HospitalDischargePhysicalSection hospitalDischargePhysicalSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargePhysicalSection.validateHospitalDischargePhysicalSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeStudiesSummarySection(
			HospitalDischargeStudiesSummarySection hospitalDischargeStudiesSummarySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeStudiesSummarySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionTemplateId(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionCode(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionTitle(hospitalDischargeStudiesSummarySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionText(hospitalDischargeStudiesSummarySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeStudiesSummarySectionTemplateId constraint of '<em>Hospital Discharge Studies Summary Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionTemplateId(
			HospitalDischargeStudiesSummarySection hospitalDischargeStudiesSummarySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeStudiesSummarySection.validateHospitalDischargeStudiesSummarySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeStudiesSummarySectionCode constraint of '<em>Hospital Discharge Studies Summary Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionCode(
			HospitalDischargeStudiesSummarySection hospitalDischargeStudiesSummarySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeStudiesSummarySection.validateHospitalDischargeStudiesSummarySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeStudiesSummarySectionTitle constraint of '<em>Hospital Discharge Studies Summary Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionTitle(
			HospitalDischargeStudiesSummarySection hospitalDischargeStudiesSummarySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeStudiesSummarySection.validateHospitalDischargeStudiesSummarySectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeStudiesSummarySectionText constraint of '<em>Hospital Discharge Studies Summary Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeStudiesSummarySection_validateHospitalDischargeStudiesSummarySectionText(
			HospitalDischargeStudiesSummarySection hospitalDischargeStudiesSummarySection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeStudiesSummarySection.validateHospitalDischargeStudiesSummarySectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForVisitSection(ReasonForVisitSection reasonForVisitSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(reasonForVisitSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForVisitSection_validateReasonForVisitSectionTemplateId(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForVisitSection_validateReasonForVisitSectionCode(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForVisitSection_validateReasonForVisitSectionText(reasonForVisitSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateReasonForVisitSection_validateReasonForVisitSectionTitle(reasonForVisitSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReasonForVisitSectionTemplateId constraint of '<em>Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForVisitSection_validateReasonForVisitSectionTemplateId(
			ReasonForVisitSection reasonForVisitSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForVisitSection.validateReasonForVisitSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForVisitSectionCode constraint of '<em>Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForVisitSection_validateReasonForVisitSectionCode(
			ReasonForVisitSection reasonForVisitSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForVisitSection.validateReasonForVisitSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForVisitSectionText constraint of '<em>Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForVisitSection_validateReasonForVisitSectionText(
			ReasonForVisitSection reasonForVisitSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForVisitSection.validateReasonForVisitSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateReasonForVisitSectionTitle constraint of '<em>Reason For Visit Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReasonForVisitSection_validateReasonForVisitSectionTitle(
			ReasonForVisitSection reasonForVisitSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return reasonForVisitSection.validateReasonForVisitSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(preconditionForSubstanceAdministration, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePrecondition_validateTypeCode(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionCode(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionText(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionValue(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationTemplateId(preconditionForSubstanceAdministration, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterion(preconditionForSubstanceAdministration, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePreconditionForSubstanceAdministrationCriterionCode constraint of '<em>Precondition For Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionCode(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preconditionForSubstanceAdministration.validatePreconditionForSubstanceAdministrationCriterionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePreconditionForSubstanceAdministrationCriterionText constraint of '<em>Precondition For Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionText(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preconditionForSubstanceAdministration.validatePreconditionForSubstanceAdministrationCriterionText(diagnostics, context);
	}

	/**
	 * Validates the validatePreconditionForSubstanceAdministrationCriterionValue constraint of '<em>Precondition For Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterionValue(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preconditionForSubstanceAdministration.validatePreconditionForSubstanceAdministrationCriterionValue(diagnostics, context);
	}

	/**
	 * Validates the validatePreconditionForSubstanceAdministrationTemplateId constraint of '<em>Precondition For Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationTemplateId(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preconditionForSubstanceAdministration.validatePreconditionForSubstanceAdministrationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePreconditionForSubstanceAdministrationCriterion constraint of '<em>Precondition For Substance Administration</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreconditionForSubstanceAdministration_validatePreconditionForSubstanceAdministrationCriterion(
			PreconditionForSubstanceAdministration preconditionForSubstanceAdministration, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preconditionForSubstanceAdministration.validatePreconditionForSubstanceAdministrationCriterion(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationMedicationInformation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateManufacturedProduct_validateManufacturedDrugOrOtherMaterial(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateManufacturedProduct_validateClassCode(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformation_validateImmunizationMedicationInformationTemplateId(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformation_validateImmunizationMedicationInformationClassCode(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformation_validateImmunizationMedicationInformationId(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformation_validateImmunizationMedicationInformationManufacturerOrganization(immunizationMedicationInformation, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformation_validateImmunizationMedicationInformationManufacturedMaterial(immunizationMedicationInformation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationMedicationInformationTemplateId constraint of '<em>Immunization Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation_validateImmunizationMedicationInformationTemplateId(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationMedicationInformation.validateImmunizationMedicationInformationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationClassCode constraint of '<em>Immunization Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation_validateImmunizationMedicationInformationClassCode(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationMedicationInformation.validateImmunizationMedicationInformationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationId constraint of '<em>Immunization Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation_validateImmunizationMedicationInformationId(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationMedicationInformation.validateImmunizationMedicationInformationId(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturerOrganization constraint of '<em>Immunization Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation_validateImmunizationMedicationInformationManufacturerOrganization(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationMedicationInformation.validateImmunizationMedicationInformationManufacturerOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturedMaterial constraint of '<em>Immunization Medication Information</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformation_validateImmunizationMedicationInformationManufacturedMaterial(
			ImmunizationMedicationInformation immunizationMedicationInformation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return immunizationMedicationInformation.validateImmunizationMedicationInformationManufacturedMaterial(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimen(ProcedureSpecimen procedureSpecimen, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureSpecimen, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSpecimen_validateTypeCode(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimen_validateProcedureSpecimenSpecimenRole(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimen_validateProcedureSpecimenSpecimentRoleId(procedureSpecimen, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimen_validateProcedureSpecimenTemplateId(procedureSpecimen, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureSpecimenSpecimenRole constraint of '<em>Procedure Specimen</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimen_validateProcedureSpecimenSpecimenRole(ProcedureSpecimen procedureSpecimen,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureSpecimen.validateProcedureSpecimenSpecimenRole(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSpecimenSpecimentRoleId constraint of '<em>Procedure Specimen</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimen_validateProcedureSpecimenSpecimentRoleId(
			ProcedureSpecimen procedureSpecimen, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureSpecimen.validateProcedureSpecimenSpecimentRoleId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSpecimenTemplateId constraint of '<em>Procedure Specimen</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimen_validateProcedureSpecimenTemplateId(ProcedureSpecimen procedureSpecimen,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureSpecimen.validateProcedureSpecimenTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer(ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedurePerformer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerformer2_validateTypeCode(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntity(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityId(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityAddr(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityTelecom(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrg(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgId(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgName(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgAddr(procedurePerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgTelecom(procedurePerformer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntity constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntity(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityId constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityId(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityAddr constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityAddr(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityTelecom constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityTelecom(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityTelecom(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityRepOrg constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrg(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityRepOrg(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityRepOrgId constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgId(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityRepOrgId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityRepOrgName constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgName(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityRepOrgName(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityRepOrgAddr constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgAddr(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityRepOrgAddr(diagnostics, context);
	}

	/**
	 * Validates the validateProcedurePerformerAssignedEntityRepOrgTelecom constraint of '<em>Procedure Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedurePerformer_validateProcedurePerformerAssignedEntityRepOrgTelecom(
			ProcedurePerformer procedurePerformer, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedurePerformer.validateProcedurePerformerAssignedEntityRepOrgTelecom(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEncounter(ProcedureEncounter procedureEncounter, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureEncounter, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEncounter_validateProcedureEncounterClassCode(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEncounter_validateProcedureEncounterMoodCode(procedureEncounter, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEncounter_validateProcedureEncounterId(procedureEncounter, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureEncounterClassCode constraint of '<em>Procedure Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEncounter_validateProcedureEncounterClassCode(
			ProcedureEncounter procedureEncounter, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureEncounter.validateProcedureEncounterClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEncounterMoodCode constraint of '<em>Procedure Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEncounter_validateProcedureEncounterMoodCode(ProcedureEncounter procedureEncounter,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureEncounter.validateProcedureEncounterMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEncounterId constraint of '<em>Procedure Encounter</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEncounter_validateProcedureEncounterId(ProcedureEncounter procedureEncounter,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureEncounter.validateProcedureEncounterId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformationManufacturedMaterial(
			MedicationInformationManufacturedMaterial medicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationInformationManufacturedMaterial, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateMaterial_validateClassCode(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateMaterial_validateDeterminerCode(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCodeOriginalText(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialReference(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCodeTranslation(medicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCode(medicationInformationManufacturedMaterial, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationInformationManufacturedMaterialCodeOriginalText constraint of '<em>Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCodeOriginalText(
			MedicationInformationManufacturedMaterial medicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformationManufacturedMaterial.validateMedicationInformationManufacturedMaterialCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationManufacturedMaterialReference constraint of '<em>Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialReference(
			MedicationInformationManufacturedMaterial medicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformationManufacturedMaterial.validateMedicationInformationManufacturedMaterialReference(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationManufacturedMaterialCodeTranslation constraint of '<em>Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCodeTranslation(
			MedicationInformationManufacturedMaterial medicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformationManufacturedMaterial.validateMedicationInformationManufacturedMaterialCodeTranslation(diagnostics, context);
	}

	/**
	 * Validates the validateMedicationInformationManufacturedMaterialCode constraint of '<em>Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationInformationManufacturedMaterial_validateMedicationInformationManufacturedMaterialCode(
			MedicationInformationManufacturedMaterial medicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicationInformationManufacturedMaterial.validateMedicationInformationManufacturedMaterialCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject(FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(familyHistorySubject, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubject_validateTypeCode(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSubject_validateContextControlCode(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectClassCode(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectCode(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectCodeValueSet(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubject(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectAdmGenderCode(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectBirthTime(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedInd(familyHistorySubject, diagnostics, context);
		if (result || diagnostics != null) result &= validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedTime(familyHistorySubject, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectClassCode constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectClassCode(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectCode constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectCode(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectCodeValueSet constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectCodeValueSet(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectCodeValueSet(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectSubject constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubject(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectSubject(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectSubjectAdmGenderCode constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectAdmGenderCode(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectSubjectAdmGenderCode(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectSubjectBirthTime constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectBirthTime(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectSubjectBirthTime(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedInd constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedInd(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedInd(diagnostics, context);
	}

	/**
	 * Validates the validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedTime constraint of '<em>Family History Subject</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFamilyHistorySubject_validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedTime(
			FamilyHistorySubject familyHistorySubject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return familyHistorySubject.validateFamilyHistorySubjectRelatedSubjectSubjectDeceasedTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalDischargeMedicationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionEntriesOptionalCode(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalTitle(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalText(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSectionEntriesOptional_validateHospitalDischargeMedicationsSectionEntriesOptionalDischargeMedication(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionText(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionTitle(hospitalDischargeMedicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionDischargeMedication(hospitalDischargeMedicationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionText constraint of '<em>Hospital Discharge Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionText(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeMedicationsSection.validateHospitalDischargeMedicationsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionTitle constraint of '<em>Hospital Discharge Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionTitle(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeMedicationsSection.validateHospitalDischargeMedicationsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionDischargeMedication constraint of '<em>Hospital Discharge Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionDischargeMedication(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeMedicationsSection.validateHospitalDischargeMedicationsSectionDischargeMedication(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId constraint of '<em>Hospital Discharge Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeMedicationsSection.validateHospitalDischargeMedicationsSectionEntriesOptionalTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalDischargeMedicationsSectionEntriesOptionalCode constraint of '<em>Hospital Discharge Medications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalDischargeMedicationsSection_validateHospitalDischargeMedicationsSectionEntriesOptionalCode(
			HospitalDischargeMedicationsSection hospitalDischargeMedicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalDischargeMedicationsSection.validateHospitalDischargeMedicationsSectionEntriesOptionalCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRelatedInformant(RelatedInformant relatedInformant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(relatedInformant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validateRelatedInformant_validateRelatedInformantAddr(relatedInformant, diagnostics, context);
		if (result || diagnostics != null) result &= validateRelatedInformant_validateRelatedInformantCode(relatedInformant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateRelatedInformantAddr constraint of '<em>Related Informant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRelatedInformant_validateRelatedInformantAddr(RelatedInformant relatedInformant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return relatedInformant.validateRelatedInformantAddr(diagnostics, context);
	}

	/**
	 * Validates the validateRelatedInformantCode constraint of '<em>Related Informant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateRelatedInformant_validateRelatedInformantCode(RelatedInformant relatedInformant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return relatedInformant.validateRelatedInformantCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterPerformer(EncounterPerformer encounterPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encounterPerformer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encounterPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerformer2_validateTypeCode(encounterPerformer, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterPerformerAssignedEntity(
			EncounterPerformerAssignedEntity encounterPerformerAssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encounterPerformerAssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(encounterPerformerAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncounterPerformerAssignedEntity_validateEncounterPerformerAssignedEntityCode(encounterPerformerAssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterPerformerAssignedEntityCode constraint of '<em>Encounter Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncounterPerformerAssignedEntity_validateEncounterPerformerAssignedEntityCode(
			EncounterPerformerAssignedEntity encounterPerformerAssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encounterPerformerAssignedEntity.validateEncounterPerformerAssignedEntityCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationParticipant(AllergyObservationParticipant allergyObservationParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyObservationParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant2_validateContextControlCode(allergyObservationParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationParticipant_validateAllergyObservationParticipantParticipantRole(allergyObservationParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyObservationParticipantParticipantRole constraint of '<em>Allergy Observation Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationParticipant_validateAllergyObservationParticipantParticipantRole(
			AllergyObservationParticipant allergyObservationParticipant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationParticipant.validateAllergyObservationParticipantParticipantRole(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationParticipantRole(
			AllergyObservationParticipantRole allergyObservationParticipantRole, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyObservationParticipantRole, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipantRole_validatePlayingEntityChoice(allergyObservationParticipantRole, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationParticipantRole_validateAllergyObservationParticipantRolePlayingEntity(allergyObservationParticipantRole, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyObservationParticipantRolePlayingEntity constraint of '<em>Allergy Observation Participant Role</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationParticipantRole_validateAllergyObservationParticipantRolePlayingEntity(
			AllergyObservationParticipantRole allergyObservationParticipantRole, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationParticipantRole.validateAllergyObservationParticipantRolePlayingEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationPlayingEntity(
			AllergyObservationPlayingEntity allergyObservationPlayingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(allergyObservationPlayingEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePlayingEntity_validateDeterminerCode(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCodeOriginalText(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCodeTranslation(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityClassCode(allergyObservationPlayingEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCode(allergyObservationPlayingEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAllergyObservationPlayingEntityCodeOriginalText constraint of '<em>Allergy Observation Playing Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCodeOriginalText(
			AllergyObservationPlayingEntity allergyObservationPlayingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationPlayingEntity.validateAllergyObservationPlayingEntityCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationPlayingEntityCodeTranslation constraint of '<em>Allergy Observation Playing Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCodeTranslation(
			AllergyObservationPlayingEntity allergyObservationPlayingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationPlayingEntity.validateAllergyObservationPlayingEntityCodeTranslation(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationPlayingEntityClassCode constraint of '<em>Allergy Observation Playing Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityClassCode(
			AllergyObservationPlayingEntity allergyObservationPlayingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationPlayingEntity.validateAllergyObservationPlayingEntityClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateAllergyObservationPlayingEntityCode constraint of '<em>Allergy Observation Playing Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllergyObservationPlayingEntity_validateAllergyObservationPlayingEntityCode(
			AllergyObservationPlayingEntity allergyObservationPlayingEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return allergyObservationPlayingEntity.validateAllergyObservationPlayingEntityCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection(AnesthesiaSection anesthesiaSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(anesthesiaSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionTemplateId(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionCode(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionText(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionTitle(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionProcedureActivityProcedure(anesthesiaSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAnesthesiaSection_validateAnesthesiaSectionMedicationActivity(anesthesiaSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAnesthesiaSectionTemplateId constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionTemplateId(AnesthesiaSection anesthesiaSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAnesthesiaSectionCode constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionCode(AnesthesiaSection anesthesiaSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateAnesthesiaSectionText constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionText(AnesthesiaSection anesthesiaSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateAnesthesiaSectionTitle constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionTitle(AnesthesiaSection anesthesiaSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateAnesthesiaSectionProcedureActivityProcedure constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionProcedureActivityProcedure(
			AnesthesiaSection anesthesiaSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionProcedureActivityProcedure(diagnostics, context);
	}

	/**
	 * Validates the validateAnesthesiaSectionMedicationActivity constraint of '<em>Anesthesia Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAnesthesiaSection_validateAnesthesiaSectionMedicationActivity(
			AnesthesiaSection anesthesiaSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return anesthesiaSection.validateAnesthesiaSectionMedicationActivity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplicationsSection(ComplicationsSection complicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(complicationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(complicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateComplicationsSection_validateComplicationsSectionTemplateId(complicationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComplicationsSectionTemplateId constraint of '<em>Complications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComplicationsSection_validateComplicationsSectionTemplateId(
			ComplicationsSection complicationsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return complicationsSection.validateComplicationsSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDICOMObjectCatalogSection(DICOMObjectCatalogSection dicomObjectCatalogSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(dicomObjectCatalogSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionTemplateId(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionCode(dicomObjectCatalogSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionStudyAct(dicomObjectCatalogSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDICOMObjectCatalogSectionTemplateId constraint of '<em>DICOM Object Catalog Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionTemplateId(
			DICOMObjectCatalogSection dicomObjectCatalogSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dicomObjectCatalogSection.validateDICOMObjectCatalogSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDICOMObjectCatalogSectionCode constraint of '<em>DICOM Object Catalog Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionCode(
			DICOMObjectCatalogSection dicomObjectCatalogSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dicomObjectCatalogSection.validateDICOMObjectCatalogSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateDICOMObjectCatalogSectionStudyAct constraint of '<em>DICOM Object Catalog Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDICOMObjectCatalogSection_validateDICOMObjectCatalogSectionStudyAct(
			DICOMObjectCatalogSection dicomObjectCatalogSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return dicomObjectCatalogSection.validateDICOMObjectCatalogSectionStudyAct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct(StudyAct studyAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(studyAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActTemplateId(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActClassCode(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActMoodCode(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActId(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActCode(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActEffectiveTime(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActText(studyAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateStudyAct_validateStudyActSeriesAct(studyAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateStudyActTemplateId constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActTemplateId(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActClassCode constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActClassCode(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActMoodCode constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActMoodCode(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActId constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActId(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActId(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActCode constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActCode(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActCode(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActEffectiveTime constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActEffectiveTime(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActText constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActText(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActText(diagnostics, context);
	}

	/**
	 * Validates the validateStudyActSeriesAct constraint of '<em>Study Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateStudyAct_validateStudyActSeriesAct(StudyAct studyAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return studyAct.validateStudyActSeriesAct(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct(SeriesAct seriesAct, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(seriesAct, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActTemplateId(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActClassCode(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActMoodCode(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActCode(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActEffectiveTime(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActId(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActText(seriesAct, diagnostics, context);
		if (result || diagnostics != null) result &= validateSeriesAct_validateSeriesActSOPInstanceObservation(seriesAct, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSeriesActTemplateId constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActTemplateId(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActClassCode constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActClassCode(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActMoodCode constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActMoodCode(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActCode constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActCode(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActCode(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActEffectiveTime constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActEffectiveTime(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActId constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActId(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActId(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActText constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActText(SeriesAct seriesAct, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return seriesAct.validateSeriesActText(diagnostics, context);
	}

	/**
	 * Validates the validateSeriesActSOPInstanceObservation constraint of '<em>Series Act</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSeriesAct_validateSeriesActSOPInstanceObservation(SeriesAct seriesAct,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return seriesAct.validateSeriesActSOPInstanceObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation(SOPInstanceObservation sopInstanceObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(sopInstanceObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationTemplateId(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationClassCode(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationEffectiveTime(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationId(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationMoodCode(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationText(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationSOPInstanceObservation(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationPurposeofReferenceObservation(sopInstanceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateSOPInstanceObservation_validateSOPInstanceObservationReferencedFramesObservation(sopInstanceObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSOPInstanceObservationTemplateId constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationTemplateId(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationClassCode constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationClassCode(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationEffectiveTime constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationEffectiveTime(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationId constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationId(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationId(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationMoodCode constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationMoodCode(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationText constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationText(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationText(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationSOPInstanceObservation constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationSOPInstanceObservation(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationSOPInstanceObservation(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationPurposeofReferenceObservation constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationPurposeofReferenceObservation(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationPurposeofReferenceObservation(diagnostics, context);
	}

	/**
	 * Validates the validateSOPInstanceObservationReferencedFramesObservation constraint of '<em>SOP Instance Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSOPInstanceObservation_validateSOPInstanceObservationReferencedFramesObservation(
			SOPInstanceObservation sopInstanceObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return sopInstanceObservation.validateSOPInstanceObservationReferencedFramesObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation(PurposeofReferenceObservation purposeofReferenceObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(purposeofReferenceObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeofReferenceObservation_validatePurposeofReferenceObservationTemplateId(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeofReferenceObservation_validatePurposeofReferenceObservationClassCode(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeofReferenceObservation_validatePurposeofReferenceObservationCode(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeofReferenceObservation_validatePurposeofReferenceObservationMoodCode(purposeofReferenceObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validatePurposeofReferenceObservation_validatePurposeofReferenceObservationValue(purposeofReferenceObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePurposeofReferenceObservationTemplateId constraint of '<em>Purposeof Reference Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation_validatePurposeofReferenceObservationTemplateId(
			PurposeofReferenceObservation purposeofReferenceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return purposeofReferenceObservation.validatePurposeofReferenceObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeofReferenceObservationClassCode constraint of '<em>Purposeof Reference Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation_validatePurposeofReferenceObservationClassCode(
			PurposeofReferenceObservation purposeofReferenceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return purposeofReferenceObservation.validatePurposeofReferenceObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeofReferenceObservationCode constraint of '<em>Purposeof Reference Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation_validatePurposeofReferenceObservationCode(
			PurposeofReferenceObservation purposeofReferenceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return purposeofReferenceObservation.validatePurposeofReferenceObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeofReferenceObservationMoodCode constraint of '<em>Purposeof Reference Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation_validatePurposeofReferenceObservationMoodCode(
			PurposeofReferenceObservation purposeofReferenceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return purposeofReferenceObservation.validatePurposeofReferenceObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePurposeofReferenceObservationValue constraint of '<em>Purposeof Reference Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePurposeofReferenceObservation_validatePurposeofReferenceObservationValue(
			PurposeofReferenceObservation purposeofReferenceObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return purposeofReferenceObservation.validatePurposeofReferenceObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation(ReferencedFramesObservation referencedFramesObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(referencedFramesObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferencedFramesObservation_validateReferencedFramesObservationTemplateId(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferencedFramesObservation_validateReferencedFramesObservationClassCode(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferencedFramesObservation_validateReferencedFramesObservationCode(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferencedFramesObservation_validateReferencedFramesObservationMoodCode(referencedFramesObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateReferencedFramesObservation_validateReferencedFramesObservationBoundaryObservation(referencedFramesObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateReferencedFramesObservationTemplateId constraint of '<em>Referenced Frames Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation_validateReferencedFramesObservationTemplateId(
			ReferencedFramesObservation referencedFramesObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return referencedFramesObservation.validateReferencedFramesObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateReferencedFramesObservationClassCode constraint of '<em>Referenced Frames Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation_validateReferencedFramesObservationClassCode(
			ReferencedFramesObservation referencedFramesObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return referencedFramesObservation.validateReferencedFramesObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateReferencedFramesObservationCode constraint of '<em>Referenced Frames Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation_validateReferencedFramesObservationCode(
			ReferencedFramesObservation referencedFramesObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return referencedFramesObservation.validateReferencedFramesObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateReferencedFramesObservationMoodCode constraint of '<em>Referenced Frames Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation_validateReferencedFramesObservationMoodCode(
			ReferencedFramesObservation referencedFramesObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return referencedFramesObservation.validateReferencedFramesObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateReferencedFramesObservationBoundaryObservation constraint of '<em>Referenced Frames Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateReferencedFramesObservation_validateReferencedFramesObservationBoundaryObservation(
			ReferencedFramesObservation referencedFramesObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return referencedFramesObservation.validateReferencedFramesObservationBoundaryObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation(BoundaryObservation boundaryObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(boundaryObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateBoundaryObservation_validateBoundaryObservationTemplateId(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateBoundaryObservation_validateBoundaryObservationClassCode(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateBoundaryObservation_validateBoundaryObservationCode(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateBoundaryObservation_validateBoundaryObservationMoodCode(boundaryObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateBoundaryObservation_validateBoundaryObservationValue(boundaryObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateBoundaryObservationTemplateId constraint of '<em>Boundary Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation_validateBoundaryObservationTemplateId(
			BoundaryObservation boundaryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return boundaryObservation.validateBoundaryObservationTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateBoundaryObservationClassCode constraint of '<em>Boundary Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation_validateBoundaryObservationClassCode(
			BoundaryObservation boundaryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return boundaryObservation.validateBoundaryObservationClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateBoundaryObservationCode constraint of '<em>Boundary Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation_validateBoundaryObservationCode(BoundaryObservation boundaryObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return boundaryObservation.validateBoundaryObservationCode(diagnostics, context);
	}

	/**
	 * Validates the validateBoundaryObservationMoodCode constraint of '<em>Boundary Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation_validateBoundaryObservationMoodCode(
			BoundaryObservation boundaryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return boundaryObservation.validateBoundaryObservationMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateBoundaryObservationValue constraint of '<em>Boundary Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateBoundaryObservation_validateBoundaryObservationValue(
			BoundaryObservation boundaryObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return boundaryObservation.validateBoundaryObservationValue(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFindingsSection(FindingsSection findingsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(findingsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(findingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateFindingsSection_validateFindingsSectionTemplateId(findingsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateFindingsSectionTemplateId constraint of '<em>Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateFindingsSection_validateFindingsSectionTemplateId(FindingsSection findingsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return findingsSection.validateFindingsSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInterventionsSection(InterventionsSection interventionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(interventionsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInterventionsSection_validateInterventionsSectionTemplateId(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInterventionsSection_validateInterventionsSectionCode(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInterventionsSection_validateInterventionsSectionText(interventionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInterventionsSection_validateInterventionsSectionTitle(interventionsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInterventionsSectionTemplateId constraint of '<em>Interventions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInterventionsSection_validateInterventionsSectionTemplateId(
			InterventionsSection interventionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return interventionsSection.validateInterventionsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateInterventionsSectionCode constraint of '<em>Interventions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInterventionsSection_validateInterventionsSectionCode(
			InterventionsSection interventionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return interventionsSection.validateInterventionsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateInterventionsSectionText constraint of '<em>Interventions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInterventionsSection_validateInterventionsSectionText(
			InterventionsSection interventionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return interventionsSection.validateInterventionsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateInterventionsSectionTitle constraint of '<em>Interventions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInterventionsSection_validateInterventionsSectionTitle(
			InterventionsSection interventionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return interventionsSection.validateInterventionsSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalHistorySection(MedicalHistorySection medicalHistorySection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicalHistorySection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalHistorySection_validateMedicalHistorySectionTemplateId(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalHistorySection_validateMedicalHistorySectionCode(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalHistorySection_validateMedicalHistorySectionText(medicalHistorySection, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicalHistorySection_validateMedicalHistorySectionTitle(medicalHistorySection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicalHistorySectionTemplateId constraint of '<em>Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalHistorySection_validateMedicalHistorySectionTemplateId(
			MedicalHistorySection medicalHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalHistorySection.validateMedicalHistorySectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalHistorySectionCode constraint of '<em>Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalHistorySection_validateMedicalHistorySectionCode(
			MedicalHistorySection medicalHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalHistorySection.validateMedicalHistorySectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalHistorySectionText constraint of '<em>Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalHistorySection_validateMedicalHistorySectionText(
			MedicalHistorySection medicalHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalHistorySection.validateMedicalHistorySectionText(diagnostics, context);
	}

	/**
	 * Validates the validateMedicalHistorySectionTitle constraint of '<em>Medical History Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicalHistorySection_validateMedicalHistorySectionTitle(
			MedicalHistorySection medicalHistorySection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return medicalHistorySection.validateMedicalHistorySectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateObjectiveSection(ObjectiveSection objectiveSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(objectiveSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateObjectiveSection_validateObjectiveSectionTemplateId(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateObjectiveSection_validateObjectiveSectionCode(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateObjectiveSection_validateObjectiveSectionText(objectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateObjectiveSection_validateObjectiveSectionTitle(objectiveSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateObjectiveSectionTemplateId constraint of '<em>Objective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateObjectiveSection_validateObjectiveSectionTemplateId(ObjectiveSection objectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return objectiveSection.validateObjectiveSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateObjectiveSectionCode constraint of '<em>Objective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateObjectiveSection_validateObjectiveSectionCode(ObjectiveSection objectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return objectiveSection.validateObjectiveSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateObjectiveSectionText constraint of '<em>Objective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateObjectiveSection_validateObjectiveSectionText(ObjectiveSection objectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return objectiveSection.validateObjectiveSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateObjectiveSectionTitle constraint of '<em>Objective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateObjectiveSection_validateObjectiveSectionTitle(ObjectiveSection objectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return objectiveSection.validateObjectiveSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteFluidSection(OperativeNoteFluidSection operativeNoteFluidSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(operativeNoteFluidSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionTemplateId(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionCode(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionText(operativeNoteFluidSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionTitle(operativeNoteFluidSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOperativeNoteFluidSectionTemplateId constraint of '<em>Operative Note Fluid Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionTemplateId(
			OperativeNoteFluidSection operativeNoteFluidSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteFluidSection.validateOperativeNoteFluidSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteFluidSectionCode constraint of '<em>Operative Note Fluid Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionCode(
			OperativeNoteFluidSection operativeNoteFluidSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteFluidSection.validateOperativeNoteFluidSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteFluidSectionText constraint of '<em>Operative Note Fluid Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionText(
			OperativeNoteFluidSection operativeNoteFluidSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteFluidSection.validateOperativeNoteFluidSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteFluidSectionTitle constraint of '<em>Operative Note Fluid Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteFluidSection_validateOperativeNoteFluidSectionTitle(
			OperativeNoteFluidSection operativeNoteFluidSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteFluidSection.validateOperativeNoteFluidSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteSurgicalProcedureSection(
			OperativeNoteSurgicalProcedureSection operativeNoteSurgicalProcedureSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(operativeNoteSurgicalProcedureSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionTemplateId(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionCode(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionText(operativeNoteSurgicalProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionTitle(operativeNoteSurgicalProcedureSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOperativeNoteSurgicalProcedureSectionTemplateId constraint of '<em>Operative Note Surgical Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionTemplateId(
			OperativeNoteSurgicalProcedureSection operativeNoteSurgicalProcedureSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteSurgicalProcedureSection.validateOperativeNoteSurgicalProcedureSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteSurgicalProcedureSectionCode constraint of '<em>Operative Note Surgical Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionCode(
			OperativeNoteSurgicalProcedureSection operativeNoteSurgicalProcedureSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteSurgicalProcedureSection.validateOperativeNoteSurgicalProcedureSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteSurgicalProcedureSectionText constraint of '<em>Operative Note Surgical Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionText(
			OperativeNoteSurgicalProcedureSection operativeNoteSurgicalProcedureSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteSurgicalProcedureSection.validateOperativeNoteSurgicalProcedureSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteSurgicalProcedureSectionTitle constraint of '<em>Operative Note Surgical Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNoteSurgicalProcedureSection_validateOperativeNoteSurgicalProcedureSectionTitle(
			OperativeNoteSurgicalProcedureSection operativeNoteSurgicalProcedureSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNoteSurgicalProcedureSection.validateOperativeNoteSurgicalProcedureSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection(PlannedProcedureSection plannedProcedureSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(plannedProcedureSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlannedProcedureSection_validatePlannedProcedureSectionTemplateId(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlannedProcedureSection_validatePlannedProcedureSectionCode(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlannedProcedureSection_validatePlannedProcedureSectionText(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlannedProcedureSection_validatePlannedProcedureSectionTitle(plannedProcedureSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePlannedProcedureSection_validatePlannedProcedureSectionPlanOfCareActivityProcedure(plannedProcedureSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePlannedProcedureSectionTemplateId constraint of '<em>Planned Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection_validatePlannedProcedureSectionTemplateId(
			PlannedProcedureSection plannedProcedureSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return plannedProcedureSection.validatePlannedProcedureSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePlannedProcedureSectionCode constraint of '<em>Planned Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection_validatePlannedProcedureSectionCode(
			PlannedProcedureSection plannedProcedureSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return plannedProcedureSection.validatePlannedProcedureSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePlannedProcedureSectionText constraint of '<em>Planned Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection_validatePlannedProcedureSectionText(
			PlannedProcedureSection plannedProcedureSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return plannedProcedureSection.validatePlannedProcedureSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePlannedProcedureSectionTitle constraint of '<em>Planned Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection_validatePlannedProcedureSectionTitle(
			PlannedProcedureSection plannedProcedureSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return plannedProcedureSection.validatePlannedProcedureSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePlannedProcedureSectionPlanOfCareActivityProcedure constraint of '<em>Planned Procedure Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePlannedProcedureSection_validatePlannedProcedureSectionPlanOfCareActivityProcedure(
			PlannedProcedureSection plannedProcedureSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return plannedProcedureSection.validatePlannedProcedureSectionPlanOfCareActivityProcedure(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostoperativeDiagnosisSection(PostoperativeDiagnosisSection postoperativeDiagnosisSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(postoperativeDiagnosisSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionTemplateId(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionCode(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionText(postoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionTitle(postoperativeDiagnosisSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePostoperativeDiagnosisSectionTemplateId constraint of '<em>Postoperative Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionTemplateId(
			PostoperativeDiagnosisSection postoperativeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postoperativeDiagnosisSection.validatePostoperativeDiagnosisSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePostoperativeDiagnosisSectionCode constraint of '<em>Postoperative Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionCode(
			PostoperativeDiagnosisSection postoperativeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postoperativeDiagnosisSection.validatePostoperativeDiagnosisSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePostoperativeDiagnosisSectionText constraint of '<em>Postoperative Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionText(
			PostoperativeDiagnosisSection postoperativeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postoperativeDiagnosisSection.validatePostoperativeDiagnosisSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePostoperativeDiagnosisSectionTitle constraint of '<em>Postoperative Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostoperativeDiagnosisSection_validatePostoperativeDiagnosisSectionTitle(
			PostoperativeDiagnosisSection postoperativeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postoperativeDiagnosisSection.validatePostoperativeDiagnosisSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection(PostprocedureDiagnosisSection postprocedureDiagnosisSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(postprocedureDiagnosisSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionTemplateId(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionCode(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionText(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionTitle(postprocedureDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionPostprocedureDiagnosis(postprocedureDiagnosisSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePostprocedureDiagnosisSectionTemplateId constraint of '<em>Postprocedure Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionTemplateId(
			PostprocedureDiagnosisSection postprocedureDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postprocedureDiagnosisSection.validatePostprocedureDiagnosisSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisSectionCode constraint of '<em>Postprocedure Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionCode(
			PostprocedureDiagnosisSection postprocedureDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postprocedureDiagnosisSection.validatePostprocedureDiagnosisSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisSectionText constraint of '<em>Postprocedure Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionText(
			PostprocedureDiagnosisSection postprocedureDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postprocedureDiagnosisSection.validatePostprocedureDiagnosisSectionText(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisSectionTitle constraint of '<em>Postprocedure Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionTitle(
			PostprocedureDiagnosisSection postprocedureDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postprocedureDiagnosisSection.validatePostprocedureDiagnosisSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisSectionPostprocedureDiagnosis constraint of '<em>Postprocedure Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosisSection_validatePostprocedureDiagnosisSectionPostprocedureDiagnosis(
			PostprocedureDiagnosisSection postprocedureDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return postprocedureDiagnosisSection.validatePostprocedureDiagnosisSectionPostprocedureDiagnosis(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis(PostprocedureDiagnosis postprocedureDiagnosis,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(postprocedureDiagnosis, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosis_validatePostprocedureDiagnosisTemplateId(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosis_validatePostprocedureDiagnosisClassCode(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosis_validatePostprocedureDiagnosisCode(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosis_validatePostprocedureDiagnosisMoodCode(postprocedureDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePostprocedureDiagnosis_validatePostprocedureDiagnosisProblemObservation(postprocedureDiagnosis, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePostprocedureDiagnosisTemplateId constraint of '<em>Postprocedure Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis_validatePostprocedureDiagnosisTemplateId(
			PostprocedureDiagnosis postprocedureDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return postprocedureDiagnosis.validatePostprocedureDiagnosisTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisClassCode constraint of '<em>Postprocedure Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis_validatePostprocedureDiagnosisClassCode(
			PostprocedureDiagnosis postprocedureDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return postprocedureDiagnosis.validatePostprocedureDiagnosisClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisCode constraint of '<em>Postprocedure Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis_validatePostprocedureDiagnosisCode(
			PostprocedureDiagnosis postprocedureDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return postprocedureDiagnosis.validatePostprocedureDiagnosisCode(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisMoodCode constraint of '<em>Postprocedure Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis_validatePostprocedureDiagnosisMoodCode(
			PostprocedureDiagnosis postprocedureDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return postprocedureDiagnosis.validatePostprocedureDiagnosisMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePostprocedureDiagnosisProblemObservation constraint of '<em>Postprocedure Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePostprocedureDiagnosis_validatePostprocedureDiagnosisProblemObservation(
			PostprocedureDiagnosis postprocedureDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return postprocedureDiagnosis.validatePostprocedureDiagnosisProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosisSection(PreoperativeDiagnosisSection preoperativeDiagnosisSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(preoperativeDiagnosisSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(preoperativeDiagnosisSection, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosisSection_validatePreoperativeDiagnosisSectionTemplateId(preoperativeDiagnosisSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePreoperativeDiagnosisSectionTemplateId constraint of '<em>Preoperative Diagnosis Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosisSection_validatePreoperativeDiagnosisSectionTemplateId(
			PreoperativeDiagnosisSection preoperativeDiagnosisSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return preoperativeDiagnosisSection.validatePreoperativeDiagnosisSectionTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDescriptionSection(ProcedureDescriptionSection procedureDescriptionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureDescriptionSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDescriptionSection_validateProcedureDescriptionSectionTemplateId(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDescriptionSection_validateProcedureDescriptionSectionCode(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDescriptionSection_validateProcedureDescriptionSectionText(procedureDescriptionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDescriptionSection_validateProcedureDescriptionSectionTitle(procedureDescriptionSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureDescriptionSectionTemplateId constraint of '<em>Procedure Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDescriptionSection_validateProcedureDescriptionSectionTemplateId(
			ProcedureDescriptionSection procedureDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDescriptionSection.validateProcedureDescriptionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDescriptionSectionCode constraint of '<em>Procedure Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDescriptionSection_validateProcedureDescriptionSectionCode(
			ProcedureDescriptionSection procedureDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDescriptionSection.validateProcedureDescriptionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDescriptionSectionText constraint of '<em>Procedure Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDescriptionSection_validateProcedureDescriptionSectionText(
			ProcedureDescriptionSection procedureDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDescriptionSection.validateProcedureDescriptionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDescriptionSectionTitle constraint of '<em>Procedure Description Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDescriptionSection_validateProcedureDescriptionSectionTitle(
			ProcedureDescriptionSection procedureDescriptionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDescriptionSection.validateProcedureDescriptionSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDispositionSection(ProcedureDispositionSection procedureDispositionSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureDispositionSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDispositionSection_validateProcedureDispositionSectionTemplateId(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDispositionSection_validateProcedureDispositionSectionCode(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDispositionSection_validateProcedureDispositionSectionText(procedureDispositionSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureDispositionSection_validateProcedureDispositionSectionTitle(procedureDispositionSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureDispositionSectionTemplateId constraint of '<em>Procedure Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDispositionSection_validateProcedureDispositionSectionTemplateId(
			ProcedureDispositionSection procedureDispositionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDispositionSection.validateProcedureDispositionSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDispositionSectionCode constraint of '<em>Procedure Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDispositionSection_validateProcedureDispositionSectionCode(
			ProcedureDispositionSection procedureDispositionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDispositionSection.validateProcedureDispositionSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDispositionSectionText constraint of '<em>Procedure Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDispositionSection_validateProcedureDispositionSectionText(
			ProcedureDispositionSection procedureDispositionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDispositionSection.validateProcedureDispositionSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureDispositionSectionTitle constraint of '<em>Procedure Disposition Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureDispositionSection_validateProcedureDispositionSectionTitle(
			ProcedureDispositionSection procedureDispositionSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureDispositionSection.validateProcedureDispositionSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEstimatedBloodLossSection(
			ProcedureEstimatedBloodLossSection procedureEstimatedBloodLossSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureEstimatedBloodLossSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionTemplateId(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionCode(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionText(procedureEstimatedBloodLossSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionTitle(procedureEstimatedBloodLossSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureEstimatedBloodLossSectionTemplateId constraint of '<em>Procedure Estimated Blood Loss Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionTemplateId(
			ProcedureEstimatedBloodLossSection procedureEstimatedBloodLossSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureEstimatedBloodLossSection.validateProcedureEstimatedBloodLossSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEstimatedBloodLossSectionCode constraint of '<em>Procedure Estimated Blood Loss Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionCode(
			ProcedureEstimatedBloodLossSection procedureEstimatedBloodLossSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureEstimatedBloodLossSection.validateProcedureEstimatedBloodLossSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEstimatedBloodLossSectionText constraint of '<em>Procedure Estimated Blood Loss Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionText(
			ProcedureEstimatedBloodLossSection procedureEstimatedBloodLossSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureEstimatedBloodLossSection.validateProcedureEstimatedBloodLossSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureEstimatedBloodLossSectionTitle constraint of '<em>Procedure Estimated Blood Loss Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureEstimatedBloodLossSection_validateProcedureEstimatedBloodLossSectionTitle(
			ProcedureEstimatedBloodLossSection procedureEstimatedBloodLossSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureEstimatedBloodLossSection.validateProcedureEstimatedBloodLossSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection(ProcedureFindingsSection procedureFindingsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureFindingsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureFindingsSection_validateProcedureFindingsSectionTemplateId(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureFindingsSection_validateProcedureFindingsSectionCode(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureFindingsSection_validateProcedureFindingsSectionText(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureFindingsSection_validateProcedureFindingsSectionTitle(procedureFindingsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureFindingsSection_validateProcedureFindingsSectionProblemObservation(procedureFindingsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureFindingsSectionTemplateId constraint of '<em>Procedure Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection_validateProcedureFindingsSectionTemplateId(
			ProcedureFindingsSection procedureFindingsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureFindingsSection.validateProcedureFindingsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureFindingsSectionCode constraint of '<em>Procedure Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection_validateProcedureFindingsSectionCode(
			ProcedureFindingsSection procedureFindingsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureFindingsSection.validateProcedureFindingsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureFindingsSectionText constraint of '<em>Procedure Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection_validateProcedureFindingsSectionText(
			ProcedureFindingsSection procedureFindingsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureFindingsSection.validateProcedureFindingsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureFindingsSectionTitle constraint of '<em>Procedure Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection_validateProcedureFindingsSectionTitle(
			ProcedureFindingsSection procedureFindingsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureFindingsSection.validateProcedureFindingsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureFindingsSectionProblemObservation constraint of '<em>Procedure Findings Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureFindingsSection_validateProcedureFindingsSectionProblemObservation(
			ProcedureFindingsSection procedureFindingsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureFindingsSection.validateProcedureFindingsSectionProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureImplantsSection(ProcedureImplantsSection procedureImplantsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureImplantsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureImplantsSection_validateProcedureImplantsSectionTemplateId(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureImplantsSection_validateProcedureImplantsSectionCode(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureImplantsSection_validateProcedureImplantsSectionText(procedureImplantsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureImplantsSection_validateProcedureImplantsSectionTitle(procedureImplantsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureImplantsSectionTemplateId constraint of '<em>Procedure Implants Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureImplantsSection_validateProcedureImplantsSectionTemplateId(
			ProcedureImplantsSection procedureImplantsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureImplantsSection.validateProcedureImplantsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureImplantsSectionCode constraint of '<em>Procedure Implants Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureImplantsSection_validateProcedureImplantsSectionCode(
			ProcedureImplantsSection procedureImplantsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureImplantsSection.validateProcedureImplantsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureImplantsSectionText constraint of '<em>Procedure Implants Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureImplantsSection_validateProcedureImplantsSectionText(
			ProcedureImplantsSection procedureImplantsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureImplantsSection.validateProcedureImplantsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureImplantsSectionTitle constraint of '<em>Procedure Implants Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureImplantsSection_validateProcedureImplantsSectionTitle(
			ProcedureImplantsSection procedureImplantsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureImplantsSection.validateProcedureImplantsSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection(ProcedureIndicationsSection procedureIndicationsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureIndicationsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureIndicationsSection_validateProcedureIndicationsSectionTemplateId(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureIndicationsSection_validateProcedureIndicationsSectionCode(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureIndicationsSection_validateProcedureIndicationsSectionText(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureIndicationsSection_validateProcedureIndicationsSectionTitle(procedureIndicationsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureIndicationsSection_validateProcedureIndicationsSectionIndication(procedureIndicationsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureIndicationsSectionTemplateId constraint of '<em>Procedure Indications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection_validateProcedureIndicationsSectionTemplateId(
			ProcedureIndicationsSection procedureIndicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureIndicationsSection.validateProcedureIndicationsSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureIndicationsSectionCode constraint of '<em>Procedure Indications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection_validateProcedureIndicationsSectionCode(
			ProcedureIndicationsSection procedureIndicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureIndicationsSection.validateProcedureIndicationsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureIndicationsSectionText constraint of '<em>Procedure Indications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection_validateProcedureIndicationsSectionText(
			ProcedureIndicationsSection procedureIndicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureIndicationsSection.validateProcedureIndicationsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureIndicationsSectionTitle constraint of '<em>Procedure Indications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection_validateProcedureIndicationsSectionTitle(
			ProcedureIndicationsSection procedureIndicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureIndicationsSection.validateProcedureIndicationsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureIndicationsSectionIndication constraint of '<em>Procedure Indications Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureIndicationsSection_validateProcedureIndicationsSectionIndication(
			ProcedureIndicationsSection procedureIndicationsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureIndicationsSection.validateProcedureIndicationsSectionIndication(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimensTakenSection(
			ProcedureSpecimensTakenSection procedureSpecimensTakenSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureSpecimensTakenSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionTemplateId(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionCode(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionText(procedureSpecimensTakenSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionTitle(procedureSpecimensTakenSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureSpecimensTakenSectionTemplateId constraint of '<em>Procedure Specimens Taken Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionTemplateId(
			ProcedureSpecimensTakenSection procedureSpecimensTakenSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSpecimensTakenSection.validateProcedureSpecimensTakenSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSpecimensTakenSectionCode constraint of '<em>Procedure Specimens Taken Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionCode(
			ProcedureSpecimensTakenSection procedureSpecimensTakenSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSpecimensTakenSection.validateProcedureSpecimensTakenSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSpecimensTakenSectionText constraint of '<em>Procedure Specimens Taken Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionText(
			ProcedureSpecimensTakenSection procedureSpecimensTakenSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSpecimensTakenSection.validateProcedureSpecimensTakenSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureSpecimensTakenSectionTitle constraint of '<em>Procedure Specimens Taken Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureSpecimensTakenSection_validateProcedureSpecimensTakenSectionTitle(
			ProcedureSpecimensTakenSection procedureSpecimensTakenSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureSpecimensTakenSection.validateProcedureSpecimensTakenSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSubjectiveSection(SubjectiveSection subjectiveSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(subjectiveSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSubjectiveSection_validateSubjectiveSectionTemplateId(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSubjectiveSection_validateSubjectiveSectionCode(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSubjectiveSection_validateSubjectiveSectionText(subjectiveSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateSubjectiveSection_validateSubjectiveSectionTitle(subjectiveSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateSubjectiveSectionTemplateId constraint of '<em>Subjective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSubjectiveSection_validateSubjectiveSectionTemplateId(SubjectiveSection subjectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return subjectiveSection.validateSubjectiveSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateSubjectiveSectionCode constraint of '<em>Subjective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSubjectiveSection_validateSubjectiveSectionCode(SubjectiveSection subjectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return subjectiveSection.validateSubjectiveSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateSubjectiveSectionText constraint of '<em>Subjective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSubjectiveSection_validateSubjectiveSectionText(SubjectiveSection subjectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return subjectiveSection.validateSubjectiveSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateSubjectiveSectionTitle constraint of '<em>Subjective Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSubjectiveSection_validateSubjectiveSectionTitle(SubjectiveSection subjectiveSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return subjectiveSection.validateSubjectiveSectionTitle(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote(ConsultationNote consultationNote, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(consultationNote, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateGeneralHeaderConstraintsCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteTemplateId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteInFulfillmentOf(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOf(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteAssessmentSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteAssessmentAndPlanSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNotePlanOfCareSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteHistoryOfPresentIllness(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNotePhysicalExamSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteReasonForReferralSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteReasonForVisitSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteAllergiesSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteChiefComplaintSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteChiefComplaintAndReasonForVisitSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteFamilyHistorySection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteGeneralStatusSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteHistoryOfPastIllnessSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteImmunizationsSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteMedicationsSectionEntriesOptional(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteProblemSectionEntriesOptional(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteProceduresSectionEntriesOptional(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteResultsSectionEntriesOptional(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteReviewOfSystemsSection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteSocialHistorySection(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteVitalSignsSectionEntriesOptional(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteInFulfillmentOfOrderId(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteInFulfillmentOfOrder(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntity(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntity(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EffectiveTime(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2Id(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsibleParty(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipant(consultationNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter(consultationNote, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateConsultationNoteTemplateId constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteTemplateId(ConsultationNote consultationNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteInFulfillmentOf constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteInFulfillmentOf(ConsultationNote consultationNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteInFulfillmentOf(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOf constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOf(ConsultationNote consultationNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteAssessmentSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteAssessmentSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteAssessmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteAssessmentAndPlanSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteAssessmentAndPlanSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteAssessmentAndPlanSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNotePlanOfCareSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNotePlanOfCareSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNotePlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteHistoryOfPresentIllness constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteHistoryOfPresentIllness(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteHistoryOfPresentIllness(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNotePhysicalExamSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNotePhysicalExamSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNotePhysicalExamSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteReasonForReferralSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteReasonForReferralSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteReasonForReferralSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteReasonForVisitSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteReasonForVisitSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteAllergiesSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteAllergiesSection(ConsultationNote consultationNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteAllergiesSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteChiefComplaintSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteChiefComplaintSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteChiefComplaintSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteChiefComplaintAndReasonForVisitSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteChiefComplaintAndReasonForVisitSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteChiefComplaintAndReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteFamilyHistorySection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteFamilyHistorySection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteFamilyHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteGeneralStatusSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteGeneralStatusSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteGeneralStatusSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteHistoryOfPastIllnessSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteHistoryOfPastIllnessSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteHistoryOfPastIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteImmunizationsSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteImmunizationsSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteImmunizationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteMedicationsSectionEntriesOptional constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteMedicationsSectionEntriesOptional(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteProblemSectionEntriesOptional constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteProblemSectionEntriesOptional(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteProblemSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteProceduresSectionEntriesOptional constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteProceduresSectionEntriesOptional(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteProceduresSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteResultsSectionEntriesOptional constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteResultsSectionEntriesOptional(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteResultsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteReviewOfSystemsSection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteReviewOfSystemsSection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteReviewOfSystemsSection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteSocialHistorySection constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteSocialHistorySection(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteSocialHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteVitalSignsSectionEntriesOptional constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteVitalSignsSectionEntriesOptional(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteVitalSignsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteInFulfillmentOfOrderId constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteInFulfillmentOfOrderId(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteInFulfillmentOfOrderId(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteInFulfillmentOfOrder constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteInFulfillmentOfOrder(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteInFulfillmentOfOrder(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntityHasPersonOrganizationOrBoth constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntity constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntity(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntity constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntity(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2ResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2EffectiveTime constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EffectiveTime(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2Id constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2Id(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2Id(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2ResponsibleParty constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2ResponsibleParty(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipant constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipant(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter2EncounterParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateConsultationNoteComponentOfEncompassingEncounter constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateConsultationNoteComponentOfEncompassingEncounter(
			ConsultationNote consultationNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateConsultationNoteComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Consultation Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_validateGeneralHeaderConstraintsCode(ConsultationNote consultationNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return consultationNote.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_ComponentOf(ConsultationNote_ComponentOf consultationNote_ComponentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(consultationNote_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(consultationNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateConsultationNote_ComponentOf_validateComponentOfEncompassingEncounter(consultationNote_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter constraint of '<em>Consultation Note Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateConsultationNote_ComponentOf_validateComponentOfEncompassingEncounter(
			ConsultationNote_ComponentOf consultationNote_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return consultationNote_ComponentOf.validateComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter2(
			ComponentOf_EncompassingEncounter2 componentOf_EncompassingEncounter2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter2, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2EffectiveTime(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2Id(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2ResponsibleParty(componentOf_EncompassingEncounter2, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2EncounterParticipant(componentOf_EncompassingEncounter2, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter2EffectiveTime constraint of '<em>Component Of Encompassing Encounter2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2EffectiveTime(
			ComponentOf_EncompassingEncounter2 componentOf_EncompassingEncounter2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter2.validateEncompassingEncounter2EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter2Id constraint of '<em>Component Of Encompassing Encounter2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2Id(
			ComponentOf_EncompassingEncounter2 componentOf_EncompassingEncounter2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter2.validateEncompassingEncounter2Id(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter2ResponsibleParty constraint of '<em>Component Of Encompassing Encounter2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2ResponsibleParty(
			ComponentOf_EncompassingEncounter2 componentOf_EncompassingEncounter2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter2.validateEncompassingEncounter2ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter2EncounterParticipant constraint of '<em>Component Of Encompassing Encounter2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter2_validateEncompassingEncounter2EncounterParticipant(
			ComponentOf_EncompassingEncounter2 componentOf_EncompassingEncounter2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter2.validateEncompassingEncounter2EncounterParticipant(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_ResponsibleParty(
			EncompassingEncounter2_ResponsibleParty encompassingEncounter2_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter2_ResponsibleParty, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateResponsibleParty_validateTypeCode(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter2_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter2_ResponsibleParty_validateResponsiblePartyAssignedEntity(encompassingEncounter2_ResponsibleParty, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth constraint of '<em>Encompassing Encounter2 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(
			EncompassingEncounter2_ResponsibleParty encompassingEncounter2_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter2_ResponsibleParty.validateResponsiblePartyAssignedEntityHasPersonOrganizationOrBoth(diagnostics, context);
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntity constraint of '<em>Encompassing Encounter2 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_ResponsibleParty_validateResponsiblePartyAssignedEntity(
			EncompassingEncounter2_ResponsibleParty encompassingEncounter2_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter2_ResponsibleParty.validateResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_EncounterParticipant(
			EncompassingEncounter2_EncounterParticipant encompassingEncounter2_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter2_EncounterParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter2_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter2_EncounterParticipant_validateEncounterParticipantAssignedEntity(encompassingEncounter2_EncounterParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntityHasPersonOrganizationOrBoth constraint of '<em>Encompassing Encounter2 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(
			EncompassingEncounter2_EncounterParticipant encompassingEncounter2_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter2_EncounterParticipant.validateEncounterParticipantAssignedEntityHasPersonOrganizationOrBoth(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntity constraint of '<em>Encompassing Encounter2 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter2_EncounterParticipant_validateEncounterParticipantAssignedEntity(
			EncompassingEncounter2_EncounterParticipant encompassingEncounter2_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter2_EncounterParticipant.validateEncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentSection(AssessmentSection assessmentSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assessmentSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentSection_validateAssessmentSectionTemplateId(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentSection_validateAssessmentSectionCode(assessmentSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssessmentSection_validateAssessmentSectionText(assessmentSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssessmentSectionTemplateId constraint of '<em>Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentSection_validateAssessmentSectionTemplateId(AssessmentSection assessmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentSection.validateAssessmentSectionTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateAssessmentSectionCode constraint of '<em>Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentSection_validateAssessmentSectionCode(AssessmentSection assessmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentSection.validateAssessmentSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssessmentSectionText constraint of '<em>Assessment Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssessmentSection_validateAssessmentSectionText(AssessmentSection assessmentSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return assessmentSection.validateAssessmentSectionText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote(HistoryAndPhysicalNote historyAndPhysicalNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyAndPhysicalNote, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateGeneralHeaderConstraintsCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteTemplateId(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteInFulfillmentOf(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOf(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAllergiesSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAssessmentSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNotePlanOfCareSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAssessmentAndPlanSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteChiefComplaintSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteChiefComplaintAndReasonForVisitSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteFamilyHistorySection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteGeneralStatusSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHistoryOfPastIllnessSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteMedicationsSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNotePhysicalExamSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteReasonForVisitSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteResultsSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteReviewOfSystemsSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteSocialHistorySection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHistoryOfPresentIllnessSection(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteImmunizationsSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteProblemSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteProceduresSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteVitalSignsSectionEntriesOptional(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntityHasPersonOrOrganization(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntity(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntityHasPersonOrOrganization(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntity(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EffectiveTime(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Id(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Location(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsibleParty(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipant(historyAndPhysicalNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter(historyAndPhysicalNote, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteTemplateId constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteTemplateId(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteInFulfillmentOf constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteInFulfillmentOf(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteInFulfillmentOf(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOf constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOf(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteAllergiesSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAllergiesSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteAllergiesSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteAssessmentSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAssessmentSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteAssessmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNotePlanOfCareSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNotePlanOfCareSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNotePlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteAssessmentAndPlanSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteAssessmentAndPlanSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteAssessmentAndPlanSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteChiefComplaintSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteChiefComplaintSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteChiefComplaintSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteChiefComplaintAndReasonForVisitSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteChiefComplaintAndReasonForVisitSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteChiefComplaintAndReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteFamilyHistorySection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteFamilyHistorySection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteFamilyHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteGeneralStatusSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteGeneralStatusSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteGeneralStatusSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteHistoryOfPastIllnessSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHistoryOfPastIllnessSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteHistoryOfPastIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteMedicationsSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteMedicationsSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNotePhysicalExamSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNotePhysicalExamSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNotePhysicalExamSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteReasonForVisitSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteReasonForVisitSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteResultsSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteResultsSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteResultsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteReviewOfSystemsSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteReviewOfSystemsSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteReviewOfSystemsSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteSocialHistorySection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteSocialHistorySection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteSocialHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteHistoryOfPresentIllnessSection constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteHistoryOfPresentIllnessSection(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteHistoryOfPresentIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteImmunizationsSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteImmunizationsSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteImmunizationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteProblemSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteProblemSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteProblemSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteProceduresSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteProceduresSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteProceduresSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteVitalSignsSectionEntriesOptional constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteVitalSignsSectionEntriesOptional(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteVitalSignsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntityHasPersonOrOrganization constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntityHasPersonOrOrganization(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntity constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntity(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntityHasPersonOrOrganization constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntityHasPersonOrOrganization(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntity constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntity(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EffectiveTime constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EffectiveTime(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Id constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Id(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Id(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Location constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Location(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4Location(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsibleParty constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsibleParty(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipant constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipant(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter4EncounterParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateHistoryAndPhysicalNoteComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>History And Physical Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_validateGeneralHeaderConstraintsCode(
			HistoryAndPhysicalNote historyAndPhysicalNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return historyAndPhysicalNote.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_ComponentOf(
			HistoryAndPhysicalNote_ComponentOf historyAndPhysicalNote_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(historyAndPhysicalNote_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateHistoryAndPhysicalNote_ComponentOf_validateComponentOfEncompassingEncounter(historyAndPhysicalNote_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter constraint of '<em>History And Physical Note Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHistoryAndPhysicalNote_ComponentOf_validateComponentOfEncompassingEncounter(
			HistoryAndPhysicalNote_ComponentOf historyAndPhysicalNote_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return historyAndPhysicalNote_ComponentOf.validateComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter4, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4EffectiveTime(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4Id(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4Location(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4ResponsibleParty(componentOf_EncompassingEncounter4, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4EncounterParticipant(componentOf_EncompassingEncounter4, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter4EffectiveTime constraint of '<em>Component Of Encompassing Encounter4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4EffectiveTime(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter4.validateEncompassingEncounter4EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter4Id constraint of '<em>Component Of Encompassing Encounter4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4Id(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter4.validateEncompassingEncounter4Id(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter4Location constraint of '<em>Component Of Encompassing Encounter4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4Location(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter4.validateEncompassingEncounter4Location(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter4ResponsibleParty constraint of '<em>Component Of Encompassing Encounter4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4ResponsibleParty(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter4.validateEncompassingEncounter4ResponsibleParty(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter4EncounterParticipant constraint of '<em>Component Of Encompassing Encounter4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter4_validateEncompassingEncounter4EncounterParticipant(
			ComponentOf_EncompassingEncounter4 componentOf_EncompassingEncounter4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter4.validateEncompassingEncounter4EncounterParticipant(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_ResponsibleParty(
			EncompassingEncounter4_ResponsibleParty encompassingEncounter4_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter4_ResponsibleParty, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateResponsibleParty_validateTypeCode(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter4_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrOrganization(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter4_ResponsibleParty_validateResponsiblePartyAssignedEntity(encompassingEncounter4_ResponsibleParty, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntityHasPersonOrOrganization constraint of '<em>Encompassing Encounter4 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_ResponsibleParty_validateResponsiblePartyAssignedEntityHasPersonOrOrganization(
			EncompassingEncounter4_ResponsibleParty encompassingEncounter4_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter4_ResponsibleParty.validateResponsiblePartyAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntity constraint of '<em>Encompassing Encounter4 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_ResponsibleParty_validateResponsiblePartyAssignedEntity(
			EncompassingEncounter4_ResponsibleParty encompassingEncounter4_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter4_ResponsibleParty.validateResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_EncounterParticipant(
			EncompassingEncounter4_EncounterParticipant encompassingEncounter4_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter4_EncounterParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter4_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrOrganization(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter4_EncounterParticipant_validateEncounterParticipantAssignedEntity(encompassingEncounter4_EncounterParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntityHasPersonOrOrganization constraint of '<em>Encompassing Encounter4 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_EncounterParticipant_validateEncounterParticipantAssignedEntityHasPersonOrOrganization(
			EncompassingEncounter4_EncounterParticipant encompassingEncounter4_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter4_EncounterParticipant.validateEncounterParticipantAssignedEntityHasPersonOrOrganization(diagnostics, context);
	}

	/**
	 * Validates the validateEncounterParticipantAssignedEntity constraint of '<em>Encompassing Encounter4 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter4_EncounterParticipant_validateEncounterParticipantAssignedEntity(
			EncompassingEncounter4_EncounterParticipant encompassingEncounter4_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter4_EncounterParticipant.validateEncounterParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote(OperativeNote operativeNote, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(operativeNote, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateGeneralHeaderConstraintsCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteTemplateId(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOf(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteAnesthesiaSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteComplicationsSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNotePostoperativeDiagnosisSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNotePreoperativeDiagnosisSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureEstimatedBloodLossSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureFindingsSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureSpecimensTakenSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureDescriptionSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureImplantsSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteOperativeNoteFluidSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteOperativeNoteSurgicalProcedureSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNotePlanOfCareSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNotePlannedProcedureSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureDispositionSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteProcedureIndicationsSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteSurgicalDrainsSection(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerFunctionCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerTypeCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventProcedureCodes(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasLow(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasHighWhenNoWidth(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeNoHighIfWidth(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventAnyAssistantsAsSecondary(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventCode(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTime(operativeNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_validateOperativeNoteDocumentationOfServiceEvent(operativeNote, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateOperativeNoteTemplateId constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteTemplateId(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOf constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOf(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteAnesthesiaSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteAnesthesiaSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteAnesthesiaSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteComplicationsSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteComplicationsSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteComplicationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNotePostoperativeDiagnosisSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNotePostoperativeDiagnosisSection(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNotePostoperativeDiagnosisSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNotePreoperativeDiagnosisSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNotePreoperativeDiagnosisSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNotePreoperativeDiagnosisSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureEstimatedBloodLossSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureEstimatedBloodLossSection(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureEstimatedBloodLossSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureFindingsSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureFindingsSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureFindingsSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureSpecimensTakenSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureSpecimensTakenSection(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureSpecimensTakenSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureDescriptionSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureDescriptionSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureDescriptionSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureImplantsSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureImplantsSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureImplantsSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteOperativeNoteFluidSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteOperativeNoteFluidSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteOperativeNoteFluidSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteOperativeNoteSurgicalProcedureSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteOperativeNoteSurgicalProcedureSection(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteOperativeNoteSurgicalProcedureSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNotePlanOfCareSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNotePlanOfCareSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNotePlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNotePlannedProcedureSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNotePlannedProcedureSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNotePlannedProcedureSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureDispositionSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureDispositionSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureDispositionSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteProcedureIndicationsSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteProcedureIndicationsSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteProcedureIndicationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteSurgicalDrainsSection constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteSurgicalDrainsSection(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteSurgicalDrainsSection(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerFunctionCode constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerFunctionCode(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerFunctionCode(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerTypeCode constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerTypeCode(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventPrimaryPerformerTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventProcedureCodes constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventProcedureCodes(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventProcedureCodes(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasLow constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasLow(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasLow(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasHighWhenNoWidth constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasHighWhenNoWidth(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventEffectiveTimeHasHighWhenNoWidth(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventEffectiveTimeNoHighIfWidth constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTimeNoHighIfWidth(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventEffectiveTimeNoHighIfWidth(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventAnyAssistantsAsSecondary constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventAnyAssistantsAsSecondary(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventAnyAssistantsAsSecondary(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventCode constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventCode(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventCode(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEventEffectiveTime constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEventEffectiveTime(
			OperativeNote operativeNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEventEffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateOperativeNoteDocumentationOfServiceEvent constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateOperativeNoteDocumentationOfServiceEvent(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateOperativeNoteDocumentationOfServiceEvent(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Operative Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_validateGeneralHeaderConstraintsCode(OperativeNote operativeNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return operativeNote.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_DocumentationOf(OperativeNote_DocumentationOf operativeNote_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(operativeNote_DocumentationOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDocumentationOf_validateTypeCode(operativeNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateOperativeNote_DocumentationOf_validateDocumentationOfServiceEvent(operativeNote_DocumentationOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDocumentationOfServiceEvent constraint of '<em>Operative Note Documentation Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateOperativeNote_DocumentationOf_validateDocumentationOfServiceEvent(
			OperativeNote_DocumentationOf operativeNote_DocumentationOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return operativeNote_DocumentationOf.validateDocumentationOfServiceEvent(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent(DocumentationOf_ServiceEvent documentationOf_ServiceEvent,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(documentationOf_ServiceEvent, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateServiceEvent_validateMoodCode(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventProcedureCodes(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeHasLow(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeHasHighWhenNoWidth(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeNoHighIfWidth(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventAnyAssistantsAsSecondary(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventCode(documentationOf_ServiceEvent, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTime(documentationOf_ServiceEvent, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceEventProcedureCodes constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventProcedureCodes(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventProcedureCodes(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventEffectiveTimeHasLow constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeHasLow(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventEffectiveTimeHasLow(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventEffectiveTimeHasHighWhenNoWidth constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeHasHighWhenNoWidth(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventEffectiveTimeHasHighWhenNoWidth(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventEffectiveTimeNoHighIfWidth constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTimeNoHighIfWidth(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventEffectiveTimeNoHighIfWidth(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventAnyAssistantsAsSecondary constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventAnyAssistantsAsSecondary(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventAnyAssistantsAsSecondary(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventCode constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventCode(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEventEffectiveTime constraint of '<em>Documentation Of Service Event</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent_validateServiceEventEffectiveTime(
			DocumentationOf_ServiceEvent documentationOf_ServiceEvent, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent.validateServiceEventEffectiveTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent_PrimaryPerformer(ServiceEvent_PrimaryPerformer serviceEvent_PrimaryPerformer,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(serviceEvent_PrimaryPerformer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceEvent_PrimaryPerformer_validatePrimaryPerformerFunctionCode(serviceEvent_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceEvent_PrimaryPerformer_validatePrimaryPerformerTypeCode(serviceEvent_PrimaryPerformer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePrimaryPerformerFunctionCode constraint of '<em>Service Event Primary Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent_PrimaryPerformer_validatePrimaryPerformerFunctionCode(
			ServiceEvent_PrimaryPerformer serviceEvent_PrimaryPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return serviceEvent_PrimaryPerformer.validatePrimaryPerformerFunctionCode(diagnostics, context);
	}

	/**
	 * Validates the validatePrimaryPerformerTypeCode constraint of '<em>Service Event Primary Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent_PrimaryPerformer_validatePrimaryPerformerTypeCode(
			ServiceEvent_PrimaryPerformer serviceEvent_PrimaryPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return serviceEvent_PrimaryPerformer.validatePrimaryPerformerTypeCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote(ProcedureNote procedureNote, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateGeneralHeaderConstraintsCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteTemplateId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteIndividual(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOf(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNotePrimaryCarePhysician(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProvider(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteAssessmentSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNotePlanOfCareSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteAssessmentAndPlanSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComplicationsSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNotePostprocedureDiagnosisSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureDescriptionSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureIndicationsSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteAllergiesSectionEntriesOptional(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteAnesthesiaSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteChiefComplaintSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteChiefComplaintAndReasonForVisitSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteFamilyHistorySection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteHistoryOfPastIllnessSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteHistoryOfPresentIllnessSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteMedicalHistorySection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteMedicationsSectionEntriesOptional(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteMedicationsAdministeredSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNotePhysicalExamSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNotePlannedProcedureSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureDispositionSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureEstimatedBloodLossSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureFindingsSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureImplantsSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProcedureSpecimensTakenSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProceduresSectionEntriesOptional(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteReasonForVisitSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteReviewOfSystemsSection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteSocialHistorySection(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteIndividualTypeId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacilityId(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacility(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipantTypeCode(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5Code(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5Location(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipant(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5(procedureNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_validateProcedureNoteProviderAssociatedEntityAssociatedPerson(procedureNote, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteTemplateId constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteTemplateId(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteIndividual constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteIndividual(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteIndividual(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOf constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOf(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNotePrimaryCarePhysician constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNotePrimaryCarePhysician(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNotePrimaryCarePhysician(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProvider constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProvider(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProvider(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteAssessmentSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteAssessmentSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteAssessmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNotePlanOfCareSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNotePlanOfCareSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNotePlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteAssessmentAndPlanSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteAssessmentAndPlanSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteAssessmentAndPlanSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComplicationsSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComplicationsSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComplicationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNotePostprocedureDiagnosisSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNotePostprocedureDiagnosisSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNotePostprocedureDiagnosisSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureDescriptionSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureDescriptionSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureDescriptionSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureIndicationsSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureIndicationsSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureIndicationsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteAllergiesSectionEntriesOptional constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteAllergiesSectionEntriesOptional(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteAllergiesSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteAnesthesiaSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteAnesthesiaSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteAnesthesiaSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteChiefComplaintSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteChiefComplaintSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteChiefComplaintSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteChiefComplaintAndReasonForVisitSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteChiefComplaintAndReasonForVisitSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteChiefComplaintAndReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteFamilyHistorySection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteFamilyHistorySection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteFamilyHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteHistoryOfPastIllnessSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteHistoryOfPastIllnessSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteHistoryOfPastIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteHistoryOfPresentIllnessSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteHistoryOfPresentIllnessSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteHistoryOfPresentIllnessSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteMedicalHistorySection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteMedicalHistorySection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteMedicalHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteMedicationsSectionEntriesOptional constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteMedicationsSectionEntriesOptional(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteMedicationsAdministeredSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteMedicationsAdministeredSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteMedicationsAdministeredSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNotePhysicalExamSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNotePhysicalExamSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNotePhysicalExamSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNotePlannedProcedureSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNotePlannedProcedureSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNotePlannedProcedureSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureDispositionSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureDispositionSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureDispositionSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureEstimatedBloodLossSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureEstimatedBloodLossSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureEstimatedBloodLossSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureFindingsSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureFindingsSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureFindingsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureImplantsSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureImplantsSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureImplantsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProcedureSpecimensTakenSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProcedureSpecimensTakenSection(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProcedureSpecimensTakenSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProceduresSectionEntriesOptional constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProceduresSectionEntriesOptional(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProceduresSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteReasonForVisitSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteReasonForVisitSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteReasonForVisitSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteReviewOfSystemsSection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteReviewOfSystemsSection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteReviewOfSystemsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteSocialHistorySection constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteSocialHistorySection(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteSocialHistorySection(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteIndividualTypeId constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteIndividualTypeId(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteIndividualTypeId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacilityId constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacilityId(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacilityId(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacility constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacility(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5LocationHealthCareFacility(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipantTypeCode constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipantTypeCode(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipantTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5Code constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5Code(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5Code(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5Location constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5Location(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5Location(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipant constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipant(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5EncounterParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteComponentOfEncompassingEncounter5 constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteComponentOfEncompassingEncounter5(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteComponentOfEncompassingEncounter5(diagnostics, context);
	}

	/**
	 * Validates the validateProcedureNoteProviderAssociatedEntityAssociatedPerson constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateProcedureNoteProviderAssociatedEntityAssociatedPerson(
			ProcedureNote procedureNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateProcedureNoteProviderAssociatedEntityAssociatedPerson(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Procedure Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_validateGeneralHeaderConstraintsCode(ProcedureNote procedureNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_ComponentOf(ProcedureNote_ComponentOf procedureNote_ComponentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(procedureNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_ComponentOf_validateComponentOfEncompassingEncounter5(procedureNote_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter5 constraint of '<em>Procedure Note Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_ComponentOf_validateComponentOfEncompassingEncounter5(
			ProcedureNote_ComponentOf procedureNote_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return procedureNote_ComponentOf.validateComponentOfEncompassingEncounter5(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter5(
			ComponentOf_EncompassingEncounter5 componentOf_EncompassingEncounter5, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter5, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5Code(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5Location(componentOf_EncompassingEncounter5, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5EncounterParticipant(componentOf_EncompassingEncounter5, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter5Code constraint of '<em>Component Of Encompassing Encounter5</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5Code(
			ComponentOf_EncompassingEncounter5 componentOf_EncompassingEncounter5, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter5.validateEncompassingEncounter5Code(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter5Location constraint of '<em>Component Of Encompassing Encounter5</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5Location(
			ComponentOf_EncompassingEncounter5 componentOf_EncompassingEncounter5, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter5.validateEncompassingEncounter5Location(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter5EncounterParticipant constraint of '<em>Component Of Encompassing Encounter5</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter5_validateEncompassingEncounter5EncounterParticipant(
			ComponentOf_EncompassingEncounter5 componentOf_EncompassingEncounter5, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter5.validateEncompassingEncounter5EncounterParticipant(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter5_Location(
			EncompassingEncounter5_Location encompassingEncounter5_Location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter5_Location, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateLocation_validateTypeCode(encompassingEncounter5_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter5_Location_validateLocationHealthCareFacility(encompassingEncounter5_Location, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateLocationHealthCareFacility constraint of '<em>Encompassing Encounter5 Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter5_Location_validateLocationHealthCareFacility(
			EncompassingEncounter5_Location encompassingEncounter5_Location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return encompassingEncounter5_Location.validateLocationHealthCareFacility(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_HealthCareFacility(Location_HealthCareFacility location_HealthCareFacility,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(location_HealthCareFacility, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(location_HealthCareFacility, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocation_HealthCareFacility_validateHealthCareFacilityId(location_HealthCareFacility, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHealthCareFacilityId constraint of '<em>Location Health Care Facility</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_HealthCareFacility_validateHealthCareFacilityId(
			Location_HealthCareFacility location_HealthCareFacility, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return location_HealthCareFacility.validateHealthCareFacilityId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter5_EncounterParticipant(
			EncompassingEncounter5_EncounterParticipant encompassingEncounter5_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter5_EncounterParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter5_EncounterParticipant_validateEncounterParticipantTypeCode(encompassingEncounter5_EncounterParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncounterParticipantTypeCode constraint of '<em>Encompassing Encounter5 Encounter Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter5_EncounterParticipant_validateEncounterParticipantTypeCode(
			EncompassingEncounter5_EncounterParticipant encompassingEncounter5_EncounterParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter5_EncounterParticipant.validateEncounterParticipantTypeCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_Individual(ProcedureNote_Individual procedureNote_Individual,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote_Individual, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant1_validateContextControlCode(procedureNote_Individual, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureNote_Individual_validateIndividualTypeId(procedureNote_Individual, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateIndividualTypeId constraint of '<em>Procedure Note Individual</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_Individual_validateIndividualTypeId(
			ProcedureNote_Individual procedureNote_Individual, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureNote_Individual.validateIndividualTypeId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_PrimaryCarePhysician(
			ProcedureNote_PrimaryCarePhysician procedureNote_PrimaryCarePhysician, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote_PrimaryCarePhysician, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote_PrimaryCarePhysician, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant1_validateContextControlCode(procedureNote_PrimaryCarePhysician, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_Provider(ProcedureNote_Provider procedureNote_Provider,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote_Provider, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote_Provider, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant1_validateContextControlCode(procedureNote_Provider, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProvider_AssociatedEntity(Provider_AssociatedEntity provider_AssociatedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(provider_AssociatedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(provider_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateProvider_AssociatedEntity_validateAssociatedEntityAssociatedPerson(provider_AssociatedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssociatedEntityAssociatedPerson constraint of '<em>Provider Associated Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProvider_AssociatedEntity_validateAssociatedEntityAssociatedPerson(
			Provider_AssociatedEntity provider_AssociatedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return provider_AssociatedEntity.validateAssociatedEntityAssociatedPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureNote_DocumentationOf(ProcedureNote_DocumentationOf procedureNote_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureNote_DocumentationOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDocumentationOf_validateTypeCode(procedureNote_DocumentationOf, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1(DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(documentationOf_ServiceEvent1, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateServiceEvent_validateMoodCode(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1ProcedureCodes(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeHasLow(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeHasHighWhenNoWidth(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeNoHighIfWidth(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1AnyAssistantsAsSecondary(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1Code(documentationOf_ServiceEvent1, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTime(documentationOf_ServiceEvent1, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceEvent1ProcedureCodes constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1ProcedureCodes(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1ProcedureCodes(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1EffectiveTimeHasLow constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeHasLow(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1EffectiveTimeHasLow(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1EffectiveTimeHasHighWhenNoWidth constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeHasHighWhenNoWidth(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1EffectiveTimeHasHighWhenNoWidth(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1EffectiveTimeNoHighIfWidth constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTimeNoHighIfWidth(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1EffectiveTimeNoHighIfWidth(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1AnyAssistantsAsSecondary constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1AnyAssistantsAsSecondary(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1AnyAssistantsAsSecondary(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1Code constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1Code(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1Code(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent1EffectiveTime constraint of '<em>Documentation Of Service Event1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent1_validateServiceEvent1EffectiveTime(
			DocumentationOf_ServiceEvent1 documentationOf_ServiceEvent1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent1.validateServiceEvent1EffectiveTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent1_PrimaryPerformer(
			ServiceEvent1_PrimaryPerformer serviceEvent1_PrimaryPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(serviceEvent1_PrimaryPerformer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(serviceEvent1_PrimaryPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validateServiceEvent1_PrimaryPerformer_validatePrimaryPerformerFunctionCode(serviceEvent1_PrimaryPerformer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePrimaryPerformerFunctionCode constraint of '<em>Service Event1 Primary Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateServiceEvent1_PrimaryPerformer_validatePrimaryPerformerFunctionCode(
			ServiceEvent1_PrimaryPerformer serviceEvent1_PrimaryPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return serviceEvent1_PrimaryPerformer.validatePrimaryPerformerFunctionCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote(ProgressNote progressNote, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(progressNote, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateGeneralHeaderConstraintsCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteTemplateId(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteDocumentationOf(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteComponentOf(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteAssessmentSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNotePlanOfCareSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteAssessmentAndPlanSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteAllergiesSectionEntriesOptional(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteChiefComplaintSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteInterventionsSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteMedicationsSectionEntriesOptional(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteObjectiveSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNotePhysicalExamSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteProblemSectionEntriesOptional(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteResultsSectionEntriesOptional(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteReviewOfSystemsSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteSubjectiveSection(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteVitalSignsSectionEntriesOptional(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2ClassCode(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2EffectiveTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6LocationHealthCareFacility1Id(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6EffectiveTime(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6Id(progressNote, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6Location(progressNote, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProgressNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteHasAnAssementAndPlanSectionOrIndividualAssementAndPlanSections(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteDoesNotHaveIndividualAssementAndPlanSectionsWhenAssementAndPlanSectionPresent(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteTemplateId constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteTemplateId(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteDocumentationOf constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteDocumentationOf(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteComponentOf constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteComponentOf(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteAssessmentSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteAssessmentSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteAssessmentSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNotePlanOfCareSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNotePlanOfCareSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNotePlanOfCareSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteAssessmentAndPlanSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteAssessmentAndPlanSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteAssessmentAndPlanSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteAllergiesSectionEntriesOptional constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteAllergiesSectionEntriesOptional(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteAllergiesSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteChiefComplaintSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteChiefComplaintSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteChiefComplaintSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteInterventionsSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteInterventionsSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteInterventionsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteMedicationsSectionEntriesOptional constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteMedicationsSectionEntriesOptional(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteMedicationsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteObjectiveSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteObjectiveSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteObjectiveSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNotePhysicalExamSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNotePhysicalExamSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNotePhysicalExamSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteProblemSectionEntriesOptional constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteProblemSectionEntriesOptional(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteProblemSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteResultsSectionEntriesOptional constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteResultsSectionEntriesOptional(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteResultsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteReviewOfSystemsSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteReviewOfSystemsSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteReviewOfSystemsSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteSubjectiveSection constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteSubjectiveSection(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteSubjectiveSection(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteVitalSignsSectionEntriesOptional constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteVitalSignsSectionEntriesOptional(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteVitalSignsSectionEntriesOptional(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteDocumentationOfServiceEvent2ClassCode constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2ClassCode(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteDocumentationOfServiceEvent2ClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteDocumentationOfServiceEvent2EffectiveTime constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2EffectiveTime(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteDocumentationOfServiceEvent2EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteDocumentationOfServiceEvent2 constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteDocumentationOfServiceEvent2(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteDocumentationOfServiceEvent2(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteComponentOfEncompassingEncounter6LocationHealthCareFacility1Id constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6LocationHealthCareFacility1Id(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteComponentOfEncompassingEncounter6LocationHealthCareFacility1Id(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteComponentOfEncompassingEncounter6EffectiveTime constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6EffectiveTime(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteComponentOfEncompassingEncounter6EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteComponentOfEncompassingEncounter6Id constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6Id(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteComponentOfEncompassingEncounter6Id(diagnostics, context);
	}

	/**
	 * Validates the validateProgressNoteComponentOfEncompassingEncounter6Location constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateProgressNoteComponentOfEncompassingEncounter6Location(
			ProgressNote progressNote, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateProgressNoteComponentOfEncompassingEncounter6Location(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Progress Note</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_validateGeneralHeaderConstraintsCode(ProgressNote progressNote,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return progressNote.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_DocumentationOf(ProgressNote_DocumentationOf progressNote_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(progressNote_DocumentationOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDocumentationOf_validateTypeCode(progressNote_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateProgressNote_DocumentationOf_validateDocumentationOfServiceEvent2(progressNote_DocumentationOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDocumentationOfServiceEvent2 constraint of '<em>Progress Note Documentation Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_DocumentationOf_validateDocumentationOfServiceEvent2(
			ProgressNote_DocumentationOf progressNote_DocumentationOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return progressNote_DocumentationOf.validateDocumentationOfServiceEvent2(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent2(DocumentationOf_ServiceEvent2 documentationOf_ServiceEvent2,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(documentationOf_ServiceEvent2, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateServiceEvent_validateMoodCode(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent2_validateServiceEvent2ClassCode(documentationOf_ServiceEvent2, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent2_validateServiceEvent2EffectiveTime(documentationOf_ServiceEvent2, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceEvent2ClassCode constraint of '<em>Documentation Of Service Event2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent2_validateServiceEvent2ClassCode(
			DocumentationOf_ServiceEvent2 documentationOf_ServiceEvent2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent2.validateServiceEvent2ClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent2EffectiveTime constraint of '<em>Documentation Of Service Event2</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent2_validateServiceEvent2EffectiveTime(
			DocumentationOf_ServiceEvent2 documentationOf_ServiceEvent2, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent2.validateServiceEvent2EffectiveTime(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProgressNote_ComponentOf(ProgressNote_ComponentOf progressNote_ComponentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(progressNote_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(progressNote_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(progressNote_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter6(
			ComponentOf_EncompassingEncounter6 componentOf_EncompassingEncounter6, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter6, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6EffectiveTime(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6Id(componentOf_EncompassingEncounter6, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6Location(componentOf_EncompassingEncounter6, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter6EffectiveTime constraint of '<em>Component Of Encompassing Encounter6</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6EffectiveTime(
			ComponentOf_EncompassingEncounter6 componentOf_EncompassingEncounter6, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter6.validateEncompassingEncounter6EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter6Id constraint of '<em>Component Of Encompassing Encounter6</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6Id(
			ComponentOf_EncompassingEncounter6 componentOf_EncompassingEncounter6, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter6.validateEncompassingEncounter6Id(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter6Location constraint of '<em>Component Of Encompassing Encounter6</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter6_validateEncompassingEncounter6Location(
			ComponentOf_EncompassingEncounter6 componentOf_EncompassingEncounter6, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter6.validateEncompassingEncounter6Location(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter6_Location(
			EncompassingEncounter6_Location encompassingEncounter6_Location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter6_Location, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter6_Location, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateLocation_validateTypeCode(encompassingEncounter6_Location, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_HealthCareFacility1(Location_HealthCareFacility1 location_HealthCareFacility1,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(location_HealthCareFacility1, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(location_HealthCareFacility1, diagnostics, context);
		if (result || diagnostics != null) result &= validateLocation_HealthCareFacility1_validateHealthCareFacility1Id(location_HealthCareFacility1, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHealthCareFacility1Id constraint of '<em>Location Health Care Facility1</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_HealthCareFacility1_validateHealthCareFacility1Id(
			Location_HealthCareFacility1 location_HealthCareFacility1, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return location_HealthCareFacility1.validateHealthCareFacility1Id(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis(PreoperativeDiagnosis preoperativeDiagnosis,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(preoperativeDiagnosis, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosis_validatePreoperativeDiagnosisTemplateId(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosis_validatePreoperativeDiagnosisClassCode(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosis_validatePreoperativeDiagnosisCode(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosis_validatePreoperativeDiagnosisMoodCode(preoperativeDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validatePreoperativeDiagnosis_validatePreoperativeDiagnosisProblemObservation(preoperativeDiagnosis, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePreoperativeDiagnosisTemplateId constraint of '<em>Preoperative Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis_validatePreoperativeDiagnosisTemplateId(
			PreoperativeDiagnosis preoperativeDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return preoperativeDiagnosis.validatePreoperativeDiagnosisTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePreoperativeDiagnosisClassCode constraint of '<em>Preoperative Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis_validatePreoperativeDiagnosisClassCode(
			PreoperativeDiagnosis preoperativeDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return preoperativeDiagnosis.validatePreoperativeDiagnosisClassCode(diagnostics, context);
	}

	/**
	 * Validates the validatePreoperativeDiagnosisCode constraint of '<em>Preoperative Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis_validatePreoperativeDiagnosisCode(
			PreoperativeDiagnosis preoperativeDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return preoperativeDiagnosis.validatePreoperativeDiagnosisCode(diagnostics, context);
	}

	/**
	 * Validates the validatePreoperativeDiagnosisMoodCode constraint of '<em>Preoperative Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis_validatePreoperativeDiagnosisMoodCode(
			PreoperativeDiagnosis preoperativeDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return preoperativeDiagnosis.validatePreoperativeDiagnosisMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validatePreoperativeDiagnosisProblemObservation constraint of '<em>Preoperative Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePreoperativeDiagnosis_validatePreoperativeDiagnosisProblemObservation(
			PreoperativeDiagnosis preoperativeDiagnosis, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return preoperativeDiagnosis.validatePreoperativeDiagnosisProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructionsSection(InstructionsSection instructionsSection, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(instructionsSection, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateClassCode(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateSection_validateMoodCode(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructionsSection_validateInstructionsSectionCode(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructionsSection_validateInstructionsSectionText(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructionsSection_validateInstructionsSectionTitle(instructionsSection, diagnostics, context);
		if (result || diagnostics != null) result &= validateInstructionsSection_validateInstructionsSectionInstructions(instructionsSection, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateInstructionsSectionCode constraint of '<em>Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructionsSection_validateInstructionsSectionCode(InstructionsSection instructionsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructionsSection.validateInstructionsSectionCode(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsSectionText constraint of '<em>Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructionsSection_validateInstructionsSectionText(InstructionsSection instructionsSection,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructionsSection.validateInstructionsSectionText(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsSectionTitle constraint of '<em>Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructionsSection_validateInstructionsSectionTitle(
			InstructionsSection instructionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructionsSection.validateInstructionsSectionTitle(diagnostics, context);
	}

	/**
	 * Validates the validateInstructionsSectionInstructions constraint of '<em>Instructions Section</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInstructionsSection_validateInstructionsSectionInstructions(
			InstructionsSection instructionsSection, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return instructionsSection.validateInstructionsSectionInstructions(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis(HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hospitalAdmissionDiagnosis, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisTemplateId(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisClassCode(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisCode(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisMoodCode(hospitalAdmissionDiagnosis, diagnostics, context);
		if (result || diagnostics != null) result &= validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisProblemObservation(hospitalAdmissionDiagnosis, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisTemplateId constraint of '<em>Hospital Admission Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisTemplateId(
			HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosis.validateHospitalAdmissionDiagnosisTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisClassCode constraint of '<em>Hospital Admission Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisClassCode(
			HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosis.validateHospitalAdmissionDiagnosisClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisCode constraint of '<em>Hospital Admission Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisCode(
			HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosis.validateHospitalAdmissionDiagnosisCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisMoodCode constraint of '<em>Hospital Admission Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisMoodCode(
			HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosis.validateHospitalAdmissionDiagnosisMoodCode(diagnostics, context);
	}

	/**
	 * Validates the validateHospitalAdmissionDiagnosisProblemObservation constraint of '<em>Hospital Admission Diagnosis</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHospitalAdmissionDiagnosis_validateHospitalAdmissionDiagnosisProblemObservation(
			HospitalAdmissionDiagnosis hospitalAdmissionDiagnosis, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hospitalAdmissionDiagnosis.validateHospitalAdmissionDiagnosisProblemObservation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispenseAssignedEntity(
			MedicationDispenseAssignedEntity medicationDispenseAssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(medicationDispenseAssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(medicationDispenseAssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateMedicationDispenseAssignedEntity_validateMedicationDispenseAssignedEntityAddr(medicationDispenseAssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateMedicationDispenseAssignedEntityAddr constraint of '<em>Medication Dispense Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateMedicationDispenseAssignedEntity_validateMedicationDispenseAssignedEntityAddr(
			MedicationDispenseAssignedEntity medicationDispenseAssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return medicationDispenseAssignedEntity.validateMedicationDispenseAssignedEntityAddr(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformationManufacturedMaterial(
			ImmunizationMedicationInformationManufacturedMaterial immunizationMedicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(immunizationMedicationInformationManufacturedMaterial, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateMaterial_validateClassCode(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateMaterial_validateDeterminerCode(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialCodeOriginalText(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialOriginalTextReference(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialCodeTranslation(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		if (result || diagnostics != null) result &= validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialLotNumberText(immunizationMedicationInformationManufacturedMaterial, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturedMaterialCodeOriginalText constraint of '<em>Immunization Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialCodeOriginalText(
			ImmunizationMedicationInformationManufacturedMaterial immunizationMedicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationMedicationInformationManufacturedMaterial.validateImmunizationMedicationInformationManufacturedMaterialCodeOriginalText(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturedMaterialOriginalTextReference constraint of '<em>Immunization Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialOriginalTextReference(
			ImmunizationMedicationInformationManufacturedMaterial immunizationMedicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationMedicationInformationManufacturedMaterial.validateImmunizationMedicationInformationManufacturedMaterialOriginalTextReference(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturedMaterialCodeTranslation constraint of '<em>Immunization Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialCodeTranslation(
			ImmunizationMedicationInformationManufacturedMaterial immunizationMedicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationMedicationInformationManufacturedMaterial.validateImmunizationMedicationInformationManufacturedMaterialCodeTranslation(diagnostics, context);
	}

	/**
	 * Validates the validateImmunizationMedicationInformationManufacturedMaterialLotNumberText constraint of '<em>Immunization Medication Information Manufactured Material</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateImmunizationMedicationInformationManufacturedMaterial_validateImmunizationMedicationInformationManufacturedMaterialLotNumberText(
			ImmunizationMedicationInformationManufacturedMaterial immunizationMedicationInformationManufacturedMaterial,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return immunizationMedicationInformationManufacturedMaterial.validateImmunizationMedicationInformationManufacturedMaterialLotNumberText(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport(DiagnosticImagingReport diagnosticImagingReport,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diagnosticImagingReport, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateClassCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateClinicalDocument_validateMoodCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmAddress(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsUSRealmPatientName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTemplateId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRealmCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTypeId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateGeneralHeaderConstraintsCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsTitle(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsEffectiveTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsConfidentialityCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLanguageCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSetId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsVersionNumber(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthor(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEnterer(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodian(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipient(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticator(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticator(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTarget(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOf(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformant(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsSupportParticipant(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOf(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceManufacturerModelName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAuthoringDeviceSoftwareName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasAssignedPersonOrAssignedAuthoringDevice(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthorTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthorAssignedAuthor(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntityAssignedPerson(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsDataEntererAssignedEntity(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianCustodianOrganizationTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodianRepresentedCustodianOrganization(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsCustodianAssignedCustodian(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientOrganizationName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientInformationRecipient(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipientRecievedOrganization(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformationRecipientIntendedRecipient(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorAssignedEntityAssignedPerson(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsLegalAuthenticatorSignatureCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntityTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorSignatureCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsAuthenticatorAssignedEntity(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleProviderOrganizationTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationLanguageCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationPreferenceInd(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationProficiencyLevelCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunicationModeCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlaceAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplacePlace(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardianGuardianPerson(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToYear(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTimePreciseToDay(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientEthnicGroupCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientMaritalStatusCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientRaceCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientReligiousAffiliationCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientGuardian(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientBirthplace(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatientLanguageCommunication(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRoleTelecom(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRolePatient(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsRecordTargetPatientRole(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterEffectiveTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounterId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsComponentOfEncompassingEncounter(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantRelatedEntityPerson(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPersonName(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityHasNationalProviderIdentifier(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityAddr(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityCode(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantAssignedEntityPerson(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInformantHasAssignedEntityOrRelatedEntity(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportAssociatedEntityHasAssociatedPersonOrScopingOrganization(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsParticipantSupportTime(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrderId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateGeneralHeaderConstraints_validateGeneralHeaderConstraintsInFulfillmentOfOrder(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportTemplateId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportId(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportInformant(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportInformationRecipient(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportParticipant1(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportInFulfillmentOf(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportDocumentationOf(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportRelatedDocument(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportComponentOf(diagnosticImagingReport, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_validateDiagnosticImagingReportFindingsSection(diagnosticImagingReport, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDiagnosticImagingReportTemplateId constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportTemplateId(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportId constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportId(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportId(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportInformant constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportInformant(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportInformant(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportInformationRecipient constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportInformationRecipient(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportInformationRecipient(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportParticipant1 constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportParticipant1(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportParticipant1(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportInFulfillmentOf constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportInFulfillmentOf(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportInFulfillmentOf(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportDocumentationOf constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportDocumentationOf(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportDocumentationOf(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportRelatedDocument constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportRelatedDocument(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportRelatedDocument(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportComponentOf constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportComponentOf(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportComponentOf(diagnostics, context);
	}

	/**
	 * Validates the validateDiagnosticImagingReportFindingsSection constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateDiagnosticImagingReportFindingsSection(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateDiagnosticImagingReportFindingsSection(diagnostics, context);
	}

	/**
	 * Validates the validateGeneralHeaderConstraintsCode constraint of '<em>Diagnostic Imaging Report</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_validateGeneralHeaderConstraintsCode(
			DiagnosticImagingReport diagnosticImagingReport, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport.validateGeneralHeaderConstraintsCode(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_Participant(
			DiagnosticImagingReport_Participant diagnosticImagingReport_Participant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diagnosticImagingReport_Participant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateParticipant1_validateContextControlCode(diagnosticImagingReport_Participant, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_Participant_validateParticipantAssociatedEntity(diagnosticImagingReport_Participant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateParticipantAssociatedEntity constraint of '<em>Diagnostic Imaging Report Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_Participant_validateParticipantAssociatedEntity(
			DiagnosticImagingReport_Participant diagnosticImagingReport_Participant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return diagnosticImagingReport_Participant.validateParticipantAssociatedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateParticipant_AssociatedEntity(Participant_AssociatedEntity participant_AssociatedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(participant_AssociatedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(participant_AssociatedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validateParticipant_AssociatedEntity_validateAssociatedEntityAssociatedPerson(participant_AssociatedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssociatedEntityAssociatedPerson constraint of '<em>Participant Associated Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateParticipant_AssociatedEntity_validateAssociatedEntityAssociatedPerson(
			Participant_AssociatedEntity participant_AssociatedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return participant_AssociatedEntity.validateAssociatedEntityAssociatedPerson(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssociatedEntity_Person(AssociatedEntity_Person associatedEntity_Person,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(associatedEntity_Person, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateClassCode(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateDeterminerCode(associatedEntity_Person, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssociatedEntity_Person_validatePersonName(associatedEntity_Person, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePersonName constraint of '<em>Associated Entity Person</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssociatedEntity_Person_validatePersonName(AssociatedEntity_Person associatedEntity_Person,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return associatedEntity_Person.validatePersonName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_InFulfillmentOf(
			DiagnosticImagingReport_InFulfillmentOf diagnosticImagingReport_InFulfillmentOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diagnosticImagingReport_InFulfillmentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateInFulfillmentOf_validateTypeCode(diagnosticImagingReport_InFulfillmentOf, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_DocumentationOf(
			DiagnosticImagingReport_DocumentationOf diagnosticImagingReport_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diagnosticImagingReport_DocumentationOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateDocumentationOf_validateTypeCode(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_DocumentationOf_validateDocumentationOfServiceEvent3(diagnosticImagingReport_DocumentationOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateDocumentationOfServiceEvent3 constraint of '<em>Diagnostic Imaging Report Documentation Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_DocumentationOf_validateDocumentationOfServiceEvent3(
			DiagnosticImagingReport_DocumentationOf diagnosticImagingReport_DocumentationOf,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return diagnosticImagingReport_DocumentationOf.validateDocumentationOfServiceEvent3(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent4(DocumentationOf_ServiceEvent4 documentationOf_ServiceEvent4,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(documentationOf_ServiceEvent4, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateServiceEvent_validateMoodCode(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent4_validateServiceEvent4ClassCode(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent4_validateServiceEvent4Code(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent4_validateServiceEvent4Id(documentationOf_ServiceEvent4, diagnostics, context);
		if (result || diagnostics != null) result &= validateDocumentationOf_ServiceEvent4_validateServiceEvent4PhysicianReadingStudyPerformer(documentationOf_ServiceEvent4, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateServiceEvent4ClassCode constraint of '<em>Documentation Of Service Event4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent4_validateServiceEvent4ClassCode(
			DocumentationOf_ServiceEvent4 documentationOf_ServiceEvent4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent4.validateServiceEvent4ClassCode(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent4Code constraint of '<em>Documentation Of Service Event4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent4_validateServiceEvent4Code(
			DocumentationOf_ServiceEvent4 documentationOf_ServiceEvent4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent4.validateServiceEvent4Code(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent4Id constraint of '<em>Documentation Of Service Event4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent4_validateServiceEvent4Id(
			DocumentationOf_ServiceEvent4 documentationOf_ServiceEvent4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent4.validateServiceEvent4Id(diagnostics, context);
	}

	/**
	 * Validates the validateServiceEvent4PhysicianReadingStudyPerformer constraint of '<em>Documentation Of Service Event4</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDocumentationOf_ServiceEvent4_validateServiceEvent4PhysicianReadingStudyPerformer(
			DocumentationOf_ServiceEvent4 documentationOf_ServiceEvent4, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return documentationOf_ServiceEvent4.validateServiceEvent4PhysicianReadingStudyPerformer(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_RelatedDocument(
			DiagnosticImagingReport_RelatedDocument diagnosticImagingReport_RelatedDocument,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(diagnosticImagingReport_RelatedDocument, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_ComponentOf(
			DiagnosticImagingReport_ComponentOf diagnosticImagingReport_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(diagnosticImagingReport_ComponentOf, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateComponent1_validateTypeCode(diagnosticImagingReport_ComponentOf, diagnostics, context);
		if (result || diagnostics != null) result &= validateDiagnosticImagingReport_ComponentOf_validateComponentOfEncompassingEncounter(diagnosticImagingReport_ComponentOf, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateComponentOfEncompassingEncounter constraint of '<em>Diagnostic Imaging Report Component Of</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateDiagnosticImagingReport_ComponentOf_validateComponentOfEncompassingEncounter(
			DiagnosticImagingReport_ComponentOf diagnosticImagingReport_ComponentOf, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return diagnosticImagingReport_ComponentOf.validateComponentOfEncompassingEncounter(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter7(
			ComponentOf_EncompassingEncounter7 componentOf_EncompassingEncounter7, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(componentOf_EncompassingEncounter7, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateClassCode(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateEncompassingEncounter_validateMoodCode(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7EffectiveTime(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7Id(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7PhysicianofRecordParticipant(componentOf_EncompassingEncounter7, diagnostics, context);
		if (result || diagnostics != null) result &= validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7ResponsibleParty(componentOf_EncompassingEncounter7, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateEncompassingEncounter7EffectiveTime constraint of '<em>Component Of Encompassing Encounter7</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7EffectiveTime(
			ComponentOf_EncompassingEncounter7 componentOf_EncompassingEncounter7, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter7.validateEncompassingEncounter7EffectiveTime(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter7Id constraint of '<em>Component Of Encompassing Encounter7</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7Id(
			ComponentOf_EncompassingEncounter7 componentOf_EncompassingEncounter7, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter7.validateEncompassingEncounter7Id(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter7PhysicianofRecordParticipant constraint of '<em>Component Of Encompassing Encounter7</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7PhysicianofRecordParticipant(
			ComponentOf_EncompassingEncounter7 componentOf_EncompassingEncounter7, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter7.validateEncompassingEncounter7PhysicianofRecordParticipant(diagnostics, context);
	}

	/**
	 * Validates the validateEncompassingEncounter7ResponsibleParty constraint of '<em>Component Of Encompassing Encounter7</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateComponentOf_EncompassingEncounter7_validateEncompassingEncounter7ResponsibleParty(
			ComponentOf_EncompassingEncounter7 componentOf_EncompassingEncounter7, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return componentOf_EncompassingEncounter7.validateEncompassingEncounter7ResponsibleParty(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter7_ResponsibleParty(
			EncompassingEncounter7_ResponsibleParty encompassingEncounter7_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(encompassingEncounter7_ResponsibleParty, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateResponsibleParty_validateTypeCode(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		if (result || diagnostics != null) result &= validateEncompassingEncounter7_ResponsibleParty_validateResponsiblePartyAssignedEntity(encompassingEncounter7_ResponsibleParty, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateResponsiblePartyAssignedEntity constraint of '<em>Encompassing Encounter7 Responsible Party</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateEncompassingEncounter7_ResponsibleParty_validateResponsiblePartyAssignedEntity(
			EncompassingEncounter7_ResponsibleParty encompassingEncounter7_ResponsibleParty,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return encompassingEncounter7_ResponsibleParty.validateResponsiblePartyAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateResponsibleParty_AssignedEntity(
			ResponsibleParty_AssignedEntity responsibleParty_AssignedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(responsibleParty_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(responsibleParty_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(responsibleParty_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer(
			PhysicianReadingStudyPerformer physicianReadingStudyPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicianReadingStudyPerformer, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTemplateId(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTime(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTypeCode(physicianReadingStudyPerformer, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerAssignedEntity(physicianReadingStudyPerformer, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePhysicianReadingStudyPerformerTemplateId constraint of '<em>Physician Reading Study Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTemplateId(
			PhysicianReadingStudyPerformer physicianReadingStudyPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianReadingStudyPerformer.validatePhysicianReadingStudyPerformerTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicianReadingStudyPerformerTime constraint of '<em>Physician Reading Study Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTime(
			PhysicianReadingStudyPerformer physicianReadingStudyPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianReadingStudyPerformer.validatePhysicianReadingStudyPerformerTime(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicianReadingStudyPerformerTypeCode constraint of '<em>Physician Reading Study Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerTypeCode(
			PhysicianReadingStudyPerformer physicianReadingStudyPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianReadingStudyPerformer.validatePhysicianReadingStudyPerformerTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicianReadingStudyPerformerAssignedEntity constraint of '<em>Physician Reading Study Performer</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_validatePhysicianReadingStudyPerformerAssignedEntity(
			PhysicianReadingStudyPerformer physicianReadingStudyPerformer, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianReadingStudyPerformer.validatePhysicianReadingStudyPerformerAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_AssignedEntity(
			PhysicianReadingStudyPerformer_AssignedEntity physicianReadingStudyPerformer_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_AssignedEntity_validateAssignedEntityCode(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianReadingStudyPerformer_AssignedEntity_validateAssignedEntityId(physicianReadingStudyPerformer_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Physician Reading Study Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_AssignedEntity_validateAssignedEntityCode(
			PhysicianReadingStudyPerformer_AssignedEntity physicianReadingStudyPerformer_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicianReadingStudyPerformer_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Physician Reading Study Performer Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianReadingStudyPerformer_AssignedEntity_validateAssignedEntityId(
			PhysicianReadingStudyPerformer_AssignedEntity physicianReadingStudyPerformer_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicianReadingStudyPerformer_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant(PhysicianofRecordParticipant physicianofRecordParticipant,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicianofRecordParticipant, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantTemplateId(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantTypeCode(physicianofRecordParticipant, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantAssignedEntity(physicianofRecordParticipant, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validatePhysicianofRecordParticipantTemplateId constraint of '<em>Physicianof Record Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantTemplateId(
			PhysicianofRecordParticipant physicianofRecordParticipant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianofRecordParticipant.validatePhysicianofRecordParticipantTemplateId(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicianofRecordParticipantTypeCode constraint of '<em>Physicianof Record Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantTypeCode(
			PhysicianofRecordParticipant physicianofRecordParticipant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianofRecordParticipant.validatePhysicianofRecordParticipantTypeCode(diagnostics, context);
	}

	/**
	 * Validates the validatePhysicianofRecordParticipantAssignedEntity constraint of '<em>Physicianof Record Participant</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_validatePhysicianofRecordParticipantAssignedEntity(
			PhysicianofRecordParticipant physicianofRecordParticipant, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return physicianofRecordParticipant.validatePhysicianofRecordParticipantAssignedEntity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_AssignedEntity(
			PhysicianofRecordParticipant_AssignedEntity physicianofRecordParticipant_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(physicianofRecordParticipant_AssignedEntity, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validateAssignedEntity_validateClassCode(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianofRecordParticipant_AssignedEntity_validateAssignedEntityCode(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		if (result || diagnostics != null) result &= validatePhysicianofRecordParticipant_AssignedEntity_validateAssignedEntityId(physicianofRecordParticipant_AssignedEntity, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedEntityCode constraint of '<em>Physicianof Record Participant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_AssignedEntity_validateAssignedEntityCode(
			PhysicianofRecordParticipant_AssignedEntity physicianofRecordParticipant_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicianofRecordParticipant_AssignedEntity.validateAssignedEntityCode(diagnostics, context);
	}

	/**
	 * Validates the validateAssignedEntityId constraint of '<em>Physicianof Record Participant Assigned Entity</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePhysicianofRecordParticipant_AssignedEntity_validateAssignedEntityId(
			PhysicianofRecordParticipant_AssignedEntity physicianofRecordParticipant_AssignedEntity,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return physicianofRecordParticipant_AssignedEntity.validateAssignedEntityId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedEntity_AssignedPerson(AssignedEntity_AssignedPerson assignedEntity_AssignedPerson,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(assignedEntity_AssignedPerson, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateClassCode(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= cdaValidator.validatePerson_validateDeterminerCode(assignedEntity_AssignedPerson, diagnostics, context);
		if (result || diagnostics != null) result &= validateAssignedEntity_AssignedPerson_validateAssignedPersonName(assignedEntity_AssignedPerson, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateAssignedPersonName constraint of '<em>Assigned Entity Assigned Person</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAssignedEntity_AssignedPerson_validateAssignedPersonName(
			AssignedEntity_AssignedPerson assignedEntity_AssignedPerson, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return assignedEntity_AssignedPerson.validateAssignedPersonName(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTextObservation(TextObservation textObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(textObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(textObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateTextObservation_validateTextObservationTemplateId(textObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateTextObservationTemplateId constraint of '<em>Text Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateTextObservation_validateTextObservationTemplateId(TextObservation textObservation,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return textObservation.validateTextObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateQuantityMeasurementObservation(
			QuantityMeasurementObservation quantityMeasurementObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(quantityMeasurementObservation, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(quantityMeasurementObservation, diagnostics, context);
		if (result || diagnostics != null) result &= validateQuantityMeasurementObservation_validateQuantityMeasurementObservationTemplateId(quantityMeasurementObservation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateQuantityMeasurementObservationTemplateId constraint of '<em>Quantity Measurement Observation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateQuantityMeasurementObservation_validateQuantityMeasurementObservationTemplateId(
			QuantityMeasurementObservation quantityMeasurementObservation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return quantityMeasurementObservation.validateQuantityMeasurementObservationTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCodeObservations(CodeObservations codeObservations, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(codeObservations, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(codeObservations, diagnostics, context);
		if (result || diagnostics != null) result &= validateCodeObservations_validateCodeObservationsTemplateId(codeObservations, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateCodeObservationsTemplateId constraint of '<em>Code Observations</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateCodeObservations_validateCodeObservationsTemplateId(CodeObservations codeObservations,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return codeObservations.validateCodeObservationsTemplateId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureContext(ProcedureContext procedureContext, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(procedureContext, diagnostics, context)) return false;
		boolean result = validate_EveryMultiplicityConforms(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryDataValueConforms(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryReferenceIsContained(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryProxyResolves(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_UniqueID(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryKeyUnique(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validate_EveryMapEntryUnique(procedureContext, diagnostics, context);
		if (result || diagnostics != null) result &= validateProcedureContext_validateProcedureContextTemplateId(procedureContext, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validateProcedureContextTemplateId constraint of '<em>Procedure Context</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateProcedureContext_validateProcedureContextTemplateId(ProcedureContext procedureContext,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return procedureContext.validateProcedureContextTemplateId(diagnostics, context);
	}

	/**
	 * Returns the resource locator that will be used to fetch messages for this validator's diagnostics.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		return ConsolPlugin.INSTANCE;
	}

} // ConsolValidator
