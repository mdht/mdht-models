<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:CDA="http://www.openhealthtools.org/mdht/schemas/cda/4" xmlns:Ecore="http://www.eclipse.org/uml2/schemas/Ecore/5" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http://www.eclipse.org/uml2/schemas/Ecore/5 pathmap://UML_PROFILES/Ecore.profile.uml#_z1OFcHjqEdy8S4Cr8Rc_NA">
  <uml:Package xmi:id="_0VELMAuuEeGvGIuLiiZuOg" name="consol">
    <packagedElement xmi:type="uml:Class" xmi:id="_0V7G0AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivity">
      <eAnnotations xmi:id="_0V7G0QuuEeGvGIuLiiZuOg" source="uml2.alias">
        <details xmi:id="_0V7G0guuEeGvGIuLiiZuOg" key="Allergies and Drug Sensitivities"/>
      </eAnnotations>
      <eAnnotations xmi:id="_0V7G0wuuEeGvGIuLiiZuOg" source="uml2.alias">
        <details xmi:id="_0V7G1AuuEeGvGIuLiiZuOg" key="Allergy and Drug Sensitivity"/>
      </eAnnotations>
      <ownedComment xmi:id="_0YyNkAuuEeGvGIuLiiZuOg" annotatedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <body>A problem is a clinical statement that a clinician is particularly concerned about and wants to track. It has important patient management use cases (e.g. health records often present the problem list as a way of summarizing a patient's medical history).</body>
      </ownedComment>
      <ownedComment xmi:id="_0YyNkQuuEeGvGIuLiiZuOg" annotatedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This event (moodCode='EVN') represents an act (act classCode='ACT') of being concerned&#xD;
about a problem, allergy or other issue. The &amp;lt;effectiveTime> element describes the period of&#xD;
concern. The subject of concern is one or more observations about related problems (see&#xD;
1.3.6.1.4.1.19376.1.5.3.1.4.5.2) or allergies and intolerances (see&#xD;
1.3.6.1.4.1.19376.1.5.3.1.4.5.3). Additional references can be provided having additional information related to the concern. The concern entry allows related acts to be grouped. This&#xD;
allows representing the history of a problem as a series of observation over time, for example.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
All concerns reflect the act of recording (&amp;lt;act classCode='ACT'>) the event (moodCode='EVN')&#xD;
of being concerned about a problem, allergy or other issue about the patient condition.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0YyNkguuEeGvGIuLiiZuOg" annotatedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <body>This entry is a specialization of the Concern Entry, wherein the subject of the concern is focused on an allergy or intolerance.</body>
      </ownedComment>
      <ownedComment xmi:id="_0V7G1QuuEeGvGIuLiiZuOg" annotatedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This module contains the allergy or intolerance conditions and the associated adverse reactions suffered&#xD;
    by the patient. See the HL7 Continuity of Care Document Section 3.8 for constraints applicable to this module. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0YmAVQuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityEntryRelationshipRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YmAVguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YmAXAuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivitySubjectOfTarget">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YmAXQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SUBJ, cda::ClinicalStatement)->forAll(target : cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemObservation) or target.oclIsKindOf(ccd::AlertObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YmAXwuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityContainsProblemObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YmAYAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSection().oclIsKindOf(ccd::ProblemSection) implies self.getObservations()&#xD;&#xA;   ->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::ProblemObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YmAYguuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityContainsAlertObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YmAYwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSection().oclIsKindOf(ccd::AlertsSection) implies self.getObservations()&#xD;&#xA;   ->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YsG8AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityContainsPatientAwareness">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YsG8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YsG8wuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityEffectiveTimeLowHigh">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YsG9AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.effectiveTime.low.oclIsUndefined()&#xD;&#xA;   and ((self.statusCode.code = 'completed' or self.statusCode.code = 'aborted') implies not self.effectiveTime.high.oclIsUndefined())&#xD;&#xA;   and ((self.statusCode.code &lt;> 'completed' and self.statusCode.code &lt;> 'aborted') implies self.effectiveTime.high.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YsG9guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityHasRelatedObservations">
        <ownedComment xmi:id="_0YsG9wuuEeGvGIuLiiZuOg">
          <body>Each concern is about one or more related problems or allergies. This is how a series of related observations can be grouped as a single concern.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YsG-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship.observation.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.5') or self.entryRelationship.observation.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.6')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YsG-guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityRelatedObservationsTypeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YsG-wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|er.typeCode &lt;> vocab::x_ActRelationshipEntryRelationship::SUBJ)->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YsHAguuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityHasRelatedReferencesTypeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YsHAwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->forAll(r | r.typeCode = vocab::x_ActRelationshipExternalReference)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G1guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAdvereEventDate" constrainedElement="_0V7G3guuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G1wuuEeGvGIuLiiZuOg">
          <body>This is a date that expresses when this particular&#xD;
allergy or intolerance was known to be active for the&#xD;
patient</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G2AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G2QuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAdvereEventType" constrainedElement="_0V7G1guuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G2guuEeGvGIuLiiZuOg">
          <body>Describes the type of product and intolerance suffered&#xD;
by the patient. The type of product shall be classified&#xD;
with respect to whether the adverse event occurs in&#xD;
relationship with a medication, food, or environmental&#xD;
or other product. The adverse event should also be&#xD;
classified more specifically as an allergy, non-allergy&#xD;
intolerance, or just adverse reaction if that level of&#xD;
detail is not known</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G2wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G3AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAdvereEventTypeVocab" constrainedElement="_0V7G2QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G3QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined() and obs.code.codeSystem = '2.16.840.1.113883.6.96' and (obs.code.code = '420134006' or obs.code.code ='418038007' or obs.code.code='419511003' or obs.code.code='418471000' or obs.code.code='419199007' or obs.code.code='416098002' or obs.code.code='414285001' or obs.code.code='59037007' or obs.code.code='235719002'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G3guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyProduct">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_GgvgUDxbEd6JwqSGecoePg"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G3wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G4AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyProductTypeCode">
        <constrainedElement xmi:type="uml:Constraint" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_yFyY4FgEEeCQ8PeHNHg5Pw"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies par.typeCode = vocab::ParticipationType::CSM))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G4guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductDetailParticipantRole">
        <constrainedElement xmi:type="uml:Constraint" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_vzvfwFfuEeCQ8PeHNHg5Pw"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G4wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined()))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G5AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductDetailParticipantRoleClassCode">
        <constrainedElement xmi:type="uml:Constraint" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_yFyY4FgEEeCQ8PeHNHg5Pw"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G5QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode=vocab::RoleClassRoot::MANU))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G5guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductDetailPlayingEntity">
        <constrainedElement xmi:type="uml:Constraint" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_yFyY4FgEEeCQ8PeHNHg5Pw"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G5wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined())))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G6AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductDetailPlayingEntityClassCode">
        <constrainedElement xmi:type="uml:Constraint" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_yFyY4FgEEeCQ8PeHNHg5Pw"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G6QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode =vocab::EntityClassRoot::MMAT )))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G6guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductDetailName" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G6wuuEeGvGIuLiiZuOg">
          <body>This is the name or other description of the product or&#xD;
agent that causes the intolerance</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G7AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.name->size() = 1)))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G7QuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityProductCode" constrainedElement="_0V7G6guuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G7guuEeGvGIuLiiZuOg">
          <body>This value is a code describing the product</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G7wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code->size() = 1)))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G8AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyProductFoodVocab" constrainedElement="_0V7G3guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code->size() = 1 and (playe.code.codeSystem =&#xD;&#xA;'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G8guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyProductMedClassVocab" constrainedElement="_0V7G3guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code->size() = 1 and (playe.code.codeSystem =&#xD;&#xA;'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G9AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyProductSpecificMedVocab" constrainedElement="_0V7G3guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G9QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and &#xD;&#xA;obs.participant->exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and &#xD;&#xA;prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity->exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code->size() = 1 and (playe.code.codeSystem =&#xD;&#xA;'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G9guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityReactionText" constrainedElement="_0V7G7QuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G9wuuEeGvGIuLiiZuOg">
          <body>This is the reaction that may be caused by the product&#xD;
or agent</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.text.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G-QuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityReactionCode" constrainedElement="_0V7G9guuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G-guuEeGvGIuLiiZuOg">
          <body>This value is a code describing the reaction</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G-wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G_AuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivityReactionCodeVocab" constrainedElement="_0V7G-QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7G_QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '404684003' or o.code.code = '243796009')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7G_guuEeGvGIuLiiZuOg" name="AllergyDrugSensitivitySeverityText" constrainedElement="_0V7G-QuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7G_wuuEeGvGIuLiiZuOg">
          <body>This is a description of the level of severity of the&#xD;
allergy or intolerance</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7HAAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.text.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7HAQuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivitySeverityCode" constrainedElement="_0V7G_guuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0V7HAguuEeGvGIuLiiZuOg">
          <body>This value is a code describing the level severity of&#xD;
the allergy or intolerance</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7HAwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0V7HBAuuEeGvGIuLiiZuOg" name="AllergyDrugSensitivitySeverityCodeVocab" constrainedElement="_0V7HAQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0V7HBQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()->exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '255604002' or o.code.code = '371923003' or o.code.code = '6736007' or o.code.code = '371924009' or o.code.code = '24484000' or o.code.code = '399166001')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n3UCUAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityTemplateId" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n3UCUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.6')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n3yjcAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityClassCode" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n3yjcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n34qEAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityMoodCode" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n34qEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n34qEgu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityId" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n34qEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n34qFAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityCodeNullFlavor" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n34qFQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.nullFlavor = vocab::NullFlavor::NA)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n3-wsAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityEffectiveTime" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n3-wsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4REkAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityEpisodeObservation" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4REkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::EpisodeObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n613cAu0EeGvGIuLiiZuOg" name="AllergyDrugSensitivityAllergyIntolerance" constrainedElement="_0V7G0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n613cQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AllergyIntolerance) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0YyNkwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n4REkgu0EeGvGIuLiiZuOg" name="getEpisodeObservation" isQuery="true" bodyCondition="_n4RElQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n4RElQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n4REkgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4RElgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::EpisodeObservation))->asSequence()->first().oclAsType(consol::EpisodeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n4REkwu0EeGvGIuLiiZuOg" type="_0WNaswuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n4RElAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n613cgu0EeGvGIuLiiZuOg" name="getAllergyIntolerances" isQuery="true" bodyCondition="_n613dQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n613dQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n613cgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n613dgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance)).oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n613cwu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n613dAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0WNaswuuEeGvGIuLiiZuOg" name="EpisodeObservation">
      <ownedComment xmi:id="_0WNatAuuEeGvGIuLiiZuOg" annotatedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <body>Episode observations are used to distinguish among multiple occurrences of a problem or social history item. An episode observation is used to indicate that a problem act represents a new episode, distinct from other episodes of a similar concern.</body>
      </ownedComment>
      <ownedRule xmi:id="_0WNauAuuEeGvGIuLiiZuOg" name="EpisodeObservationOneEntryRelationshipSUBJ" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WNauQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SUBJ, ccd::ProblemAct)->size() = 1&#xD;&#xA;  or self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SUBJ, ccd::SocialHistoryObservation)->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WNauguuEeGvGIuLiiZuOg" name="EpisodeObservationExistsEntryRelationshipSAS" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WNauwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SAS, ccd::ProblemAct)->size() >0&#xD;&#xA;  or self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SAS, ccd::SocialHistoryObservation)->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n3-wsgu0EeGvGIuLiiZuOg" name="EpisodeObservationTemplateId" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n3-wswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.41')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4E3UAu0EeGvGIuLiiZuOg" name="EpisodeObservationClassCode" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4E3UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4E3Ugu0EeGvGIuLiiZuOg" name="EpisodeObservationMoodCode" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4E3Uwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4E3VAu0EeGvGIuLiiZuOg" name="EpisodeObservationCode" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4E3VQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = 'ASSERTION' and value.codeSystem = '2.16.840.1.113883.5.4'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4K98Au0EeGvGIuLiiZuOg" name="EpisodeObservationStatusCode" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4K98Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4K98gu0EeGvGIuLiiZuOg" name="EpisodeObservationValue" constrainedElement="_0WNaswuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4K98wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;value.code = '404684003' and value.codeSystem = '2.16.840.1.113883.6.96'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0WThUwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0WThWguuEeGvGIuLiiZuOg" name="AllergyIntolerance">
      <eAnnotations xmi:id="_0WThWwuuEeGvGIuLiiZuOg" source="uml2.alias">
        <details xmi:id="_0WThXAuuEeGvGIuLiiZuOg" key="Allergies and Intolerances"/>
      </eAnnotations>
      <ownedComment xmi:id="_0YmAUAuuEeGvGIuLiiZuOg" annotatedElement="_0WThWguuEeGvGIuLiiZuOg">
        <body>&lt;p>This section makes use of the linking, severity, clinical status and comment content specifications defined elsewhere in the technical framework. In HL7 RIM parlance, observations about a problem, complaint, symptom, finding, diagnosis, or functional limitation of a patient is the event (moodCode='EVN') of observing (&amp;lt;observation classCode='OBS'>) that problem. The &amp;lt;value> of the observation comes from a controlled vocabulary representing such things. The &amp;lt;code> contained within the &amp;lt;observation> describes the method of determination from yet another controlled vocabulary.&lt;/p>&#xD;
&#xD;
&lt;p>The basic pattern for reporting a problem uses the CDA &amp;lt;observation> element, setting the classCode='OBS' to represent that this is an observation of a problem, and the moodCode='EVN', to represent that this is an observation that has in fact taken place. The negationInd attribute, if true, specifies that the problem indicated was observed to not have occurred (which is subtly but importantly different from having not been observed). The value of negationInd should not normally be set to true. Instead, to record that there is &quot;no prior history of chicken pox&quot;, one would use a coded value indicated exactly that. However, it is not always possible to record problems in this manner, especially if using a controlled vocabulary that does not supply pre-coordinated negations , or which do not allow the negation to be recorded with post-coordinated coded terminology.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0WThXQuuEeGvGIuLiiZuOg" annotatedElement="_0WThWguuEeGvGIuLiiZuOg">
        <body>Allergies and intolerances are special kinds of problems, and so are also recorded in the CDA&#xD;
&amp;lt;observation> element, with classCode='OBS'. They follow the same pattern as the problem&#xD;
entry, with exceptions noted below.</body>
      </ownedComment>
      <ownedRule xmi:id="_0Yf5uAuuEeGvGIuLiiZuOg" name="AllergyIntoleranceInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Yf5uQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Yf5uwuuEeGvGIuLiiZuOg" name="AllergyIntoleranceContainsPatientAwareness">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Yf5vAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Yf5vguuEeGvGIuLiiZuOg" name="AllergyIntoleranceHasTextReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Yf5vwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Yf5wQuuEeGvGIuLiiZuOg" name="AllergyIntoleranceCommentInversionInd">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Yf5wguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(rel : cda::EntryRelationship | (not rel.act.oclIsUndefined() and rel.act.oclIsKindOf(ihe::Comment)) implies rel.inversionInd=true)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThYQuuEeGvGIuLiiZuOg" name="AllergyIntoleranceCodeCodeSystemRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not (code.code.oclIsUndefined() or code.codeSystem.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThYwuuEeGvGIuLiiZuOg" name="AllergyIntoleranceDisplayNameCodeName" constrainedElement="_0WThYQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThZAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not (code.displayName.oclIsUndefined() or code.codeSystemName.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThaAuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstance">
        <ownedComment xmi:id="_0WThaQuuEeGvGIuLiiZuOg">
          <body>The substance that causes the allergy or intolerance may be specified in the &amp;lt;participant> element.</body>
        </ownedComment>
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_GgvgUDxbEd6JwqSGecoePg"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThaguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThawuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstanceTypeCode" constrainedElement="_0WThbQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThbAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->forAll(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThbQuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstanceParticipantRole" constrainedElement="_0WThaAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThbguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThbwuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstanceParticipantRoleClassCode" constrainedElement="_0WThbQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThcAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole->one(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThcQuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstancePlayingEntity" constrainedElement="_0WThbQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThcwuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstancePlayingEntityClassCode" constrainedElement="_0WThbQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThdAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity->one(pe : cda::PlayingEntity | pe.classCode = vocab::EntityClassRoot::MMAT)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThdQuuEeGvGIuLiiZuOg" name="AllergyIntoleranceAllergySubstancePlayingEntityCode" constrainedElement="_0WThaAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WThdguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0WThdwuuEeGvGIuLiiZuOg" name="AllergyIntolerancePlayingEntityCodeReference" constrainedElement="_0WThdQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0WTheAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity.code.originalText.reference->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4RElwu0EeGvGIuLiiZuOg" name="AllergyIntoleranceTemplateId" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4REmAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.6')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4jYcAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceMoodCode" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4jYcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4jYcgu0EeGvGIuLiiZuOg" name="AllergyIntoleranceId" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4jYcwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4jYdAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceCode" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4jYdQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.4'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4pfEAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceText" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4pfEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4pfEgu0EeGvGIuLiiZuOg" name="AllergyIntoleranceStatusCode" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4pfEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4vlsAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceEffectiveTime" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4vlsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4vlsgu0EeGvGIuLiiZuOg" name="AllergyIntoleranceValue" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4vlswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | element.oclIsTypeOf(datatypes::CD)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4vltAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceProblemEntryReactionObservationContainer" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4vltQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::MFST)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n4vluwu0EeGvGIuLiiZuOg" name="AllergyIntoleranceSeverity" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4vlvAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::Severity) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n41sVQu0EeGvGIuLiiZuOg" name="AllergyIntoleranceProblemStatusObservation" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sVgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n41sXAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceComment" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sXQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::Comment) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5B5lAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceAgeObservation" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5B5lQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5aUEAu0EeGvGIuLiiZuOg" name="AllergyIntoleranceHealthStatusObservation" constrainedElement="_0WThWguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5aUEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::HealthStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0YmAUQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n4vltgu0EeGvGIuLiiZuOg" name="getProblemEntryReactionObservationContainers" isQuery="true" bodyCondition="_n4vluQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n4vluQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n4vltgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n4vlugu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer)).oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n4vltwu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n4vluAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n41sUAu0EeGvGIuLiiZuOg" name="getSeverity" isQuery="true" bodyCondition="_n41sUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n41sUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n41sUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Severity))->asSequence()->first().oclAsType(consol::Severity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n41sUQu0EeGvGIuLiiZuOg" type="_0XKc9QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n41sUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n41sVwu0EeGvGIuLiiZuOg" name="getProblemStatusObservation" isQuery="true" bodyCondition="_n41sWgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n41sWgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n41sVwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sWwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation))->asSequence()->first().oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n41sWAu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n41sWQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n41sXgu0EeGvGIuLiiZuOg" name="getComments" isQuery="true" bodyCondition="_n41sYQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n41sYQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n41sXgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sYgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Comment)).oclAsType(consol::Comment)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n41sXwu0EeGvGIuLiiZuOg" type="_0YNl3QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n41sYAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n5IAMAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_n5IAMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n5IAMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n5IAMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5IANAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n5IAMQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n5IAMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n5aUEgu0EeGvGIuLiiZuOg" name="getHealthStatusObservation" isQuery="true" bodyCondition="_n5aUFQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n5aUFQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n5aUEgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5aUFgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::HealthStatusObservation))->asSequence()->first().oclAsType(consol::HealthStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n5aUEwu0EeGvGIuLiiZuOg" type="_0Wr72AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n5aUFAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0Wl1NAuuEeGvGIuLiiZuOg" name="AgeObservation">
      <ownedComment xmi:id="_0Wl1NQuuEeGvGIuLiiZuOg" annotatedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <body>A common scenario is that a patient will know the age of a relative when they had a certain condition or when they died, but will not know the actual year (e.g. &quot;grandpa died of a heart attack at the age of 50&quot;). Often times, neither precise dates nor ages are known (e.g. &quot;cousin died of congenital heart disease as an infant&quot;). In all cases, dates and times and ages can be expressed in narrative.</body>
      </ownedComment>
      <ownedRule xmi:id="_n41sYwu0EeGvGIuLiiZuOg" name="AgeObservationTemplateId" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n41sZAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.38')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n47y8Au0EeGvGIuLiiZuOg" name="AgeObservationClassCode" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n47y8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n47y8gu0EeGvGIuLiiZuOg" name="AgeObservationMoodCode" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n47y8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n47y9Au0EeGvGIuLiiZuOg" name="AgeObservationCode" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n47y9Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '397659008' and value.codeSystem = '2.16.840.1.113883.6.96'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5B5kAu0EeGvGIuLiiZuOg" name="AgeObservationStatusCode" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5B5kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5B5kgu0EeGvGIuLiiZuOg" name="AgeObservationValue" constrainedElement="_0Wl1NAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5B5kwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0Wr70guuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0Wr72AuuEeGvGIuLiiZuOg" name="HealthStatusObservation">
      <ownedComment xmi:id="_0Wr72QuuEeGvGIuLiiZuOg" annotatedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <body>The health status observation records information about the current health status of the patient.</body>
      </ownedComment>
      <ownedRule xmi:id="_0W4JEAuuEeGvGIuLiiZuOg" name="HealthStatusObservationTargetOfEntryRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0W4JEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entry : cda::EntryRelationship | entry.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0W4JFwuuEeGvGIuLiiZuOg" name="HealthStatusObservationNoAdditionalParticipants">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0W4JGAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0W4JGguuEeGvGIuLiiZuOg" name="HealthStatusObservationNoAdditionalRelationships">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0W4JGwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|not er.observation.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Wr72guuEeGvGIuLiiZuOg" name="HealthStatusObservationHasTextReference">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_MIoHYCQKEeCxCon8a79rfA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Wr72wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5IANQu0EeGvGIuLiiZuOg" name="HealthStatusObservationTemplateId" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5IANgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.1.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5IAOAu0EeGvGIuLiiZuOg" name="HealthStatusObservationClassCode" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5IAOQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5OG0Au0EeGvGIuLiiZuOg" name="HealthStatusObservationMoodCode" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5OG0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5OG0gu0EeGvGIuLiiZuOg" name="HealthStatusObservationCode" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5OG0wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '11323-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5OG1Au0EeGvGIuLiiZuOg" name="HealthStatusObservationText" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5UNcAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5UNcQu0EeGvGIuLiiZuOg" name="HealthStatusObservationStatusCode" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5UNcgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5UNcwu0EeGvGIuLiiZuOg" name="HealthStatusObservationValue" constrainedElement="_0Wr72AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5UNdAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = element.oclAsType(datatypes::CE) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '81323004' or value.code = '313386006' or value.code = '162467007' or value.code = '161901003' or value.code = '271593001' or value.code = '21134002' or value.code = '161045001' or value.code = '419099009')))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0W4JHQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0W-PuwuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainer">
      <ownedComment xmi:id="_0YZzJQuuEeGvGIuLiiZuOg" annotatedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <body>A reaction represents an adverse event due to an administered or exposed substance. A reaction can be defined with respect to its severity, and can have been treated by one or more interventions. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).</body>
      </ownedComment>
      <ownedComment xmi:id="_0YZzJguuEeGvGIuLiiZuOg" annotatedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section makes use of the linking, severity, clinical status and comment content specifications defined elsewhere in the technical framework. In HL7 RIM parlance, observations about a problem, complaint, symptom, finding, diagnosis, or functional limitation of a patient is the event (moodCode='EVN') of observing (&amp;lt;observation classCode='OBS'>) that problem. The &amp;lt;value> of the observation comes from a controlled vocabulary representing such things. The &amp;lt;code> contained within the &amp;lt;observation> describes the method of determination from yet another controlled vocabulary.&lt;/p>&#xD;
&#xD;
&lt;p>The basic pattern for reporting a problem uses the CDA &amp;lt;observation> element, setting the classCode='OBS' to represent that this is an observation of a problem, and the moodCode='EVN', to represent that this is an observation that has in fact taken place. The negationInd attribute, if true, specifies that the problem indicated was observed to not have occurred (which is subtly but importantly different from having not been observed). The value of negationInd should not normally be set to true. Instead, to record that there is &quot;no prior history of chicken pox&quot;, one would use a coded value indicated exactly that. However, it is not always possible to record problems in this manner, especially if using a controlled vocabulary that does not supply pre-coordinated negations , or which do not allow the negation to be recorded with post-coordinated coded terminology.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0YZzEAuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerHasReactionIntervention">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzEwuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerReactionInterventionTypeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzFAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->exists(entry : cda::ClinicalStatement | entry.oclIsKindOf(ccd::ProcedureActivity) or entry.oclIsKindOf(ccd::MedicationActivity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzFguuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerReactionInterventionType">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzFwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->exists(entry : cda::ClinicalStatement | entry.oclIsKindOf(ccd::ProcedureActivity) or entry.oclIsKindOf(ccd::MedicationActivity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzGQuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzGguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzHAuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerContainsPatientAwareness">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzHQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzHwuuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerHasTextReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzIAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YZzIguuEeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerCommentInversionInd">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YZzIwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(rel : cda::EntryRelationship | (not rel.act.oclIsUndefined() and rel.act.oclIsKindOf(ihe::Comment)) implies rel.inversionInd=true)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5aUFwu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerTemplateId" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5aUGAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.5')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5gasAu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerMoodCode" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5gasQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5mhUAu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerId" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5mhUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5mhUgu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerCode" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5mhUwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '404684003' or value.code = '409586006' or value.code = '282291009' or value.code = '64572001' or value.code = '248536006' or value.code = '418799008' or value.code = '55607006')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5sn8Au0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerText" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5sn8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5sn8gu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerStatusCode" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5sn8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5sn9Au0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerEffectiveTime" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5sn9Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5yukAu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerValue" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5yukQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | element.oclIsTypeOf(datatypes::CD)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5yukgu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerAgeObservation" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5yukwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6FCcgu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerSeverity" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6FCcwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::Severity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6dc8Au0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerProblemStatusObservation" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6dc8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6dc9wu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerHealthStatusObservation" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6dc-Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::HealthStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6vw0gu0EeGvGIuLiiZuOg" name="ProblemEntryReactionObservationContainerComment" constrainedElement="_0W-PuwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6vw0wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::Comment) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0YZzJwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n5yulAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_n5yulwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n5yulwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n5yulAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5yumAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n5yulQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n5yulgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n6FCdAu0EeGvGIuLiiZuOg" name="getSeverity" isQuery="true" bodyCondition="_n6FCdwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n6FCdwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n6FCdAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6FCeAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Severity))->asSequence()->first().oclAsType(consol::Severity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n6FCdQu0EeGvGIuLiiZuOg" type="_0XKc9QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n6FCdgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n6dc8gu0EeGvGIuLiiZuOg" name="getProblemStatusObservation" isQuery="true" bodyCondition="_n6dc9Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n6dc9Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n6dc8gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6dc9gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation))->asSequence()->first().oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n6dc8wu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n6dc9Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n6dc-Qu0EeGvGIuLiiZuOg" name="getHealthStatusObservation" isQuery="true" bodyCondition="_n6dc_Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n6dc_Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_n6dc-Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6dc_Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::HealthStatusObservation))->asSequence()->first().oclAsType(consol::HealthStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n6dc-gu0EeGvGIuLiiZuOg" type="_0Wr72AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n6dc-wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n6vw1Au0EeGvGIuLiiZuOg" name="getComments" isQuery="true" bodyCondition="_n6vw1wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n6vw1wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n6vw1Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6vw2Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Comment)).oclAsType(consol::Comment)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n6vw1Qu0EeGvGIuLiiZuOg" type="_0YNl3QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n6vw1gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0XKc9QuuEeGvGIuLiiZuOg" name="Severity">
      <ownedComment xmi:id="_0XKc9guuEeGvGIuLiiZuOg" annotatedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <body>This specification models a severity observation as a separate observation from the condition. While this model is different from work presently underway by various organizations (i.e., SNOMED, HL7, TermInfo), it is not wholly incompatible with that work. In that work, qualifiers may be used to identify severity in the coded condition observation, and a separate severity observation is no longer necessary. The use of qualifiers is not precluded by this specification. However, to support semantic interoperability between EMR systems using different vocabularies, this specification does require that severity information also be provided in a separate observation. This ensures that all EMR systems have equal access to the information, regardless of the vocabularies they support.</body>
      </ownedComment>
      <ownedRule xmi:id="_0XKc9wuuEeGvGIuLiiZuOg" name="SeverityHasTextReference" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0XKc-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5yumQu0EeGvGIuLiiZuOg" name="SeverityTemplateId" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5yumgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n541MAu0EeGvGIuLiiZuOg" name="SeverityClassCode" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n541MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n541Mgu0EeGvGIuLiiZuOg" name="SeverityMoodCode" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n541Mwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n541NAu0EeGvGIuLiiZuOg" name="SeverityCode" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n541NQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = 'SEV' and value.codeSystem = '2.16.840.1.113883.5.4'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5-70Au0EeGvGIuLiiZuOg" name="SeverityText" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5-70Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n5-70gu0EeGvGIuLiiZuOg" name="SeverityStatusCode" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n5-70wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6FCcAu0EeGvGIuLiiZuOg" name="SeverityValue" constrainedElement="_0XKc9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6FCcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.1063' and (value.code = 'H' or value.code = 'M' or value.code = 'L')))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0XQjmAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0XWqOguuEeGvGIuLiiZuOg" name="ProblemStatusObservation">
      <ownedComment xmi:id="_0XWqOwuuEeGvGIuLiiZuOg" annotatedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <body>Any problem or allergy observation may reference a problem status observation. The clinical status observation records information about the current status of the problem or allergy, for example, whether it is active, in remission, resolved, et cetera.</body>
      </ownedComment>
      <ownedRule xmi:id="_0Xcw2guuEeGvGIuLiiZuOg" name="ProblemStatusObservationTargetOfEntryRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Xcw2wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entry : cda::EntryRelationship | entry.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Xi3dAuuEeGvGIuLiiZuOg" name="ProblemStatusObservationNoAdditionalParticipants">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Xi3dQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Xi3dwuuEeGvGIuLiiZuOg" name="ProblemStatusObservationNoAdditionalRelationships">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Xi3eAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|not er.observation.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0XWqPAuuEeGvGIuLiiZuOg" name="ProblemStatusObservationHasTextReference">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_MIoHYCQKEeCxCon8a79rfA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0XWqPQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6FCeQu0EeGvGIuLiiZuOg" name="ProblemStatusObservationTemplateId" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6FCegu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.1.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6LJEAu0EeGvGIuLiiZuOg" name="ProblemStatusObservationClassCode" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6LJEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6LJEgu0EeGvGIuLiiZuOg" name="ProblemStatusObservationMoodCode" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6LJEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6RPsAu0EeGvGIuLiiZuOg" name="ProblemStatusObservationCode" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6RPsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '33999-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6RPsgu0EeGvGIuLiiZuOg" name="ProblemStatusObservationText" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6RPswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6XWUAu0EeGvGIuLiiZuOg" name="ProblemStatusObservationStatusCode" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6XWUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6XWUgu0EeGvGIuLiiZuOg" name="ProblemStatusObservationValue" constrainedElement="_0XWqOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6XWUwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = element.oclAsType(datatypes::CE) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '55561003' or value.code = '73425007' or value.code = '90734009' or value.code = '7087005' or value.code = '255227004' or value.code = '415684004' or value.code = '410516002' or value.code = '413322009')))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0YHfMAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0YNl3QuuEeGvGIuLiiZuOg" name="Comment">
      <ownedComment xmi:id="_0YTshwuuEeGvGIuLiiZuOg" annotatedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <body>Used to contain comments associated with any of the data within the document.</body>
      </ownedComment>
      <ownedComment xmi:id="_0YTsiAuuEeGvGIuLiiZuOg" annotatedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <body>&lt;p>This entry allows for a comment to be supplied with each entry. For CDA this structure is usually included in the target act using the &amp;lt;entryRelationship> element defined in the CDA Schema, but can also be used in the &amp;lt;component> element when the comment appears within an &amp;lt;organizer>.&lt;/p>&#xD;
&#xD;
&lt;p>Any condition or allergy may be the subject of a comment.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0YNl3guuEeGvGIuLiiZuOg" annotatedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <body>This module contains a comment to be supplied for any other entry Content Modules.</body>
      </ownedComment>
      <ownedRule xmi:id="_0YTsewuuEeGvGIuLiiZuOg" name="CommentHasTextReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YTsfAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YTsfguuEeGvGIuLiiZuOg" name="CommentEffectiveTimeWhenAuthorPresent">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YTsfwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.author->isEmpty() implies not self.effectiveTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YTsgQuuEeGvGIuLiiZuOg" name="CommentHasAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YTsgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.author->isEmpty() implies (  self.author.assignedAuthor.id ->size() > 0 and self.author.assignedAuthor.addr ->size() > 0 and self.author.assignedAuthor.telecom ->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0YTshAuuEeGvGIuLiiZuOg" name="CommentHasAuthorOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0YTshQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.author->isEmpty() implies ( self.author->exists( a : cda::Author | ( (not a.assignedAuthor.assignedPerson.oclIsUndefined()) and not a.assignedAuthor.assignedPerson.name->isEmpty()) or (not a.assignedAuthor.representedOrganization.name->isEmpty())  ) )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6dc_gu0EeGvGIuLiiZuOg" name="CommentTemplateId" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6dc_wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6jjkAu0EeGvGIuLiiZuOg" name="CommentClassCode" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6jjkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6jjkgu0EeGvGIuLiiZuOg" name="CommentMoodCode" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6jjkwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6pqMAu0EeGvGIuLiiZuOg" name="CommentCode" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6pqMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '48767-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6pqMgu0EeGvGIuLiiZuOg" name="CommentText" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6pqMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n6vw0Au0EeGvGIuLiiZuOg" name="CommentStatusCode" constrainedElement="_0YNl3QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n6vw0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0YTsiQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0Y4UMAuuEeGvGIuLiiZuOg" name="Medication">
      <ownedComment xmi:id="_0ayYsAuuEeGvGIuLiiZuOg" annotatedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0ayYsQuuEeGvGIuLiiZuOg" annotatedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0agE1wuuEeGvGIuLiiZuOg" name="MedicationMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0agE2AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0agE2guuEeGvGIuLiiZuOg" name="MedicationHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0agE2wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0agE3QuuEeGvGIuLiiZuOg" name="MedicationHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0agE3guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLcAuuEeGvGIuLiiZuOg" name="MedicationInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLcwuuEeGvGIuLiiZuOg" name="MedicationHasPreconditionCriterion">
        <ownedComment xmi:id="_0amLdAuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLdQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLdwuuEeGvGIuLiiZuOg" name="MedicationHasReason">
        <ownedComment xmi:id="_0amLeAuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLeQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLewuuEeGvGIuLiiZuOg" name="MedicationHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLfAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLfguuEeGvGIuLiiZuOg" name="MedicationHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLfwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLgQuuEeGvGIuLiiZuOg" name="MedicationHasDosing">
        <ownedComment xmi:id="_0amLgguuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLgwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLhAuuEeGvGIuLiiZuOg" name="MedicationDosingRelationship">
        <ownedComment xmi:id="_0amLhQuuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLhguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLhwuuEeGvGIuLiiZuOg" name="MedicationHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0amLiAuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLiQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLiwuuEeGvGIuLiiZuOg" name="MedicationReasonClassMood">
        <ownedComment xmi:id="_0amLjAuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0amLjQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLjguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0amLkAuuEeGvGIuLiiZuOg" name="MedicationHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0amLkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSEAuuEeGvGIuLiiZuOg" name="MedicationHasIntructionsInversion">
        <ownedComment xmi:id="_0asSEQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSFAuuEeGvGIuLiiZuOg" name="MedicationProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSFQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSFwuuEeGvGIuLiiZuOg" name="MedicationProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSGAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSGguuEeGvGIuLiiZuOg" name="MedicationPreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSGwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSHQuuEeGvGIuLiiZuOg" name="MedicationHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSHguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0asSIAuuEeGvGIuLiiZuOg" name="MedicationHasFillNumber">
        <ownedComment xmi:id="_0asSIQuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0asSIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UNwuuEeGvGIuLiiZuOg" name="MedicationFirstEffectiveTimeDatatype" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UOAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.effectiveTime->exists (ef : datatypes::SXCM_TS | not ef.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UQQuuEeGvGIuLiiZuOg" name="MedicationDoseUnits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.doseQuantity->exists(dq : datatypes::IVL_PQ | dq.unit='2.16.840.1.113883.3.88.12.80.29')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4URQuuEeGvGIuLiiZuOg" name="MedicationDeliveryMethodDescription">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4URguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4URwuuEeGvGIuLiiZuOg" name="MedicationHasMedicationInformation" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4USAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct->exists(mp : cda::ManufacturedProduct | mp.oclIsKindOf(hitsp::MedicationInformation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4USQuuEeGvGIuLiiZuOg" name="MedicationHasStatusOfMedication" constrainedElement="_0Y4URwuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Y4USguuEeGvGIuLiiZuOg">
          <body>If the medication is Active, Discharged, Chronic,&#xD;
Acute, etc</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4USwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(po : cda::Observation |  po.oclIsKindOf(ccd::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UTAuuEeGvGIuLiiZuOg" name="MedicationHasIndication" constrainedElement="_0Y4USQuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Y4UTQuuEeGvGIuLiiZuOg">
          <body>The medical condition or problem&#xD;
intended to be addressed by the ordered product. For&#xD;
example: for chest pain, for pain, for high blood&#xD;
pressure</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UTguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(po : cda::Observation | po.oclIsKindOf(ccd::ProblemObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UTwuuEeGvGIuLiiZuOg" name="MedicationHasIndicationNarrativeText" constrainedElement="_0Y4UTAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UUAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(po : cda::Observation | po.oclIsKindOf(ccd::ProblemObservation) and not po.text.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UUQuuEeGvGIuLiiZuOg" name="MedicationHasIndicationVocab" constrainedElement="_0Y4UTAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(po : cda::Observation | po.oclIsKindOf(ccd::ProblemObservation) and po.code.codeSystem = '2.16.840.1.113883.6.96')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UUwuuEeGvGIuLiiZuOg" name="MedicationHasPatientInstructions" constrainedElement="_0Y4UUQuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Y4UVAuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
Instructions to the patient that are not traditionally part&#xD;
of the Sig. For example, &quot;keep in the refrigerator.&quot;&#xD;
More extensive patient education materials can also&#xD;
be included&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
External patient educational materials can be referenced with an appropriate URL entry in the text/ reference/value.&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UVQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->exists(po : cda::Act | po.oclIsKindOf(ihe::PatientMedicalInstructions))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UVguuEeGvGIuLiiZuOg" name="MedicationHasMedicationVehicle" constrainedElement="_0Y4UUwuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Y4UVwuuEeGvGIuLiiZuOg">
          <body>Non-active ingredient(s), or&#xD;
substances not of therapeutic interest, in which the&#xD;
active ingredients are dispersed. Most often applied to&#xD;
liquid products where the major fluid component is&#xD;
considered the vehicle. For example: Normal Saline is&#xD;
the vehicle in &quot;Ampicillin 150mg in 50ml NS&quot;;&#xD;
Aquaphor is the vehicle in &quot;10% LCD in Aquaphor&quot;</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UWAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant.participantRole->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UWQuuEeGvGIuLiiZuOg" name="MedicationVehicleType" constrainedElement="_0Y4UVguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UWguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UWwuuEeGvGIuLiiZuOg" name="MedicationVehicleClass" constrainedElement="_0Y4UWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UXAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UXQuuEeGvGIuLiiZuOg" name="MedicationVehicleCode" constrainedElement="_0Y4UWwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UXguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU and pr.code.code = '412307009' and pr.code.codeSystem = '2.16.840.1.113883.6.96')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UXwuuEeGvGIuLiiZuOg" name="MedicationVehicleName" constrainedElement="_0Y4UXQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UYAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU and pr.code.code = '412307009' and pr.code.codeSystem = '2.16.840.1.113883.6.96' and pr.playingEntity.name->size() > 0)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UYQuuEeGvGIuLiiZuOg" name="MedicationVehicleCodedName" constrainedElement="_0Y4UXwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode =vocab::ParticipationType::CSM and par.participantRole->exists(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU and pr.code.code = '412307009' and pr.code.codeSystem = '2.16.840.1.113883.6.96' and pr.playingEntity.code->size() > 0)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Y4UYwuuEeGvGIuLiiZuOg" name="MedicationVehicleCodedNameVocab" constrainedElement="_0Y4UYQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Y4UZAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(sa : cda::SubstanceAdministration | sa.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CSM and par.participantRole->exists(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::MANU and pr.code.code = '412307009' and pr.code.codeSystem = '2.16.840.1.113883.6.96' and pr.playingEntity.code->size() > 0 and pr.playingEntity.code.codeSystem = '2.16.840.1.113883.6.96')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n613dwu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n613eAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n7y5sAu0EeGvGIuLiiZuOg" name="MedicationId" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n7y5sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n75AUAu0EeGvGIuLiiZuOg" name="MedicationCode" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n75AUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n75AUgu0EeGvGIuLiiZuOg" name="MedicationStatusCode" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n75AUwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n75AVAu0EeGvGIuLiiZuOg" name="MedicationEffectiveTime" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n75AVQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty() and self.effectiveTime->forAll(element | element.oclIsTypeOf(datatypes::IVL_TS)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n7_G8Au0EeGvGIuLiiZuOg" name="MedicationRouteCode" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n7_G8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n7_G8gu0EeGvGIuLiiZuOg" name="MedicationApproachSiteCode" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n7_G8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8FNkAu0EeGvGIuLiiZuOg" name="MedicationDoseQuantity" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8FNkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8FNkgu0EeGvGIuLiiZuOg" name="MedicationRateQuantity" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8FNkwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8FNlAu0EeGvGIuLiiZuOg" name="MedicationMaxDoseQuantity" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8FNlQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8FNlgu0EeGvGIuLiiZuOg" name="MedicationAdministrationUnitCode" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8FNlwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8XhdAu0EeGvGIuLiiZuOg" name="MedicationMedicationSeriesNumberObservation" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8XhdQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8p1UAu0EeGvGIuLiiZuOg" name="MedicationMedicationStatusObservation" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8p1UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8v78gu0EeGvGIuLiiZuOg" name="MedicationProductInstance" constrainedElement="_0Y4UMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8v78wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ayYsguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_nazskEbuEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_n8LUMAu0EeGvGIuLiiZuOg" name="getMedicationType" isQuery="true" bodyCondition="_n8LUMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8LUMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8LUMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8LUNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8LUMQu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8LUMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n8LUNQu0EeGvGIuLiiZuOg" name="getMedicationOrderInformations" isQuery="true" bodyCondition="_n8LUOAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8LUOAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8LUNQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8LUOQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8LUNgu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8LUNwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n8LUOgu0EeGvGIuLiiZuOg" name="getReactionObservation" isQuery="true" bodyCondition="_n8LUPQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8LUPQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8LUOgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8LUPgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8LUOwu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8LUPAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n8Xhdgu0EeGvGIuLiiZuOg" name="getMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_n8XheQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8XheQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8Xhdgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8Xhegu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8Xhdwu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8XheAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n8p1Ugu0EeGvGIuLiiZuOg" name="getMedicationStatusObservation" isQuery="true" bodyCondition="_n8p1VQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8p1VQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8p1Ugu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8p1Vgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8p1Uwu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8p1VAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n8v79Au0EeGvGIuLiiZuOg" name="getProductInstances" isQuery="true" bodyCondition="_n8v79wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n8v79wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n8v79Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8v7-Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n8v79Qu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n8v79gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n82Ckgu0EeGvGIuLiiZuOg" name="getInternalReferences" isQuery="true" bodyCondition="_n82ClQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n82ClQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n82Ckgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n82Clgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n82Ckwu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n82ClAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n9CP0gu0EeGvGIuLiiZuOg" name="getPatientMedicalInstructionss" isQuery="true" bodyCondition="_n9CP1Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n9CP1Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n9CP0gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9CP1gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n9CP0wu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n9CP1Au0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ZQuuQuuEeGvGIuLiiZuOg" name="MedicationSeriesNumberObservation">
      <ownedComment xmi:id="_0ZQuuguuEeGvGIuLiiZuOg" annotatedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The medication series number observation can be used to indicate which in a series of administrations a&#xD;
    particular administration represents (e.g. &quot;hepatitis B vaccine number 2 was administered on Feb 07, 2004).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_n8LUPwu0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationTemplateId" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8LUQAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.46')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8Ra0Au0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationClassCode" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8Ra0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8Ra0gu0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationMoodCode" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8Ra0wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8Ra1Au0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationCode" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8Ra1Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '30973-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8XhcAu0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationStatusCode" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8XhcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8Xhcgu0EeGvGIuLiiZuOg" name="MedicationSeriesNumberObservationValue" constrainedElement="_0ZQuuQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8Xhcwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | element.oclIsTypeOf(datatypes::INT)))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ZQuyguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ZW1VAuuEeGvGIuLiiZuOg" name="MedicationStatusObservation">
      <ownedRule xmi:id="_0Zc78guuEeGvGIuLiiZuOg" name="MedicationStatusObservationTargetOfEntryRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Zc78wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entry : cda::EntryRelationship | entry.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Zc7-QuuEeGvGIuLiiZuOg" name="MedicationStatusObservationNoAdditionalParticipants">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Zc7-guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Zc7_AuuEeGvGIuLiiZuOg" name="MedicationStatusObservationNoAdditionalRelationships">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Zc7_QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|not er.observation.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8Xhewu0EeGvGIuLiiZuOg" name="MedicationStatusObservationTemplateId" constrainedElement="_0ZW1VAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8XhfAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.47')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8doEAu0EeGvGIuLiiZuOg" name="MedicationStatusObservationClassCode" constrainedElement="_0ZW1VAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8doEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8doEgu0EeGvGIuLiiZuOg" name="MedicationStatusObservationMoodCode" constrainedElement="_0ZW1VAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8doEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8jusAu0EeGvGIuLiiZuOg" name="MedicationStatusObservationCode" constrainedElement="_0ZW1VAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8jusQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '33999-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8jusgu0EeGvGIuLiiZuOg" name="MedicationStatusObservationStatusCode" constrainedElement="_0ZW1VAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8juswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0Zc7_wuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0Zc8DAuuEeGvGIuLiiZuOg" name="ProductInstance">
      <ownedComment xmi:id="_0Zc8DQuuEeGvGIuLiiZuOg" annotatedElement="_0Zc8DAuuEeGvGIuLiiZuOg">
        <body>identifes a particular product instance</body>
      </ownedComment>
      <ownedRule xmi:id="_0Zc8DguuEeGvGIuLiiZuOg" name="ProductInstanceHasScopingEntity" constrainedElement="_0Zc8DAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Zc8DwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->size() > 0 implies self.scopingEntity->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8p1Vwu0EeGvGIuLiiZuOg" name="ProductInstanceTemplateId" constrainedElement="_0Zc8DAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8p1WAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.52')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8v78Au0EeGvGIuLiiZuOg" name="ProductInstanceClassCode" constrainedElement="_0Zc8DAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8v78Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('classCode') and self.classCode=vocab::RoleClassRoot::MANU</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ZjCkwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#__QZaIEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ZjCmguuEeGvGIuLiiZuOg" name="InternalReference">
      <ownedComment xmi:id="_0ZjCmwuuEeGvGIuLiiZuOg" annotatedElement="_0ZjCmguuEeGvGIuLiiZuOg">
        <body>&lt;p>CDA and HL7 Version 3 Entries may reference (point to) information contained in other entries&#xD;
within the same document or message&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The act being referred to can be any CDA Clinical Statement element type (act, procedure,&#xD;
observation, substanceAdministration, supply, et cetera). For compatibility with the Clinical&#xD;
Statement model the internal reference shall always use the &amp;lt;act> class, regardless of the XML&#xD;
element type of the act it refers to.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_n8v7-Qu0EeGvGIuLiiZuOg" name="InternalReferenceTemplateId" constrainedElement="_0ZjCmguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8v7-gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.4.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n8v7_Au0EeGvGIuLiiZuOg" name="InternalReferenceId" constrainedElement="_0ZjCmguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n8v7_Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n82CkAu0EeGvGIuLiiZuOg" name="InternalReferenceCode" constrainedElement="_0ZjCmguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n82CkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ZjCqwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ZjCsQuuEeGvGIuLiiZuOg" name="PatientMedicalInstructions">
      <ownedComment xmi:id="_0ZvP0AuuEeGvGIuLiiZuOg" annotatedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    Patient instructions are additional information provided to a patient related to one of their&#xD;
    medications (e.g. &quot;take on an empty stomach&quot;).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0ZjCsguuEeGvGIuLiiZuOg" annotatedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <body>Any medication may be the subject of further instructions to the patient, for example to indicate&#xD;
that it should be taken with food, et cetera. This structure is included in the target substance administration or supply act using the&#xD;
&amp;lt;entryRelationship> element defined in the CDA Schema.</body>
      </ownedComment>
      <ownedRule xmi:id="_n82Clwu0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsTemplateId" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n82CmAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n82Cmgu0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsClassCode" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n82Cmwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('classCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n82CnAu0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsMoodCode" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n82CnQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::INT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n88JMAu0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsCode" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n88JMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = 'PINSTRUCT' and value.codeSystem = '1.3.6.1.4.1.19376.1.5.3.2'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n88JMgu0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsText" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n88JMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9CP0Au0EeGvGIuLiiZuOg" name="PatientMedicalInstructionsStatusCode" constrainedElement="_0ZjCsQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9CP0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ZvP0QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ZvP1AuuEeGvGIuLiiZuOg" name="MedicationType">
      <ownedComment xmi:id="_0ZvP1QuuEeGvGIuLiiZuOg" annotatedElement="_0ZvP1AuuEeGvGIuLiiZuOg">
        <body>A classification based on how the medication is&#xD;
marketed (e.g., prescription, over the counter drug)</body>
      </ownedComment>
      <ownedRule xmi:id="_n9CP1wu0EeGvGIuLiiZuOg" name="MedicationTypeTemplateId" constrainedElement="_0ZvP1AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9CP2Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9CP2gu0EeGvGIuLiiZuOg" name="MedicationTypeCode" constrainedElement="_0ZvP1AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9CP2wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '329505003' or value.code = '73639000')))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ZvP3wuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0Z1WcwuuEeGvGIuLiiZuOg" name="MedicationOrderInformation">
      <ownedComment xmi:id="_0aZ-PQuuEeGvGIuLiiZuOg" annotatedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <body>a supply activity is used to describe what has been dispensed.</body>
      </ownedComment>
      <ownedComment xmi:id="_0aZ-PguuEeGvGIuLiiZuOg" annotatedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <body>The supply entry describes a prescription activity. The moodCode attribute shall be INT to reflect that a&#xD;
medication has been prescribed, or EVN to indicate that the prescription has been filled.</body>
      </ownedComment>
      <ownedComment xmi:id="_0Z1WdAuuEeGvGIuLiiZuOg" annotatedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <body>Order information may be recorded as part of the fulfillment history (moodcode = EVN) or as part of the administration information (moodcode = INT)</body>
      </ownedComment>
      <ownedRule xmi:id="_0aNw-wuuEeGvGIuLiiZuOg" name="MedicationOrderInformationMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aNw_AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aNw_guuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasAuthor">
        <ownedComment xmi:id="_0aNw_wuuEeGvGIuLiiZuOg">
          <body>Indicates the prescriber.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aNxAAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.author->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aNxAguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformer">
        <ownedComment xmi:id="_0aNxAwuuEeGvGIuLiiZuOg">
          <body>Indicates the person dispensing the product.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aNxBAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.performer->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aNxBguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasParticipantLocation">
        <ownedComment xmi:id="_0aNxBwuuEeGvGIuLiiZuOg">
          <body>Iindicates the supply location.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aNxCAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(part : cda::Participant2 | part.typeCode = vocab::ParticipationType::LOC)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3kAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3kQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3kwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3lAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.product.oclIsUndefined() and self.product.oclIsKindOf(cda::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3mguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasIntentAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3mwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.classCode=vocab::ActClassSupply::SPLY and self.moodCode=vocab::x_DocumentSubstanceMood::INT) implies self.author->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3nQuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasAuthorTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3nguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author.time->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3oAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasAssignedAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3oQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author.assignedAuthor->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3owuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasAssignedAuthorID">
        <ownedComment xmi:id="_0aT3pAuuEeGvGIuLiiZuOg">
          <body>These identifiers identify the author of the act.&#xD;
When the author is the prescribing physician they may include local identifiers or regional&#xD;
identifiers necessary for prescribing.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3pQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author.assignedAuthor.id->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3pwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasAssignedAuthorPersonOrOrg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3qAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.author.assignedAuthor.assignedPerson->size() > 0 and self.author.assignedAuthor.assignedPerson.name->size() > 0) or (self.author.assignedAuthor.representedOrganization->size() > 0 and self.author.assignedAuthor.representedOrganization.name->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aT3qguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformerTimeEvent">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aT3qwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::EVN and self.performer.time->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aZ-MQuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformerTimeIntent">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aZ-MguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::INT and self.performer.time->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aZ-NAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformerAssignedEntity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aZ-NQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer.assignedEntity->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aZ-NwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformerAssignedEntityID">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aZ-OAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer.assignedEntity.id->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0aZ-OguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasPerformerEntityPersonOrOrg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0aZ-OwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.performer.assignedEntity.assignedPerson->size() > 0 and self.performer.assignedEntity.assignedPerson.name->size() > 0 ) or (self.performer.assignedEntity.representedOrganization->size() > 0 and self.performer.assignedEntity.representedOrganization.name->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WdQuuEeGvGIuLiiZuOg" name="MedicationOrderInformationOrderNumber" constrainedElement="_0Z1WfguuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WdguuEeGvGIuLiiZuOg">
          <body>The order identifier from the perspective of the&#xD;
ordering clinician. Also known as the 'placer number'&#xD;
versus the pharmacies prescription number (or 'filler&#xD;
number')</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WdwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::INT implies self.id->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WeAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationOrderExpiration" constrainedElement="_0Z1WdQuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WeQuuEeGvGIuLiiZuOg">
          <body>The date, including time if applicable, when the order&#xD;
is no longer valid. Dispenses and administrations are&#xD;
not continued past this date for an order instance</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WeguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode =  vocab::x_DocumentSubstanceMood::INT implies not self.effectiveTime->select(et | et.value.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WewuuEeGvGIuLiiZuOg" name="MedicationOrderInformationQuantityOrdered" constrainedElement="_0Z1WfguuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WfAuuEeGvGIuLiiZuOg">
          <body>The amount of product indicated by the ordering&#xD;
provider to be dispensed. For example, number of&#xD;
dosage units or volume of a liquid substance. Note:&#xD;
this is comprised of both a numeric value and a unit of&#xD;
measure</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WfQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.quantity.value.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WfguuEeGvGIuLiiZuOg" name="MedicationOrderInformationQuantityUnit">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WfwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.quantity.unit.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WhAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationPrescriptionNumber">
        <ownedComment xmi:id="_0Z1WhQuuEeGvGIuLiiZuOg">
          <body>The prescription&#xD;
identifier assigned by the pharmacy</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WhguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::EVN implies not self.id->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WhwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationAssigningAuthority" constrainedElement="_0Z1WhAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WiAuuEeGvGIuLiiZuOg">
          <body>determining the assigning authority is not feasible in all settings.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WiQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.root->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WjAuuEeGvGIuLiiZuOg" name="MedicationOrderInformationDispenseDate" constrainedElement="_0Z1WlwuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WjQuuEeGvGIuLiiZuOg">
          <body>The date of this&#xD;
dispense</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WjguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::EVN implies self.effectiveTime->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WjwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationDispensingPharmacyLocation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WkAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode =  vocab::x_DocumentSubstanceMood::EVN  implies self.performer->select(p | p.assignedEntity.addr->isEmpty())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WlwuuEeGvGIuLiiZuOg" name="MedicationOrderInformationQuantityDispensed">
        <ownedComment xmi:id="_0Z1WmAuuEeGvGIuLiiZuOg">
          <body>The actual quantity of&#xD;
product supplied in this dispense. Note: This is&#xD;
comprised of both a numeric value and a unit of&#xD;
measure</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WmQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::EVN implies not self.quantity.value.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0Z1WmguuEeGvGIuLiiZuOg" name="MedicationOrderInformationHasFillNumber" constrainedElement="_0Z1WlwuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0Z1WmwuuEeGvGIuLiiZuOg">
          <body>The fill number for the&#xD;
history entry. The fill number identifies the supply (dispense) event as a distinct activities against the prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0Z1WnAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er | er.typeCode = vocab::x_ActRelationshipEntryRelationship::COMP and er.sequenceNumber.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9IWcAu0EeGvGIuLiiZuOg" name="MedicationOrderInformationTemplateId" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9IWcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9gw8Au0EeGvGIuLiiZuOg" name="MedicationOrderInformationId" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9gw8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9m3kAu0EeGvGIuLiiZuOg" name="MedicationOrderInformationStatusCode" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9m3kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9m3kgu0EeGvGIuLiiZuOg" name="MedicationOrderInformationEffectiveTime" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9m3kwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (self.effectiveTime->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9m3lAu0EeGvGIuLiiZuOg" name="MedicationOrderInformationRepeatNumber" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9m3lQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.repeatNumber.oclIsUndefined() or self.repeatNumber.isNullFlavorUndefined()) implies (not self.repeatNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9s-MAu0EeGvGIuLiiZuOg" name="MedicationOrderInformationQuantity" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.quantity.oclIsUndefined() or self.quantity.isNullFlavorUndefined()) implies (not self.quantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9s-Mgu0EeGvGIuLiiZuOg" name="MedicationOrderInformationMedicationStatusObservation" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-Mwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9s-OQu0EeGvGIuLiiZuOg" name="MedicationOrderInformationProductInstance" constrainedElement="_0Z1WcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-Ogu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0aZ-PwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_3gL0sEbuEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_n9s-NAu0EeGvGIuLiiZuOg" name="getMedicationStatusObservation" isQuery="true" bodyCondition="_n9s-Nwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n9s-Nwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n9s-NAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-OAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n9s-NQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n9s-Ngu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n9s-Owu0EeGvGIuLiiZuOg" name="getProductInstances" isQuery="true" bodyCondition="_n9s-Pgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n9s-Pgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n9s-Owu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-Pwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n9s-PAu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n9s-PQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n95LdAu0EeGvGIuLiiZuOg" name="getMedicationFullfillmentInstructions" isQuery="true" bodyCondition="_n95Ldwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n95Ldwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n95LdAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n95LeAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::MedicationFullfillmentInstructions))->asSequence()->first().oclAsType(consol::MedicationFullfillmentInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n95LdQu0EeGvGIuLiiZuOg" type="_0aHqWQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n95Ldgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0aHqWQuuEeGvGIuLiiZuOg" name="MedicationFullfillmentInstructions">
      <ownedComment xmi:id="_0aNw9wuuEeGvGIuLiiZuOg" annotatedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    Fulfillment instructions are additional information provided to the dispensing party (e.g. &quot;label in&#xD;
    spanish&quot;).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_n9s-QAu0EeGvGIuLiiZuOg" name="MedicationFullfillmentInstructionsTemplateId" constrainedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9s-QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9zE0Qu0EeGvGIuLiiZuOg" name="MedicationFullfillmentInstructionsMoodCode" constrainedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9zE0gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::INT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n9zE0wu0EeGvGIuLiiZuOg" name="MedicationFullfillmentInstructionsCode" constrainedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n9zE1Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = 'FINSTRUCT' and value.codeSystem = '1.3.6.1.4.1.19376.1.5.3.2'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n95LcAu0EeGvGIuLiiZuOg" name="MedicationFullfillmentInstructionsText" constrainedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n95LcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n95Lcgu0EeGvGIuLiiZuOg" name="MedicationFullfillmentInstructionsStatusCode" constrainedElement="_0aHqWQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n95Lcwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0aNw-AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0a4fVAuuEeGvGIuLiiZuOg" name="Condition">
      <ownedComment xmi:id="_0bva-AuuEeGvGIuLiiZuOg" annotatedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <body>A problem is a clinical statement that a clinician is particularly concerned about and wants to track. It has important patient management use cases (e.g. health records often present the problem list as a way of summarizing a patient's medical history).</body>
      </ownedComment>
      <ownedComment xmi:id="_0bva-QuuEeGvGIuLiiZuOg" annotatedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This event (moodCode='EVN') represents an act (act classCode='ACT') of being concerned&#xD;
about a problem, allergy or other issue. The &amp;lt;effectiveTime> element describes the period of&#xD;
concern. The subject of concern is one or more observations about related problems (see&#xD;
1.3.6.1.4.1.19376.1.5.3.1.4.5.2) or allergies and intolerances (see&#xD;
1.3.6.1.4.1.19376.1.5.3.1.4.5.3). Additional references can be provided having additional information related to the concern. The concern entry allows related acts to be grouped. This&#xD;
allows representing the history of a problem as a series of observation over time, for example.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
All concerns reflect the act of recording (&amp;lt;act classCode='ACT'>) the event (moodCode='EVN')&#xD;
of being concerned about a problem, allergy or other issue about the patient condition.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0bva-guuEeGvGIuLiiZuOg" annotatedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <body>This entry is a specialization of the Concern Entry, wherein the subject of the concern is focused on a problem.</body>
      </ownedComment>
      <ownedComment xmi:id="_0a4fVQuuEeGvGIuLiiZuOg" annotatedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <body>A condition is a clinical statement that a clinician is wants to track. It has important patient management use cases (e.g., health records often present the problem list as a way of summarizing a patient's medical history).</body>
      </ownedComment>
      <ownedRule xmi:id="_0bpUUguuEeGvGIuLiiZuOg" name="ConditionEntryRelationshipRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUUwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUWQuuEeGvGIuLiiZuOg" name="ConditionSubjectOfTarget">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUWguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SUBJ, cda::ClinicalStatement)->forAll(target : cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemObservation) or target.oclIsKindOf(ccd::AlertObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUXAuuEeGvGIuLiiZuOg" name="ConditionContainsProblemObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUXQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSection().oclIsKindOf(ccd::ProblemSection) implies self.getObservations()&#xD;&#xA;   ->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::ProblemObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUXwuuEeGvGIuLiiZuOg" name="ConditionContainsAlertObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUYAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSection().oclIsKindOf(ccd::AlertsSection) implies self.getObservations()&#xD;&#xA;   ->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUYguuEeGvGIuLiiZuOg" name="ConditionContainsPatientAwareness">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUYwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUZQuuEeGvGIuLiiZuOg" name="ConditionEffectiveTimeLowHigh">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUZguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.effectiveTime.low.oclIsUndefined()&#xD;&#xA;   and ((self.statusCode.code = 'completed' or self.statusCode.code = 'aborted') implies not self.effectiveTime.high.oclIsUndefined())&#xD;&#xA;   and ((self.statusCode.code &lt;> 'completed' and self.statusCode.code &lt;> 'aborted') implies self.effectiveTime.high.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUaAuuEeGvGIuLiiZuOg" name="ConditionHasRelatedObservations">
        <ownedComment xmi:id="_0bpUaQuuEeGvGIuLiiZuOg">
          <body>Each concern is about one or more related problems or allergies. This is how a series of related observations can be grouped as a single concern.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUaguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship.observation.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.5') or self.entryRelationship.observation.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.6')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bpUbAuuEeGvGIuLiiZuOg" name="ConditionRelatedObservationsTypeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bpUbQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|er.typeCode &lt;> vocab::x_ActRelationshipEntryRelationship::SUBJ)->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bva9QuuEeGvGIuLiiZuOg" name="ConditionHasRelatedReferencesTypeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bva9guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->forAll(r | r.typeCode = vocab::x_ActRelationshipExternalReference)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0a4fVguuEeGvGIuLiiZuOg" name="ConditionHasTreatingProvider" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0a4fVwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.performer->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0a4fWAuuEeGvGIuLiiZuOg" name="ConditionHasProviderId" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0a4fWQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->exists(p : cda::Performer2 | p.assignedEntity.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0a4fWguuEeGvGIuLiiZuOg" name="ConditionHasProviderTreatmentTime" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0a4fWwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->exists(p : cda::Performer2 | p.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n95LeQu0EeGvGIuLiiZuOg" name="ConditionTemplateId" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n95Legu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.7')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-FYsAu0EeGvGIuLiiZuOg" name="ConditionClassCode" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-FYsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-FYsgu0EeGvGIuLiiZuOg" name="ConditionMoodCode" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-FYswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-LfUAu0EeGvGIuLiiZuOg" name="ConditionId" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-LfUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-LfUgu0EeGvGIuLiiZuOg" name="ConditionCodeNullFlavor" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-LfUwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.nullFlavor = vocab::NullFlavor::NA)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-LfVAu0EeGvGIuLiiZuOg" name="ConditionEffectiveTime" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-LfVQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-Rl8Au0EeGvGIuLiiZuOg" name="ConditionConditionEntry" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-Rl8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ConditionEntry) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-Rl9wu0EeGvGIuLiiZuOg" name="ConditionEpisodeObservation" constrainedElement="_0a4fVAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-Rl-Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::EpisodeObservation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0bva-wuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n-Rl8gu0EeGvGIuLiiZuOg" name="getConditionEntries" isQuery="true" bodyCondition="_n-Rl9Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-Rl9Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-Rl8gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-Rl9gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ConditionEntry)).oclAsType(consol::ConditionEntry)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-Rl8wu0EeGvGIuLiiZuOg" type="_0bEsmwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-Rl9Au0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-Rl-Qu0EeGvGIuLiiZuOg" name="getEpisodeObservation" isQuery="true" bodyCondition="_n-Rl_Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-Rl_Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-Rl-Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-Rl_Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::EpisodeObservation))->asSequence()->first().oclAsType(consol::EpisodeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-Rl-gu0EeGvGIuLiiZuOg" type="_0WNaswuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-Rl-wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0bEsmwuuEeGvGIuLiiZuOg" name="ConditionEntry">
      <ownedComment xmi:id="_0bjNvQuuEeGvGIuLiiZuOg" annotatedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section makes use of the linking, severity, clinical status and comment content specifications defined elsewhere in the technical framework. In HL7 RIM parlance, observations about a problem, complaint, symptom, finding, diagnosis, or functional limitation of a patient is the event (moodCode='EVN') of observing (&amp;lt;observation classCode='OBS'>) that problem. The &amp;lt;value> of the observation comes from a controlled vocabulary representing such things. The &amp;lt;code> contained within the &amp;lt;observation> describes the method of determination from yet another controlled vocabulary.&lt;/p>&#xD;
&#xD;
&lt;p>The basic pattern for reporting a problem uses the CDA &amp;lt;observation> element, setting the classCode='OBS' to represent that this is an observation of a problem, and the moodCode='EVN', to represent that this is an observation that has in fact taken place. The negationInd attribute, if true, specifies that the problem indicated was observed to not have occurred (which is subtly but importantly different from having not been observed). The value of negationInd should not normally be set to true. Instead, to record that there is &quot;no prior history of chicken pox&quot;, one would use a coded value indicated exactly that. However, it is not always possible to record problems in this manner, especially if using a controlled vocabulary that does not supply pre-coordinated negations , or which do not allow the negation to be recorded with post-coordinated coded terminology.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0bEsnAuuEeGvGIuLiiZuOg" annotatedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section makes use of the linking, severity, clinical status and comment content specifications defined elsewhere in the technical framework. In HL7 RIM parlance, observations about a problem, complaint, symptom, finding, diagnosis, or functional limitation of a patient is the event (moodCode='EVN') of observing (&amp;lt;observation classCode='OBS'>) that problem. The &amp;lt;value> of the observation comes from a controlled vocabulary representing such things. The &amp;lt;code> contained within the &amp;lt;observation> describes the method of determination from yet another controlled vocabulary.&lt;/p>&#xD;
&#xD;
&lt;p>The basic pattern for reporting a problem uses the CDA &amp;lt;observation> element, setting the classCode='OBS' to represent that this is an observation of a problem, and the moodCode='EVN', to represent that this is an observation that has in fact taken place. The negationInd attribute, if true, specifies that the problem indicated was observed to not have occurred (which is subtly but importantly different from having not been observed). The value of negationInd should not normally be set to true. Instead, to record that there is &quot;no prior history of chicken pox&quot;, one would use a coded value indicated exactly that. However, it is not always possible to record problems in this manner, especially if using a controlled vocabulary that does not supply pre-coordinated negations , or which do not allow the negation to be recorded with post-coordinated coded terminology.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0bjNsQuuEeGvGIuLiiZuOg" name="ConditionEntryInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bjNsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bjNtAuuEeGvGIuLiiZuOg" name="ConditionEntryContainsPatientAwareness">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bjNtQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bjNtwuuEeGvGIuLiiZuOg" name="ConditionEntryHasTextReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bjNuAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bjNuguuEeGvGIuLiiZuOg" name="ConditionEntryCommentInversionInd">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bjNuwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(rel : cda::EntryRelationship | (not rel.act.oclIsUndefined() and rel.act.oclIsKindOf(ihe::Comment)) implies rel.inversionInd=true)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bEsnQuuEeGvGIuLiiZuOg" name="ConditionEntryHasOnsetDate" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bEsnguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.effectiveTime.low.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bEsnwuuEeGvGIuLiiZuOg" name="ConditionEntryHasResolutionDate" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bEsoAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.effectiveTime.high.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bEsoQuuEeGvGIuLiiZuOg" name="ConditionEntryHasUnknownResolutionDate" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bEsoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.effectiveTime.high.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-Rl_gu0EeGvGIuLiiZuOg" name="ConditionEntryTemplateId" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-Rl_wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.5')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-XskAu0EeGvGIuLiiZuOg" name="ConditionEntryMoodCode" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-XskQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-dzMAu0EeGvGIuLiiZuOg" name="ConditionEntryId" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-dzMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-dzMgu0EeGvGIuLiiZuOg" name="ConditionEntryCode" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-dzMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '404684003' or value.code = '409586006' or value.code = '282291009' or value.code = '64572001' or value.code = '248536006' or value.code = '418799008' or value.code = '55607006')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-dzNAu0EeGvGIuLiiZuOg" name="ConditionEntryText" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-dzNQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-j50Au0EeGvGIuLiiZuOg" name="ConditionEntryStatusCode" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-j50Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-j50gu0EeGvGIuLiiZuOg" name="ConditionEntryEffectiveTime" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-j50wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-qAcAu0EeGvGIuLiiZuOg" name="ConditionEntryValue" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-qAcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-qAcgu0EeGvGIuLiiZuOg" name="ConditionEntryAgeObservation" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-qAcwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-qAeQu0EeGvGIuLiiZuOg" name="ConditionEntryCauseOfDeathObservation" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-qAegu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::CauseOfDeathObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::CAUS)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-wHEwu0EeGvGIuLiiZuOg" name="ConditionEntryProblemStatusObservation" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHFAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-wHGgu0EeGvGIuLiiZuOg" name="ConditionEntrySeverity" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHGwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::Severity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-wHIQu0EeGvGIuLiiZuOg" name="ConditionEntryHealthStatusObservation" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHIgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::HealthStatusObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-wHKAu0EeGvGIuLiiZuOg" name="ConditionEntryComment" constrainedElement="_0bEsmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-2NsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::Comment) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0bjNvguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n-qAdAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_n-qAdwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-qAdwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-qAdAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-qAeAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-qAdQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-qAdgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-qAewu0EeGvGIuLiiZuOg" name="getCauseOfDeathObservation" isQuery="true" bodyCondition="_n-wHEQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-wHEQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-qAewu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHEgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::CauseOfDeathObservation))->asSequence()->first().oclAsType(consol::CauseOfDeathObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-qAfAu0EeGvGIuLiiZuOg" type="_0bQ54QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-wHEAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-wHFQu0EeGvGIuLiiZuOg" name="getProblemStatusObservation" isQuery="true" bodyCondition="_n-wHGAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-wHGAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-wHFQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHGQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation))->asSequence()->first().oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-wHFgu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-wHFwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-wHHAu0EeGvGIuLiiZuOg" name="getSeverity" isQuery="true" bodyCondition="_n-wHHwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-wHHwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-wHHAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHIAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Severity))->asSequence()->first().oclAsType(consol::Severity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-wHHQu0EeGvGIuLiiZuOg" type="_0XKc9QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-wHHgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-wHIwu0EeGvGIuLiiZuOg" name="getHealthStatusObservation" isQuery="true" bodyCondition="_n-wHJgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-wHJgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-wHIwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-wHJwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::HealthStatusObservation))->asSequence()->first().oclAsType(consol::HealthStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-wHJAu0EeGvGIuLiiZuOg" type="_0Wr72AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-wHJQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n-2NsQu0EeGvGIuLiiZuOg" name="getComments" isQuery="true" bodyCondition="_n-2NtAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n-2NtAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n-2NsQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-2NtQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Comment)).oclAsType(consol::Comment)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n-2Nsgu0EeGvGIuLiiZuOg" type="_0YNl3QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n-2Nswu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0bQ54QuuEeGvGIuLiiZuOg" name="CauseOfDeathObservation">
      <ownedRule xmi:id="_0bXAiAuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationHasSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bXAiQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bXAkwuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationHasSubjectPatientRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bXAlAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bXAlguuEeGvGIuLiiZuOg" name="CauseOfDeathObservationRelationshipValueCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bXAlwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.classCode = vocab::x_DocumentSubject::PRS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bdHEAuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationHasRelatedSubjectCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bdHEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bdHEwuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationRelatedSubjectCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bdHFAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code.codeSystem = '2.16.840.1.113883.5.111'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bdHGguuEeGvGIuLiiZuOg" name="CauseOfDeathObservationHasRelatedSubjectSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bdHGwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bdHHQuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationHasGenderCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bdHHguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.administrativeGenderCode->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bdHIAuuEeGvGIuLiiZuOg" name="CauseOfDeathObservationRelatedSubjectBirthTime">
        <ownedComment xmi:id="_0bdHIQuuEeGvGIuLiiZuOg">
          <body>UNIMPLEMENTABLE</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bdHIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.birthTime->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n-2Ntgu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationTemplateId" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-2Ntwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.42')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_Ca8Au0EeGvGIuLiiZuOg" name="CauseOfDeathObservationMoodCode" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_Ca8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_Ca8gu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationId" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_Ca8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_Ca9Au0EeGvGIuLiiZuOg" name="CauseOfDeathObservationStatusCode" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_Ca9Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_IhkAu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationEffectiveTime" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_IhkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_Ihkgu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationAgeObservation" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_Ihkwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_IhmQu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationProblemStatusObservation" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_Ihmgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_OoNQu0EeGvGIuLiiZuOg" name="CauseOfDeathObservationCauseOfDeathObservation" constrainedElement="_0bQ54QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_OoNgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::CauseOfDeathObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::CAUS)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0bjNsAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_n_IhlAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_n_Ihlwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n_Ihlwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n_IhlAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_IhmAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n_IhlQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n_Ihlgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n_OoMAu0EeGvGIuLiiZuOg" name="getProblemStatusObservation" isQuery="true" bodyCondition="_n_OoMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n_OoMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n_OoMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_OoNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation))->asSequence()->first().oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n_OoMQu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n_OoMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n_OoNwu0EeGvGIuLiiZuOg" name="getCauseOfDeathObservations" isQuery="true" bodyCondition="_n_OoOgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_n_OoOgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_n_OoNwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_OoOwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::CauseOfDeathObservation)).oclAsType(consol::CauseOfDeathObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_n_OoOAu0EeGvGIuLiiZuOg" type="_0bQ54QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_n_OoOQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0bva_AuuEeGvGIuLiiZuOg" name="PatientSummary">
      <ownedComment xmi:id="_0lyu5QuuEeGvGIuLiiZuOg" annotatedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0bva_QuuEeGvGIuLiiZuOg" annotatedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <body>This Component describes the document content that summarizes a consumer's medical status for the purpose of health information exchange. While an EHR or PHR system can contain much more information, this Component only deals with the summary information to be exchanged between such systems as established as requirements described in AHIC Use Cases.</body>
      </ownedComment>
      <ownedRule xmi:id="_0lRxcAuuEeGvGIuLiiZuOg" name="PatientSummaryServiceEventRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lRxcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->one(doc : cda::DocumentationOf | not doc.serviceEvent.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lSYgAuuEeGvGIuLiiZuOg" name="PatientSummaryServiceEventClassCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lSYgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->one(doc : cda::DocumentationOf | doc.serviceEvent.classCode = vocab::ActClassRoot::PCPR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lS_kQuuEeGvGIuLiiZuOg" name="PatientSummaryServiceEventEffectiveTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lS_kguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->one(doc : cda::DocumentationOf | &#xD;&#xA;   not doc.serviceEvent.effectiveTime.low.oclIsUndefined() and not doc.serviceEvent.effectiveTime.high.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lTmoQuuEeGvGIuLiiZuOg" name="PatientSummaryLanguageCodeFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lTmoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lUNsQuuEeGvGIuLiiZuOg" name="PatientSummaryNoTemplateIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lUNsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->forAll(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1' implies id.extension.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lU0wAuuEeGvGIuLiiZuOg" name="PatientSummaryHasEffectiveTimeSeconds">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lU0wQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.effectiveTime.value.size() >= 4</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lVb0AuuEeGvGIuLiiZuOg" name="PatientSummaryHasEffectiveTimeZone">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lVb0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.effectiveTime.value.size() >= 19</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lWC4AuuEeGvGIuLiiZuOg" name="PatientSummaryOneOrTwoRecordTarget">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lWC4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() = 1 or self.recordTarget->size() =2</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lWC4wuuEeGvGIuLiiZuOg" name="PatientSummaryHasAssignedAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lWC5AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.representedOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lWp8QuuEeGvGIuLiiZuOg" name="PatientSummaryHasAssignedAuthorNullFlavor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lWp8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | (not author.assignedAuthor.representedOrganization.oclIsUndefined()&#xD;&#xA;      and author.assignedAuthor.assignedPerson.oclIsUndefined() and author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())&#xD;&#xA;   implies author.assignedAuthor.id->one(id : datatypes::II | id.nullFlavor = vocab::NullFlavor::NA))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lXRAAuuEeGvGIuLiiZuOg" name="PatientSummaryHasInformationRecipient">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lXRAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informationRecipient->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lZtQAuuEeGvGIuLiiZuOg" name="PatientSummaryPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lZtQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lZtQwuuEeGvGIuLiiZuOg" name="PatientSummaryRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lZtRAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0laUUQuuEeGvGIuLiiZuOg" name="PatientSummaryRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0laUUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0la7YAuuEeGvGIuLiiZuOg" name="PatientSummaryOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0la7YQuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0la7YguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lbicAuuEeGvGIuLiiZuOg" name="PatientSummaryTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lbicQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lcJgAuuEeGvGIuLiiZuOg" name="PatientSummaryTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lcJgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lcJgwuuEeGvGIuLiiZuOg" name="PatientSummaryTelephoneMatchesRegex">
        <ownedComment xmi:id="_0lcJhAuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0lcJhQuuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lcJhguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ldXoAuuEeGvGIuLiiZuOg" name="PatientSummaryHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ldXoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ld-sAuuEeGvGIuLiiZuOg" name="PatientSummaryUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0ld-sQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ld-sguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lelwAuuEeGvGIuLiiZuOg" name="PatientSummaryTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lelwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lfM0AuuEeGvGIuLiiZuOg" name="PatientSummaryIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lfM0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lga9QuuEeGvGIuLiiZuOg" name="PatientSummaryOidLength">
        <ownedComment xmi:id="_0lga9guuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lga9wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lga-QuuEeGvGIuLiiZuOg" name="PatientSummaryLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lga-guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lgbBAuuEeGvGIuLiiZuOg" name="PatientSummarySetIdAndVersionNumber">
        <ownedComment xmi:id="_0lgbBQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lgbBguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lgbCAuuEeGvGIuLiiZuOg" name="PatientSummarySetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lgbCQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lgbCwuuEeGvGIuLiiZuOg" name="PatientSummaryCopyTimeNotPresent">
        <ownedComment xmi:id="_0lgbDAuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lgbDQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lgbDwuuEeGvGIuLiiZuOg" name="PatientSummaryHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lgbEAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhkQuuEeGvGIuLiiZuOg" name="PatientSummaryHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhkguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhlAuuEeGvGIuLiiZuOg" name="PatientSummaryHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0lmhlQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhlguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhnwuuEeGvGIuLiiZuOg" name="PatientSummaryHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhoAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhoguuEeGvGIuLiiZuOg" name="PatientSummaryHasAuthorTime">
        <ownedComment xmi:id="_0lmhowuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhpAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhpguuEeGvGIuLiiZuOg" name="PatientSummaryHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhpwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lmhqQuuEeGvGIuLiiZuOg" name="PatientSummaryHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lmhqguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lsoMAuuEeGvGIuLiiZuOg" name="PatientSummaryHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lsoMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lsoMwuuEeGvGIuLiiZuOg" name="PatientSummaryHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lsoNAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lsoNguuEeGvGIuLiiZuOg" name="PatientSummaryHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lsoNwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lsoOQuuEeGvGIuLiiZuOg" name="PatientSummaryHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lsoOguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lyu1wuuEeGvGIuLiiZuOg" name="PatientSummaryLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lyu2AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lyu2guuEeGvGIuLiiZuOg" name="PatientSummaryAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lyu2wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lyu3QuuEeGvGIuLiiZuOg" name="PatientSummaryTimePreciseToSecond">
        <ownedComment xmi:id="_0lyu3guuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lyu3wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lyu4QuuEeGvGIuLiiZuOg" name="PatientSummaryTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0lyu4guuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lyu4wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0bva_guuEeGvGIuLiiZuOg" name="PatientSummaryHealthcareProvider" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0bva_wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf.serviceEvent.performer->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n_OoPAu0EeGvGIuLiiZuOg" name="PatientSummaryTemplateId" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n_OoPQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.32.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n__dMAu0EeGvGIuLiiZuOg" name="PatientSummaryRealmCode" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n__dMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_n__dMgu0EeGvGIuLiiZuOg" name="PatientSummaryTypeId" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_n__dMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAFj0Au0EeGvGIuLiiZuOg" name="PatientSummaryId" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAFj0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAFj0gu0EeGvGIuLiiZuOg" name="PatientSummaryCode" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAFj0wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAFj1Au0EeGvGIuLiiZuOg" name="PatientSummaryTitle" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAFj1Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAMRgAu0EeGvGIuLiiZuOg" name="PatientSummaryEffectiveTime" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAMRgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAOGsAu0EeGvGIuLiiZuOg" name="PatientSummaryLanguageCode" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAOGsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oARxEAu0EeGvGIuLiiZuOg" name="PatientSummaryAdvanceDirectivesSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oARxEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdvanceDirectivesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oATmRQu0EeGvGIuLiiZuOg" name="PatientSummaryAllergiesReactionsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oATmRgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAWpkAu0EeGvGIuLiiZuOg" name="PatientSummaryProblemListSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAWpkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAYexQu0EeGvGIuLiiZuOg" name="PatientSummaryEncountersSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAYexgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EncountersSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAaT9Qu0EeGvGIuLiiZuOg" name="PatientSummaryImmunizationsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAaT9gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAcwMAu0EeGvGIuLiiZuOg" name="PatientSummaryPayersSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAcwMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PayersSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAelYAu0EeGvGIuLiiZuOg" name="PatientSummaryMedicationsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAelYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAgakQu0EeGvGIuLiiZuOg" name="PatientSummaryPlanOfCareSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAgakgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PlanOfCareSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAiPxAu0EeGvGIuLiiZuOg" name="PatientSummaryPregnancyHistorySection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAiPxQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PregnancyHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAkE9Qu0EeGvGIuLiiZuOg" name="PatientSummarySurgeriesSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAkE9gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAnIQAu0EeGvGIuLiiZuOg" name="PatientSummaryVitalSignsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAnIQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAo9dQu0EeGvGIuLiiZuOg" name="PatientSummaryDiagnosticResultsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oApkgAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticResultsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB9MEAu0EeGvGIuLiiZuOg" name="PatientSummaryFamilyHistorySection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB9MEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oC2j8Au0EeGvGIuLiiZuOg" name="PatientSummarySocialHistorySection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC2j8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDkVoAu0EeGvGIuLiiZuOg" name="PatientSummaryResultsSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDkVoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ResultsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDxxAAu0EeGvGIuLiiZuOg" name="PatientSummaryMedicalEquipmentSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDxxAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicalEquipmentSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEC2wAu0EeGvGIuLiiZuOg" name="PatientSummaryFunctionalStatusSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEC2wQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FunctionalStatusSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEaqMAu0EeGvGIuLiiZuOg" name="PatientSummaryPurposeSection" constrainedElement="_0bva_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEbRQAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PurposeSection))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0lyu5guuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oATmQAu0EeGvGIuLiiZuOg" name="getAdvanceDirectivesSection" isQuery="true" bodyCondition="_oATmQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oATmQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oATmQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oATmRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdvanceDirectivesSection))->asSequence()->first().oclAsType(consol::AdvanceDirectivesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oATmQQu0EeGvGIuLiiZuOg" type="_0e5coAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oATmQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAVbcAu0EeGvGIuLiiZuOg" name="getAllergiesReactionsSection" isQuery="true" bodyCondition="_oAVbcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAVbcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAVbcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAVbdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))->asSequence()->first().oclAsType(consol::AllergiesReactionsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAVbcQu0EeGvGIuLiiZuOg" type="_0f0psAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAVbcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAYewAu0EeGvGIuLiiZuOg" name="getProblemListSection" isQuery="true" bodyCondition="_oAYewwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAYewwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAYewAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAYexAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))->asSequence()->first().oclAsType(consol::ProblemListSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAYewQu0EeGvGIuLiiZuOg" type="_0f8lgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAYewgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAaT8Au0EeGvGIuLiiZuOg" name="getEncountersSection" isQuery="true" bodyCondition="_oAaT8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAaT8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAaT8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAaT9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EncountersSection))->asSequence()->first().oclAsType(consol::EncountersSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAaT8Qu0EeGvGIuLiiZuOg" type="_0gDTMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAaT8gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAcJIAu0EeGvGIuLiiZuOg" name="getImmunizationsSection" isQuery="true" bodyCondition="_oAcJIwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAcJIwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAcJIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAcJJAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))->asSequence()->first().oclAsType(consol::ImmunizationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAcJIQu0EeGvGIuLiiZuOg" type="_0guooAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAcJIgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAd-UAu0EeGvGIuLiiZuOg" name="getPayersSection" isQuery="true" bodyCondition="_oAd-Uwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAd-Uwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAd-UAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAd-VAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PayersSection))->asSequence()->first().oclAsType(consol::PayersSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAd-UQu0EeGvGIuLiiZuOg" type="_0hRbMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAd-Ugu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAfzgAu0EeGvGIuLiiZuOg" name="getMedicationsSection" isQuery="true" bodyCondition="_oAfzgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAfzgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAfzgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAgakAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))->asSequence()->first().oclAsType(consol::MedicationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAfzgQu0EeGvGIuLiiZuOg" type="_0iWZQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAfzggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAhosAu0EeGvGIuLiiZuOg" name="getPlanOfCareSection" isQuery="true" bodyCondition="_oAiPwgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAiPwgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAhosAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAiPwwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PlanOfCareSection))->asSequence()->first().oclAsType(consol::PlanOfCareSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAiPwAu0EeGvGIuLiiZuOg" type="_0igxUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAiPwQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAkE8Au0EeGvGIuLiiZuOg" name="getPregnancyHistorySection" isQuery="true" bodyCondition="_oAkE8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAkE8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAkE8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAkE9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PregnancyHistorySection))->asSequence()->first().oclAsType(consol::PregnancyHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAkE8Qu0EeGvGIuLiiZuOg" type="_0jYUAAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAkE8gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAl6IAu0EeGvGIuLiiZuOg" name="getSurgeriesSection" isQuery="true" bodyCondition="_oAl6Iwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAl6Iwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAl6IAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAl6JAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))->asSequence()->first().oclAsType(consol::SurgeriesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAl6IQu0EeGvGIuLiiZuOg" type="_0jlIUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAl6Igu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAo9cAu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_oAo9cwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAo9cwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAo9cAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAo9dAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))->asSequence()->first().oclAsType(consol::VitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAo9cQu0EeGvGIuLiiZuOg" type="_0kV9UAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAo9cgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oAqyoAu0EeGvGIuLiiZuOg" name="getDiagnosticResultsSection" isQuery="true" bodyCondition="_oAqyowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oAqyowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oAqyoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAqypAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticResultsSection))->asSequence()->first().oclAsType(consol::DiagnosticResultsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oAqyoQu0EeGvGIuLiiZuOg" type="_0lJOkAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oAqyogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oB-aMAu0EeGvGIuLiiZuOg" name="getFamilyHistorySection" isQuery="true" bodyCondition="_oB-aMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oB-aMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oB-aMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB-aNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))->asSequence()->first().oclAsType(consol::FamilyHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oB-aMQu0EeGvGIuLiiZuOg" type="_0cH1cAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oB-aMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oC4ZIAu0EeGvGIuLiiZuOg" name="getSocialHistorySection" isQuery="true" bodyCondition="_oC4ZIwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oC4ZIwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oC4ZIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC4ZJAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))->asSequence()->first().oclAsType(consol::SocialHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oC4ZIQu0EeGvGIuLiiZuOg" type="_0dMzgwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oC4ZIgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oDmK0Au0EeGvGIuLiiZuOg" name="getResultsSection" isQuery="true" bodyCondition="_oDmK0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDmK0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDmK0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDmK1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ResultsSection))->asSequence()->first().oclAsType(consol::ResultsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDmK0Qu0EeGvGIuLiiZuOg" type="_0d8aYwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDmK0gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oDy_IAu0EeGvGIuLiiZuOg" name="getMedicalEquipmentSection" isQuery="true" bodyCondition="_oDy_Iwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDy_Iwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDy_IAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDy_JAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicalEquipmentSection))->asSequence()->first().oclAsType(consol::MedicalEquipmentSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDy_IQu0EeGvGIuLiiZuOg" type="_0eXRIAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDy_Igu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oEEE4Au0EeGvGIuLiiZuOg" name="getFunctionalStatusSection" isQuery="true" bodyCondition="_oEEr8Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oEEr8Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_oEEE4Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEEr8Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FunctionalStatusSection))->asSequence()->first().oclAsType(consol::FunctionalStatusSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oEEE4Qu0EeGvGIuLiiZuOg" type="_0efM8wuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oEEE4gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oEcfYAu0EeGvGIuLiiZuOg" name="getPurposeSection" isQuery="true" bodyCondition="_oEcfYwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oEcfYwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oEcfYAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEcfZAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PurposeSection))->asSequence()->first().oclAsType(consol::PurposeSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oEcfYQu0EeGvGIuLiiZuOg" type="_0eqzIwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oEcfYgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0cH1cAuuEeGvGIuLiiZuOg" name="FamilyHistorySection">
      <ownedComment xmi:id="_0dK-UAuuEeGvGIuLiiZuOg" annotatedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <body>This section contains data defining the patient's genetic relatives in terms of possible or relevant health risk factors that have a potential impact on the patient's healthcare risk profile.</body>
      </ownedComment>
      <ownedComment xmi:id="_0dK-UQuuEeGvGIuLiiZuOg" annotatedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <body>The family history section shall contain a narrative description of the genetic family members, to the extent that they are&#xD;
known, the diseases they suffered from, their ages at death, and other relevant genetic information.</body>
      </ownedComment>
      <ownedComment xmi:id="_0cH1cQuuEeGvGIuLiiZuOg" annotatedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Family History Section contains information about the genetic family members, to the extent that&#xD;
    they are known, the diseases they suffered from, their ages at death, and other relevant genetic information. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0dJwMAuuEeGvGIuLiiZuOg" name="FamilyHistorySectionFamilyHistoryObsOrgs">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dJwMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry.observation->exists(obs : cda::Observation | obs.oclIsTypeOf(ccd::FamilyHistoryObservation)) or self.entry.organizer->exists(org : cda::Organizer | org.oclIsTypeOf(ccd::FamilyHistoryOrganizer))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dKXQAuuEeGvGIuLiiZuOg" name="FamilyHistorySectionNoSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dKXQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAsn0Au0EeGvGIuLiiZuOg" name="FamilyHistorySectionTemplateId" constrainedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAsn0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.125')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAyHYAu0EeGvGIuLiiZuOg" name="FamilyHistorySectionCode" constrainedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAyHYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10157-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oAz8kAu0EeGvGIuLiiZuOg" name="FamilyHistorySectionTitle" constrainedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oAz8kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oA1KsAu0EeGvGIuLiiZuOg" name="FamilyHistorySectionText" constrainedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oA1KsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oA2_4Au0EeGvGIuLiiZuOg" name="FamilyHistorySectionFamilyHistory" constrainedElement="_0cH1cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oA2_4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::FamilyHistory))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0dLlYAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oA4OAAu0EeGvGIuLiiZuOg" name="getFamilyHistories" isQuery="true" bodyCondition="_oA4OAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oA4OAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oA4OAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oA4OBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::FamilyHistory)).oclAsType(consol::FamilyHistory)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oA4OAQu0EeGvGIuLiiZuOg" type="_0cMt8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oA4OAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0cMt8AuuEeGvGIuLiiZuOg" name="FamilyHistory">
      <ownedRule xmi:id="_0c5RgQuuEeGvGIuLiiZuOg" name="FamilyHistoryHasComponent">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c5RgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->size() >= 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c54kQuuEeGvGIuLiiZuOg" name="FamilyHistoryHasFamilyHistoryObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c54kguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->exists (comp : cda::Component4 | comp.observation->exists(obs : cda::Observation | obs.oclIsKindOf(ccd::FamilyHistoryObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c7GsAuuEeGvGIuLiiZuOg" name="FamilyHistoryHasSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c7GsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c7twAuuEeGvGIuLiiZuOg" name="FamilyHistoryHasSubjectPatientRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c7twQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c8U0AuuEeGvGIuLiiZuOg" name="FamilyHistoryRelationshipValueCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c8U0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.classCode = vocab::x_DocumentSubject::PRS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c874AuuEeGvGIuLiiZuOg" name="FamilyHistoryHasRelatedSubjectCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c874QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c9i8AuuEeGvGIuLiiZuOg" name="FamilyHistoryRelatedSubjectCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c9i8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code.codeSystem = '2.16.840.1.113883.1.11.19579' or self.subject.relatedSubject.code.codeSystem = '2.16.840.1.113883.1.11.20.21'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c-xEQuuEeGvGIuLiiZuOg" name="FamilyHistoryHasRelatedSubjectSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c-xEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c_YIQuuEeGvGIuLiiZuOg" name="FamilyHistoryHasGenderCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c_YIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.administrativeGenderCode->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0c__MAuuEeGvGIuLiiZuOg" name="FamilyHistoryRelatedSubjectBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0c__MQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.subject.relatedSubject.subject.birthTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dDCgQuuEeGvGIuLiiZuOg" name="FamilyHistoryHasParticipant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dDCgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dDpkAuuEeGvGIuLiiZuOg" name="FamilyHistoryHasParticipantParticipantRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dDpkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole->one(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::PRS)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dEQoAuuEeGvGIuLiiZuOg" name="FamilyHistoryHasParticipantRoleCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dEQoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dE3sAuuEeGvGIuLiiZuOg" name="FamilyHistoryHasParticipantRolePlayingEntity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dE3sQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity->one(pe : cda::PlayingEntity | pe.classCode = vocab::EntityClassRoot::PSN)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cMt9wuuEeGvGIuLiiZuOg" name="FamilyHistoryRelatedSubjectCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cMt-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code.codeSystem = '2.16.840.1.113883.5.111'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cMt_AuuEeGvGIuLiiZuOg" name="FamilyHistoryHasFamilyName">
        <ownedComment xmi:id="_0cMt_QuuEeGvGIuLiiZuOg">
          <body>The family member name need not be the actual name of the family member. It may be a string (such as aunt1 or aunt2) to help the patient and providers distinguish between different family members with the same relationship to the patient</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cMt_guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.name->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cMt_wuuEeGvGIuLiiZuOg" name="FamilyHistoryHasGenderCode" constrainedElement="_0cMt_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cMuAAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.administrativeGenderCode.codeSystem = '2.16.840.1.113883.5.1' and (self.subject.relatedSubject.subject.administrativeGenderCode.code = 'F' or self.subject.relatedSubject.subject.administrativeGenderCode.code='M' or self.subject.relatedSubject.subject.administrativeGenderCode.code='UN')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cMuCQuuEeGvGIuLiiZuOg" name="FamilyHistoryFamilyMemberCondition">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cMuCguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->exists(obs : cda::Observation | obs.oclIsKindOf(ihe::FamilyHistoryObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oA4OBQu0EeGvGIuLiiZuOg" name="FamilyHistoryTemplateId" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oA41EAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.18')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBTr0Au0EeGvGIuLiiZuOg" name="FamilyHistoryClassCode" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBTr0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryOrganizer::CLUSTER</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBVhAAu0EeGvGIuLiiZuOg" name="FamilyHistoryMoodCode" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBVhAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::ActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBYkUAu0EeGvGIuLiiZuOg" name="FamilyHistoryCode" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBYkUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.111'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBcOsAu0EeGvGIuLiiZuOg" name="FamilyHistoryStatusCode" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBcOsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBeD4Au0EeGvGIuLiiZuOg" name="FamilyHistoryProblemStatusObservation" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBeD4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->exists(component : cda::Component4 | not component.observation.oclIsUndefined() and component.observation.oclIsKindOf(consol::ProblemStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB7W4Au0EeGvGIuLiiZuOg" name="FamilyHistoryFamilyHistoryObservation" constrainedElement="_0cMt8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB7W4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->exists(component : cda::Component4 | not component.observation.oclIsUndefined() and component.observation.oclIsKindOf(consol::FamilyHistoryObservation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0dH7AAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_B6aX4EbvEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oBfSAAu0EeGvGIuLiiZuOg" name="getProblemStatusObservations" isQuery="true" bodyCondition="_oBfSAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oBfSAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oBfSAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBfSBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation)).oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oBfSAQu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oBfSAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oB8lAAu0EeGvGIuLiiZuOg" name="getFamilyHistoryObservations" isQuery="true" bodyCondition="_oB8lAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oB8lAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oB8lAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB8lBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::FamilyHistoryObservation)).oclAsType(consol::FamilyHistoryObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oB8lAQu0EeGvGIuLiiZuOg" type="_0cheEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oB8lAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0cheEAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservation">
      <ownedComment xmi:id="_0c3cUAuuEeGvGIuLiiZuOg" annotatedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedRule xmi:id="_0crPEAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationHasSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0crPEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ctrUAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationHasSubjectPatientRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ctrUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cuSYAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationRelationshipValueCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cuSYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.classCode = vocab::x_DocumentSubject::PRS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cu5cAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationHasRelatedSubjectCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cu5cQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cvggAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationRelatedSubjectCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cvggQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.code.codeSystem = '2.16.840.1.113883.5.111'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cwuoAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationHasRelatedSubjectSubject">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cwuoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cxVsAuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationHasGenderCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cxVsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.administrativeGenderCode->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0cyj0AuuEeGvGIuLiiZuOg" name="FamilyHistoryObservationRelatedSubjectBirthTime">
        <ownedComment xmi:id="_0cyj0QuuEeGvGIuLiiZuOg">
          <body>UNIMPLEMENTABLE</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0cyj0guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.subject.relatedSubject.subject.birthTime->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBf5EAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationTemplateId" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBf5EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.13.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBsGUAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationId" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBsGUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oBuikAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationCode" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oBuikQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '404684003' or value.code = '409586006' or value.code = '282291009' or value.code = '64572001' or value.code = '248536006' or value.code = '418799008' or value.code = '55607006')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oByM8Au0EeGvGIuLiiZuOg" name="FamilyHistoryObservationStatusCode" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oByM8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB0CIAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationValue" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB0CIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (not self.value->isEmpty() and self.value->forAll(element | element.oclIsTypeOf(datatypes::CD)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB13UAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationAgeObservation" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB13UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB3sgAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationProblemStatusObservation" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB3sgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB5hsAu0EeGvGIuLiiZuOg" name="FamilyHistoryObservationCauseOfDeathObservation" constrainedElement="_0cheEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB5hsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::CauseOfDeathObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::CAUS)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0c3cUQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oB3FcAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_oB3Fcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oB3Fcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oB3FcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB3FdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oB3FcQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oB3Fcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oB46oAu0EeGvGIuLiiZuOg" name="getProblemStatusObservation" isQuery="true" bodyCondition="_oB46owu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oB46owu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oB46oAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB46pAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemStatusObservation))->asSequence()->first().oclAsType(consol::ProblemStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oB46oQu0EeGvGIuLiiZuOg" type="_0XWqOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oB46ogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oB6v0Au0EeGvGIuLiiZuOg" name="getCauseOfDeathObservations" isQuery="true" bodyCondition="_oB6v0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oB6v0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oB6v0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB6v1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::CauseOfDeathObservation)).oclAsType(consol::CauseOfDeathObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oB6v0Qu0EeGvGIuLiiZuOg" type="_0bQ54QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oB6v0gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0dMzgwuuEeGvGIuLiiZuOg" name="SocialHistorySection">
      <ownedComment xmi:id="_0d7MQAuuEeGvGIuLiiZuOg" annotatedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This section contains data defining the patient's occupational, personal (e.g. lifestyle), social, and&#xD;
    environmental history and health risk factors, as well as administrative data such as marital status, race, ethnicity&#xD;
    and religious affiliation. Social history can have significant influence on a patient's physical, psychological and&#xD;
    emotional health and wellbeing so should be considered in the development of a complete record.&#xD;
&lt;/p>&#xD;
&#xD;
&lt;p>&#xD;
The ASTM CCR includes 'administrative data (ADT) such as marital status, ethnicity, nationality, and religious preferences' in the Social History section. CDA R2 differentiates between administrative data and clinical observations, supporting the former in the CDA Header and the latter in the CDA Body. As a result, it is necessary at times to populate attributes in the CDA Header, and to provide richer clinical details in the CDA Body.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0d7MQQuuEeGvGIuLiiZuOg" annotatedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <body>The social history section shall contain a narrative description of the person's beliefs, home life, community life, work&#xD;
life, hobbies, and risky habits.</body>
      </ownedComment>
      <ownedComment xmi:id="_0dMzhAuuEeGvGIuLiiZuOg" annotatedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Social History Section contains information about the person's beliefs, home life, community life,&#xD;
    work life, hobbies, and risky habits. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0d260AuuEeGvGIuLiiZuOg" name="SocialHistorySectionMaritalStatus">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d260QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->select(r | not r.patientRole.patient.maritalStatusCode.hasContent() )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0d3h4AuuEeGvGIuLiiZuOg" name="SocialHistorySectionReligiousAffiliation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d3h4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->select(r | not r.patientRole.patient.religiousAffiliationCode.hasContent() )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0d4I8AuuEeGvGIuLiiZuOg" name="SocialHistorySectionPatientRace">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d4I8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->select(r | not r.patientRole.patient.raceCode.hasContent() )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0d4wAAuuEeGvGIuLiiZuOg" name="SocialHistorySectionPatientRaceCodeSystem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d4wAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->forAll(r | r.patientRole.patient.raceCode.codeSystem = '2.16.840.1.113883.5.104' )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0d5XEAuuEeGvGIuLiiZuOg" name="SocialHistorySectionPatientEthnicity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d5XEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->select(r | not r.patientRole.patient.ethnicGroupCode.hasContent() )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0d6lMAuuEeGvGIuLiiZuOg" name="SocialHistorySectionPatientEthnicityCodeSystem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0d6lMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().recordTarget->forAll(r | r.patientRole.patient.ethnicGroupCode.codeSystem = '2.16.840.1.113883.5.50' )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oB_BQAu0EeGvGIuLiiZuOg" name="SocialHistorySectionTemplateId" constrainedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oB_BQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.126')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCGWAAu0EeGvGIuLiiZuOg" name="SocialHistorySectionCode" constrainedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCGWAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29762-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCIyQAu0EeGvGIuLiiZuOg" name="SocialHistorySectionTitle" constrainedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCIyQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCKncAu0EeGvGIuLiiZuOg" name="SocialHistorySectionText" constrainedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCKncQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCL1kAu0EeGvGIuLiiZuOg" name="SocialHistorySectionSocialHistory" constrainedElement="_0dMzgwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCL1kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::SocialHistory))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0d7MQguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oCNDsAu0EeGvGIuLiiZuOg" name="getSocialHistories" isQuery="true" bodyCondition="_oCNDswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oCNDswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oCNDsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCNDtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::SocialHistory)).oclAsType(consol::SocialHistory)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oCNDsQu0EeGvGIuLiiZuOg" type="_0dSTEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oCNDsgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0dSTEAuuEeGvGIuLiiZuOg" name="SocialHistory">
      <ownedComment xmi:id="_0dvmEAuuEeGvGIuLiiZuOg" annotatedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedRule xmi:id="_0dqtkAuuEeGvGIuLiiZuOg" name="SocialHistoryCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dqtkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' or self.code.codeSystem = '2.16.840.1.113883.6.96' or self.code.codeSystem = '2.16.840.1.113883.1.11.20.18'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dsiwAuuEeGvGIuLiiZuOg" name="SocialHistoryNoRepeatNumber">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dsiwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.repeatNumber->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dtw4AuuEeGvGIuLiiZuOg" name="SocialHistoryNoInterpretationCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dtw4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.interpretationCode->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0duX8AuuEeGvGIuLiiZuOg" name="SocialHistoryNoMethodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0duX8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.methodCode->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0du_AAuuEeGvGIuLiiZuOg" name="SocialHistoryNoTargetSiteCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0du_AQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.targetSiteCode->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCNqwAu0EeGvGIuLiiZuOg" name="SocialHistoryTemplateId" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCNqwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.33')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCUYcAu0EeGvGIuLiiZuOg" name="SocialHistoryId" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCUYcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCW0sAu0EeGvGIuLiiZuOg" name="SocialHistoryCode" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCW0sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '160573003' or value.code = '363908000' or value.code = '364703007' or value.code = '256235009' or value.code = '228272008' or value.code = '364393001' or value.code = '229819007' or value.code = '425400000')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCZQ8Au0EeGvGIuLiiZuOg" name="SocialHistoryText" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCZQ8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCcUQAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusCode" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCcUQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCeJcAu0EeGvGIuLiiZuOg" name="SocialHistoryEffectiveTime" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCeJcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCfXkAu0EeGvGIuLiiZuOg" name="SocialHistoryValue" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCfXkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (not self.value->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCySgAu0EeGvGIuLiiZuOg" name="SocialHistorySocialHistoryStatusObservation" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCySgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::SocialHistoryStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oC0Hswu0EeGvGIuLiiZuOg" name="SocialHistoryEpisodeObservation" constrainedElement="_0dSTEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC0uwAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::EpisodeObservation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0dvmEQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oCzgoAu0EeGvGIuLiiZuOg" name="getSocialHistoryStatusObservation" isQuery="true" bodyCondition="_oC0HsQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oC0HsQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oCzgoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC0Hsgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::SocialHistoryStatusObservation))->asSequence()->first().oclAsType(consol::SocialHistoryStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oCzgoQu0EeGvGIuLiiZuOg" type="_0dcEEguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oC0HsAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oC184Au0EeGvGIuLiiZuOg" name="getEpisodeObservation" isQuery="true" bodyCondition="_oC184wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oC184wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oC184Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC185Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::EpisodeObservation))->asSequence()->first().oclAsType(consol::EpisodeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oC184Qu0EeGvGIuLiiZuOg" type="_0WNaswuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oC184gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0dcEEguuEeGvGIuLiiZuOg" name="SocialHistoryStatusObservation">
      <ownedRule xmi:id="_0dlOAAuuEeGvGIuLiiZuOg" name="SocialHistoryStatusObservationTargetOfEntryRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dlOAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entry : cda::EntryRelationship | entry.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dnDMAuuEeGvGIuLiiZuOg" name="SocialHistoryStatusObservationNoAdditionalParticipants">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dnDMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0dnqQAuuEeGvGIuLiiZuOg" name="SocialHistoryStatusObservationNoAdditionalRelationships">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0dnqQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|not er.observation.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oChMwAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationTemplateId" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oChMwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.56')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCleMAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationClassCode" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCleMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCnTYAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationMoodCode" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCnTYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCpvoAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationCode" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCpvoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '33999-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCsy8Au0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationStatusCode" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCsy8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oCwdUAu0EeGvGIuLiiZuOg" name="SocialHistoryStatusObservationValue" constrainedElement="_0dcEEguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oCwdUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = element.oclAsType(datatypes::CE) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.1.11.20.17'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0doRUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0d8aYwuuEeGvGIuLiiZuOg" name="ResultsSection">
      <ownedComment xmi:id="_0d8aZAuuEeGvGIuLiiZuOg" annotatedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This section contains the results of observations generated by laboratories, imaging procedures, and&#xD;
    other procedures. The scope includes hematology, chemistry, serology, virology, toxicology, microbiology, plain x-ray,&#xD;
    ultrasound, CT, MRI, angiography, cardiac echo, nuclear medicine, pathology, and procedure observations. The section&#xD;
    may contain all results for the period of time being summarized, but should include notable results such as abnormal&#xD;
    values or relevant trends.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Lab results are typically generated by laboratories providing analytic services in areas such as&#xD;
    chemistry, hematology, serology, histology, cytology, anatomic pathology, microbiology, and/or virology. These&#xD;
    observations are based on analysis of specimens obtained from the patient, submitted to the lab.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Imaging results are typically generated by a clinician reviewing the output of an imaging procedure,&#xD;
    such as where a cardiologist reports the left ventricular ejection fraction based on the review of a cardiac&#xD;
    echo.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Procedure results are typically generated by a clinician wanting to provide more granular information&#xD;
    about component observations made during the performance of a procedure, such as where a gastroenterologist reports the&#xD;
    size of a polyp observed during a colonoscopy.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oC4ZJQu0EeGvGIuLiiZuOg" name="ResultsSectionTemplateId" constrainedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC5AMAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.14')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oC8DgAu0EeGvGIuLiiZuOg" name="ResultsSectionCode" constrainedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC8DgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '30954-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oC94sAu0EeGvGIuLiiZuOg" name="ResultsSectionTitle" constrainedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC94sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oC_t4Au0EeGvGIuLiiZuOg" name="ResultsSectionText" constrainedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC_t4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDA8AAu0EeGvGIuLiiZuOg" name="ResultsSectionResultOrganizer" constrainedElement="_0d8aYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDA8AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::ResultOrganizer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0eVb8QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oDCKIAu0EeGvGIuLiiZuOg" name="getResultOrganizers" isQuery="true" bodyCondition="_oDCKIwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDCKIwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDCKIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDCKJAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::ResultOrganizer)).oclAsType(consol::ResultOrganizer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDCKIQu0EeGvGIuLiiZuOg" type="_0eChAAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDCKIgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0eChAAuuEeGvGIuLiiZuOg" name="ResultOrganizer">
      <ownedComment xmi:id="_0eUN0AuuEeGvGIuLiiZuOg" annotatedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This clinical statement identifies set of result observations. It contains information applicable to all of the contained result observations. Result type codes categorize a result into one of several commonly accepted values (e.g., &quot;Hematology&quot;, &quot;Chemistry&quot;, &quot;Nuclear Medicine&quot;). These values are often implicit in the &lt;tt>Organizer/code&lt;/tt> (e.g., an &lt;tt>Organizer/code&lt;/tt> of &quot;complete blood count&quot; implies a &lt;tt>ResultTypeCode&lt;/tt> of &quot;Hematology&quot;). This template requires &lt;tt>Organizer/code&lt;/tt> to include a &lt;tt>ResultTypeCode&lt;/tt> either directly or as a translation of a code from some other code system.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0eChAQuuEeGvGIuLiiZuOg" annotatedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <body>Non-template subclasss of CCD ResultOrganizer that requires entires to be HITSP Result.</body>
      </ownedComment>
      <ownedRule xmi:id="_0eQjcAuuEeGvGIuLiiZuOg" name="ResultOrganizerCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eQjcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' xor self.code.codeSystem = '2.16.840.1.113883.6.96' xor self.code.codeSystem = '2.16.840.1.113883.6.12' xor self.code.codeSystem = '2.16.840.1.113883.1.11.20.16'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eRxlAuuEeGvGIuLiiZuOg" name="ResultOrganizerComponentElement">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eRxlQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eTmwAuuEeGvGIuLiiZuOg" name="ResultOrganizerInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eTmwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDCKJQu0EeGvGIuLiiZuOg" name="ResultOrganizerTemplateId" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDCxMAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.32')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDI30Au0EeGvGIuLiiZuOg" name="ResultOrganizerMoodCode" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDI30Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::ActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDKF8Au0EeGvGIuLiiZuOg" name="ResultOrganizerId" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDKF8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDLUEAu0EeGvGIuLiiZuOg" name="ResultOrganizerCode" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDLUEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDNJQAu0EeGvGIuLiiZuOg" name="ResultOrganizerStatusCode" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDNJQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDOXYAu0EeGvGIuLiiZuOg" name="ResultOrganizerResult" constrainedElement="_0eChAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDOXYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->exists(component : cda::Component4 | not component.observation.oclIsUndefined() and component.observation.oclIsKindOf(consol::Result))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0eUN0QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_B6aX4EbvEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oDPlgAu0EeGvGIuLiiZuOg" name="getResults" isQuery="true" bodyCondition="_oDPlgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDPlgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDPlgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDPlhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Result)).oclAsType(consol::Result)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDPlgQu0EeGvGIuLiiZuOg" type="_0eGycAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDPlggu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0eGycAuuEeGvGIuLiiZuOg" name="Result">
      <ownedComment xmi:id="_0eP8YAuuEeGvGIuLiiZuOg" annotatedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedComment xmi:id="_0eGycQuuEeGvGIuLiiZuOg" annotatedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <body>This clinical statement represents details of a lab, radiology, or other study performed on a patient. The scope of result observations is broad with the exception of &quot;vital signs&quot; which are contained in the Vital Signs section.</body>
      </ownedComment>
      <ownedRule xmi:id="_0eMSBQuuEeGvGIuLiiZuOg" name="ResultCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eMSBguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' xor self.code.codeSystem = '2.16.840.1.113883.6.96' xor self.code.codeSystem = '2.16.840.1.113883.6.12'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eOHMAuuEeGvGIuLiiZuOg" name="ResultReferenceRangeRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eOHMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.referenceRange->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eOuQAuuEeGvGIuLiiZuOg" name="ResultNoObservationRangeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eOuQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.referenceRange->forAll(range : cda::ReferenceRange | range.observationRange.code.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eOuQwuuEeGvGIuLiiZuOg" name="ResultInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eOuRAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eGycguuEeGvGIuLiiZuOg" name="ResultTypeCodeSystem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eGycwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' or self.code.codeSystem = '2.16.840.1.113883.6.96'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eGydAuuEeGvGIuLiiZuOg" name="ResultLaboratoryResultsValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eGydQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eGydguuEeGvGIuLiiZuOg" name="ResultValuePresence">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eGydwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.moodCode = vocab::x_ActMoodDocumentObservation::EVN or self.moodCode = vocab::x_ActMoodDocumentObservation::EVN)&#xD;&#xA;    implies (not self.value->isEmpty()) and&#xD;&#xA;  (self.moodCode = vocab::x_ActMoodDocumentObservation::INT or self.moodCode = vocab::x_ActMoodDocumentObservation::PRP)&#xD;&#xA;   implies (self.value->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDQzoAu0EeGvGIuLiiZuOg" name="ResultTemplateId" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDQzoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.15')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDZWgAu0EeGvGIuLiiZuOg" name="ResultMoodCode" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDZWgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDakoAu0EeGvGIuLiiZuOg" name="ResultId" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDakoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDbywAu0EeGvGIuLiiZuOg" name="ResultCode" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDbywQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDdn8Au0EeGvGIuLiiZuOg" name="ResultStatusCode" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDdn8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDe2EAu0EeGvGIuLiiZuOg" name="ResultEffectiveTime" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDe2EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDgEMAu0EeGvGIuLiiZuOg" name="ResultValue" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDgEMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDh5YAu0EeGvGIuLiiZuOg" name="ResultInterpretationCode" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDh5YQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.interpretationCode->isEmpty() or self.interpretationCode->exists(element | element.isNullFlavorUndefined())) implies (not self.interpretationCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDjHgAu0EeGvGIuLiiZuOg" name="ResultMethodCode" constrainedElement="_0eGycAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDjHgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.methodCode->isEmpty() or self.methodCode->exists(element | element.isNullFlavorUndefined())) implies (not self.methodCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0eP8YQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0eXRIAuuEeGvGIuLiiZuOg" name="MedicalEquipmentSection">
      <ownedComment xmi:id="_0ed-0AuuEeGvGIuLiiZuOg" annotatedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Medical Equipment section defines a patient's implanted and external medical devices and equipment&#xD;
    that their health status depends on, as well as any pertinent equipment or device history. This section is also used to&#xD;
    itemize any pertinent current or historical durable medical equipment (DME) used to help maintain the patient's health&#xD;
    status. All pertinent equipment relevant to the diagnosis, care, and treatment of a patient should be included.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0ed-0QuuEeGvGIuLiiZuOg" annotatedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <body>The medical devices section contains narrative text describing the patient history of medical device use.</body>
      </ownedComment>
      <ownedComment xmi:id="_0eXRIQuuEeGvGIuLiiZuOg" annotatedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Medical Equipment section contains information describing a patient's implanted and external medical&#xD;
    devices and equipment that their health status depends on, as well as any pertinent equipment or device history. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oDmK1Qu0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionTemplateId" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDmK1gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.128')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDpOIAu0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionCode" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDp1MAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '46264-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDrqYAu0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionTitle" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDrqYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDs4gAu0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionText" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDs4gQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDuGoAu0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionSupplyActivity" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDuGoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.supply.oclIsUndefined() and entry.supply.oclIsKindOf(consol::MedicationOrderInformation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDv70Au0EeGvGIuLiiZuOg" name="MedicalEquipmentSectionMedicationActivity" constrainedElement="_0eXRIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDv70Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Medication))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ed-0guuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oDvUwAu0EeGvGIuLiiZuOg" name="getSupplyActivities" isQuery="true" bodyCondition="_oDvUwwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDvUwwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDvUwAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDvUxAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDvUwQu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDvUwgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oDxJ8Au0EeGvGIuLiiZuOg" name="getMedicationActivities" isQuery="true" bodyCondition="_oDxJ8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oDxJ8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oDxJ8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDxJ9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication)).oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oDxJ8Qu0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oDxJ8gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0efM8wuuEeGvGIuLiiZuOg" name="FunctionalStatusSection">
      <ownedComment xmi:id="_0eplAAuuEeGvGIuLiiZuOg" annotatedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    &lt;i>Functional Status&lt;/i> describes the patient's status of normal functioning at the time the Care Record&#xD;
    was created. Functional statuses include information regarding the patient relative to:&#xD;
&lt;/p>&#xD;
&#xD;
    &lt;ul>&lt;li>Ambulatory ability&lt;/li>&#xD;
       &lt;li>Mental status or competency&lt;/li>&#xD;
        &lt;li>Activities of Daily Living (ADLs), including bathing, dressing, feeding, grooming&lt;/li>&#xD;
        &lt;li>Home / living situation having an effect on the health status of the patient&lt;/li>&#xD;
        &lt;li>Ability to care for self&lt;/li>&#xD;
        &lt;li>Social activity, including issues with social cognition, participation with&#xD;
        friends and acquaintances other than family members&lt;/li>&#xD;
       &lt;li>Occupation activity, including activities partly or directly related to working, housework or volunteering, family&#xD;
        and home responsibilities or activities related to home and family&lt;/li>&#xD;
      &lt;li>Communication ability, including issues with speech, writing or cognition required for communication&lt;/li>&#xD;
       &lt;li> Perception, including sight, hearing, taste, skin sensation, kinesthetic sense, proprioception, or&#xD;
        balance&lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Any&#xD;
    deviation from normal function that the patient displays and is recorded in the record should be included. Of&#xD;
    particular interest are those limitations that would in any way interfere with self care or the medical therapeutic&#xD;
    process. In addition, an improvement, any change in or noting that the patient has normal functioning status is also&#xD;
    valid for inclusion.&#xD;
&lt;/p>&#xD;
&lt;p>Functional Statuses can be expressed in 3 different forms. They can occur as a Problem, a Result or as text. Text can be employed if and only if the Functional Status is neither a Problem nor a Result. Functional Statuses expressed as Problems include relevant clinical conditions, diagnoses, symptoms and findings. Results are the interpretation or conclusion derived from a clinical assessment or test battery, such as the Instrumental Activities of Daily Living (IADL) scale or the Functional Status Index (FSI).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0efM9AuuEeGvGIuLiiZuOg" annotatedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Functional Status Section provides information about the capability of the patient to perform acts&#xD;
    of daily living. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0eiQQQuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionClinicalStatements">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eiQQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryTargets(ccd::ProblemAct)->size() > 0&#xD;&#xA;  or self.getEntryTargets(ccd::ResultOrganizer)->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ejeYAuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionObservationCode">
        <ownedComment xmi:id="_0ejeYQuuEeGvGIuLiiZuOg">
          <body>UNIMPLEMENTABLE</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ejeYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(obs : cda::Observation | obs.oclIsKindOf(ccd::ProblemObservation) or obs.oclIsKindOf(ccd::ResultObservation))->forAll(ob : cda::Observation| ob.code->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ekFcAuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionObservationCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ekFcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(obs : cda::Observation | obs.oclIsKindOf(ccd::ProblemObservation) or obs.oclIsKindOf(ccd::ResultObservation))->forAll(ob : cda::Observation| ob.code.codeSystem = '2.16.840.1.113883.6.96')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0env0AuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionValueDatatype">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0env0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(o | o.value->select(v | v.oclIsKindOf(datatypes::CD)  or  v.oclIsKindOf(datatypes::CE) ) ->isEmpty())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eoW4AuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionIcfCodeSystem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eoW4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(o|o.code.codeSystem &lt;> '2.16.840.1.113883.6.254')->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eo98AuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionProblemStatusObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eo98QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(obs : cda::Observation | (obs.oclIsKindOf(ccd::ResultObservation) or obs.oclIsKindOf(ccd::ProblemObservation)))->forAll(ob : cda::Observation | ob.getObservations()->select(o: cda::Observation | o.oclIsKindOf(ccd::FunctionalStatusObservation))->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0eo98wuuEeGvGIuLiiZuOg" name="FunctionalStatusSectionResultStatusObservation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0eo99AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getObservations()->select(obs : cda::Observation | (obs.oclIsKindOf(ccd::ResultObservation) or obs.oclIsKindOf(ccd::ProblemObservation)))->&#xD;&#xA;forAll(ob : cda::Observation | ob.getObservations()->select(o: cda::Observation | o.oclIsKindOf(ccd::FunctionalStatusObservation))->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oDzmMAu0EeGvGIuLiiZuOg" name="FunctionalStatusSectionTemplateId" constrainedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDzmMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.109')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oD9XMAu0EeGvGIuLiiZuOg" name="FunctionalStatusSectionCode" constrainedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oD9XMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '47420-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oD_zcAu0EeGvGIuLiiZuOg" name="FunctionalStatusSectionTitle" constrainedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oD_zcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEBooAu0EeGvGIuLiiZuOg" name="FunctionalStatusSectionText" constrainedElement="_0efM8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEBooQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0eplAQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0eqzIwuuEeGvGIuLiiZuOg" name="PurposeSection">
      <ownedComment xmi:id="_0eqzJAuuEeGvGIuLiiZuOg" annotatedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    Represents the specific reason for which the summarization was generated, such as in response to a&#xD;
    request.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The general use case does not require a purpose. Purpose should be utilized when the CCD has a specific&#xD;
    purpose such as a transfer, referral, or patient request.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oEEr8gu0EeGvGIuLiiZuOg" name="PurposeSectionTemplateId" constrainedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEEr8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.13')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEHvQAu0EeGvGIuLiiZuOg" name="PurposeSectionCode" constrainedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEHvQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '48764-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEKLgAu0EeGvGIuLiiZuOg" name="PurposeSectionTitle" constrainedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEKLgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oELZoAu0EeGvGIuLiiZuOg" name="PurposeSectionText" constrainedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oELZoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEMnwAu0EeGvGIuLiiZuOg" name="PurposeSectionPurposeActivity" constrainedElement="_0eqzIwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEMnwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::PurposeActivity))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0e1yQAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oEN14Au0EeGvGIuLiiZuOg" name="getPurposeActivities" isQuery="true" bodyCondition="_oEN14wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oEN14wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oEN14Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEN15Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PurposeActivity)).oclAsType(consol::PurposeActivity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oEN14Qu0EeGvGIuLiiZuOg" type="_0evEkAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oEN14gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0evEkAuuEeGvGIuLiiZuOg" name="PurposeActivity">
      <ownedComment xmi:id="_0evEkQuuEeGvGIuLiiZuOg" annotatedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    CCD represents the ASTM CCR &amp;lt;Purpose&amp;gt; object as a relationship between two classes -- the source&#xD;
    represents the act of creating a summary document, the target is the reason for creating the document, and the&#xD;
    relationship type is &quot;RSON&quot; (has reason). The target act may be an Observation, Procedure, or some other kind of act,&#xD;
    and it may represent an order, an event, etc.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0evEkguuEeGvGIuLiiZuOg" name="PurposeActivityHasReason" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0evEkwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | &#xD;&#xA;  entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0evElAuuEeGvGIuLiiZuOg" name="PurposeActivityReasonType" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0evElQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(entryRelationship : cda::EntryRelationship |&#xD;&#xA;  entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON implies( &#xD;&#xA;  not (entryRelationship.act.oclIsUndefined() and entryRelationship.encounter.oclIsUndefined()&#xD;&#xA;       and entryRelationship.observation.oclIsUndefined() and entryRelationship.procedure.oclIsUndefined()&#xD;&#xA;       and entryRelationship.substanceAdministration.oclIsUndefined() and entryRelationship.supply.oclIsUndefined())))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEOc8Au0EeGvGIuLiiZuOg" name="PurposeActivityTemplateId" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEOc8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.30')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oERgQAu0EeGvGIuLiiZuOg" name="PurposeActivityClassCode" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oERgQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oETVcAu0EeGvGIuLiiZuOg" name="PurposeActivityMoodCode" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oETVcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEVxsAu0EeGvGIuLiiZuOg" name="PurposeActivityCode" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEWYwAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '23745001' and value.codeSystem = '2.16.840.1.113883.6.96'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEY1AAu0EeGvGIuLiiZuOg" name="PurposeActivityStatusCode" constrainedElement="_0evEkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEY1AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0e1LMAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0e5coAuuEeGvGIuLiiZuOg" name="AdvanceDirectivesSection">
      <ownedComment xmi:id="_0f0CoAuuEeGvGIuLiiZuOg" annotatedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <body>The advance directive section shall contain a narrative description of the list of documents that define the patient's&#xD;
expectations and requests for care along with the locations of the documents.</body>
      </ownedComment>
      <ownedComment xmi:id="_0e5coQuuEeGvGIuLiiZuOg" annotatedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Advance Directives Section contains information that defines the patient's expectations and requests&#xD;
    for care along with the locations of the documents. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oEimAAu0EeGvGIuLiiZuOg" name="AdvanceDirectivesSectionTemplateId" constrainedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEimAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.116')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oElpUAu0EeGvGIuLiiZuOg" name="AdvanceDirectivesSectionCode" constrainedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oElpUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '42348-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEoFkAu0EeGvGIuLiiZuOg" name="AdvanceDirectivesSectionTitle" constrainedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEoFkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEpTsAu0EeGvGIuLiiZuOg" name="AdvanceDirectivesSectionText" constrainedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEp6wAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oErI4Au0EeGvGIuLiiZuOg" name="AdvanceDirectivesSectionAdvanceDirective" constrainedElement="_0e5coAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oErI4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AdvanceDirective))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0f0CoQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oEsXAAu0EeGvGIuLiiZuOg" name="getAdvanceDirectives" isQuery="true" bodyCondition="_oEsXAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oEsXAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oEsXAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEsXBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AdvanceDirective)).oclAsType(consol::AdvanceDirective)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oEsXAQu0EeGvGIuLiiZuOg" type="_0e-8MAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oEsXAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0e-8MAuuEeGvGIuLiiZuOg" name="AdvanceDirective">
      <ownedComment xmi:id="_0fst4AuuEeGvGIuLiiZuOg" annotatedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedComment xmi:id="_0e-8MQuuEeGvGIuLiiZuOg" annotatedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <body>This module contains data describing the patient's Advance Directives and any reference to supporting documentation. This section contains data such as the existence of living wills, healthcare proxies and CPR and resuscitation status. The custodian of these documents may be described.</body>
      </ownedComment>
      <ownedRule xmi:id="_0foccAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveAdvDirectiveCodeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0foccQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.96'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0fpDgAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveAdvDirectiveCodeCodeSystem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fpDgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.code = '304251008' and self.code.codeSystem = '2.16.840.1.113883.6.96'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0fpqlAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasExternalReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fpqlQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->select(r | r.oclIsKindOf(ccd::AdvanceDirectiveReference))->size() =1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8NQuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasStartingTime" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8NguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.effectiveTime.low.hasContent()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8OguuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasEndingTime" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8OwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.effectiveTime.high.hasContent()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8QQuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasCustodian" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8QguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8QwuuEeGvGIuLiiZuOg" name="AdvanceDirectiveParticipantTypeCode" constrainedElement="_0e-8QQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8RAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::CST)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8RQuuEeGvGIuLiiZuOg" name="AdvanceDirectiveParticipantRoleClassCode" constrainedElement="_0e-8QwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8RguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole->one(pr : cda::ParticipantRole | pr.classCode = vocab::RoleClassRoot::AGNT)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8RwuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasAddress" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8SAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.addr->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8SQuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasTelecom" constrainedElement="_0e-8RwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8SguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.telecom->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0e-8SwuuEeGvGIuLiiZuOg" name="AdvanceDirectiveHasNameOfAgent" constrainedElement="_0e-8SQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0e-8TAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant.participantRole.playingEntity.name->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oEsXBQu0EeGvGIuLiiZuOg" name="AdvanceDirectiveTemplateId" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oEs-EAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.12')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oE5LUAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveClassCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oE5LUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oE7AgAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveMoodCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oE7AgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oE81sAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveId" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oE81sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oE_5AAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oE_5AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and (value.code = '281789004' or value.code = '89666000' or value.code = '225204009' or value.code = '52765003' or value.code = '78823007' or value.code = '304251008')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFC8UAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFC8UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFExgAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveEffectiveTime" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFExgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFGmsAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveRepeatNumber" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFGmsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.repeatNumber.oclIsUndefined() or self.repeatNumber.isNullFlavorUndefined()) implies (not self.repeatNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFH00Au0EeGvGIuLiiZuOg" name="AdvanceDirectiveInterpretationCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFH00Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.interpretationCode->isEmpty() or self.interpretationCode->exists(element | element.isNullFlavorUndefined())) implies (not self.interpretationCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFJqAAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveTargetSiteCode" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFJqAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.targetSiteCode->isEmpty() or self.targetSiteCode->exists(element | element.isNullFlavorUndefined())) implies (not self.targetSiteCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFg2YAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveAdvanceDirectiveStatusObservation" constrainedElement="_0e-8MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFg2YQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AdvanceDirectiveStatusObservation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0fst4QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oFirkAu0EeGvGIuLiiZuOg" name="getAdvanceDirectiveStatusObservation" isQuery="true" bodyCondition="_oFirkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oFirkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oFirkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFirlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AdvanceDirectiveStatusObservation))->asSequence()->first().oclAsType(consol::AdvanceDirectiveStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oFirkQu0EeGvGIuLiiZuOg" type="_0fUTYwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oFirkgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0fPa4wuuEeGvGIuLiiZuOg" name="AdvanceDirectiveVerification">
      <ownedRule xmi:id="_oFLfMAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveVerificationTemplateId" constrainedElement="_0fPa4wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFLfMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.58')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFNUYAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveVerificationTypeCode" constrainedElement="_0fPa4wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFNUYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeCode=vocab::ParticipationType::VRF</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFOigAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveVerificationTime" constrainedElement="_0fPa4wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFOigQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.time.oclIsUndefined() or self.time.isNullFlavorUndefined()) implies (not self.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0fTFQQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_51DLwEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0fUTYwuuEeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservation">
      <ownedRule xmi:id="_0fcPMAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationTargetOfEntryRelationship">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fcPMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entry : cda::EntryRelationship | entry.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0fddUAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationNoAdditionalParticipants">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fddUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0feEYAuuEeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationNoAdditionalRelationships">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0feEYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er|not er.observation.oclIsUndefined())->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFRl0Au0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationTemplateId" constrainedElement="_0fUTYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFSM4Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.37')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFWeUAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationClassCode" constrainedElement="_0fUTYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFWeUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClassObservation::OBS</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFYTgAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationMoodCode" constrainedElement="_0fUTYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFYTgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFavwAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationCode" constrainedElement="_0fUTYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFavwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '33999-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFdzEAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveStatusObservationStatusCode" constrainedElement="_0fUTYwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFdzEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0fercAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0fhHsguuEeGvGIuLiiZuOg" name="AdvanceDirectiveReference">
      <ownedRule xmi:id="_0fhHswuuEeGvGIuLiiZuOg" name="AdvanceDirectiveReferenceHasURL" constrainedElement="_0fhHsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fhHtAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.externalDocument.text.reference.hasContent()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0fhHtQuuEeGvGIuLiiZuOg" name="AdvanceDirectiveReferenceHasMIMEType" constrainedElement="_0fhHsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fhHtguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.externalDocument.text.isDefined('mediaType')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0fhHuguuEeGvGIuLiiZuOg" name="AdvanceDirectiveReferenceExternalDocumentHasId" constrainedElement="_0fhHsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0fhHuwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.externalDocument.id->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFirlQu0EeGvGIuLiiZuOg" name="AdvanceDirectiveReferenceTemplateId" constrainedElement="_0fhHsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFirlgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.36')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFm9AAu0EeGvGIuLiiZuOg" name="AdvanceDirectiveReferenceTypeCode" constrainedElement="_0fhHsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFm9AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('typeCode')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0fnOUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_NDnXkEcIEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0f0psAuuEeGvGIuLiiZuOg" name="AllergiesReactionsSection">
      <ownedComment xmi:id="_0f7XYAuuEeGvGIuLiiZuOg" annotatedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <body>This section is used to list and describe any allergies, adverse reactions, and alerts that are pertinent to the patient's current or past medical history. At a minimum, currently active and any relevant historical allergies and adverse reactions should be listed.</body>
      </ownedComment>
      <ownedComment xmi:id="_0f7XYQuuEeGvGIuLiiZuOg" annotatedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <body>The adverse and other adverse reactions section shall contain a narrative description of the substance intolerances and the&#xD;
associated adverse reactions suffered by the patient.</body>
      </ownedComment>
      <ownedComment xmi:id="_0f0psQuuEeGvGIuLiiZuOg" annotatedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Allergies and Other Adverse Reactions Section contains data on the substance intolerances and the&#xD;
    associated adverse reactions suffered by the patient. At a minimum, currently active and any relevant historical&#xD;
    allergies and adverse reactions shall be listed. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oFqAUAu0EeGvGIuLiiZuOg" name="AllergiesReactionsSectionTemplateId" constrainedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFqAUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.102')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFtqsAu0EeGvGIuLiiZuOg" name="AllergiesReactionsSectionCode" constrainedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFtqsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '48765-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFvf4Au0EeGvGIuLiiZuOg" name="AllergiesReactionsSectionTitle" constrainedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFvf4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFwuAAu0EeGvGIuLiiZuOg" name="AllergiesReactionsSectionText" constrainedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFxVEAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oFyjMAu0EeGvGIuLiiZuOg" name="AllergiesReactionsSectionAllergyDrugSensitivity" constrainedElement="_0f0psAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFyjMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::AllergyDrugSensitivity))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0f7-cAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oFzxUAu0EeGvGIuLiiZuOg" name="getAllergyDrugSensitivities" isQuery="true" bodyCondition="_oFzxUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oFzxUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oFzxUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFzxVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::AllergyDrugSensitivity)).oclAsType(consol::AllergyDrugSensitivity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oFzxUQu0EeGvGIuLiiZuOg" type="_0V7G0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oFzxUgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0f8lgAuuEeGvGIuLiiZuOg" name="ProblemListSection">
      <ownedComment xmi:id="_0gCsIAuuEeGvGIuLiiZuOg" annotatedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <body>This section lists and describes all relevant clinical problems at the time the summary is generated. At a minimum, all pertinent current and historical problems should be listed. CDA R2 represents problems as Observations.</body>
      </ownedComment>
      <ownedComment xmi:id="_0gCsIQuuEeGvGIuLiiZuOg" annotatedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <body>The active problem section shall contain a narrative description of the conditions currently being monitored for the patient. It shall include entries for patient conditions as described in the Entry Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0f8lgQuuEeGvGIuLiiZuOg" annotatedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <body>This section lists and describes all relevant clinical problems at the time the document is generated. At a minimum, all pertinent current and historical problems should be listed.</body>
      </ownedComment>
      <ownedRule xmi:id="_oFzxVQu0EeGvGIuLiiZuOg" name="ProblemListSectionTemplateId" constrainedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF0YYAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.103')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oF20oAu0EeGvGIuLiiZuOg" name="ProblemListSectionCode" constrainedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF20oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11450-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oF4p0Au0EeGvGIuLiiZuOg" name="ProblemListSectionTitle" constrainedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF5Q4Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oF6fAAu0EeGvGIuLiiZuOg" name="ProblemListSectionText" constrainedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF6fAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oF7tIAu0EeGvGIuLiiZuOg" name="ProblemListSectionCondition" constrainedElement="_0f8lgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF7tIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0gCsIguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oF87QAu0EeGvGIuLiiZuOg" name="getConditions" isQuery="true" bodyCondition="_oF87Qwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oF87Qwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oF87QAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF87RAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition)).oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oF87QQu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oF87Qgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0gDTMAuuEeGvGIuLiiZuOg" name="EncountersSection">
      <ownedComment xmi:id="_0gtagAuuEeGvGIuLiiZuOg" annotatedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This section is used to list and describe any healthcare encounters pertinent to the patient's current&#xD;
    health status or historical health history. An Encounter is an interaction, regardless of the setting, between a&#xD;
    patient and a practitioner who is vested with primary responsibility for diagnosing, evaluating, or treating the&#xD;
    patient's condition. It may include visits, appointments, as well as non face-to-face interactions. It is also a&#xD;
    contact between a patient and a practitioner who has primary responsibility for assessing and treating the patient at a&#xD;
    given contact, exercising independent judgment. This section may contain all encounters for the time period being&#xD;
    summarized, but should include notable encounters.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0gtagQuuEeGvGIuLiiZuOg" annotatedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The encounter history section contains coded entries describing the patient history of encounters.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0gDTMQuuEeGvGIuLiiZuOg" annotatedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Encounter Section contains information describing the patient history of encounters. At a minimum,&#xD;
    current and pertinent historical encounters should be included; a full encounter history may be included. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oF9iUAu0EeGvGIuLiiZuOg" name="EncountersSectionTemplateId" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oF9iUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.127')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGAloAu0EeGvGIuLiiZuOg" name="EncountersSectionCode" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGAloQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '46240-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGCa0Au0EeGvGIuLiiZuOg" name="EncountersSectionTitle" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGCa0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGDo8Au0EeGvGIuLiiZuOg" name="EncountersSectionText" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGDo8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGFeIAu0EeGvGIuLiiZuOg" name="EncountersSectionEncounterEntry" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGFeIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.encounter.oclIsUndefined() and entry.encounter.oclIsKindOf(consol::Encounter))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGgU4Au0EeGvGIuLiiZuOg" name="EncountersSectionEncountersActivity" constrainedElement="_0gDTMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGgU4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.encounter.oclIsUndefined() and entry.encounter.oclIsKindOf(consol::EncountersActivity))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0gtagguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oGGsQAu0EeGvGIuLiiZuOg" name="getEncounterEntries" isQuery="true" bodyCondition="_oGGsQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oGGsQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oGGsQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGGsRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getEncounters()->select(encounter : cda::Encounter | not encounter.oclIsUndefined() and encounter.oclIsKindOf(consol::Encounter)).oclAsType(consol::Encounter)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oGGsQQu0EeGvGIuLiiZuOg" type="_0gdi4AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oGGsQgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oGhjAAu0EeGvGIuLiiZuOg" name="getEncountersActivities" isQuery="true" bodyCondition="_oGhjAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oGhjAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oGhjAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGhjBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getEncounters()->select(encounter : cda::Encounter | not encounter.oclIsUndefined() and encounter.oclIsKindOf(consol::EncountersActivity)).oclAsType(consol::EncountersActivity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oGhjAQu0EeGvGIuLiiZuOg" type="_0gJZ0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oGhjAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0gJZ0AuuEeGvGIuLiiZuOg" name="EncountersActivity">
      <ownedRule xmi:id="_0gJZ0QuuEeGvGIuLiiZuOg" name="EncountersActivityHasIndications" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gJZ0guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(er : cda::EntryRelationship | er.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gJZ0wuuEeGvGIuLiiZuOg" name="EncountersActivityHasPractitioners" constrainedElement="_0gJZ0QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gJZ1AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->size() >= 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gJZ1QuuEeGvGIuLiiZuOg" name="EncountersActivityPractitionerRole" constrainedElement="_0gJZ0wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gJZ1guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer.assignedEntity.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGGsRQu0EeGvGIuLiiZuOg" name="EncountersActivityTemplateId" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGGsRgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.21')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGLkwAu0EeGvGIuLiiZuOg" name="EncountersActivityClassCode" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGLkwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClass::ENC</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGNZ8Au0EeGvGIuLiiZuOg" name="EncountersActivityMoodCode" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGNZ8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentEncounterMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGOoEAu0EeGvGIuLiiZuOg" name="EncountersActivityId" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGOoEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGREUAu0EeGvGIuLiiZuOg" name="EncountersActivityEffectiveTime" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGREUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGS5gAu0EeGvGIuLiiZuOg" name="EncountersActivityPatientInstruction" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGS5gQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::PatientMedicalInstructions))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGUusAu0EeGvGIuLiiZuOg" name="EncountersActivityAgeObservation" constrainedElement="_0gJZ0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGUusQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0gcUwAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_AAXtEEbvEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oGUHoAu0EeGvGIuLiiZuOg" name="getPatientInstructions" isQuery="true" bodyCondition="_oGUHowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oGUHowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oGUHoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGUHpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oGUHoQu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oGUHogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oGV80Au0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_oGV80wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oGV80wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oGV80Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGV81Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oGV80Qu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oGV80gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0gUY8AuuEeGvGIuLiiZuOg" name="EncounterLocation">
      <ownedRule xmi:id="_0gUY8QuuEeGvGIuLiiZuOg" name="EncounterLocationHasParticipantRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gUY8wuuEeGvGIuLiiZuOg" name="EncounterLocationHasParticipantRoleLocation" constrainedElement="_0gUY8QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY9AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole.classCode =  vocab::RoleClassRoot::SDLOC</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gUY9QuuEeGvGIuLiiZuOg" name="EncounterLocationHasParticipantRoleCode" constrainedElement="_0gUY8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY9guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole.code->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gUY9wuuEeGvGIuLiiZuOg" name="EncounterLocationHasParticipantRoleCodeVocab" constrainedElement="_0gUY9QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole.code.codeSystem = '2.16.840.1.113883.5.111'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gUY-QuuEeGvGIuLiiZuOg" name="EncounterLocationHasPlayingEntity" constrainedElement="_0gUY9wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY-guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole.playingEntity->size()>0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0gUY-wuuEeGvGIuLiiZuOg" name="EncounterLocationHasPlayingEntityPlace" constrainedElement="_0gUY-QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gUY_AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participantRole.playingEntity.classCode = vocab::EntityClassRoot::PLC</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGXK8Au0EeGvGIuLiiZuOg" name="EncounterLocationTemplateId" constrainedElement="_0gUY8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGXK8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.45')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGd4oAu0EeGvGIuLiiZuOg" name="EncounterLocationTypeCode" constrainedElement="_0gUY8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGd4oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeCode=vocab::ParticipationType::LOC</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0gbtsAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_51DLwEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0gdi4AuuEeGvGIuLiiZuOg" name="Encounter">
      <ownedComment xmi:id="_0gdi4QuuEeGvGIuLiiZuOg" annotatedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <body>The encounter entry contains data describing the interactions between the patient and clinicians. Interaction includes both in-person and non-in-person encounters such as telephone and e-mail communication.</body>
      </ownedComment>
      <ownedRule xmi:id="_0gdi4guuEeGvGIuLiiZuOg" name="ConsolEncounterAdmissionSourceValueSet" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0gdi4wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::ORG) and self.participant.participantRole->one(pr : cda::ParticipantRole | pr.code.codeSystem = '2.16.840.1.113883.3.88.12.80.33')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGiKEAu0EeGvGIuLiiZuOg" name="ConsolEncounterTemplateId" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGiKEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.16')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGnCkAu0EeGvGIuLiiZuOg" name="ConsolEncounterClassCode" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGnCkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::ActClass::ENC</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGoQsAu0EeGvGIuLiiZuOg" name="ConsolEncounterId" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGoQsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGqs8Au0EeGvGIuLiiZuOg" name="ConsolEncounterCode" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGqs8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.12' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGtJMAu0EeGvGIuLiiZuOg" name="ConsolEncounterText" constrainedElement="_0gdi4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGtJMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0gnT4AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_AAXtEEbvEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0guooAuuEeGvGIuLiiZuOg" name="ImmunizationsSection">
      <ownedComment xmi:id="_0hQNEAuuEeGvGIuLiiZuOg" annotatedElement="_0guooAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Medications section defines a patient's current medications and pertinent medication&#xD;
    history. At a minimum, the currently active medications should be listed, with an entire medication history as an&#xD;
    option, particularly when the summary document is used for comprehensive data export. The section may also include a&#xD;
    patient's prescription history, and enables the determination of the source of a medication list (e.g. from a pharmacy&#xD;
    system vs. from the patient).&#xD;
&lt;/p>&#xD;
&lt;p>Reconciliation of conflicting medication information from various sources is enabled both by indicating the source of information and by indicating whether the source is reporting intended or actual medication use. For instance, a physician may intend for a patient to be on a particular dose, but the patient may actually be taking a different dose; a pharmacy may fill a prescription for a particular dose only to then have the patient's physician lower the dose without notifying the pharmacy. Therefore, medication and supply activities can be expressed in CCD in either the &quot;EVN&quot; (event) mood or the &quot;INT&quot; (intent) mood. Medication activities in &quot;INT&quot; mood are not orders (which are represented in the Plan of Care section), but rather are reflections of what a clinician intends a patient to be taking. Medication activities in &quot;EVN&quot; mood reflect actual use. A pharmacy system will typically report what was actually filled (supply event), along with intended use (substance administration intent). A physician will often report intended use (substance administration and supply intent). A patient or family member will typically report actual use (substance administration event).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0hQNEQuuEeGvGIuLiiZuOg" annotatedElement="_0guooAuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Immunizations section defines a patient's current immunization status and pertinent immunization history. The primary use case for the Immunization section is to enable communication of a patient's immunization status. The section should include current immunization status, and may contain the entire immunization history that is relevant to the period of time being summarized.&lt;/p>&#xD;
&lt;p>This section is optional, however it is strongly recommended that it be present in cases of pediatric care and in other cases when such information is available.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0hQNEguuEeGvGIuLiiZuOg" annotatedElement="_0guooAuuEeGvGIuLiiZuOg">
        <body>The immunizations section shall contain a narrative description of the immunizations administered to the patient in the&#xD;
past. It shall include entries for medication administration as described in the Entry Content Modules.</body>
      </ownedComment>
      <ownedComment xmi:id="_0guooQuuEeGvGIuLiiZuOg" annotatedElement="_0guooAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Immunizations Section contains information describing the immunizations administered to the&#xD;
    patient. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0hNJwAuuEeGvGIuLiiZuOg" name="ImmunizationsSectionHasMedicationOrSupplyActivity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hNJwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(activity : cda::SubstanceAdministration | activity.oclIsKindOf(ccd::MedicationActivity))&#xD;&#xA;   or self.getSupplies()->exists(activity : cda::Supply | activity.oclIsKindOf(ccd::SupplyActivity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oGvlcAu0EeGvGIuLiiZuOg" name="ImmunizationsSectionTemplateId" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oGvlcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.117')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG0d8Au0EeGvGIuLiiZuOg" name="ImmunizationsSectionCode" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG0d8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11369-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG2TIAu0EeGvGIuLiiZuOg" name="ImmunizationsSectionTitle" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG2TIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG4IUAu0EeGvGIuLiiZuOg" name="ImmunizationsSectionText" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG4IUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG5WcAu0EeGvGIuLiiZuOg" name="ImmunizationsSectionImmunization" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG5WcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Immunization))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG7Lowu0EeGvGIuLiiZuOg" name="ImmunizationsSectionSupplyActivity" constrainedElement="_0guooAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG7LpAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.supply.oclIsUndefined() and entry.supply.oclIsKindOf(consol::MedicationOrderInformation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0hQNEwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oG6kkAu0EeGvGIuLiiZuOg" name="getImmunizations" isQuery="true" bodyCondition="_oG7LoQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oG7LoQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oG6kkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG7Logu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Immunization)).oclAsType(consol::Immunization)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oG6kkQu0EeGvGIuLiiZuOg" type="_0g0vQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oG7LoAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oG8ZwAu0EeGvGIuLiiZuOg" name="getSupplyActivities" isQuery="true" bodyCondition="_oG8Zwwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oG8Zwwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oG8ZwAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG8ZxAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oG8ZwQu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oG8Zwgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0g0vQAuuEeGvGIuLiiZuOg" name="Immunization">
      <ownedComment xmi:id="_0hKGcAuuEeGvGIuLiiZuOg" annotatedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0hF1AAuuEeGvGIuLiiZuOg" name="ImmunizationMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hF1AQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hF1AwuuEeGvGIuLiiZuOg" name="ImmunizationHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hF1BAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hGcEQuuEeGvGIuLiiZuOg" name="ImmunizationHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hGcEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hHDIAuuEeGvGIuLiiZuOg" name="ImmunizationInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hHDIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hHqMAuuEeGvGIuLiiZuOg" name="ImmunizationHasPreconditionCriterion">
        <ownedComment xmi:id="_0hHqMQuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hHqMguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hIRQAuuEeGvGIuLiiZuOg" name="ImmunizationHasReason">
        <ownedComment xmi:id="_0hIRQQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hIRQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hI4UAuuEeGvGIuLiiZuOg" name="ImmunizationHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hI4UQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hI4UwuuEeGvGIuLiiZuOg" name="ImmunizationHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hI4VAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hJfaAuuEeGvGIuLiiZuOg" name="ImmunizationComments">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hJfaQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.negationInd=true implies not self.entryRelationship.act->select( act | act.oclIsKindOf(ccd::Comment) )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0g0vQQuuEeGvGIuLiiZuOg" name="ImmunizationRefusalReason" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0g0vQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er |   er.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON and er.act.code.codeSystem &lt;> '2.16.840.1.113883.1.11.19717' )->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oG9A0Au0EeGvGIuLiiZuOg" name="ImmunizationTemplateId" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oG9A0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.13')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHJ1IAu0EeGvGIuLiiZuOg" name="ImmunizationId" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHJ1IQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHM4cAu0EeGvGIuLiiZuOg" name="ImmunizationCode" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHM4cQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.12.292' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHOtoAu0EeGvGIuLiiZuOg" name="ImmunizationStatusCode" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHOtoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHP7wAu0EeGvGIuLiiZuOg" name="ImmunizationEffectiveTime" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHP7wQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (self.effectiveTime->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHSYAAu0EeGvGIuLiiZuOg" name="ImmunizationRouteCode" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHSYAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.112'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHU0QAu0EeGvGIuLiiZuOg" name="ImmunizationMaxDoseQuantity" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHU0QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHX3kAu0EeGvGIuLiiZuOg" name="ImmunizationMedicationSeriesNumberObservation" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHX3kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHZswQu0EeGvGIuLiiZuOg" name="ImmunizationMedicationStatusObservation" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHZswgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHbh8Qu0EeGvGIuLiiZuOg" name="ImmunizationPatientInstruction" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHbh8gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::PatientMedicalInstructions) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHelQAu0EeGvGIuLiiZuOg" name="ImmunizationReactionObservation" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHelQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::CAUS)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHfzZQu0EeGvGIuLiiZuOg" name="ImmunizationProductInstance" constrainedElement="_0g0vQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHfzZgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0hKGcQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_nazskEbuEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oHZFsAu0EeGvGIuLiiZuOg" name="getMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oHZFswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHZFswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHZFsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHZswAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHZFsQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHZFsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oHa64Au0EeGvGIuLiiZuOg" name="getMedicationStatusObservation" isQuery="true" bodyCondition="_oHa64wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHa64wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHa64Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHbh8Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHa64Qu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHa64gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oHcwEAu0EeGvGIuLiiZuOg" name="getPatientInstructions" isQuery="true" bodyCondition="_oHcwEwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHcwEwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHcwEAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHcwFAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHcwEQu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHcwEgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oHfzYAu0EeGvGIuLiiZuOg" name="getReactionObservations" isQuery="true" bodyCondition="_oHfzYwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHfzYwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHfzYAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHfzZAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer)).oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHfzYQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHfzYgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oHhokAu0EeGvGIuLiiZuOg" name="getProductInstances" isQuery="true" bodyCondition="_oHhokwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHhokwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHhokAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHholAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHhokQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHhokgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0hRbMAuuEeGvGIuLiiZuOg" name="PayersSection">
      <ownedComment xmi:id="_0iVyMAuuEeGvGIuLiiZuOg" annotatedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    &lt;i>Payers&lt;/i> contains data on the patient's payers, whether a 'third party' insurance,&#xD;
    self-pay, other payer or guarantor, or some combination of payers, and is used to define which entity is the&#xD;
    responsible fiduciary for the financial aspects of a patient's care.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each unique&#xD;
    instance of a payer and all the pertinent data needed to contact, bill to, and collect from that payer should be&#xD;
    included. Authorization information that can be used to define pertinent referral, authorization tracking number,&#xD;
    procedure, therapy, intervention, device, or similar authorizations for the patient or provider, or both should be&#xD;
    included. At a minimum, the patient's pertinent current payment sources should be listed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The CCD&#xD;
    represents the sources of payment as a coverage act, which identifies all of the insurance policies or government or&#xD;
    other programs that cover some or all of the patient's healthcare expenses. The policies or programs are sequenced by&#xD;
    order of preference. Each policy or program identifies the covered party with respect to the payer, so that the&#xD;
    identifiers can be recorded.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0iVyMQuuEeGvGIuLiiZuOg" annotatedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <body>The Payers section contains data on the patient's payers, whether a 'third party' insurance, self-pay, other payer or&#xD;
guarantor, or some combination.</body>
      </ownedComment>
      <ownedComment xmi:id="_0hRbMQuuEeGvGIuLiiZuOg" annotatedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Payers Section contains data on the patient's payers, whether a 'third party' insurance, self-pay,&#xD;
    other payer or guarantor, or some combination. At a minimum, the patient's pertinent current payment sources should be&#xD;
    listed. If no payment sources are supplied, the reason shall be supplied as free text in the narrative block (e.g., Not&#xD;
    Insured, Payer Unknown, Medicare Pending, et cetera). &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oHholQu0EeGvGIuLiiZuOg" name="PayersSectionTemplateId" constrainedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHholgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.101')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHkr4Au0EeGvGIuLiiZuOg" name="PayersSectionCode" constrainedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHkr4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '48768-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHnIIAu0EeGvGIuLiiZuOg" name="PayersSectionTitle" constrainedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHnIIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHo9UAu0EeGvGIuLiiZuOg" name="PayersSectionText" constrainedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHo9UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHqLcAu0EeGvGIuLiiZuOg" name="PayersSectionInsuranceProvider" constrainedElement="_0hRbMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHqLcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::InsuranceProvider))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iVyMguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oHrZkAu0EeGvGIuLiiZuOg" name="getInsuranceProviders" isQuery="true" bodyCondition="_oHrZkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oHrZkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oHrZkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHrZlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InsuranceProvider)).oclAsType(consol::InsuranceProvider)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oHrZkQu0EeGvGIuLiiZuOg" type="_0hYI4AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oHrZkgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0hYI4AuuEeGvGIuLiiZuOg" name="InsuranceProvider">
      <ownedRule xmi:id="_0iOdcAuuEeGvGIuLiiZuOg" name="InsuranceProviderInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iOdcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;  or not self.getSection().informant->isEmpty()&#xD;&#xA;  or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;  or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;  or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iPEgAuuEeGvGIuLiiZuOg" name="InsuranceProviderSequenceNumber">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iPEgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(rel : cda::EntryRelationship | not rel.sequenceNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI4wuuEeGvGIuLiiZuOg" name="InsuranceProviderPaymentProviders">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI5AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->exists(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI5QuuEeGvGIuLiiZuOg" name="InsuranceProviderPayerEntryID">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI5guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | not a.id.root->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI5wuuEeGvGIuLiiZuOg" name="InsuranceProviderHealthInsuranceType" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI6AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.code.codeSystem = '2.16.840.1.113883.6.255.1336' and (a.code.code='12' or a.code.code='13' or a.code.code='14' or a.code.code='15' or a.code.code='16' or a.code.code='41' or a.code.code='42' or a.code.code='43' or a.code.code='47' or a.code.code='AP' or a.code.code='C1' or a.code.code='CO' or a.code.code='CP' or a.code.code='D' or a.code.code='DB' or a.code.code='EP' or a.code.code='FF' or a.code.code='GP' or a.code.code='HM' or a.code.code='HN' or a.code.code='HS' or a.code.code='IN' or a.code.code='IP' or a.code.code='LC' or a.code.code='LD' or a.code.code='LI' or a.code.code='LT' or a.code.code='MA' or a.code.code='MB' or a.code.code='MC' or a.code.code='MH' or a.code.code='MI' or a.code.code='MP' or a.code.code='OT' or a.code.code='PE' or a.code.code='PL' or a.code.code='PP' or a.code.code='PR' or a.code.code='PS' or a.code.code='QM' or a.code.code='RP' or a.code.code='SP' or a.code.code='TF' or a.code.code='WC' or a.code.code='WU'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI6QuuEeGvGIuLiiZuOg" name="InsuranceProviderInsuranceInformation" constrainedElement="_0hYI6wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI6guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists (perm : cda::Performer2 | perm.typeCode = vocab::ParticipationPhysicalPerformer::PRF and perm.assignedEntity->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI6wuuEeGvGIuLiiZuOg" name="InsuranceProviderInsuranceInfoSourceID" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI7AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists (perm : cda::Performer2 | perm.typeCode = vocab::ParticipationPhysicalPerformer::PRF and perm.assignedEntity.id->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI7QuuEeGvGIuLiiZuOg" name="InsuranceProviderInsuranceInfoSourceAddr" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI7guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists (perm : cda::Performer2 | perm.typeCode = vocab::ParticipationPhysicalPerformer::PRF and perm.assignedEntity.addr->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI9QuuEeGvGIuLiiZuOg" name="InsuranceProviderHealthPlanCoverageStartTime" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI9guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.time.low->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI9wuuEeGvGIuLiiZuOg" name="InsuranceProviderHealthPlanCoverageStopTime" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI-AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.time.high->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI-QuuEeGvGIuLiiZuOg" name="InsuranceProviderPatientInformation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI-guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI-wuuEeGvGIuLiiZuOg" name="InsuranceProviderMemberId" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI_AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT and par.participantRole.id->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYI_QuuEeGvGIuLiiZuOg" name="InsuranceProviderMemberIdRoot" constrainedElement="_0hYI-wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYI_guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT and par.participantRole.id.root->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJAwuuEeGvGIuLiiZuOg" name="InsuranceProviderRelationshipToSubscriber" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJBAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT and par.participantRole.code->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJBQuuEeGvGIuLiiZuOg" name="InsuranceProviderRelationshipToSubscriberCodeSystem" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJBguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT and par.participantRole.code.codeSystem = '2.16.840.1.113883.5.111' and (par.participantRole.code.code = 'FAMDEP' or par.participantRole.code.code='HANDIC' or par.participantRole.code.code ='INJ' or par.participantRole.code.code='SELF' or par.participantRole.code.code='SPON' or par.participantRole.code.code ='STUD' or par.participantRole.code.code='FSTUD' or par.participantRole.code.code='PSTUD')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJDQuuEeGvGIuLiiZuOg" name="InsuranceProviderPatientName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJDguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists (par : cda::Participant2 | par.typeCode = vocab::ParticipationType::COV and par.participantRole.classCode = vocab::RoleClassRoot::PAT and par.participantRole.playingEntity.name->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJEQuuEeGvGIuLiiZuOg" name="InsuranceProviderSubscriberInformation" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::HLD))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJFQuuEeGvGIuLiiZuOg" name="InsuranceProviderSubscriberId" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJFguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::HLD and par.participantRole.id->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJFwuuEeGvGIuLiiZuOg" name="InsuranceProviderSubscriberIdRoot" constrainedElement="_0hYJFQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJGAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::HLD and par.participantRole.id.root->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJGQuuEeGvGIuLiiZuOg" name="InsuranceProviderSubscriberAddress" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJGguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.participant->exists(par : cda::Participant2 | par.typeCode = vocab::ParticipationType::HLD and par.participantRole.addr->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJIwuuEeGvGIuLiiZuOg" name="InsuranceProviderFinancialResponsibilityPartyType" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJJAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists(per : cda::Performer2 | per.typeCode = vocab::ParticipationPhysicalPerformer::PRF and per.assignedEntity.code->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJJQuuEeGvGIuLiiZuOg" name="InsuranceProviderFinancialResponsibilityPartyTypeCode" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJJguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists(per : cda::Performer2 | per.assignedEntity.code.codeSystem = '2.16.840.1.113883.5.110'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0hYJKwuuEeGvGIuLiiZuOg" name="InsuranceProviderFinancialResponsibilityPartyAddress">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0hYJLAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getActs()->select(act : cda::Act | act.oclIsKindOf(ihe::PayerEntry))->forAll(a : cda::Act | a.performer->exists(per : cda::Performer2 | per.assignedEntity.addr->size() > 0))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oHrZlQu0EeGvGIuLiiZuOg" name="InsuranceProviderTemplateId" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oHsAoAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.5')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIIFgAu0EeGvGIuLiiZuOg" name="InsuranceProviderClassCode" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIIFgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIJ6sAu0EeGvGIuLiiZuOg" name="InsuranceProviderMoodCode" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIJ6sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::DEF</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oILv4Au0EeGvGIuLiiZuOg" name="InsuranceProviderId" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oILv4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIPaQAu0EeGvGIuLiiZuOg" name="InsuranceProviderCode" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIPaQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '48768-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oITEoAu0EeGvGIuLiiZuOg" name="InsuranceProviderStatusCode" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oITrsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIvJgAu0EeGvGIuLiiZuOg" name="InsuranceProviderPayerEntry" constrainedElement="_0hYI4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIvJgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::PayerEntry) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iUkEAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oIwXoAu0EeGvGIuLiiZuOg" name="getPayerEntries" isQuery="true" bodyCondition="_oIwXowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oIwXowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oIwXoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIwXpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PayerEntry)).oclAsType(consol::PayerEntry)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oIwXoQu0EeGvGIuLiiZuOg" type="_0h5GQwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oIwXogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0h5GQwuuEeGvGIuLiiZuOg" name="PayerEntry">
      <ownedComment xmi:id="_0iMoQAuuEeGvGIuLiiZuOg" annotatedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <body>A policy activity represents the policy or program providing the coverage. The person for whom payment is being provided (i.e. the patient) is the covered party. The subscriber of the policy or program is represented as a participant that is the holder the coverage. The payer is represented as the performer of the policy activity.</body>
      </ownedComment>
      <ownedRule xmi:id="_0iHIsAuuEeGvGIuLiiZuOg" name="PayerEntryPayerEntityIsRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iHIsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->one(perf : cda::Performer2 | perf.typeCode = vocab::ParticipationPhysicalPerformer::PRF)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iHvwAuuEeGvGIuLiiZuOg" name="PayerEntryCoveredPartyIsRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iHvwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(part : cda::Participant2 | part.typeCode = vocab::ParticipationType::COV)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iI94AuuEeGvGIuLiiZuOg" name="PayerEntryCoveredPartyTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iI94QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(part : cda::Participant2 | part.typeCode = vocab::ParticipationType::COV&#xD;&#xA;  implies not part.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iJk8AuuEeGvGIuLiiZuOg" name="PayerEntrySubscriberIsAllowed">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iJk8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(part : cda::Participant2 | part.typeCode = vocab::ParticipationType::HLD)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iKMAAuuEeGvGIuLiiZuOg" name="PayerEntrySubscriberTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iKMAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(part : cda::Participant2 | part.typeCode = vocab::ParticipationType::HLD&#xD;&#xA;  implies not part.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iLaIAuuEeGvGIuLiiZuOg" name="PayerEntryEntryRelationshipREFR">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iLaIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(rel : cda::EntryRelationship | rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0iMBMAuuEeGvGIuLiiZuOg" name="PayerEntryEntryRelationshipTarget">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iMBMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->forAll(rel : cda::EntryRelationship | rel.act.oclIsKindOf(ccd::AuthorizationActivity)&#xD;&#xA;  or rel.act.oclIsKindOf(ccd::CoveragePlanDescription))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIVg4Au0EeGvGIuLiiZuOg" name="PayerEntryTemplateId" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIVg4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.18')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIc1oAu0EeGvGIuLiiZuOg" name="PayerEntryClassCode" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIc1oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIeq0Au0EeGvGIuLiiZuOg" name="PayerEntryMoodCode" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIeq0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIggAAu0EeGvGIuLiiZuOg" name="PayerEntryId" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIggAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIjjUAu0EeGvGIuLiiZuOg" name="PayerEntryStatusCode" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIjjUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oImmoQu0EeGvGIuLiiZuOg" name="PayerEntryPayerEntity" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oInNsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->one(performer : cda::Performer2 | not performer.assignedEntity.oclIsUndefined() and performer.assignedEntity.oclIsKindOf(cda::AssignedEntity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIq4EAu0EeGvGIuLiiZuOg" name="PayerEntryCoveredParty" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIq4EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(cda::ParticipantRole))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oItUUQu0EeGvGIuLiiZuOg" name="PayerEntrySubscriber" constrainedElement="_0h5GQwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oItUUgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->one(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(cda::ParticipantRole))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iMoQQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oIn0wAu0EeGvGIuLiiZuOg" name="getPayerEntity" isQuery="true" bodyCondition="_oIn0wwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oIn0wwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oIn0wAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIn0xAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAssignedEntities()->select(assignedEntity : cda::AssignedEntity | not assignedEntity.oclIsUndefined() and assignedEntity.oclIsKindOf(cda::AssignedEntity))->asSequence()->first().oclAsType(cda::AssignedEntity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oIn0wQu0EeGvGIuLiiZuOg" direction="return">
          <type xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_6qmVsEcDEd6besF9iFIJkQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oIn0wgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oIrfIAu0EeGvGIuLiiZuOg" name="getCoveredParty" isQuery="true" bodyCondition="_oIsGMQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oIsGMQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oIrfIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIsGMgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(cda::ParticipantRole))->asSequence()->first().oclAsType(cda::ParticipantRole)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oIrfIQu0EeGvGIuLiiZuOg" direction="return">
          <type xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#__QZaIEcZEd6besF9iFIJkQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oIsGMAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oIuicAu0EeGvGIuLiiZuOg" name="getSubscriber" isQuery="true" bodyCondition="_oIuicwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oIuicwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oIuicAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIuidAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(cda::ParticipantRole))->asSequence()->first().oclAsType(cda::ParticipantRole)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oIuicQu0EeGvGIuLiiZuOg" direction="return">
          <type xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#__QZaIEcZEd6besF9iFIJkQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oIuicgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0h_z8wuuEeGvGIuLiiZuOg" name="PayerEntity">
      <ownedRule xmi:id="_oIl_kAu0EeGvGIuLiiZuOg" name="PayerEntityId" constrainedElement="_0h_z8wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIl_kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iAbAQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_6qmVsEcDEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0iCQMAuuEeGvGIuLiiZuOg" name="CoveredParty">
      <ownedRule xmi:id="_oIob0Au0EeGvGIuLiiZuOg" name="CoveredPartyId" constrainedElement="_0iCQMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIob0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIpp8Au0EeGvGIuLiiZuOg" name="CoveredPartyCode" constrainedElement="_0iCQMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIpp8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iDeUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#__QZaIEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0iEscwuuEeGvGIuLiiZuOg" name="PolicySubscriber">
      <ownedRule xmi:id="_oIsGMwu0EeGvGIuLiiZuOg" name="PolicySubscriberId" constrainedElement="_0iEscwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIsGNAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iF6kAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#__QZaIEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0iWZQAuuEeGvGIuLiiZuOg" name="MedicationsSection">
      <ownedComment xmi:id="_0ifjMAuuEeGvGIuLiiZuOg" annotatedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Medications section defines a patient's current medications and pertinent medication&#xD;
    history. At a minimum, the currently active medications should be listed, with an entire medication history as an&#xD;
    option, particularly when the summary document is used for comprehensive data export. The section may also include a&#xD;
    patient's prescription history, and enables the determination of the source of a medication list (e.g. from a pharmacy&#xD;
    system vs. from the patient).&#xD;
&lt;/p>&#xD;
&lt;p>Reconciliation of conflicting medication information from various sources is enabled both by indicating the source of information and by indicating whether the source is reporting intended or actual medication use. For instance, a physician may intend for a patient to be on a particular dose, but the patient may actually be taking a different dose; a pharmacy may fill a prescription for a particular dose only to then have the patient's physician lower the dose without notifying the pharmacy. Therefore, medication and supply activities can be expressed in CCD in either the &quot;EVN&quot; (event) mood or the &quot;INT&quot; (intent) mood. Medication activities in &quot;INT&quot; mood are not orders (which are represented in the Plan of Care section), but rather are reflections of what a clinician intends a patient to be taking. Medication activities in &quot;EVN&quot; mood reflect actual use. A pharmacy system will typically report what was actually filled (supply event), along with intended use (substance administration intent). A physician will often report intended use (substance administration and supply intent). A patient or family member will typically report actual use (substance administration event).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0ifjMQuuEeGvGIuLiiZuOg" annotatedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <body>The medications section shall contain a description of the relevant medications for the patient, e.g. an ambulatory&#xD;
prescription list. It shall include entries for medications as described in the Entry Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0iXAUAuuEeGvGIuLiiZuOg" annotatedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <body>The Medications Section contains information about the relevant medications for the patient. At a minimum, the currently active medications should be listed.</body>
      </ownedComment>
      <ownedRule xmi:id="_0ib40AuuEeGvGIuLiiZuOg" name="MedicationsSectionHasMedicationOrSupplyActivity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ib40QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSubstanceAdministrations()->exists(activity : cda::SubstanceAdministration | activity.oclIsKindOf(ccd::MedicationActivity))&#xD;&#xA;   or self.getSupplies()->exists(activity : cda::Supply | activity.oclIsKindOf(ccd::SupplyActivity))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oIwXpQu0EeGvGIuLiiZuOg" name="MedicationsSectionTemplateId" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oIw-sAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.112')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oI2eQAu0EeGvGIuLiiZuOg" name="MedicationsSectionCode" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI2eQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10160-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oI4TcAu0EeGvGIuLiiZuOg" name="MedicationsSectionTitle" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI4TcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oI5hkAu0EeGvGIuLiiZuOg" name="MedicationsSectionText" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI5hkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oI7WwAu0EeGvGIuLiiZuOg" name="MedicationsSectionMedication" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI7WwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Medication))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oI8k5Au0EeGvGIuLiiZuOg" name="MedicationsSectionSupplyActivity" constrainedElement="_0iWZQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI8k5Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.supply.oclIsUndefined() and entry.supply.oclIsKindOf(consol::MedicationOrderInformation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ifjMguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oI790Au0EeGvGIuLiiZuOg" name="getMedications" isQuery="true" bodyCondition="_oI8k4gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oI8k4gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oI790Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI8k4wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication)).oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oI8k4Au0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oI8k4Qu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oI9zAAu0EeGvGIuLiiZuOg" name="getSupplyActivities" isQuery="true" bodyCondition="_oI9zAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oI9zAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oI9zAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI9zBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oI9zAQu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oI9zAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0igxUAuuEeGvGIuLiiZuOg" name="PlanOfCareSection">
      <ownedComment xmi:id="_0jWe0AuuEeGvGIuLiiZuOg" annotatedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Assessment section (also called impression or diagnoses) represents the clinician's conclusions and working assumptions that will guide treatment of the patient. The assessment formulates a specific plan or set of recommendations. The assessment may be a list of specific disease entities or a narrative block.&lt;/p>&#xD;
&lt;p>The Plan section contains data that defines pending orders, interventions, encounters, services, and procedures for the patient. It is limited to prospective, unfulfilled, or incomplete orders and requests only. All active, incomplete, or pending orders, appointments, referrals, procedures, services, or any other pending event of clinical significance to the current care of the patient should be listed unless constrained due to privacy issues. The plan may also contain information about ongoing care of the patient and information regarding goals and clinical reminders. Clinical reminders are placed here to provide prompts for disease prevention and management, patient safety, and health-care quality improvements, including widely accepted performance measures. The plan may also indicate that patient education was given or will be provided.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0jWe0QuuEeGvGIuLiiZuOg" annotatedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The plan of care section contains data defining pending orders, interventions, encounters, services, and&#xD;
    procedures for the patient. It is limited to prospective, unfulfilled, or incomplete orders and requests only. All&#xD;
    active, incomplete, or pending orders, appointments, referrals, procedures, services, or any other pending event of&#xD;
    clinical significance to the current and ongoing care of the patient should be listed, unless constrained due to issues&#xD;
    of privacy.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The plan of care section also contains information regarding goals and clinical reminders. Clinical&#xD;
    reminders are placed here for purposes of providing prompts that may be used for disease prevention, disease&#xD;
    management, patient safety, and healthcare quality improvements, including widely accepted performance measures.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0jWe0guuEeGvGIuLiiZuOg" annotatedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <body>The care plan section shall contain a narrative description of the expectations for care including proposals, goals, and&#xD;
order requests for monitoring, tracking, or improving the condition of the patient.</body>
      </ownedComment>
      <ownedComment xmi:id="_0igxUQuuEeGvGIuLiiZuOg" annotatedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Plan of Care Section contains information about the expectations for care to be provided including&#xD;
    proposed interventions and goals for improving the condition of the patient. &#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A plan of care section varies from the assessment and plan section defined above in that it does not&#xD;
    include a physician assessment of the patient condition. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oI-aEAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionTemplateId" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oI-aEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.124')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJBdYAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionCode" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJBdYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '18776-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJDSkAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionTitle" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJDSkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJFHwAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionText" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJFHwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJG88Au0EeGvGIuLiiZuOg" name="PlanOfCareSectionMedication" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJHkAAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Medication))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJIyIgu0EeGvGIuLiiZuOg" name="PlanOfCareSectionImmunization" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJIyIwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Immunization))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJKnUAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionEncounter" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJKnUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.encounter.oclIsUndefined() and entry.encounter.oclIsKindOf(consol::Encounter))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJMcgAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionProcedure" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJMcgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::Procedure))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJTxQAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivityAct" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJUYUAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::PlanOfCareActivityAct))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJbtEAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivityEncounter" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJbtEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.encounter.oclIsUndefined() and entry.encounter.oclIsKindOf(consol::PlanOfCareActivityEncounter))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJjB0Au0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivityObservation" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJjo4Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::PlanOfCareActivityObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJq9oAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivityProcedure" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJq9oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::PlanOfCareActivityProcedure))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJzggAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivitySubstanceAdministration" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ0HkAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::PlanOfCareActivitySubstanceAdministration))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJ8DYAu0EeGvGIuLiiZuOg" name="PlanOfCareSectionPlanOfCareActivitySupply" constrainedElement="_0igxUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ8DYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.supply.oclIsUndefined() and entry.supply.oclIsKindOf(consol::PlanOfCareActivitySupply))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jXF4AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oJILEAu0EeGvGIuLiiZuOg" name="getMedication" isQuery="true" bodyCondition="_oJIyIAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJIyIAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJILEAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJIyIQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication))->asSequence()->first().oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJILEQu0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJILEgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJKAQAu0EeGvGIuLiiZuOg" name="getImmunization" isQuery="true" bodyCondition="_oJKAQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJKAQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJKAQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJKARAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Immunization))->asSequence()->first().oclAsType(consol::Immunization)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJKAQQu0EeGvGIuLiiZuOg" type="_0g0vQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJKAQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJL1cAu0EeGvGIuLiiZuOg" name="getEncounter" isQuery="true" bodyCondition="_oJL1cwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJL1cwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJL1cAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJL1dAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getEncounters()->select(encounter : cda::Encounter | not encounter.oclIsUndefined() and encounter.oclIsKindOf(consol::Encounter))->asSequence()->first().oclAsType(consol::Encounter)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJL1cQu0EeGvGIuLiiZuOg" type="_0gdi4AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJL1cgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJNqoAu0EeGvGIuLiiZuOg" name="getProcedure" isQuery="true" bodyCondition="_oJNqowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJNqowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJNqoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJNqpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::Procedure))->asSequence()->first().oclAsType(consol::Procedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJNqoQu0EeGvGIuLiiZuOg" type="_0jPKEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJNqogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJU_YAu0EeGvGIuLiiZuOg" name="getPlanOfCareActivityAct" isQuery="true" bodyCondition="_oJVmcQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJVmcQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJU_YAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJVmcgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PlanOfCareActivityAct))->asSequence()->first().oclAsType(consol::PlanOfCareActivityAct)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJU_YQu0EeGvGIuLiiZuOg" type="_0ipUMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJVmcAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJc7MAu0EeGvGIuLiiZuOg" name="getPlanOfCareActivityEncounter" isQuery="true" bodyCondition="_oJc7Mwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJc7Mwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJc7MAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJc7NAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getEncounters()->select(encounter : cda::Encounter | not encounter.oclIsUndefined() and encounter.oclIsKindOf(consol::PlanOfCareActivityEncounter))->asSequence()->first().oclAsType(consol::PlanOfCareActivityEncounter)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJc7MQu0EeGvGIuLiiZuOg" type="_0iwB4AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJc7Mgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJkP8Au0EeGvGIuLiiZuOg" name="getPlanOfCareActivityObservation" isQuery="true" bodyCondition="_oJk3Agu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJk3Agu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJkP8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJk3Awu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::PlanOfCareActivityObservation))->asSequence()->first().oclAsType(consol::PlanOfCareActivityObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJk3AAu0EeGvGIuLiiZuOg" type="_0i2IgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJk3AQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJsLwAu0EeGvGIuLiiZuOg" name="getPlanOfCareActivityProcedure" isQuery="true" bodyCondition="_oJsLwwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJsLwwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJsLwAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJsLxAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::PlanOfCareActivityProcedure))->asSequence()->first().oclAsType(consol::PlanOfCareActivityProcedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJsLwQu0EeGvGIuLiiZuOg" type="_0i82MAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJsLwgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJ1VsAu0EeGvGIuLiiZuOg" name="getPlanOfCareActivitySubstanceAdministration" isQuery="true" bodyCondition="_oJ1Vswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJ1Vswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJ1VsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ1VtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::PlanOfCareActivitySubstanceAdministration))->asSequence()->first().oclAsType(consol::PlanOfCareActivitySubstanceAdministration)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJ1VsQu0EeGvGIuLiiZuOg" type="_0jC80AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJ1Vsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJ9RgAu0EeGvGIuLiiZuOg" name="getPlanOfCareActivitySupply" isQuery="true" bodyCondition="_oJ9Rgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oJ9Rgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oJ9RgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ9RhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::PlanOfCareActivitySupply))->asSequence()->first().oclAsType(consol::PlanOfCareActivitySupply)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oJ9RgQu0EeGvGIuLiiZuOg" type="_0jJDcAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oJ9Rggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ipUMAuuEeGvGIuLiiZuOg" name="PlanOfCareActivityAct">
      <ownedRule xmi:id="_0ipUMQuuEeGvGIuLiiZuOg" name="PlanOfCareActivityActMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ipUMguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentActMood::INT or self.moodCode = vocab::x_DocumentActMood::ARQ&#xD;&#xA;  or self.moodCode = vocab::x_DocumentActMood::PRMS or self.moodCode = vocab::x_DocumentActMood::PRP&#xD;&#xA;  or self.moodCode = vocab::x_DocumentActMood::RQO</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJNqpQu0EeGvGIuLiiZuOg" name="PlanOfCareActivityActTemplateId" constrainedElement="_0ipUMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJORsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJRVAAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityActMoodCode" constrainedElement="_0ipUMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJRVAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJSjIAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityActId" constrainedElement="_0ipUMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJSjIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0iuMsAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0iwB4AuuEeGvGIuLiiZuOg" name="PlanOfCareActivityEncounter">
      <ownedRule xmi:id="_0iwB4QuuEeGvGIuLiiZuOg" name="PlanOfCareActivityEncounterMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0iwB4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentEncounterMood::INT or self.moodCode = vocab::x_DocumentEncounterMood::ARQ&#xD;&#xA;  or self.moodCode = vocab::x_DocumentEncounterMood::PRMS or self.moodCode = vocab::x_DocumentEncounterMood::PRP&#xD;&#xA;  or self.moodCode = vocab::x_DocumentEncounterMood::RQO</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJVmcwu0EeGvGIuLiiZuOg" name="PlanOfCareActivityEncounterTemplateId" constrainedElement="_0iwB4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJVmdAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJZQ0Au0EeGvGIuLiiZuOg" name="PlanOfCareActivityEncounterMoodCode" constrainedElement="_0iwB4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJZQ0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJae8Au0EeGvGIuLiiZuOg" name="PlanOfCareActivityEncounterId" constrainedElement="_0iwB4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJae8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0i0TUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_AAXtEEbvEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0i2IgAuuEeGvGIuLiiZuOg" name="PlanOfCareActivityObservation">
      <ownedRule xmi:id="_0i2IgQuuEeGvGIuLiiZuOg" name="PlanOfCareActivityObservationMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0i2IgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_ActMoodDocumentObservation::INT or self.moodCode = vocab::x_ActMoodDocumentObservation::GOL&#xD;&#xA;  or self.moodCode = vocab::x_ActMoodDocumentObservation::PRMS or self.moodCode = vocab::x_ActMoodDocumentObservation::PRP&#xD;&#xA;  or self.moodCode = vocab::x_ActMoodDocumentObservation::RQO</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJc7NQu0EeGvGIuLiiZuOg" name="PlanOfCareActivityObservationTemplateId" constrainedElement="_0i2IgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJdiQAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJglkAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityObservationMoodCode" constrainedElement="_0i2IgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJglkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJhzsAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityObservationId" constrainedElement="_0i2IgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJhzsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0i7BAAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0i82MAuuEeGvGIuLiiZuOg" name="PlanOfCareActivityProcedure">
      <ownedRule xmi:id="_0i82MQuuEeGvGIuLiiZuOg" name="PlanOfCareActivityProcedureMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0i82MguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentProcedureMood::INT or self.moodCode = vocab::x_DocumentProcedureMood::ARQ&#xD;&#xA;  or self.moodCode = vocab::x_DocumentProcedureMood::PRMS or self.moodCode = vocab::x_DocumentProcedureMood::PRP&#xD;&#xA;  or self.moodCode = vocab::x_DocumentProcedureMood::RQO</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJk3BAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityProcedureTemplateId" constrainedElement="_0i82MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJk3BQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJohYAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityProcedureMoodCode" constrainedElement="_0i82MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJohYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJpvgAu0EeGvGIuLiiZuOg" name="PlanOfCareActivityProcedureId" constrainedElement="_0i82MAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJpvgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jBHoAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_-jiisEbuEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jC80AuuEeGvGIuLiiZuOg" name="PlanOfCareActivitySubstanceAdministration">
      <ownedRule xmi:id="_0jC80QuuEeGvGIuLiiZuOg" name="PlanOfCareActivitySubstanceAdministrationMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jC80guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::INT or self.moodCode = vocab::x_DocumentSubstanceMood::RQO&#xD;&#xA;  or self.moodCode = vocab::x_DocumentSubstanceMood::PRMS or self.moodCode = vocab::x_DocumentSubstanceMood::PRP</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJsy0Au0EeGvGIuLiiZuOg" name="PlanOfCareActivitySubstanceAdministrationTemplateId" constrainedElement="_0jC80AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJsy0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJv2IAu0EeGvGIuLiiZuOg" name="PlanOfCareActivitySubstanceAdministrationMoodCode" constrainedElement="_0jC80AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJv2IQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJxEQAu0EeGvGIuLiiZuOg" name="PlanOfCareActivitySubstanceAdministrationId" constrainedElement="_0jC80AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJxEQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jHOQQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_nazskEbuEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jJDcAuuEeGvGIuLiiZuOg" name="PlanOfCareActivitySupply">
      <ownedRule xmi:id="_0jJDcQuuEeGvGIuLiiZuOg" name="PlanOfCareActivitySupplyMoodCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jJDcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentSubstanceMood::INT or self.moodCode = vocab::x_DocumentSubstanceMood::RQO&#xD;&#xA;  or self.moodCode = vocab::x_DocumentSubstanceMood::PRMS or self.moodCode = vocab::x_DocumentSubstanceMood::PRP</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJ1VtQu0EeGvGIuLiiZuOg" name="PlanOfCareActivitySupplyTemplateId" constrainedElement="_0jJDcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ1Vtgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJ5AEAu0EeGvGIuLiiZuOg" name="PlanOfCareActivitySupplyMoodCode" constrainedElement="_0jJDcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ5AEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('moodCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJ61QAu0EeGvGIuLiiZuOg" name="PlanOfCareActivitySupplyId" constrainedElement="_0jJDcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ61QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jNU4AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_3gL0sEbuEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jPKEAuuEeGvGIuLiiZuOg" name="Procedure">
      <ownedComment xmi:id="_0jPKEQuuEeGvGIuLiiZuOg" annotatedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <body>Defines a coded entry describing a procedure performed on a patient.</body>
      </ownedComment>
      <ownedRule xmi:id="_0jPKEguuEeGvGIuLiiZuOg" name="ConsolProcedureHasCodeOriginalText" constrainedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0jPKEwuuEeGvGIuLiiZuOg">
          <body>Free text describing the Procedure</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jPKFAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.code.originalText.reference.value.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jPKFQuuEeGvGIuLiiZuOg" name="ConsolProcedurePerformerAssignedEntity" constrainedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0jPKFguuEeGvGIuLiiZuOg">
          <body>Name and other information for the person or&#xD;
organization performed or hosted the Procedure</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jPKFwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.performer->forAll(perf : cda::Performer2 | not perf.oclIsUndefined() and perf.assignedEntity->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oJ94kAu0EeGvGIuLiiZuOg" name="ConsolProcedureTemplateId" constrainedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oJ94kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.17')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKA74Au0EeGvGIuLiiZuOg" name="ConsolProcedureCode" constrainedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKBi8Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKD_MAu0EeGvGIuLiiZuOg" name="ConsolProcedureTargetSiteCode" constrainedElement="_0jPKEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKD_MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.targetSiteCode->isEmpty() or self.targetSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.targetSiteCode->size() = 1 and self.targetSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.96' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jVQsAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_-jiisEbuEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jYUAAuuEeGvGIuLiiZuOg" name="PregnancyHistorySection">
      <ownedComment xmi:id="_0jYUAQuuEeGvGIuLiiZuOg" annotatedElement="_0jYUAAuuEeGvGIuLiiZuOg">
        <body>The pregnancy history section contains coded entries describing the patient history of pregnancies.</body>
      </ownedComment>
      <ownedRule xmi:id="_oKGbcAu0EeGvGIuLiiZuOg" name="PregnancyHistorySectionTemplateId" constrainedElement="_0jYUAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKGbcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.5.3.4')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKI3sAu0EeGvGIuLiiZuOg" name="PregnancyHistorySectionCode" constrainedElement="_0jYUAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKI3sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10162-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKKs4Au0EeGvGIuLiiZuOg" name="PregnancyHistorySectionPregnancyObservation" constrainedElement="_0jYUAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKKs4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::PregnancyObservation))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jkhQAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oKL7AAu0EeGvGIuLiiZuOg" name="getPregnancyObservations" isQuery="true" bodyCondition="_oKL7Awu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oKL7Awu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oKL7AAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKMiEAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::PregnancyObservation)).oclAsType(consol::PregnancyObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oKL7AQu0EeGvGIuLiiZuOg" type="_0jclcAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oKL7Agu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jclcAuuEeGvGIuLiiZuOg" name="PregnancyObservation">
      <ownedComment xmi:id="_0jj6MAuuEeGvGIuLiiZuOg" annotatedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedComment xmi:id="_0jclcQuuEeGvGIuLiiZuOg" annotatedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <body>A pregnancy observation is a Simple Observation that uses a specific vocabulary to record observations about a patient's current or historical pregnancies.</body>
      </ownedComment>
      <ownedRule xmi:id="_oKMiEQu0EeGvGIuLiiZuOg" name="PregnancyObservationTemplateId" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKMiEgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.13.5')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKOXQAu0EeGvGIuLiiZuOg" name="PregnancyObservationId" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKOXQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKPlYAu0EeGvGIuLiiZuOg" name="PregnancyObservationCode" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKPlYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKSBoAu0EeGvGIuLiiZuOg" name="PregnancyObservationStatusCode" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKSBoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKT20Au0EeGvGIuLiiZuOg" name="PregnancyObservationRepeatNumber" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKT20Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.repeatNumber.oclIsUndefined() or self.repeatNumber.isNullFlavorUndefined()) implies (not self.repeatNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKVsAAu0EeGvGIuLiiZuOg" name="PregnancyObservationValue" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKVsAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (not self.value->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKW6IAu0EeGvGIuLiiZuOg" name="PregnancyObservationInterpretationCode" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKW6IQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.interpretationCode->isEmpty() or self.interpretationCode->exists(element | element.isNullFlavorUndefined())) implies (not self.interpretationCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKYIQAu0EeGvGIuLiiZuOg" name="PregnancyObservationMethodCode" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKYIQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.methodCode->isEmpty() or self.methodCode->exists(element | element.isNullFlavorUndefined())) implies (not self.methodCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKZWYAu0EeGvGIuLiiZuOg" name="PregnancyObservationTargetSiteCode" constrainedElement="_0jclcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKZWYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.targetSiteCode->isEmpty() or self.targetSiteCode->exists(element | element.isNullFlavorUndefined())) implies (not self.targetSiteCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0jj6MQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jlIUAuuEeGvGIuLiiZuOg" name="SurgeriesSection">
      <ownedComment xmi:id="_0kOBgAuuEeGvGIuLiiZuOg" annotatedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This section defines all interventional, surgical, diagnostic, or therapeutic procedures or treatments&#xD;
    pertinent to the patient historically at the time the document is generated. The section may contain all procedures for&#xD;
    the period of time being summarized, but should include notable procedures.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0kOBgQuuEeGvGIuLiiZuOg" annotatedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <body>The list of surgeries section shall contain a narrative description of the diagnostic and therapeutic operative procedures&#xD;
and associated anesthetic techniques the patient received in the past.</body>
      </ownedComment>
      <ownedComment xmi:id="_0kOBgguuEeGvGIuLiiZuOg" annotatedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <body>The list of surgeries section shall include entries for procedures and references to procedure reports when known as&#xD;
described in the Entry Content Modules.</body>
      </ownedComment>
      <ownedRule xmi:id="_0kNacAuuEeGvGIuLiiZuOg" name="SurgeriesSectionHasProcedureActivity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0kNacQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entry->select(e | e.act.oclIsKindOf(ccd::ProcedureActivity))->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKakgAu0EeGvGIuLiiZuOg" name="SurgeriesSectionTemplateId" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKakgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.108')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKe18Au0EeGvGIuLiiZuOg" name="SurgeriesSectionCode" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKe18Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '47519-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKgrIAu0EeGvGIuLiiZuOg" name="SurgeriesSectionTitle" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKgrIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKh5QAu0EeGvGIuLiiZuOg" name="SurgeriesSectionText" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKh5QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKjucAu0EeGvGIuLiiZuOg" name="SurgeriesSectionProcedureActivity" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKjucQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::Procedure))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKxw4Au0EeGvGIuLiiZuOg" name="SurgeriesSectionExternalReference" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKxw4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::ExternalReference))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLY04Au0EeGvGIuLiiZuOg" name="SurgeriesSectionProcedureEntryProcedureActivityProcedure" constrainedElement="_0jlIUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLY04Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::ProcedureEntryProcedureActivityProcedure))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0kOBgwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oKk8kAu0EeGvGIuLiiZuOg" name="getProcedureActivities" isQuery="true" bodyCondition="_oKk8kwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oKk8kwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oKk8kAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKk8lAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::Procedure)).oclAsType(consol::Procedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oKk8kQu0EeGvGIuLiiZuOg" type="_0jPKEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oKk8kgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oKy_AAu0EeGvGIuLiiZuOg" name="getExternalReference" isQuery="true" bodyCondition="_oKzmEAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oKzmEAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oKy_AAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKzmEQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::ExternalReference))->asSequence()->first().oclAsType(consol::ExternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oKy_AQu0EeGvGIuLiiZuOg" type="_0jpZwAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oKy_Agu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLaDAAu0EeGvGIuLiiZuOg" name="getProcedureEntryProcedureActivityProcedures" isQuery="true" bodyCondition="_oLaDAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLaDAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLaDAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLaDBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::ProcedureEntryProcedureActivityProcedure)).oclAsType(consol::ProcedureEntryProcedureActivityProcedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLaDAQu0EeGvGIuLiiZuOg" type="_0jwugAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLaDAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jpZwAuuEeGvGIuLiiZuOg" name="ExternalReference">
      <ownedRule xmi:id="_0jpZwQuuEeGvGIuLiiZuOg" name="ExternalReferenceHasNoCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jpZwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.code.oclIsUndefined() implies self.code.nullFlavor = vocab::NullFlavor::NA</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jpZwwuuEeGvGIuLiiZuOg" name="ExternalReferenceHasReference">
        <ownedComment xmi:id="_0jpZxAuuEeGvGIuLiiZuOg">
          <body>External references are listed as either supporting documentation (typeCode='SPRT') or simply&#xD;
reference material (typeCode='REFR') for the reader. If this distinction is not supported by the&#xD;
source EMR system, the value of typeCode should be REFR.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jpZxQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->select(r| r.typeCode &lt;> vocab::x_ActRelationshipExternalReference::REFR and r.typeCode &lt;> vocab::x_ActRelationshipExternalReference::SPRT)->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jpZxguuEeGvGIuLiiZuOg" name="ExternalReferenceHasReferenceExternalDocument">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jpZxwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference.externalDocument->select(ed | ed.classCode =  vocab::ActClassDocument::DOC and ed.moodCode =  vocab::ActMood::EVN )->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jpZyAuuEeGvGIuLiiZuOg" name="ExternalReferenceHasReferenceExternalDocumentID">
        <ownedComment xmi:id="_0jpZyQuuEeGvGIuLiiZuOg">
          <body>A link to the original document may be provided here. This shall be a URL where the referenced&#xD;
document can be located. For CDA, the link should also be present in the narrative inside the&#xD;
CDA Narrative in a &amp;lt;linkHTML> element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jpZyguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->select(  r | r.externalDocument.id->isEmpty() )->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jpZywuuEeGvGIuLiiZuOg" name="ExternalReferenceHasReferenceExternalDocumentText">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jpZzAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.reference->select(  r | r.externalDocument.text.reference.oclIsUndefined()  )->size() = 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKljoAu0EeGvGIuLiiZuOg" name="ExternalReferenceTemplateId" constrainedElement="_0jpZwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKljoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.4')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKrDMAu0EeGvGIuLiiZuOg" name="ExternalReferenceClassCode" constrainedElement="_0jpZwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKrqQAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryAct::ACT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKs4YAu0EeGvGIuLiiZuOg" name="ExternalReferenceMoodCode" constrainedElement="_0jpZwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKs4YQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKutkAu0EeGvGIuLiiZuOg" name="ExternalReferenceId" constrainedElement="_0jpZwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKutkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKv7sAu0EeGvGIuLiiZuOg" name="ExternalReferenceText" constrainedElement="_0jpZwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKv7sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ju5UAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_YiANsDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0jwugAuuEeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedure">
      <ownedRule xmi:id="_0jwugQuuEeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jwugguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentProcedureMood::EVN or self.moodCode = vocab::x_DocumentProcedureMood::INT</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jwugwuuEeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureHasTextReference" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jwuhAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.reference.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jwuhwuuEeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedurePriorityCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jwuiAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode = vocab::x_DocumentProcedureMood::INT and self.effectiveTime.oclIsUndefined() implies not self.priorityCode.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0jwuiQuuEeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureHasInversionIndForEncounter">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0jwuiguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->select(er | er.typeCode = vocab::x_ActRelationshipEntryRelationship::COMP and er.inversionInd &lt;> true)->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oKzmEgu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureTemplateId" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKzmEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.19')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oK8I8Au0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureClassCode" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oK8I8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('classCode')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oK_zUAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureId" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oK_zUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLBBcAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureCode" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLBBcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLC2oAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureText" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLC2oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.text.oclIsUndefined() or self.text.isNullFlavorUndefined()) implies (not self.text.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLF58Au0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureEffectiveTime" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLF58Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLHIEAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureApproachSiteCode" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLHIEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (not self.approachSiteCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLJkUAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureInternalReference" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLJkUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::InternalReference) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLLZgAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureInternalReferenceReason" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLLZgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::InternalReference) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLPq8Au0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureProblemObservation" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLPq8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AllergyIntolerance) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLRgIAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureProblemAct" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLRgIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::AllergyDrugSensitivity) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLTVUAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureAgeObservation" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLTVUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::AgeObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLVKgAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedureMedicationActivity" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLVKgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.substanceAdministration.oclIsUndefined() and entryRelationship.substanceAdministration.oclIsKindOf(consol::Medication) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLW_sAu0EeGvGIuLiiZuOg" name="ProcedureEntryProcedureActivityProcedurePatientInstruction" constrainedElement="_0jwugAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLW_sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRelationship : cda::EntryRelationship | not entryRelationship.act.oclIsUndefined() and entryRelationship.act.oclIsKindOf(consol::PatientMedicalInstructions))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0kKXIAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_-jiisEbuEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oLKycAu0EeGvGIuLiiZuOg" name="getInternalReference" isQuery="true" bodyCondition="_oLKycwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLKycwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLKycAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLKydAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference))->asSequence()->first().oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLKycQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLKycgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLMnoAu0EeGvGIuLiiZuOg" name="getInternalReferenceReasons" isQuery="true" bodyCondition="_oLMnowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLMnowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLMnoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLMnpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLMnoQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLMnogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLQ5EAu0EeGvGIuLiiZuOg" name="getProblemObservation" isQuery="true" bodyCondition="_oLQ5Ewu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLQ5Ewu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLQ5EAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLQ5FAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLQ5EQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLQ5Egu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLSuQAu0EeGvGIuLiiZuOg" name="getProblemAct" isQuery="true" bodyCondition="_oLSuQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLSuQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLSuQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLSuRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::AllergyDrugSensitivity))->asSequence()->first().oclAsType(consol::AllergyDrugSensitivity)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLSuQQu0EeGvGIuLiiZuOg" type="_0V7G0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLSuQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLUjcAu0EeGvGIuLiiZuOg" name="getAgeObservation" isQuery="true" bodyCondition="_oLUjcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLUjcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLUjcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLUjdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AgeObservation))->asSequence()->first().oclAsType(consol::AgeObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLUjcQu0EeGvGIuLiiZuOg" type="_0Wl1NAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLUjcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLWYoAu0EeGvGIuLiiZuOg" name="getMedicationActivities" isQuery="true" bodyCondition="_oLWYowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLWYowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLWYoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLWYpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication)).oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLWYoQu0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLWYogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLYN0Au0EeGvGIuLiiZuOg" name="getPatientInstructions" isQuery="true" bodyCondition="_oLYN0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oLYN0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oLYN0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLYN1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oLYN0Qu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oLYN0gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0kPPoAuuEeGvGIuLiiZuOg" name="SupportGuardian">
      <ownedComment xmi:id="_0kUvMQuuEeGvGIuLiiZuOg" annotatedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0kUvMguuEeGvGIuLiiZuOg" annotatedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <body>At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included. If no healthcare providers are supplied, the reason should be supplied as free text in the narrative block (e.g., Unknown, etc).</body>
      </ownedComment>
      <ownedComment xmi:id="_0kUvMwuuEeGvGIuLiiZuOg" annotatedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0kVWQAuuEeGvGIuLiiZuOg" annotatedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0kPPoQuuEeGvGIuLiiZuOg" annotatedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <body>At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included. If no healthcare providers are supplied, the reason should be supplied as free text in the narrative block (e.g., Unknown, etc).</body>
      </ownedComment>
      <ownedRule xmi:id="_oLaDBQu0EeGvGIuLiiZuOg" name="SupportGuardianTemplateId" constrainedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLaDBgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLb4MAu0EeGvGIuLiiZuOg" name="SupportGuardianClassCode" constrainedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLb4MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>isDefined('classCode') and self.classCode=vocab::RoleClass::GUAR</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLe7gAu0EeGvGIuLiiZuOg" name="SupportGuardianCode" constrainedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLe7gQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.111'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLgwsAu0EeGvGIuLiiZuOg" name="SupportGuardianAddr" constrainedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLgwsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.addr->isEmpty() or self.addr->exists(element | element.isNullFlavorUndefined())) implies (not self.addr->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLh-0Au0EeGvGIuLiiZuOg" name="SupportGuardianTelecom" constrainedElement="_0kPPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLh-0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.telecom->isEmpty() or self.telecom->exists(element | element.isNullFlavorUndefined())) implies (not self.telecom->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0kVWQQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_liVJMEcIEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0kV9UAuuEeGvGIuLiiZuOg" name="VitalSignsSection">
      <ownedComment xmi:id="_0lIAcAuuEeGvGIuLiiZuOg" annotatedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This section contains current and historically relevant vital signs, such as blood pressure, heart rate,&#xD;
    respiratory rate, height, weight, body mass index, head circumference, crown-to-rump length, and pulse oximetry. The&#xD;
    section may contain all vital signs for the period of time being summarized, but at a minimum should include notable&#xD;
    vital signs such as the most recent, maximum and/or minimum, or both, baseline, or relevant trends.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Vital signs are represented like other results (as defined in &lt;b>&lt;i>Results&#xD;
    Section&lt;/i>&lt;/b>) with additional vocabulary constraints, but are aggregated into their own section in order to follow clinical&#xD;
    conventions.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0lIAcQuuEeGvGIuLiiZuOg" annotatedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The vital signs section shall contain a narrative description of the measurement results of a patient's vital signs.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0lIAcguuEeGvGIuLiiZuOg" annotatedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <body>The vital signs section contains coded measurement results of a patient's vital signs.</body>
      </ownedComment>
      <ownedComment xmi:id="_0kWkYAuuEeGvGIuLiiZuOg" annotatedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Vital Signs Section contains information documenting the patient vital signs. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0kWkYQuuEeGvGIuLiiZuOg" name="VitalSignsSectionVitalSignEntry" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0kWkYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | entry.organizer.oclIsKindOf(ihe::VitalSignsOrganizer) and entry.organizer.component.observation->exists(obs : cda::Observation | obs.oclIsKindOf(hitsp::VitalSign)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLjM8Au0EeGvGIuLiiZuOg" name="VitalSignsSectionTemplateId" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLjM8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.119')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLneYAu0EeGvGIuLiiZuOg" name="VitalSignsSectionCode" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLneYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '8716-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLpTkAu0EeGvGIuLiiZuOg" name="VitalSignsSectionTitle" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLpTkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLrIwAu0EeGvGIuLiiZuOg" name="VitalSignsSectionText" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLrIwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMluwAu0EeGvGIuLiiZuOg" name="VitalSignsSectionVitalSignsOrganizer" constrainedElement="_0kV9UAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMluwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::VitalSignsOrganizer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0lIAcwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oMm84Au0EeGvGIuLiiZuOg" name="getVitalSignsOrganizers" isQuery="true" bodyCondition="_oMm84wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMm84wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMm84Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMm85Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::VitalSignsOrganizer)).oclAsType(consol::VitalSignsOrganizer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMm84Qu0EeGvGIuLiiZuOg" type="_0kcD8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMm84gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0kcD8AuuEeGvGIuLiiZuOg" name="VitalSignsOrganizer">
      <ownedComment xmi:id="_0lE9IAuuEeGvGIuLiiZuOg" annotatedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <body>&lt;p>This clinical statement identifies set of result observations. It contains information applicable to all of the contained result observations. Result type codes categorize a result into one of several commonly accepted values (e.g., &quot;Hematology&quot;, &quot;Chemistry&quot;, &quot;Nuclear Medicine&quot;). These values are often implicit in the &lt;tt>Organizer/code&lt;/tt> (e.g., an &lt;tt>Organizer/code&lt;/tt> of &quot;complete blood count&quot; implies a &lt;tt>ResultTypeCode&lt;/tt> of &quot;Hematology&quot;). This template requires &lt;tt>Organizer/code&lt;/tt> to include a &lt;tt>ResultTypeCode&lt;/tt> either directly or as a translation of a code from some other code system.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0kcD8QuuEeGvGIuLiiZuOg" annotatedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
A vital signs organizer collects vital signs observations.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0k_dkAuuEeGvGIuLiiZuOg" name="VitalSignsOrganizerCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0k_dkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' xor self.code.codeSystem = '2.16.840.1.113883.6.96' xor self.code.codeSystem = '2.16.840.1.113883.6.12' xor self.code.codeSystem = '2.16.840.1.113883.1.11.20.16'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lBSwAuuEeGvGIuLiiZuOg" name="VitalSignsOrganizerComponentElement">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lBSwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lDvAAuuEeGvGIuLiiZuOg" name="VitalSignsOrganizerInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lDvAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0lEWEAuuEeGvGIuLiiZuOg" name="VitalSignsOrganizerInformationSource">
        <ownedComment xmi:id="_0lEWEQuuEeGvGIuLiiZuOg">
          <body>A vital signs organizer SHALL contain one or more sources of information, as defined in section &lt;b>&lt;i>Source&lt;/i>&lt;/b>.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lEWEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0kcD8guuEeGvGIuLiiZuOg" name="VitalSignsOrganizerRequireResultsOrganizerTemplateID" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0kcD8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root ='2.16.840.1.113883.10.20.1.32')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oLsW4Au0EeGvGIuLiiZuOg" name="VitalSignsOrganizerTemplateId" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oLsW4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.13.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL0SsAu0EeGvGIuLiiZuOg" name="VitalSignsOrganizerClassCode" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL0SsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.classCode=vocab::x_ActClassDocumentEntryOrganizer::CLUSTER</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL1g0Au0EeGvGIuLiiZuOg" name="VitalSignsOrganizerMoodCode" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL2H4Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::ActMood::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL3WAAu0EeGvGIuLiiZuOg" name="VitalSignsOrganizerId" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL3WAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (self.id->size() = 1)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL5yQAu0EeGvGIuLiiZuOg" name="VitalSignsOrganizerCode" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL5yQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.code = '46680005' and value.codeSystem = '2.16.840.1.113883.6.96'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL9coAu0EeGvGIuLiiZuOg" name="VitalSignsOrganizerStatusCode" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL9coQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined() and self.statusCode.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = self.statusCode.oclAsType(datatypes::CS) in (&#xD;&#xA;value.code = 'completed'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oL_44Au0EeGvGIuLiiZuOg" name="VitalSignsOrganizerEffectiveTime" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oL_44Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMBuEAu0EeGvGIuLiiZuOg" name="VitalSignsOrganizerVitalSignObservation" constrainedElement="_0kcD8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMBuEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component->exists(component : cda::Component4 | not component.observation.oclIsUndefined() and component.observation.oclIsKindOf(consol::VitalSign))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0lFkMAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_B6aX4EbvEd6besF9iFIJkQ"/>
      </generalization>
      <ownedOperation xmi:id="_oMC8MAu0EeGvGIuLiiZuOg" name="getVitalSignObservations" isQuery="true" bodyCondition="_oMC8Mwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMC8Mwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMC8MAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMC8NAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::VitalSign)).oclAsType(consol::VitalSign)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMC8MQu0EeGvGIuLiiZuOg" type="_0koRMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMC8Mgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0koRMAuuEeGvGIuLiiZuOg" name="VitalSign">
      <ownedComment xmi:id="_0k1skAuuEeGvGIuLiiZuOg" annotatedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <body>The simple observation entry is meant to be an abstract representation of many of the observations used in this&#xD;
specification. It can be made concrete by the specification of a few additional constraints, namely the vocabulary used for&#xD;
codes, and the value representation. A simple observation may also inherit constraints from other specifications (e.g.,&#xD;
ASTM/HL7 Continuity of Care Document).</body>
      </ownedComment>
      <ownedComment xmi:id="_0k2ToAuuEeGvGIuLiiZuOg" annotatedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <body>A vital signs observation is a simple observation that uses a specific vocabulary, and inherits&#xD;
constraints from CCD.</body>
      </ownedComment>
      <ownedComment xmi:id="_0koRMQuuEeGvGIuLiiZuOg" annotatedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
These entries are used to record current and relevant historical vital signs for the patient. Vital Signs are a subset of &lt;b>&lt;i>Results Section&lt;/i>&lt;/b>, but are reported in this section to follow clinical conventions.&#xD;
&lt;/p>&#xD;
&#xD;
&lt;p>&#xD;
The differentiation between Vital Signs and Results varies by clinical context. Common examples of vital signs include temperature, height, weight, blood pressure, etc. However, some clinical contexts may alter these common vitals, for example in neonatology &quot;height&quot; may be replaced by &quot;crown-to-rump&quot; measurement.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0kxbIQuuEeGvGIuLiiZuOg" name="VitalSignCodeValue">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0kxbIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.code.codeSystem = '2.16.840.1.113883.6.1' xor self.code.codeSystem = '2.16.840.1.113883.6.96' xor self.code.codeSystem = '2.16.840.1.113883.6.12'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0kz3YAuuEeGvGIuLiiZuOg" name="VitalSignReferenceRangeRequired">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0kz3YQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.referenceRange->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0k0ecAuuEeGvGIuLiiZuOg" name="VitalSignNoObservationRangeCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0k0ecQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.referenceRange->forAll(range : cda::ReferenceRange | range.observationRange.code.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0k1FgAuuEeGvGIuLiiZuOg" name="VitalSignInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0k1FgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMExYAu0EeGvGIuLiiZuOg" name="VitalSignTemplateId" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMFYcAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.14')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMMGIAu0EeGvGIuLiiZuOg" name="VitalSignMoodCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMMGIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_ActMoodDocumentObservation::EVN</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMNUQAu0EeGvGIuLiiZuOg" name="VitalSignId" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMNUQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMQXkAu0EeGvGIuLiiZuOg" name="VitalSignCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMQXkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = self.code.oclAsType(datatypes::CD) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1' and (value.code = '8310-5' or value.code = '8462-4' or value.code = '8480-6' or value.code = '8287-5' or value.code = '8867-4' or value.code = '8302-2' or value.code = '8306-3' or value.code = '2710-2' or value.code = '9279-1' or value.code = '3141-9')))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMSMwAu0EeGvGIuLiiZuOg" name="VitalSignStatusCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMSMwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMTa4Au0EeGvGIuLiiZuOg" name="VitalSignEffectiveTime" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMTa4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMVQEAu0EeGvGIuLiiZuOg" name="VitalSignValue" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMVQEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.value->isEmpty() or self.value->exists(element | element.isNullFlavorUndefined())) implies (self.value->size() = 1 and self.value->forAll(element | element.oclIsTypeOf(datatypes::PQ)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMWeMAu0EeGvGIuLiiZuOg" name="VitalSignInterpretationCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMWeMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.interpretationCode->isEmpty() or self.interpretationCode->exists(element | element.isNullFlavorUndefined())) implies (not self.interpretationCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMXsUAu0EeGvGIuLiiZuOg" name="VitalSignMethodCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMXsUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.methodCode->isEmpty() or self.methodCode->exists(element | element.isNullFlavorUndefined())) implies (not self.methodCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMZhgAu0EeGvGIuLiiZuOg" name="VitalSignTargetSiteCode" constrainedElement="_0koRMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMZhgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.targetSiteCode->isEmpty() or self.targetSiteCode->exists(element | element.isNullFlavorUndefined())) implies (not self.targetSiteCode->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0k2ToQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_bJyIQDxYEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0lJOkAuuEeGvGIuLiiZuOg" name="DiagnosticResultsSection">
      <ownedComment xmi:id="_0lRKYAuuEeGvGIuLiiZuOg" annotatedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <body>The results section shall contain a narrative description of the relevant diagnostic procedures the patient received in the&#xD;
past. It shall include entries for procedures and references to procedure reports when known as described in the Entry&#xD;
Content Modules.</body>
      </ownedComment>
      <ownedComment xmi:id="_0lJOkQuuEeGvGIuLiiZuOg" annotatedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Results section contains the results of observations generated by laboratories, imaging procedures, and other procedures. The scope includes hematology, chemistry, serology, virology, toxicology, microbiology, plain x-ray, ultrasound, CT, MRI, angiography, echocardiography, nuclear medicine, pathology, and procedure observations. The section often includes notable results such as abnormal values or relevant trends, and could contain all results for the period of time being documented.&lt;/p>&#xD;
&#xD;
&lt;p>Laboratory results are typically generated by laboratories providing analytic services in areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology, microbiology, and/or virology. These observations are based on analysis of specimens obtained from the patient and submitted to the laboratory.&lt;/p>&#xD;
&#xD;
&lt;p>Imaging results are typically generated by a clinician reviewing the output of an imaging procedure, such as where a cardiologist reports the left ventricular ejection fraction based on the review of a cardiac echocardiogram.&lt;/p>&#xD;
&#xD;
&lt;p>Procedure results are typically generated by a clinician to provide more granular information about component observations made during  a procedure, such as where a gastroenterologist reports the size of a polyp observed during a colonoscopy.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0lJOkguuEeGvGIuLiiZuOg" name="DiagnosticResultsSectionHasResult" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0lJOkwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | entry.observation.oclIsKindOf(hitsp::Result)) or self.entry->exists(entry : cda::Entry | entry.organizer.oclIsKindOf(ccd::ResultOrganizer) and entry.organizer.component.observation->exists(obs : cda::Observation | obs.oclIsKindOf(hitsp::Result)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMnj8Au0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionTemplateId" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMnj8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.122')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMqnQAu0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionCode" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMrOUAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '30954-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMtDgAu0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionDiagnosticProcedure" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMtDgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::Procedure))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMu4sAu0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionResult" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMu4sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::Result))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMwt4Au0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionResultOrganizer" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMwt4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::ResultOrganizer))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMyjEAu0EeGvGIuLiiZuOg" name="DiagnosticResultsSectionExternalReference" constrainedElement="_0lJOkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMyjEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::ExternalReference))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0lRKYQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oMuRoAu0EeGvGIuLiiZuOg" name="getDiagnosticProcedures" isQuery="true" bodyCondition="_oMuRowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMuRowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMuRoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMuRpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::Procedure)).oclAsType(consol::Procedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMuRoQu0EeGvGIuLiiZuOg" type="_0jPKEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMuRogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oMwG0Au0EeGvGIuLiiZuOg" name="getResults" isQuery="true" bodyCondition="_oMwG0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMwG0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMwG0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMwG1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Result)).oclAsType(consol::Result)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMwG0Qu0EeGvGIuLiiZuOg" type="_0eGycAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMwG0gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oMx8AAu0EeGvGIuLiiZuOg" name="getResultOrganizers" isQuery="true" bodyCondition="_oMx8Awu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMx8Awu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMx8AAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMx8BAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::ResultOrganizer)).oclAsType(consol::ResultOrganizer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMx8AQu0EeGvGIuLiiZuOg" type="_0eChAAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMx8Agu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oMzxMAu0EeGvGIuLiiZuOg" name="getExternalReferences" isQuery="true" bodyCondition="_oMzxMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oMzxMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oMzxMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMzxNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::ExternalReference)).oclAsType(consol::ExternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oMzxMQu0EeGvGIuLiiZuOg" type="_0jpZwAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oMzxMgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0l41cAuuEeGvGIuLiiZuOg" name="HistoryOfPastIllnessSection">
      <ownedComment xmi:id="_0l-8EwuuEeGvGIuLiiZuOg" annotatedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <body>This section describes the past medical history for the patient. It may contain&#xD;
information about past procedures or other illnesses that might have a bearing on the&#xD;
patient's current illness. Since past medical history can include past surgical history&#xD;
and other procedures, the Procedure History section may be included under the Past&#xD;
Medical History section or it may stand alone as its own section. By the same token,&#xD;
problems can be recorded in a standalone Problems section or in a nested Problems&#xD;
section. Wherever used, procedures and problems should conform to the CCD template&#xD;
for CDA entries cited in the respective sections.</body>
      </ownedComment>
      <ownedComment xmi:id="_0l-8FAuuEeGvGIuLiiZuOg" annotatedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <body>The History of Past Illness section shall contain a narrative description of the conditions the patient suffered in the&#xD;
past. It shall include entries for problems as described in the Entry Content Modules.</body>
      </ownedComment>
      <ownedComment xmi:id="_0l41cQuuEeGvGIuLiiZuOg" annotatedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The History of Past Illness Section contains data about problems the patient suffered in the&#xD;
    past. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0l-8EAuuEeGvGIuLiiZuOg" name="HistoryOfPastIllnessSectionHasClinicalStatements">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0l-8EQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entry->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oMzxNQu0EeGvGIuLiiZuOg" name="HistoryOfPastIllnessSectionTemplateId" constrainedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMzxNgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.104')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oM3bkAu0EeGvGIuLiiZuOg" name="HistoryOfPastIllnessSectionCode" constrainedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM3bkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11348-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oM5QwAu0EeGvGIuLiiZuOg" name="HistoryOfPastIllnessSectionCondition" constrainedElement="_0l41cAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM5QwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0l-8FQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oM7F8Au0EeGvGIuLiiZuOg" name="getCondition" isQuery="true" bodyCondition="_oM7F8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oM7F8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oM7F8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM7F9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition))->asSequence()->first().oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oM7F8Qu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oM7F8gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0l-8FguuEeGvGIuLiiZuOg" name="ChiefComplaintSection">
      <ownedComment xmi:id="_0mFCsAuuEeGvGIuLiiZuOg" annotatedElement="_0l-8FguuEeGvGIuLiiZuOg">
        <body>This contains a narrative description of the patient's chief complaint.</body>
      </ownedComment>
      <ownedComment xmi:id="_0l-8FwuuEeGvGIuLiiZuOg" annotatedElement="_0l-8FguuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Chief Complaint Section contains information about the patient's chief complaint. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oM7F9Qu0EeGvGIuLiiZuOg" name="ChiefComplaintSectionTemplateId" constrainedElement="_0l-8FguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM7F9gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.105')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oM-JQAu0EeGvGIuLiiZuOg" name="ChiefComplaintSectionCode" constrainedElement="_0l-8FguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM-JQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10154-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oM_-cAu0EeGvGIuLiiZuOg" name="ChiefComplaintSectionCondition" constrainedElement="_0l-8FguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oM_-cQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mFCsQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oNBMkAu0EeGvGIuLiiZuOg" name="getCondition" isQuery="true" bodyCondition="_oNBMkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNBMkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNBMkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNBMlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition))->asSequence()->first().oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNBMkQu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNBMkgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mFCsguuEeGvGIuLiiZuOg" name="ReasonForReferralSection">
      <ownedComment xmi:id="_0mLJVguuEeGvGIuLiiZuOg" annotatedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <body>The reason for referral section shall contain a narrative description of the reason that the patient is being referred.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mFCswuuEeGvGIuLiiZuOg" annotatedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Reason for Referral Section contains information about the reason that the patient is being&#xD;
    referred. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNBzoAu0EeGvGIuLiiZuOg" name="ReasonForReferralSectionTemplateId" constrainedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNBzoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.106')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNEP4Au0EeGvGIuLiiZuOg" name="ReasonForReferralSectionCode" constrainedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNEP4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '42349-1' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNGsIAu0EeGvGIuLiiZuOg" name="ReasonForReferralSectionCondition" constrainedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNGsIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNIhUAu0EeGvGIuLiiZuOg" name="ReasonForReferralSectionResult" constrainedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNIhUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::Result))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNKWgAu0EeGvGIuLiiZuOg" name="ReasonForReferralSectionProblemEntry" constrainedElement="_0mFCsguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNKWgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mLJVwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oNH6QAu0EeGvGIuLiiZuOg" name="getConditions" isQuery="true" bodyCondition="_oNH6Qwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNH6Qwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNH6QAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNH6RAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition)).oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNH6QQu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNH6Qgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oNJvcAu0EeGvGIuLiiZuOg" name="getResults" isQuery="true" bodyCondition="_oNJvcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNJvcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNJvcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNJvdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::Result)).oclAsType(consol::Result)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNJvcQu0EeGvGIuLiiZuOg" type="_0eGycAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNJvcgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oNLkoAu0EeGvGIuLiiZuOg" name="getProblemEntries" isQuery="true" bodyCondition="_oNLkowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNLkowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNLkoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNMLsAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance)).oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNLkoQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNLkogu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mLJWAuuEeGvGIuLiiZuOg" name="HistoryOfPresentIllness">
      <ownedComment xmi:id="_0mLJXwuuEeGvGIuLiiZuOg" annotatedElement="_0mLJWAuuEeGvGIuLiiZuOg">
        <body>The history of present illness section shall contain a narrative description of the sequence of events preceding the&#xD;
patient's current complaints.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mLJWQuuEeGvGIuLiiZuOg" annotatedElement="_0mLJWAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The History of Present Illness Section contains information about the sequence of events preceding the&#xD;
    patient's current complaints. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNMLsQu0EeGvGIuLiiZuOg" name="HistoryOfPresentIllnessTemplateId" constrainedElement="_0mLJWAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNMLsgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.107')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNPPAAu0EeGvGIuLiiZuOg" name="HistoryOfPresentIllnessCode" constrainedElement="_0mLJWAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNPPAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10164-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mLJYAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mRP8AuuEeGvGIuLiiZuOg" name="HospitalAdmissionDiagnosisSection">
      <ownedComment xmi:id="_0mRP_QuuEeGvGIuLiiZuOg" annotatedElement="_0mRP8AuuEeGvGIuLiiZuOg">
        <body>The hospital admitting diagnosis section shall contain a narrative description of the primary reason for admission to a&#xD;
hospital facility. It shall include entries for observations as described in the Entry Content Modules.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mRP8QuuEeGvGIuLiiZuOg" annotatedElement="_0mRP8AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Hospital Admitting Diagnosis Section contains information about the primary reason for admission to&#xD;
    a hospital facility. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNREMAu0EeGvGIuLiiZuOg" name="HospitalAdmissionDiagnosisSectionTemplateId" constrainedElement="_0mRP8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNREMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.110')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNTgcAu0EeGvGIuLiiZuOg" name="HospitalAdmissionDiagnosisSectionCode" constrainedElement="_0mRP8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNUHgAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '46241-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNV8sAu0EeGvGIuLiiZuOg" name="HospitalAdmissionDiagnosisSectionCondition" constrainedElement="_0mRP8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNV8sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mRP_guuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oNXK0Au0EeGvGIuLiiZuOg" name="getCondition" isQuery="true" bodyCondition="_oNXK0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNXK0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNXK0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNXK1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition))->asSequence()->first().oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNXK0Qu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNXK0gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mRP_wuuEeGvGIuLiiZuOg" name="DischargeDiagnosisSection">
      <ownedComment xmi:id="_0mXWkAuuEeGvGIuLiiZuOg" annotatedElement="_0mRP_wuuEeGvGIuLiiZuOg">
        <body>The discharge diagnosis section shall contain a narrative description of the conditions that need to be monitored after&#xD;
discharge from the hospital and those that were resolved during the hospital course. It shall include entries for patient&#xD;
conditions as described in the Entry Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mRQAAuuEeGvGIuLiiZuOg" annotatedElement="_0mRP_wuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Discharge Diagnosis Section contains information about the conditions identified during the hospital&#xD;
    stay that either need to be monitored after discharge from the hospital and/or where resolved during the hospital&#xD;
    course. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNXK1Qu0EeGvGIuLiiZuOg" name="DischargeDiagnosisSectionTemplateId" constrainedElement="_0mRP_wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNXK1gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.111')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNaOIAu0EeGvGIuLiiZuOg" name="DischargeDiagnosisSectionCode" constrainedElement="_0mRP_wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNaOIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11535-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNcDUAu0EeGvGIuLiiZuOg" name="DischargeDiagnosisSectionCondition" constrainedElement="_0mRP_wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNcDUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mXWkQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oNdRcAu0EeGvGIuLiiZuOg" name="getCondition" isQuery="true" bodyCondition="_oNdRcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNdRcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNdRcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNdRdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition))->asSequence()->first().oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNdRcQu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNdRcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mXWkguuEeGvGIuLiiZuOg" name="AdmissionMedicationHistorySection">
      <ownedComment xmi:id="_0mXWmQuuEeGvGIuLiiZuOg" annotatedElement="_0mXWkguuEeGvGIuLiiZuOg">
        <body>The admission medication history section shall contain a narrative description of the relevant medications administered to&#xD;
a patient prior to admission to a facility. It shall include entries for medication administration as described in the&#xD;
Entry Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mXWkwuuEeGvGIuLiiZuOg" annotatedElement="_0mXWkguuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Admission Medication Section contains information about the relevant medications of a patient prior&#xD;
    to admission to a facility. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNdRdQu0EeGvGIuLiiZuOg" name="AdmissionMedicationHistorySectionTemplateId" constrainedElement="_0mXWkguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNdRdgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.113')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNgUwAu0EeGvGIuLiiZuOg" name="AdmissionMedicationHistorySectionCode" constrainedElement="_0mXWkguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNgUwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '42346-7' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mXWmguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mXWmwuuEeGvGIuLiiZuOg" name="HospitalDischargeMedicationsSection">
      <ownedComment xmi:id="_0mddMAuuEeGvGIuLiiZuOg" annotatedElement="_0mXWmwuuEeGvGIuLiiZuOg">
        <body>The hospital discharge medications section shall contain a narrative description of the medications requested&#xD;
            (ordered) to be administered to the patient after discharge from the hospital. It shall include entries for&#xD;
            medication requests as described in the Entry Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mXWnAuuEeGvGIuLiiZuOg" annotatedElement="_0mXWmwuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Hospital Discharge Medications Section contains information about the relevant medications of the&#xD;
    medications ordered for the patient for use after discharge from the hospital. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNhi4Au0EeGvGIuLiiZuOg" name="HospitalDischargeMedicationsSectionTemplateId" constrainedElement="_0mXWmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNiJ8Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.114')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNkmMAu0EeGvGIuLiiZuOg" name="HospitalDischargeMedicationsSectionCode" constrainedElement="_0mXWmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNkmMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10183-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNmbYAu0EeGvGIuLiiZuOg" name="HospitalDischargeMedicationsSectionMedication" constrainedElement="_0mXWmwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNmbYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Medication))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mddMQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oNnpgAu0EeGvGIuLiiZuOg" name="getMedication" isQuery="true" bodyCondition="_oNnpgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oNnpgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oNnpgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNnphAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication))->asSequence()->first().oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oNnpgQu0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oNnpggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mddMguuEeGvGIuLiiZuOg" name="MedicationsAdministeredSection">
      <ownedComment xmi:id="_0mddOQuuEeGvGIuLiiZuOg" annotatedElement="_0mddMguuEeGvGIuLiiZuOg">
        <body>The medications administered section shall contain a narrative description of the relevant medications administered to a&#xD;
patient during the course of an encounter. It shall include entries for medication administration as described in the Entry&#xD;
Content Module.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mddMwuuEeGvGIuLiiZuOg" annotatedElement="_0mddMguuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Medications Administered Section contains information about the relevant medications administered to&#xD;
    a patient during the course of an encounter. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNoQkAu0EeGvGIuLiiZuOg" name="MedicationsAdministeredSectionTemplateId" constrainedElement="_0mddMguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNoQkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.115')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNqs0Au0EeGvGIuLiiZuOg" name="MedicationsAdministeredSectionCode" constrainedElement="_0mddMguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNqs0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '18610-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mddOguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mjj0AuuEeGvGIuLiiZuOg" name="PhysicalExamSection">
      <ownedComment xmi:id="_0pUj-AuuEeGvGIuLiiZuOg" annotatedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Physical Examination section includes direct observations made by the clinician.&#xD;
The examination may include the use of simple instruments and may also describe&#xD;
simple maneuvers performed directly on the patient's body. This section only includes&#xD;
observations made by the examining clinician using inspection, palpation, auscultation,&#xD;
and percussion; it does not include laboratory or imaging findings. The exam may be&#xD;
limited to pertinent body systems based on the patient's chief complaint or it may&#xD;
include a comprehensive examination. The examination may be reported as a collection&#xD;
of random clinical statements or it may be reported categorically. Categorical report&#xD;
formats may be divided into multiple subsections, including Vital Signs, General Status,&#xD;
and any of the subsections listed in Appendix D: List of Additional Physical&#xD;
Examination Subsections. Note that Vital Signs can be a top-level section or subsection&#xD;
of Physical Exam.&lt;/p>&#xD;
&#xD;
&lt;p>The physical findings included in this section describe direct observations made by the&#xD;
clinician divided by organ or body system and may be included under appropriate&#xD;
subsections to Physical Exam. Systems are typically listed cephalic to caudal (i.e.,&#xD;
starting with the head) and may include all body systems or only those pertinent to the&#xD;
chief complaint. The head, eyes, ears, nose, throat, mouth, and teeth may be described&#xD;
separately or combined into a single subsection labeled &quot;HEENT.&quot; Other subsections&#xD;
may include Skin, Neck, Lymph Nodes, Thorax (Chest) and Lungs, Cardiovascular,&#xD;
Breasts, Abdomen, Pelvic, Genitourinary, Musculoskeletal, Extremities including&#xD;
Peripheral Vascular, and Neurologic. A detailed Mental Status Examination may be&#xD;
included when pertinent.&lt;/p>&#xD;
&#xD;
&lt;p>The Physical Examination section may contain multiple nested subsections: Vital Signs,&#xD;
General Status, and those listed in Appendix D: List of Additional Physical&#xD;
Examination Subsections.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0pUj-QuuEeGvGIuLiiZuOg" annotatedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <body>The physical exam section shall contain a narrative description of the patient's physical findings.</body>
      </ownedComment>
      <ownedComment xmi:id="_0pUj-guuEeGvGIuLiiZuOg" annotatedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <body>The physical exam section shall contain only the required and optional subsections performed.</body>
      </ownedComment>
      <ownedComment xmi:id="_0mjj0QuuEeGvGIuLiiZuOg" annotatedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Physical Examination Section contains information describing the physical findings. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oNsiAAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionTemplateId" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNsiAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.118')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNvlUAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionCode" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNvlUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29545-1' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oNz2wAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionCondition" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oNz2wQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.act.oclIsUndefined() and entry.act.oclIsKindOf(consol::Condition))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oN1E5Qu0EeGvGIuLiiZuOg" name="PhysicalExamSectionVitalSignsSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN1E5gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oN9nwAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionGeneralAppearanceSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN9nwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralAppearanceSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOFjkAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionVisibleImplantedMedicalDevicesSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOFjkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VisibleImplantedMedicalDevicesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oONfYAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionIntegumentarySystemSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oONfYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IntegumentarySystemSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOVbMgu0EeGvGIuLiiZuOg" name="PhysicalExamSectionHeadSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOVbMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HeadSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOdXBQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionEyesSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOdXBgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EyesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOhoeQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionEarsNoseMouthThroatSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOhoegu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EarsNoseMouthThroatSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOt1sQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionEarsSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOt1sgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EarsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOz8Vwu0EeGvGIuLiiZuOg" name="PhysicalExamSectionNoseSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOz8WAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NoseSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oO6C-Qu0EeGvGIuLiiZuOg" name="PhysicalExamSectionMouthThroatTeethSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oO6C-gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MouthThroatTeethSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPGQMAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionNeckSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPGQMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NeckSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPMW1wu0EeGvGIuLiiZuOg" name="PhysicalExamSectionEndocrineSystemSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW2Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EndocrineSystemSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPSddwu0EeGvGIuLiiZuOg" name="PhysicalExamSectionThoraxLungsSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPSdeAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ThoraxLungsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPYkGQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionChestWallSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPYkGgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ChestWallSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPequgu0EeGvGIuLiiZuOg" name="PhysicalExamSectionBreastSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPequwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::BreastSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPq39Qu0EeGvGIuLiiZuOg" name="PhysicalExamSectionHeartSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPq39gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HeartSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPw-lwu0EeGvGIuLiiZuOg" name="PhysicalExamSectionRespiratorySystemSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPw-mAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::RespiratorySystemSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oP3FOQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionAbdomenSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FOgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AbdomenSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQDScAu0EeGvGIuLiiZuOg" name="PhysicalExamSectionLymphaticSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQDScQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::LymphaticSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQJZFwu0EeGvGIuLiiZuOg" name="PhysicalExamSectionVesselsSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQJZGAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VesselsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQPfuQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionMusculoskeletalSystemSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfugu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MusculoskeletalSystemSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQVmWgu0EeGvGIuLiiZuOg" name="PhysicalExamSectionNeurologicSystemSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQVmWwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NeurologicSystemSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQhzlQu0EeGvGIuLiiZuOg" name="PhysicalExamSectionGenitaliaSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQhzlgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GenitaliaSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQn6Nwu0EeGvGIuLiiZuOg" name="PhysicalExamSectionRectumSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQn6OAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::RectumSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQuA2Qu0EeGvGIuLiiZuOg" name="PhysicalExamSectionExtremitiesSection" constrainedElement="_0mjj0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQuA2gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ExtremitiesSection))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pUj-wuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oN1E4Au0EeGvGIuLiiZuOg" name="getConditions" isQuery="true" bodyCondition="_oN1E4wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oN1E4wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oN1E4Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN1E5Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::Condition)).oclAsType(consol::Condition)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oN1E4Qu0EeGvGIuLiiZuOg" type="_0a4fVAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oN1E4gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oN2TAAu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_oN2TAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oN2TAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oN2TAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN2TBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))->asSequence()->first().oclAsType(consol::VitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oN2TAQu0EeGvGIuLiiZuOg" type="_0kV9UAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oN2TAgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oN-O0Au0EeGvGIuLiiZuOg" name="getGeneralAppearanceSection" isQuery="true" bodyCondition="_oN-14gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oN-14gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oN-O0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN-14wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralAppearanceSection))->asSequence()->first().oclAsType(consol::GeneralAppearanceSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oN-14Au0EeGvGIuLiiZuOg" type="_0mpqcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oN-14Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOGxsAu0EeGvGIuLiiZuOg" name="getVisibleImplantedMedicalDevicesSection" isQuery="true" bodyCondition="_oOGxswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOGxswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOGxsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOGxtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VisibleImplantedMedicalDevicesSection))->asSequence()->first().oclAsType(consol::VisibleImplantedMedicalDevicesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOGxsQu0EeGvGIuLiiZuOg" type="_0mvxFguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOGxsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOOtgAu0EeGvGIuLiiZuOg" name="getIntegumentarySystemSection" isQuery="true" bodyCondition="_oOOtgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOOtgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOOtgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOOthAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IntegumentarySystemSection))->asSequence()->first().oclAsType(consol::IntegumentarySystemSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOOtgQu0EeGvGIuLiiZuOg" type="_0m13uguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOOtggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOWpUAu0EeGvGIuLiiZuOg" name="getHeadSection" isQuery="true" bodyCondition="_oOWpUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOWpUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOWpUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOWpVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HeadSection))->asSequence()->first().oclAsType(consol::HeadSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOWpUQu0EeGvGIuLiiZuOg" type="_0m7-WguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOWpUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOelIAu0EeGvGIuLiiZuOg" name="getEyesSection" isQuery="true" bodyCondition="_oOelIwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOelIwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOelIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOelJAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EyesSection))->asSequence()->first().oclAsType(consol::EyesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOelIQu0EeGvGIuLiiZuOg" type="_0nCE-guuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOelIgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOhoewu0EeGvGIuLiiZuOg" name="getEarsNoseMouthThroatSection" isQuery="true" bodyCondition="_oOhofgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOhofgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOhoewu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOhofwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EarsNoseMouthThroatSection))->asSequence()->first().oclAsType(consol::EarsNoseMouthThroatSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOhofAu0EeGvGIuLiiZuOg" type="_0nILmQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOhofQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOt1swu0EeGvGIuLiiZuOg" name="getEarsSection" isQuery="true" bodyCondition="_oOt1tgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOt1tgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOt1swu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOt1twu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EarsSection))->asSequence()->first().oclAsType(consol::EarsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOt1tAu0EeGvGIuLiiZuOg" type="_0nOSOguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOt1tQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oOz8WQu0EeGvGIuLiiZuOg" name="getNoseSection" isQuery="true" bodyCondition="_oOz8XAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOz8XAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOz8WQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOz8XQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NoseSection))->asSequence()->first().oclAsType(consol::NoseSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOz8Wgu0EeGvGIuLiiZuOg" type="_0nUY2wuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOz8Wwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oO6C-wu0EeGvGIuLiiZuOg" name="getMouthThroatTeethSection" isQuery="true" bodyCondition="_oO6C_gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oO6C_gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oO6C-wu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oO6C_wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MouthThroatTeethSection))->asSequence()->first().oclAsType(consol::MouthThroatTeethSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oO6C_Au0EeGvGIuLiiZuOg" type="_0ngmFQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oO6C_Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPGQMgu0EeGvGIuLiiZuOg" name="getNeckSection" isQuery="true" bodyCondition="_oPGQNQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPGQNQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPGQMgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPGQNgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NeckSection))->asSequence()->first().oclAsType(consol::NeckSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPGQMwu0EeGvGIuLiiZuOg" type="_0nmstQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPGQNAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPMW2Qu0EeGvGIuLiiZuOg" name="getEndocrineSystemSection" isQuery="true" bodyCondition="_oPMW3Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPMW3Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPMW2Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW3Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::EndocrineSystemSection))->asSequence()->first().oclAsType(consol::EndocrineSystemSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPMW2gu0EeGvGIuLiiZuOg" type="_0nszVQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPMW2wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPSdeQu0EeGvGIuLiiZuOg" name="getThoraxLungsSection" isQuery="true" bodyCondition="_oPSdfAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPSdfAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPSdeQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPSdfQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ThoraxLungsSection))->asSequence()->first().oclAsType(consol::ThoraxLungsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPSdegu0EeGvGIuLiiZuOg" type="_0ny59QuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPSdewu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPeqsAu0EeGvGIuLiiZuOg" name="getChestWallSection" isQuery="true" bodyCondition="_oPeqswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPeqswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPeqsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPeqtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ChestWallSection))->asSequence()->first().oclAsType(consol::ChestWallSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPeqsQu0EeGvGIuLiiZuOg" type="_0n5AlQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPeqsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPkxUAu0EeGvGIuLiiZuOg" name="getBreastSection" isQuery="true" bodyCondition="_oPkxUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPkxUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPkxUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPkxVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::BreastSection))->asSequence()->first().oclAsType(consol::BreastSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPkxUQu0EeGvGIuLiiZuOg" type="_0n_HNQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPkxUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPq39wu0EeGvGIuLiiZuOg" name="getHeartSection" isQuery="true" bodyCondition="_oPq3-gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPq3-gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPq39wu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPq3-wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HeartSection))->asSequence()->first().oclAsType(consol::HeartSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPq3-Au0EeGvGIuLiiZuOg" type="_0oFN0guuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPq3-Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPw-mQu0EeGvGIuLiiZuOg" name="getRespiratorySystemSection" isQuery="true" bodyCondition="_oPw-nAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPw-nAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPw-mQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPw-nQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::RespiratorySystemSection))->asSequence()->first().oclAsType(consol::RespiratorySystemSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPw-mgu0EeGvGIuLiiZuOg" type="_0oLUcguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPw-mwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oP3FOwu0EeGvGIuLiiZuOg" name="getAbdomenSection" isQuery="true" bodyCondition="_oP3FPgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oP3FPgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oP3FOwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FPwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AbdomenSection))->asSequence()->first().oclAsType(consol::AbdomenSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oP3FPAu0EeGvGIuLiiZuOg" type="_0oLUhguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oP3FPQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQDScgu0EeGvGIuLiiZuOg" name="getLymphaticSection" isQuery="true" bodyCondition="_oQDSdQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQDSdQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQDScgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQDSdgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::LymphaticSection))->asSequence()->first().oclAsType(consol::LymphaticSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQDScwu0EeGvGIuLiiZuOg" type="_0oRbGguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQDSdAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQJZGQu0EeGvGIuLiiZuOg" name="getVesselsSection" isQuery="true" bodyCondition="_oQJZHAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQJZHAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQJZGQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQJZHQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VesselsSection))->asSequence()->first().oclAsType(consol::VesselsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQJZGgu0EeGvGIuLiiZuOg" type="_0oXhtguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQJZGwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQPfuwu0EeGvGIuLiiZuOg" name="getMusculoskeletalSystemSection" isQuery="true" bodyCondition="_oQPfvgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQPfvgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQPfuwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfvwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MusculoskeletalSystemSection))->asSequence()->first().oclAsType(consol::MusculoskeletalSystemSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQPfvAu0EeGvGIuLiiZuOg" type="_0odoVguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQPfvQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQbs8Au0EeGvGIuLiiZuOg" name="getNeurologicSystemSection" isQuery="true" bodyCondition="_oQbs8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQbs8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQbs8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQbs9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::NeurologicSystemSection))->asSequence()->first().oclAsType(consol::NeurologicSystemSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQbs8Qu0EeGvGIuLiiZuOg" type="_0oju9wuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQbs8gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQhzlwu0EeGvGIuLiiZuOg" name="getGenitaliaSection" isQuery="true" bodyCondition="_oQhzmgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQhzmgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQhzlwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQhzmwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GenitaliaSection))->asSequence()->first().oclAsType(consol::GenitaliaSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQhzmAu0EeGvGIuLiiZuOg" type="_0op1mQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQhzmQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQn6OQu0EeGvGIuLiiZuOg" name="getRectumSection" isQuery="true" bodyCondition="_oQn6PAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQn6PAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQn6OQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQn6PQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::RectumSection))->asSequence()->first().oclAsType(consol::RectumSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQn6Ogu0EeGvGIuLiiZuOg" type="_0pOdUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQn6Owu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQ0HcAu0EeGvGIuLiiZuOg" name="getExtremitiesSection" isQuery="true" bodyCondition="_oQ0Hcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQ0Hcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQ0HcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ0HdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ExtremitiesSection))->asSequence()->first().oclAsType(consol::ExtremitiesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQ0HcQu0EeGvGIuLiiZuOg" type="_0pOdZAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQ0Hcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mpqcwuuEeGvGIuLiiZuOg" name="GeneralAppearanceSection">
      <ownedComment xmi:id="_0mpqdAuuEeGvGIuLiiZuOg" annotatedElement="_0mpqcwuuEeGvGIuLiiZuOg">
        <body>The general appearance section shall contain a description of the overall, visiblyapparent&#xD;
condition of the patient.</body>
      </ownedComment>
      <ownedRule xmi:id="_oN26EAu0EeGvGIuLiiZuOg" name="GeneralAppearanceSectionTemplateId" constrainedElement="_0mpqcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN26EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.16')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oN5WUAu0EeGvGIuLiiZuOg" name="GeneralAppearanceSectionCode" constrainedElement="_0mpqcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN59YAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10210-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oN7ykAu0EeGvGIuLiiZuOg" name="GeneralAppearanceSectionProblemEntry" constrainedElement="_0mpqcwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN7ykQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0mvxEAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oN9AsAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oN9Aswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oN9Aswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oN9AsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN9AtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oN9AsQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oN9Asgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0mvxFguuEeGvGIuLiiZuOg" name="VisibleImplantedMedicalDevicesSection">
      <ownedComment xmi:id="_0mvxFwuuEeGvGIuLiiZuOg" annotatedElement="_0mvxFguuEeGvGIuLiiZuOg">
        <body>The visible implanted medical devices section shall contain a description of the medical&#xD;
devices apparent on physical exam that have been inserted into the patient, whether&#xD;
internal or partially external.</body>
      </ownedComment>
      <ownedRule xmi:id="_oN-15Au0EeGvGIuLiiZuOg" name="VisibleImplantedMedicalDevicesSectionTemplateId" constrainedElement="_0mvxFguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oN-15Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.48')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOB5MAu0EeGvGIuLiiZuOg" name="VisibleImplantedMedicalDevicesSectionCode" constrainedElement="_0mvxFguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOB5MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = 'XX-VisibleImplantedDevices' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oODuYAu0EeGvGIuLiiZuOg" name="VisibleImplantedMedicalDevicesSectionProblemEntry" constrainedElement="_0mvxFguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oODuYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0m13tAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOE8gAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOE8gwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOE8gwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOE8gAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOE8hAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOE8gQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOE8ggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0m13uguuEeGvGIuLiiZuOg" name="IntegumentarySystemSection">
      <ownedComment xmi:id="_0m13uwuuEeGvGIuLiiZuOg" annotatedElement="_0m13uguuEeGvGIuLiiZuOg">
        <body>The integumentary system section shall contain a description of any type of integumentary&#xD;
system exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOGxtQu0EeGvGIuLiiZuOg" name="IntegumentarySystemSectionTemplateId" constrainedElement="_0m13uguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOGxtgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.17')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOJ1AAu0EeGvGIuLiiZuOg" name="IntegumentarySystemSectionCode" constrainedElement="_0m13uguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOJ1AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29302-7' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOLqMAu0EeGvGIuLiiZuOg" name="IntegumentarySystemSectionProblemEntry" constrainedElement="_0m13uguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOLqMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0m7-VAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOM4UAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOM4Uwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOM4Uwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOM4UAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOM4VAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOM4UQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOM4Ugu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0m7-WguuEeGvGIuLiiZuOg" name="HeadSection">
      <ownedComment xmi:id="_0m7-WwuuEeGvGIuLiiZuOg" annotatedElement="_0m7-WguuEeGvGIuLiiZuOg">
        <body>The head section shall contain a description of any type of head exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOPUkAu0EeGvGIuLiiZuOg" name="HeadSectionTemplateId" constrainedElement="_0m7-WguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOPUkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.18')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oORw0Au0EeGvGIuLiiZuOg" name="HeadSectionCode" constrainedElement="_0m7-WguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oORw0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10199-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOUNEAu0EeGvGIuLiiZuOg" name="HeadSectionProblemEntry" constrainedElement="_0m7-WguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOUNEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nCE9AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOU0IAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOVbMAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOVbMAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOU0IAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOVbMQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOU0IQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOU0Igu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nCE-guuEeGvGIuLiiZuOg" name="EyesSection">
      <ownedRule xmi:id="_oOXQYAu0EeGvGIuLiiZuOg" name="EyesSectionTemplateId" constrainedElement="_0nCE-guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOXQYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.19')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOZsoAu0EeGvGIuLiiZuOg" name="EyesSectionCode" constrainedElement="_0nCE-guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOZsoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10197-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOcI4Au0EeGvGIuLiiZuOg" name="EyesSectionProblemEntry" constrainedElement="_0nCE-guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOcI4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nILkwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOdXAAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOdXAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOdXAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOdXAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOdXBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOdXAQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOdXAgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nILmQuuEeGvGIuLiiZuOg" name="EarsNoseMouthThroatSection">
      <ownedComment xmi:id="_0nILmguuEeGvGIuLiiZuOg" annotatedElement="_0nILmQuuEeGvGIuLiiZuOg">
        <body>The ears, nose, mouth, and throat section shall contain a description of any type of ears,&#xD;
nose, mouth, or throat exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOfMMAu0EeGvGIuLiiZuOg" name="EarsNoseMouthThroatSectionTemplateId" constrainedElement="_0nILmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOfMMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.20')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOhocAu0EeGvGIuLiiZuOg" name="EarsNoseMouthThroatSectionCode" constrainedElement="_0nILmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOhocQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11393-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOhocgu0EeGvGIuLiiZuOg" name="EarsNoseMouthThroatSectionProblemEntry" constrainedElement="_0nILmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOhocwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nOSNAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOhodAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOhodwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOhodwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOhodAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOhoeAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOhodQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOhodgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nOSOguuEeGvGIuLiiZuOg" name="EarsSection">
      <ownedComment xmi:id="_0nOSOwuuEeGvGIuLiiZuOg" annotatedElement="_0nOSOguuEeGvGIuLiiZuOg">
        <body>The ears section shall contain a description of any type of ear exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOhogAu0EeGvGIuLiiZuOg" name="EarsSectionTemplateId" constrainedElement="_0nOSOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOnvEAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.21')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOnvEgu0EeGvGIuLiiZuOg" name="EarsSectionCode" constrainedElement="_0nOSOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOnvEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10195-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOnvFAu0EeGvGIuLiiZuOg" name="EarsSectionProblemEntry" constrainedElement="_0nOSOguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOnvFQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nUY1QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOnvFgu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOnvGQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOnvGQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOnvFgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOt1sAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOnvFwu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOnvGAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nUY2wuuEeGvGIuLiiZuOg" name="NoseSection">
      <ownedComment xmi:id="_0nUY3AuuEeGvGIuLiiZuOg" annotatedElement="_0nUY2wuuEeGvGIuLiiZuOg">
        <body>The nose section shall contain a description of any type of nose exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOt1uAu0EeGvGIuLiiZuOg" name="NoseSectionTemplateId" constrainedElement="_0nUY2wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOt1uQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.22')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOt1uwu0EeGvGIuLiiZuOg" name="NoseSectionCode" constrainedElement="_0nUY2wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOt1vAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10203-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oOz8UAu0EeGvGIuLiiZuOg" name="NoseSectionProblemEntry" constrainedElement="_0nUY2wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOz8UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nafdwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oOz8Ugu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oOz8VQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oOz8VQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oOz8Ugu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOz8Vgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oOz8Uwu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oOz8VAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ngmFQuuEeGvGIuLiiZuOg" name="MouthThroatTeethSection">
      <ownedComment xmi:id="_0ngmFguuEeGvGIuLiiZuOg" annotatedElement="_0ngmFQuuEeGvGIuLiiZuOg">
        <body>The mouth, throat, and teeth section shall contain a description of any type of mouth,&#xD;
throat, or teeth exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oOz8Xgu0EeGvGIuLiiZuOg" name="MouthThroatTeethSectionTemplateId" constrainedElement="_0ngmFQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOz8Xwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.23')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oO6C8Au0EeGvGIuLiiZuOg" name="MouthThroatTeethSectionCode" constrainedElement="_0ngmFQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oO6C8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10201-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oO6C8gu0EeGvGIuLiiZuOg" name="MouthThroatTeethSectionProblemEntry" constrainedElement="_0ngmFQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oO6C8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ngmIwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oO6C9Au0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oO6C9wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oO6C9wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oO6C9Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oO6C-Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oO6C9Qu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oO6C9gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nmstQuuEeGvGIuLiiZuOg" name="NeckSection">
      <ownedComment xmi:id="_0nmstguuEeGvGIuLiiZuOg" annotatedElement="_0nmstQuuEeGvGIuLiiZuOg">
        <body>Description The neck section shall contain a description of any type of neck exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPAJkAu0EeGvGIuLiiZuOg" name="NeckSectionTemplateId" constrainedElement="_0nmstQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPAJkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.24')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPAJkwu0EeGvGIuLiiZuOg" name="NeckSectionCode" constrainedElement="_0nmstQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPAJlAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11411-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPAJlQu0EeGvGIuLiiZuOg" name="NeckSectionProblemEntry" constrainedElement="_0nmstQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPAJlgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nmswwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPAJlwu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPAJmgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPAJmgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPAJlwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPAJmwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPAJmAu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPAJmQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0nszVQuuEeGvGIuLiiZuOg" name="EndocrineSystemSection">
      <ownedComment xmi:id="_0nszVguuEeGvGIuLiiZuOg" annotatedElement="_0nszVQuuEeGvGIuLiiZuOg">
        <body>The endocrine system section shall contain a description of any type of endocrine&#xD;
system exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPGQNwu0EeGvGIuLiiZuOg" name="EndocrineSystemSectionTemplateId" constrainedElement="_0nszVQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPGQOAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.25')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPGQOgu0EeGvGIuLiiZuOg" name="EndocrineSystemSectionCode" constrainedElement="_0nszVQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPGQOwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29307-6' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPMW0Au0EeGvGIuLiiZuOg" name="EndocrineSystemSectionProblemEntry" constrainedElement="_0nszVQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0nszYwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPMW0gu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPMW1Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPMW1Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPMW0gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW1gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPMW0wu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPMW1Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ny59QuuEeGvGIuLiiZuOg" name="ThoraxLungsSection">
      <ownedComment xmi:id="_0ny59guuEeGvGIuLiiZuOg" annotatedElement="_0ny59QuuEeGvGIuLiiZuOg">
        <body>The thorax and lungs section shall contain a description of any type of thoracic or lung&#xD;
exams.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPMW3gu0EeGvGIuLiiZuOg" name="ThoraxLungsSectionTemplateId" constrainedElement="_0ny59QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW3wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.26')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPMW4Qu0EeGvGIuLiiZuOg" name="ThoraxLungsSectionCode" constrainedElement="_0ny59QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPMW4gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10207-9' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPSdcAu0EeGvGIuLiiZuOg" name="ThoraxLungsSectionProblemEntry" constrainedElement="_0ny59QuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPSdcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ny6AwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPSdcgu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPSddQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPSddQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPSdcgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPSddgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPSdcwu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPSddAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0n5AlQuuEeGvGIuLiiZuOg" name="ChestWallSection">
      <ownedComment xmi:id="_0n5AlguuEeGvGIuLiiZuOg" annotatedElement="_0n5AlQuuEeGvGIuLiiZuOg">
        <body>The chest wall section shall contain a description of any type of chest wall exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPSdfgu0EeGvGIuLiiZuOg" name="ChestWallSectionTemplateId" constrainedElement="_0n5AlQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPSdfwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.27')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPYkEAu0EeGvGIuLiiZuOg" name="ChestWallSectionCode" constrainedElement="_0n5AlQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPYkEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11392-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPYkEgu0EeGvGIuLiiZuOg" name="ChestWallSectionProblemEntry" constrainedElement="_0n5AlQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPYkEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::AllergyIntolerance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0n5AowuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPYkFAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPYkFwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPYkFwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPYkFAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPYkGAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::AllergyIntolerance))->asSequence()->first().oclAsType(consol::AllergyIntolerance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPYkFQu0EeGvGIuLiiZuOg" type="_0WThWguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPYkFgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0n_HNQuuEeGvGIuLiiZuOg" name="BreastSection">
      <ownedComment xmi:id="_0n_HNguuEeGvGIuLiiZuOg" annotatedElement="_0n_HNQuuEeGvGIuLiiZuOg">
        <body>The breast section shall contain a description of any type of breast exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPeqtQu0EeGvGIuLiiZuOg" name="BreastSectionTemplateId" constrainedElement="_0n_HNQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPeqtgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.28')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPequAu0EeGvGIuLiiZuOg" name="BreastSectionCode" constrainedElement="_0n_HNQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPequQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10193-1' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0n_HPguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oFN0guuEeGvGIuLiiZuOg" name="HeartSection">
      <ownedComment xmi:id="_0oFN0wuuEeGvGIuLiiZuOg" annotatedElement="_0oFN0guuEeGvGIuLiiZuOg">
        <body>The heart section shall contain a description of any type of heart exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPkxVQu0EeGvGIuLiiZuOg" name="HeartSectionTemplateId" constrainedElement="_0oFN0guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPkxVgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.29')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPkxWAu0EeGvGIuLiiZuOg" name="HeartSectionCode" constrainedElement="_0oFN0guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPkxWQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10200-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPkxWgu0EeGvGIuLiiZuOg" name="HeartSectionProblemEntry" constrainedElement="_0oFN0guuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPkxWwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0oFN4AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPq38Au0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPq38wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPq38wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPq38Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPq39Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPq38Qu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPq38gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oLUcguuEeGvGIuLiiZuOg" name="RespiratorySystemSection">
      <ownedComment xmi:id="_0oLUcwuuEeGvGIuLiiZuOg" annotatedElement="_0oLUcguuEeGvGIuLiiZuOg">
        <body>The respiratory system section shall contain a description of any type of respiratory&#xD;
exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPq3_Au0EeGvGIuLiiZuOg" name="RespiratorySystemSectionTemplateId" constrainedElement="_0oLUcguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPq3_Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.30')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPq3_wu0EeGvGIuLiiZuOg" name="RespiratorySystemSectionCode" constrainedElement="_0oLUcguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPq4AAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11412-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oPw-kAu0EeGvGIuLiiZuOg" name="RespiratorySystemSectionProblemEntry" constrainedElement="_0oLUcguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPw-kQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0oLUgAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oPw-kgu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oPw-lQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oPw-lQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oPw-kgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPw-lgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oPw-kwu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oPw-lAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oLUhguuEeGvGIuLiiZuOg" name="AbdomenSection">
      <ownedComment xmi:id="_0oLUhwuuEeGvGIuLiiZuOg" annotatedElement="_0oLUhguuEeGvGIuLiiZuOg">
        <body>The abdomen system section shall contain a description of any type of abdominal exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oPw-ngu0EeGvGIuLiiZuOg" name="AbdomenSectionTemplateId" constrainedElement="_0oLUhguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oPw-nwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.31')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oP3FMAu0EeGvGIuLiiZuOg" name="AbdomenSectionCode" constrainedElement="_0oLUhguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10191-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oP3FMgu0EeGvGIuLiiZuOg" name="AbdomenSectionProblemEntry" constrainedElement="_0oLUhguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FMwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0oRbFAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oP3FNAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oP3FNwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oP3FNwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oP3FNAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FOAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oP3FNQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oP3FNgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oRbGguuEeGvGIuLiiZuOg" name="LymphaticSection">
      <ownedComment xmi:id="_0oRbGwuuEeGvGIuLiiZuOg" annotatedElement="_0oRbGguuEeGvGIuLiiZuOg">
        <body>The lymphatic system section shall contain a description of any type of lymphatic exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oP3FQAu0EeGvGIuLiiZuOg" name="LymphaticSectionTemplateId" constrainedElement="_0oRbGguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP3FQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.32')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oP9L0Qu0EeGvGIuLiiZuOg" name="LymphaticSectionCode" constrainedElement="_0oRbGguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP9L0gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11447-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oP9L0wu0EeGvGIuLiiZuOg" name="LymphaticSectionProblemEntry" constrainedElement="_0oRbGguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP9L1Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0oXhsAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oP9L1Qu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oP9L2Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oP9L2Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_oP9L1Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oP9L2Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oP9L1gu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oP9L1wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oXhtguuEeGvGIuLiiZuOg" name="VesselsSection">
      <ownedComment xmi:id="_0oXhtwuuEeGvGIuLiiZuOg" annotatedElement="_0oXhtguuEeGvGIuLiiZuOg">
        <body>The vessels section shall contain a description of any type of vessels exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQDSdwu0EeGvGIuLiiZuOg" name="VesselsSectionTemplateId" constrainedElement="_0oXhtguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQDSeAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.33')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQDSegu0EeGvGIuLiiZuOg" name="VesselsSectionCode" constrainedElement="_0oXhtguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQDSewu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10208-7' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQJZEAu0EeGvGIuLiiZuOg" name="VesselsSectionProblemEntry" constrainedElement="_0oXhtguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQJZEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0odoUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQJZEgu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQJZFQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQJZFQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQJZEgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQJZFgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQJZEwu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQJZFAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0odoVguuEeGvGIuLiiZuOg" name="MusculoskeletalSystemSection">
      <ownedComment xmi:id="_0odoVwuuEeGvGIuLiiZuOg" annotatedElement="_0odoVguuEeGvGIuLiiZuOg">
        <body>The musculoskeletal system section shall contain a description of any type of&#xD;
musculoskeletal exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQJZHgu0EeGvGIuLiiZuOg" name="MusculoskeletalSystemSectionTemplateId" constrainedElement="_0odoVguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQJZHwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.34')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQPfsAu0EeGvGIuLiiZuOg" name="MusculoskeletalSystemSectionCode" constrainedElement="_0odoVguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11410-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQPfsgu0EeGvGIuLiiZuOg" name="MusculoskeletalSystemSectionProblemEntry" constrainedElement="_0odoVguuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0oju8QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQPftAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQPftwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQPftwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQPftAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfuAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQPftQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQPftgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0oju9wuuEeGvGIuLiiZuOg" name="NeurologicSystemSection">
      <ownedComment xmi:id="_0oju-AuuEeGvGIuLiiZuOg" annotatedElement="_0oju9wuuEeGvGIuLiiZuOg">
        <body>The neurologic system section shall contain a description of any type of neurologic&#xD;
exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQPfwAu0EeGvGIuLiiZuOg" name="NeurologicSystemSectionTemplateId" constrainedElement="_0oju9wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQPfwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.35')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQVmUQu0EeGvGIuLiiZuOg" name="NeurologicSystemSectionCode" constrainedElement="_0oju9wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQVmUgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10202-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQVmUwu0EeGvGIuLiiZuOg" name="NeurologicSystemSectionProblemEntry" constrainedElement="_0oju9wuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQVmVAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0op1kwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQVmVQu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQVmWAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQVmWAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQVmVQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQVmWQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQVmVgu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQVmVwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0op1mQuuEeGvGIuLiiZuOg" name="GenitaliaSection">
      <ownedComment xmi:id="_0op1mguuEeGvGIuLiiZuOg" annotatedElement="_0op1mQuuEeGvGIuLiiZuOg">
        <body>The genitalia section shall contain a description of any type of genital exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQbs9Qu0EeGvGIuLiiZuOg" name="GenitaliaSectionTemplateId" constrainedElement="_0op1mQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQbs9gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.36')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQbs-Au0EeGvGIuLiiZuOg" name="GenitaliaSectionCode" constrainedElement="_0op1mQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQbs-Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11400-9' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQbs-gu0EeGvGIuLiiZuOg" name="GenitaliaSectionProblemEntry" constrainedElement="_0op1mQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQbs-wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pIWtAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQhzkAu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQhzkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQhzkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQhzkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQhzlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQhzkQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQhzkgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0pOdUAuuEeGvGIuLiiZuOg" name="RectumSection">
      <ownedComment xmi:id="_0pOdUQuuEeGvGIuLiiZuOg" annotatedElement="_0pOdUAuuEeGvGIuLiiZuOg">
        <body>The rectum section shall contain a description of any type of rectal exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQhznAu0EeGvGIuLiiZuOg" name="RectumSectionTemplateId" constrainedElement="_0pOdUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQhznQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.9.37')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQhznwu0EeGvGIuLiiZuOg" name="RectumSectionCode" constrainedElement="_0pOdUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQhzoAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10205-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQn6MAu0EeGvGIuLiiZuOg" name="RectumSectionProblemEntry" constrainedElement="_0pOdUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQn6MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pOdXguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQn6Mgu0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQn6NQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQn6NQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQn6Mgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQn6Ngu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQn6Mwu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQn6NAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0pOdZAuuEeGvGIuLiiZuOg" name="ExtremitiesSection">
      <ownedComment xmi:id="_0pOdZQuuEeGvGIuLiiZuOg" annotatedElement="_0pOdZAuuEeGvGIuLiiZuOg">
        <body>The Extremities section SHALL contain a description of any type of exam on the&#xD;
patient's extremities.</body>
      </ownedComment>
      <ownedRule xmi:id="_oQn6Pgu0EeGvGIuLiiZuOg" name="ExtremitiesSectionTemplateId" constrainedElement="_0pOdZAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQn6Pwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.1.16.2.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQuA0Au0EeGvGIuLiiZuOg" name="ExtremitiesSectionCode" constrainedElement="_0pOdZAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQuA0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10196-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQuA0gu0EeGvGIuLiiZuOg" name="ExtremitiesSectionProblemEntry" constrainedElement="_0pOdZAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQuA0wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.observation.oclIsUndefined() and entry.observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pUj9AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oQuA1Au0EeGvGIuLiiZuOg" name="getProblemEntry" isQuery="true" bodyCondition="_oQuA1wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oQuA1wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oQuA1Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQuA2Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oQuA1Qu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oQuA1gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0pUj_AuuEeGvGIuLiiZuOg" name="ReviewOfSystemsSection">
      <ownedComment xmi:id="_0pUkBAuuEeGvGIuLiiZuOg" annotatedElement="_0pUj_AuuEeGvGIuLiiZuOg">
        <body>The review of systems is a relevant collection of symptoms and functions systematically&#xD;
gathered by a clinician. It includes symptoms the patient is currently experiencing,&#xD;
some of which were not elicited during the history of present illness, as well as a&#xD;
potentially large number of pertinent negatives, e.g., symptoms that the patient was&#xD;
specifically asked if they had experienced or were currently experiencing, but had&#xD;
denied experiencing.</body>
      </ownedComment>
      <ownedComment xmi:id="_0pUkBQuuEeGvGIuLiiZuOg" annotatedElement="_0pUj_AuuEeGvGIuLiiZuOg">
        <body>The review of systems section shall contain a narrative description of the responses the patient gave to a set of routine&#xD;
questions on the functions of each anatomic body system.</body>
      </ownedComment>
      <ownedComment xmi:id="_0pUj_QuuEeGvGIuLiiZuOg" annotatedElement="_0pUj_AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Review of Systems Section contains information describing patient responses to questions about the&#xD;
    function of various body systems. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oQ0HdQu0EeGvGIuLiiZuOg" name="ReviewOfSystemsSectionTemplateId" constrainedElement="_0pUj_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ0Hdgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.120')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQ0HeAu0EeGvGIuLiiZuOg" name="ReviewOfSystemsSectionCode" constrainedElement="_0pUj_AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ0HeQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10187-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pUkBguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0paqkAuuEeGvGIuLiiZuOg" name="HospitalCourseSection">
      <ownedComment xmi:id="_0paqlwuuEeGvGIuLiiZuOg" annotatedElement="_0paqkAuuEeGvGIuLiiZuOg">
        <body>The hospital course section shall contain a narrative description of the sequence of events from admission to discharge in&#xD;
a hospital facility.</body>
      </ownedComment>
      <ownedComment xmi:id="_0paqkQuuEeGvGIuLiiZuOg" annotatedElement="_0paqkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Hospital Course Section contains information about of the sequence of events from admission to&#xD;
    discharge in a hospital facility. &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oQ0Hegu0EeGvGIuLiiZuOg" name="HospitalCourseSectionTemplateId" constrainedElement="_0paqkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ0Hewu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.121')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQ6OEAu0EeGvGIuLiiZuOg" name="HospitalCourseSectionCode" constrainedElement="_0paqkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ6OEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '8648-8' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0paqmAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0paqmQuuEeGvGIuLiiZuOg" name="AssessmentAndPlanSection">
      <ownedComment xmi:id="_0pgxNQuuEeGvGIuLiiZuOg" annotatedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Assessment section (also called impression or diagnoses) represents the clinician's conclusions and working assumptions that will guide treatment of the patient. The assessment formulates a specific plan or set of recommendations. The assessment may be a list of specific disease entities or a narrative block.&lt;/p>&#xD;
&lt;p>The Plan section contains data that defines pending orders, interventions, encounters, services, and procedures for the patient. It is limited to prospective, unfulfilled, or incomplete orders and requests only. All active, incomplete, or pending orders, appointments, referrals, procedures, services, or any other pending event of clinical significance to the current care of the patient should be listed unless constrained due to privacy issues. The plan may also contain information about ongoing care of the patient and information regarding goals and clinical reminders. Clinical reminders are placed here to provide prompts for disease prevention and management, patient safety, and health-care quality improvements, including widely accepted performance measures. The plan may also indicate that patient education was given or will be provided.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0pgxNguuEeGvGIuLiiZuOg" annotatedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <body>The assessment and plan section shall contain a narrative description of the assessment of the patient condition and&#xD;
expectations for care including proposals, goals, and order requests for monitoring, tracking, or improving the condition&#xD;
of the patient.</body>
      </ownedComment>
      <ownedComment xmi:id="_0paqmguuEeGvGIuLiiZuOg" annotatedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    The Assessment and Plan Section contains information about the assessment of the patient's condition and&#xD;
    expectations for care including proposals, goals, and order requests for monitoring, tracking, or improving the&#xD;
    condition of the patient. &#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An assessment and plan section varies from the plan of care section defined later in that it includes a&#xD;
    physician assessment of the patient condition. &#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>NOTE &lt;/b>:&#xD;
    The assessments described in this section are physician assessments of the patient's current condition, and do not&#xD;
    include assessments of functional status, or other assessments typically used in nursing. In Implementation Guides&#xD;
    currently selected, when both the assessment and plan are documented, they are included together in a single section&#xD;
    documenting both. When the physician assessment is not present, only the plan of care section appears. There are no&#xD;
    cases where a physician assessment is provided without a plan.   &#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oQ6OEgu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionTemplateId" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ6OEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.123')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oQ6OFQu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionCode" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oQ6OFgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '51847-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRAUsAu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionMedication" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRAUsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Medication))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRAUtwu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionImmunization" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRAUuAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.substanceAdministration.oclIsUndefined() and entry.substanceAdministration.oclIsKindOf(consol::Immunization))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRAUvgu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionEncounterEntry" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRAUvwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.encounter.oclIsUndefined() and entry.encounter.oclIsKindOf(consol::Encounter))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRGbVQu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionProcedureEntry" constrainedElement="_0paqmQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRGbVgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.procedure.oclIsUndefined() and entry.procedure.oclIsKindOf(consol::Procedure))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pgxNwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oRAUsgu0EeGvGIuLiiZuOg" name="getMedications" isQuery="true" bodyCondition="_oRAUtQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oRAUtQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oRAUsgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRAUtgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Medication)).oclAsType(consol::Medication)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oRAUswu0EeGvGIuLiiZuOg" type="_0Y4UMAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oRAUtAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oRAUuQu0EeGvGIuLiiZuOg" name="getImmunizations" isQuery="true" bodyCondition="_oRAUvAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oRAUvAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oRAUuQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRAUvQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSubstanceAdministrations()->select(substanceAdministration : cda::SubstanceAdministration | not substanceAdministration.oclIsUndefined() and substanceAdministration.oclIsKindOf(consol::Immunization)).oclAsType(consol::Immunization)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oRAUugu0EeGvGIuLiiZuOg" type="_0g0vQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oRAUuwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oRGbUAu0EeGvGIuLiiZuOg" name="getEncounterEntries" isQuery="true" bodyCondition="_oRGbUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oRGbUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oRGbUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRGbVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getEncounters()->select(encounter : cda::Encounter | not encounter.oclIsUndefined() and encounter.oclIsKindOf(consol::Encounter)).oclAsType(consol::Encounter)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oRGbUQu0EeGvGIuLiiZuOg" type="_0gdi4AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oRGbUgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oRGbVwu0EeGvGIuLiiZuOg" name="getProcedureEntries" isQuery="true" bodyCondition="_oRGbWgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oRGbWgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oRGbVwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRGbWwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getProcedures()->select(procedure : cda::Procedure | not procedure.oclIsUndefined() and procedure.oclIsKindOf(consol::Procedure)).oclAsType(consol::Procedure)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oRGbWAu0EeGvGIuLiiZuOg" type="_0jPKEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oRGbWQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0pgxOAuuEeGvGIuLiiZuOg" name="LanguageSpoken">
      <ownedRule xmi:id="_0pgxPQuuEeGvGIuLiiZuOg" name="LanguageSpokenNoProficiencyLevelCode" constrainedElement="_0pgxOAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0pgxPguuEeGvGIuLiiZuOg">
          <body>Judgments about language proficiency are subjective, and could have a negative impact on consumers.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0pgxPwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.proficiencyLevelCode.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRGbXAu0EeGvGIuLiiZuOg" name="LanguageSpokenTemplateId" constrainedElement="_0pgxOAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRGbXQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRMh8Au0EeGvGIuLiiZuOg" name="LanguageSpokenModeCode" constrainedElement="_0pgxOAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRMh8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.modeCode.oclIsUndefined() or self.modeCode.isNullFlavorUndefined()) implies (self.modeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.modeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.5.60' and (value.code = 'ESGN' or value.code = 'ESP' or value.code = 'EWR' or value.code = 'RSGN' or value.code = 'RSP' or value.code = 'RWR')))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0pm31guuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_cHD44EcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ps-fwuuEeGvGIuLiiZuOg" name="HealthcareProvider">
      <ownedRule xmi:id="_oRMh8gu0EeGvGIuLiiZuOg" name="HealthcareProviderTemplateId" constrainedElement="_0ps-fwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRMh8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.4')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ps-iwuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_FvF74EcaEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0pzFEAuuEeGvGIuLiiZuOg" name="MedicationNormalDose">
      <ownedComment xmi:id="_0qRmMAuuEeGvGIuLiiZuOg" annotatedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0qRmMQuuEeGvGIuLiiZuOg" annotatedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0qRmMguuEeGvGIuLiiZuOg" annotatedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <body>This template identifier is used to identify medication administration events that do not require&#xD;
any special processing.</body>
      </ownedComment>
      <ownedRule xmi:id="_0qFZAAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qFZAwuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZBAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qFZBguuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZBwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qFZCQuuEeGvGIuLiiZuOg" name="MedicationNormalDoseInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZCguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qFZDAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasPreconditionCriterion">
        <ownedComment xmi:id="_0qFZDQuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZDguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qFZEAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasReason">
        <ownedComment xmi:id="_0qFZEQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qFZEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfkAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfkwuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLflAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLflguuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasDosing">
        <ownedComment xmi:id="_0qLflwuuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfmAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfmQuuEeGvGIuLiiZuOg" name="MedicationNormalDoseDosingRelationship">
        <ownedComment xmi:id="_0qLfmguuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfmwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfnAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0qLfnQuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfnguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfoAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseReasonClassMood">
        <ownedComment xmi:id="_0qLfoQuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0qLfoguuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfowuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfpQuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfpguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfqAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasIntructionsInversion">
        <ownedComment xmi:id="_0qLfqQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfqguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfrAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfrQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfrwuuEeGvGIuLiiZuOg" name="MedicationNormalDoseProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfsAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfsguuEeGvGIuLiiZuOg" name="MedicationNormalDosePreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfswuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLftQuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLftguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfuAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseHasFillNumber">
        <ownedComment xmi:id="_0qLfuQuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfuguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qLfvAuuEeGvGIuLiiZuOg" name="MedicationNormalDoseNoSubordinateSubstanceAdministration">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qLfvQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship.substanceAdministration->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRSokQu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRSokgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRk8cAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseId" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRk8cQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRk8cgu0EeGvGIuLiiZuOg" name="MedicationNormalDoseCode" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRk8cwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRk8dAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseStatusCode" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRk8dQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRrDEAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseEffectiveTime" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRrDEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRrDEgu0EeGvGIuLiiZuOg" name="MedicationNormalDoseRouteCode" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRrDEwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRrDFAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseApproachSiteCode" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRrDFQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRxJsAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseDoseQuantity" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRxJsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRxJsgu0EeGvGIuLiiZuOg" name="MedicationNormalDoseRateQuantity" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRxJswu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oRxJtAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseMaxDoseQuantity" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oRxJtQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oR3QUAu0EeGvGIuLiiZuOg" name="MedicationNormalDoseAdministrationUnitCode" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR3QUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oR9W8Au0EeGvGIuLiiZuOg" name="MedicationNormalDoseMedicationSeriesNumberObservation" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR9W8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oR9W9wu0EeGvGIuLiiZuOg" name="MedicationNormalDoseMedicationStatusObservation" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR9W-Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oR9W_gu0EeGvGIuLiiZuOg" name="MedicationNormalDoseProductInstance" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR9W_wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSDdnwu0EeGvGIuLiiZuOg" name="MedicationNormalDoseMedicationSeriesNumberObservation" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdoAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSDdpgu0EeGvGIuLiiZuOg" name="MedicationNormalDoseMedicationStatusObservation" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdpwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSJkNQu0EeGvGIuLiiZuOg" name="MedicationNormalDoseProductInstance" constrainedElement="_0pzFEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkNgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0qSNQAuuEeGvGIuLiiZuOg" general="_0Y4UMAuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oR9W8gu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oR9W9Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oR9W9Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oR9W8gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR9W9gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oR9W8wu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oR9W9Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oR9W-Qu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oR9W_Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oR9W_Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_oR9W-Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oR9W_Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oR9W-gu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oR9W-wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSDdkAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oSDdkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSDdkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSDdkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSDdkQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSDdkgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSDdlQu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oSDdmAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSDdmAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSDdlQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdmQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSDdlgu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSDdlwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSDdmgu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oSDdnQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSDdnQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSDdmgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdngu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSDdmwu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSDdnAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSDdoQu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oSDdpAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSDdpAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSDdoQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSDdpQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSDdogu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSDdowu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkMAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oSJkMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkMQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkNwu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oSJkOgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkOgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkNwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkOwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkOAu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkOQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkPAu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oSJkPwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkPwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkPAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkQAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkPQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkPgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkQQu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oSJkRAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkRAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkQQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkRQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkQgu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkQwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkRgu0EeGvGIuLiiZuOg" name="getnullMedicationType" isQuery="true" bodyCondition="_oSJkSQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkSQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkRgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkSgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkRwu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkSAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkSwu0EeGvGIuLiiZuOg" name="getnullMedicationOrderInformations" isQuery="true" bodyCondition="_oSJkTgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkTgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkSwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkTwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkTAu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkTQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oSJkUAu0EeGvGIuLiiZuOg" name="getnullReactionObservation" isQuery="true" bodyCondition="_oSJkUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oSJkUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oSJkUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oSJkUQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oSJkUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0qVQkAuuEeGvGIuLiiZuOg" name="MedicationSplitDose">
      <ownedComment xmi:id="_0q7tgAuuEeGvGIuLiiZuOg" annotatedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0q7tgQuuEeGvGIuLiiZuOg" annotatedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0q7tgguuEeGvGIuLiiZuOg" annotatedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This template identifier is used to identify medication administration events that require special&#xD;
processing to handle split dosing. The parent template is 1.3.6.1.4.1.19376.1.5.3.1.4.7. A split&#xD;
dose is often used when different dosages are given at different times (e.g., at different times of day, or on different days). This may be to account for different metabolism rates at different&#xD;
times of day, or to simply address drug packaging deficiencies (e.g., and order for Coumadin&#xD;
2mg on even days, 2.5mg on odd days is used because Coumadin does not come in a 2.25mg&#xD;
dose form).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0qwuYguuEeGvGIuLiiZuOg" name="MedicationSplitDoseMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qwuYwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qxVcAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qxVcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qyjkAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qyjkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qzKoAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qzKoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0qzxsAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasPreconditionCriterion">
        <ownedComment xmi:id="_0qzxsQuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0qzxsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q0YwAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasReason">
        <ownedComment xmi:id="_0q0YwQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q0YwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q0_0AuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q0_0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q1m4QuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q2N8AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q2N8guuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasDosing">
        <ownedComment xmi:id="_0q2N8wuuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q2N9AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q21AAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseDosingRelationship">
        <ownedComment xmi:id="_0q21AQuuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q21AguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q21AwuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0q21BAuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q21BQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q21BwuuEeGvGIuLiiZuOg" name="MedicationSplitDoseReasonClassMood">
        <ownedComment xmi:id="_0q21CAuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0q3cEAuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q3cEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q3cEwuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q3cFAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q4DIAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasIntructionsInversion">
        <ownedComment xmi:id="_0q4DIQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q4DIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q4qMAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q4qMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q5RQAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q5RQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q5RQwuuEeGvGIuLiiZuOg" name="MedicationSplitDosePreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q5RRAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q54UQuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q54UguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q6fYAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseHasFillNumber">
        <ownedComment xmi:id="_0q6fYQuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q6fYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0q7GcAuuEeGvGIuLiiZuOg" name="MedicationSplitDoseSplitDosingSubstanceAdministration">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0q7GcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship.substanceAdministration->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSJkVgu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSJkVwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSh-sAu0EeGvGIuLiiZuOg" name="MedicationSplitDoseId" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSh-sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSh-sgu0EeGvGIuLiiZuOg" name="MedicationSplitDoseCode" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSh-swu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSh-tAu0EeGvGIuLiiZuOg" name="MedicationSplitDoseStatusCode" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSh-tQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSh-tgu0EeGvGIuLiiZuOg" name="MedicationSplitDoseEffectiveTime" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSh-twu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSoFUAu0EeGvGIuLiiZuOg" name="MedicationSplitDoseRouteCode" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSoFUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSoFUgu0EeGvGIuLiiZuOg" name="MedicationSplitDoseApproachSiteCode" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSoFUwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSuL8Au0EeGvGIuLiiZuOg" name="MedicationSplitDoseDoseQuantity" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSuL8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSuL8gu0EeGvGIuLiiZuOg" name="MedicationSplitDoseRateQuantity" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSuL8wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oSuL9Au0EeGvGIuLiiZuOg" name="MedicationSplitDoseMaxDoseQuantity" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oSuL9Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oS0SkAu0EeGvGIuLiiZuOg" name="MedicationSplitDoseAdministrationUnitCode" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS0SkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oS0Skgu0EeGvGIuLiiZuOg" name="MedicationSplitDoseMedicationSeriesNumberObservation" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS0Skwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oS6ZNQu0EeGvGIuLiiZuOg" name="MedicationSplitDoseMedicationStatusObservation" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZNgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oS6ZPAu0EeGvGIuLiiZuOg" name="MedicationSplitDoseProductInstance" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZPQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTAf1Qu0EeGvGIuLiiZuOg" name="MedicationSplitDoseMedicationSeriesNumberObservation" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf1gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTAf3Au0EeGvGIuLiiZuOg" name="MedicationSplitDoseMedicationStatusObservation" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf3Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTAf4wu0EeGvGIuLiiZuOg" name="MedicationSplitDoseProductInstance" constrainedElement="_0qVQkAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf5Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0q7tgwuuEeGvGIuLiiZuOg" general="_0Y4UMAuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oS6ZMAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oS6ZMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oS6ZMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oS6ZMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oS6ZMQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oS6ZMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oS6ZNwu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oS6ZOgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oS6ZOgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oS6ZNwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZOwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oS6ZOAu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oS6ZOQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oS6ZPgu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oS6ZQQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oS6ZQQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oS6ZPgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZQgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oS6ZPwu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oS6ZQAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oS6ZQwu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oS6ZRgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oS6ZRgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oS6ZQwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oS6ZRwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oS6ZRAu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oS6ZRQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTAf0Au0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oTAf0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTAf0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTAf0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTAf0Qu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTAf0gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTAf1wu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oTAf2gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTAf2gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTAf1wu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf2wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTAf2Au0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTAf2Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTAf3gu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oTAf4Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTAf4Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTAf3gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTAf4gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTAf3wu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTAf4Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmcAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oTGmcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmcQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmcgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmdQu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oTGmeAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmeAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmdQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmeQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmdgu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmdwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmegu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oTGmfQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmfQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmegu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmfgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmewu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmfAu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmfwu0EeGvGIuLiiZuOg" name="getnullMedicationType" isQuery="true" bodyCondition="_oTGmggu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmggu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmfwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmgwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmgAu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmgQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmhAu0EeGvGIuLiiZuOg" name="getnullMedicationOrderInformations" isQuery="true" bodyCondition="_oTGmhwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmhwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmhAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmiAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmhQu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmhgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oTGmiQu0EeGvGIuLiiZuOg" name="getnullReactionObservation" isQuery="true" bodyCondition="_oTGmjAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oTGmjAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oTGmiQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmjQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oTGmigu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oTGmiwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0q-w0AuuEeGvGIuLiiZuOg" name="MedicationTaperedDose">
      <ownedComment xmi:id="_0rl00AuuEeGvGIuLiiZuOg" annotatedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0rl00QuuEeGvGIuLiiZuOg" annotatedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0rl00guuEeGvGIuLiiZuOg" annotatedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
    This template identifier is used to identify medication administration events that require special processing to handle&#xD;
    tapered dosing. The parent template is 1.3.6.1.4.1.19376.1.5.3.1.4.7. A tapered dose is often used for certain&#xD;
    medications where abrupt termination of the medication can have negative consequences. Tapered dosages may be done by&#xD;
    adjusting the dose frequency, the dose amount, or both.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When merely the dose frequency is adjusted, (e.g., Prednisone 5mg b.i.d. for three days, then 5mg. daily for three&#xD;
    days, and then 5mg every other day), then only one medication entry is needed, multiple frequency specifications&#xD;
    recorded in &amp;lt;effectiveTime&amp;gt; elements. When the dose varies (eg. Prednisone 15mg daily for three days, then 10 mg&#xD;
    daily for three days, the 5 mg daily for three days), subordinate medication entries should be created for each&#xD;
    distinct dosage.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0rbcwguuEeGvGIuLiiZuOg" name="MedicationTaperedDoseMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rbcwwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rcD0AuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rcD0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rdR8AuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rdR8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rd5AAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rd5AQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rd5AwuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasPreconditionCriterion">
        <ownedComment xmi:id="_0rd5BAuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rd5BQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0regEAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasReason">
        <ownedComment xmi:id="_0regEQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0regEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rfHIAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rfHIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rfuMAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rfuMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rgVQAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasDosing">
        <ownedComment xmi:id="_0rgVQQuuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rgVQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rgVQwuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseDosingRelationship">
        <ownedComment xmi:id="_0rgVRAuuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rgVRQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rgVRguuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0rgVRwuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rgVSAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rg8UAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseReasonClassMood">
        <ownedComment xmi:id="_0rg8UQuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0rg8UguuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rg8UwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rhjYAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rhjYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0riKcAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasIntructionsInversion">
        <ownedComment xmi:id="_0riKcQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0riKcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rixgAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rixgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rjYkAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rjYkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rj_oAuuEeGvGIuLiiZuOg" name="MedicationTaperedDosePreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rj_oQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rkmsAuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rkmsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rkmswuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseHasFillNumber">
        <ownedComment xmi:id="_0rkmtAuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rkmtQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0rlNwQuuEeGvGIuLiiZuOg" name="MedicationTaperedDoseTaperedDosingSubstanceAdministration">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0rlNwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship.substanceAdministration->exists( substanceAdministration  | substanceAdministration.oclIsKindOf( ihe::Medication) )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTGmjwu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTGmkAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = 'null')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTdLwAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseId" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTdy0Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTfA8Au0EeGvGIuLiiZuOg" name="MedicationTaperedDoseCode" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTfA8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTg2IAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseStatusCode" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTg2IQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTiEQAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseEffectiveTime" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTiEQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTkggAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseRouteCode" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTkggQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oToK4Au0EeGvGIuLiiZuOg" name="MedicationTaperedDoseApproachSiteCode" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oToK4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTqnIAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseDoseQuantity" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTqnIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTr1QAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseRateQuantity" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTr1QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTtqcAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseMaxDoseQuantity" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTtqcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oTwGsAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseAdministrationUnitCode" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oTwGsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT0YIAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseMedicationSeriesNumberObservation" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT0YIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT2NUAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseMedicationStatusObservation" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT2NUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT4pkAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseProductInstance" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT4pkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT7s4Au0EeGvGIuLiiZuOg" name="MedicationTaperedDoseMedicationSeriesNumberObservation" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT7s4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT9iEAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseMedicationStatusObservation" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT9iEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oT_XQAu0EeGvGIuLiiZuOg" name="MedicationTaperedDoseProductInstance" constrainedElement="_0q-w0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT_XQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0rl00wuuEeGvGIuLiiZuOg" general="_0Y4UMAuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oT1mQAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oT1mQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT1mQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT1mQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT1mRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT1mQQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT1mQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT3bcAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oT3bcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT3bcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT3bcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT3bdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT3bcQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT3bcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT53sAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oT53swu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT53swu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT53sAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT53tAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT53sQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT53sgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT53tQu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oT53uAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT53uAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT53tQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT6ewAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT53tgu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT53twu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT6ewQu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oT6exAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT6exAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT6ewQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT6exQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT6ewgu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT6ewwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT87AAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oT87Awu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT87Awu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT87AAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT87BAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT87AQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT87Agu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oT-JIAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oT-wMAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oT-wMAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oT-JIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT-wMQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oT-JIQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oT-JIgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUAlYAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oUAlYwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUAlYwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUAlYAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUAlZAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUAlYQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUAlYgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUBMcAu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oUBMcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUBMcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUBMcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUBMdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUBMcQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUBMcgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUBzgAu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oUBzgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUBzgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUBzgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUBzhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUBzgQu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUBzggu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUBzhQu0EeGvGIuLiiZuOg" name="getnullMedicationType" isQuery="true" bodyCondition="_oUBziAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUBziAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUBzhQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUCakAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUBzhgu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUBzhwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUCakQu0EeGvGIuLiiZuOg" name="getnullMedicationOrderInformations" isQuery="true" bodyCondition="_oUCalAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUCalAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUCakQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUCalQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUCakgu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUCakwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUDBoAu0EeGvGIuLiiZuOg" name="getnullReactionObservation" isQuery="true" bodyCondition="_oUDBowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUDBowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUDBoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUDBpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUDBoQu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUDBogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0roREAuuEeGvGIuLiiZuOg" name="MedicationConditionalDose">
      <ownedComment xmi:id="_0sJ1gAuuEeGvGIuLiiZuOg" annotatedElement="_0roREAuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0sJ1gQuuEeGvGIuLiiZuOg" annotatedElement="_0roREAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0sJ1gguuEeGvGIuLiiZuOg" annotatedElement="_0roREAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This template identifier is used to identify medication administration events that require special&#xD;
processing to handle conditional dosing. The parent template is 1.3.6.1.4.1.19376.1.5.3.1.4.7. A&#xD;
conditional dose is often used when the dose amount differs based on some measurement (e.g.,&#xD;
an insulin sliding scale dose based on blood sugar level).&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0r9oQguuEeGvGIuLiiZuOg" name="MedicationConditionalDoseMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0r9oQwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0r9oRQuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0r9oRguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0r-PUQuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0r-PUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0r-2YAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0r-2YQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0r_dcAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasPreconditionCriterion">
        <ownedComment xmi:id="_0r_dcQuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0r_dcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sAEgAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasReason">
        <ownedComment xmi:id="_0sAEgQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sAEgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sBSoAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sBSoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sB5sAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sB5sQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sCgwAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasDosing">
        <ownedComment xmi:id="_0sCgwQuuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sCgwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sCgwwuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseDosingRelationship">
        <ownedComment xmi:id="_0sCgxAuuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sCgxQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sCgxguuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0sCgxwuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sCgyAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sDH0AuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseReasonClassMood">
        <ownedComment xmi:id="_0sDH0QuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0sDH0guuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sDH0wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sDu4QuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sDu4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sE9AAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasIntructionsInversion">
        <ownedComment xmi:id="_0sE9AQuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sE9AguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sFkEAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sFkEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sGLIAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sGLIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sGyMAuuEeGvGIuLiiZuOg" name="MedicationConditionalDosePreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sGyMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sHZQAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sHZQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sIAUAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseHasFillNumber">
        <ownedComment xmi:id="_0sIAUQuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sIAUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sJOcAuuEeGvGIuLiiZuOg" name="MedicationConditionalDoseConditionalDosingSubstanceAdministration">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sJOcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship.substanceAdministration->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUDosQu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUDosgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUXKsAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseId" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUXKsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUY_4Au0EeGvGIuLiiZuOg" name="MedicationConditionalDoseCode" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUY_4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUaOAAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseStatusCode" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUaOAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUcDMAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseEffectiveTime" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUcDMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUefcAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseRouteCode" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUefcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUhiwAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseApproachSiteCode" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUhiwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUj_AAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseDoseQuantity" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUj_AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUl0MAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseRateQuantity" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUl0MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUnCUAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseMaxDoseQuantity" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUnCUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUpekAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseAdministrationUnitCode" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUpekQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUuXEAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseMedicationSeriesNumberObservation" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUuXEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUwMQgu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseMedicationStatusObservation" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUwMQwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oUzPkAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseProductInstance" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUzPkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oU258Au0EeGvGIuLiiZuOg" name="MedicationConditionalDoseMedicationSeriesNumberObservation" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU258Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oU4vIQu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseMedicationStatusObservation" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU4vIgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oU7ycAu0EeGvGIuLiiZuOg" name="MedicationConditionalDoseProductInstance" constrainedElement="_0roREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU7ycQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0sJ1gwuuEeGvGIuLiiZuOg" general="_0Y4UMAuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oUvlMAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oUwMQAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUwMQAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUvlMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUwMQQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUvlMQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUvlMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oUyBcAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oUyBcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oUyBcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oUyBcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUyBdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oUyBcQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oUyBcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU0dsAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oU1Ewgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU1Ewgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU0dsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU1Ewwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU1EwAu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU1EwQu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU1ExAu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oU1Exwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU1Exwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU1ExAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU1EyAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU1ExQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU1Exgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU1r0Au0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oU1r0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU1r0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU1r0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU1r1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU1r0Qu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU1r0gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU4IEAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oU4IEwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU4IEwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU4IEAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU4vIAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU4IEQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU4IEgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU6kUAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oU6kUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU6kUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU6kUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU6kVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU6kUQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU6kUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU9AkAu0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oU9Akwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU9Akwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU9AkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU9noAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU9AkQu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU9Akgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU9noQu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oU9npAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU9npAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU9noQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU9npQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU9nogu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU9nowu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU-OsAu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oU-Oswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU-Oswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU-OsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU-OtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU-OsQu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU-Osgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU-1wAu0EeGvGIuLiiZuOg" name="getnullMedicationType" isQuery="true" bodyCondition="_oU-1wwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU-1wwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU-1wAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU-1xAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU-1wQu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU-1wgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU-1xQu0EeGvGIuLiiZuOg" name="getnullMedicationOrderInformations" isQuery="true" bodyCondition="_oU_c0Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU_c0Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU-1xQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU_c0Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU-1xgu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU-1xwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oU_c0gu0EeGvGIuLiiZuOg" name="getnullReactionObservation" isQuery="true" bodyCondition="_oU_c1Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oU_c1Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oU_c0gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oU_c1gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oU_c0wu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oU_c1Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0sM40AuuEeGvGIuLiiZuOg" name="MedicationCombinationMedication">
      <ownedComment xmi:id="_0svEUguuEeGvGIuLiiZuOg" annotatedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <body>&lt;p>A medication activity is used to describe what is administered.&lt;/p>&#xD;
&lt;p>An indication describes the rationale for a medication activity. The indication can be an existing problem or can be a criterion that if met would warrant the activity. Criteria are typically associated with PRN (from the Latin &quot;pro re nata&quot;, meaning &quot;as needed&quot;) medications (e.g. &quot;give Medication X as needed for nausea&quot;).&lt;/p>&#xD;
&lt;p>A reaction represents an adverse event due to an administered substance. Significant reactions are to be listed in the Alerts section. Reactions in the Medications section can be used to track reactions associated with individual substance administrations or to track routine follow up to an administration (e.g. &quot;no adverse reaction 30 minutes post administration&quot;).&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0svEUwuuEeGvGIuLiiZuOg" annotatedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This content module describes the general structure for a medication. All medication administration acts will be derived&#xD;
from this content module.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The &amp;lt;substanceAdministration> element may contain subordinate&#xD;
&amp;lt;substanceAdministration> elements in a related component entry to deal with special cases (see&#xD;
the section below on Special Cases). These cases include split, tapered, or conditional dosing, or&#xD;
combination medications. The use of subordinate &amp;lt;substanceAdministration> elements to deal with these cases is optional. The comment field should always be used in these cases to provide&#xD;
the same information as free text in the top level &amp;lt;substanceAdministration> element.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0svEVAuuEeGvGIuLiiZuOg" annotatedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
This template identifier is used to identify medication administration events that require special&#xD;
processing to handle combination medications. The parent template is&#xD;
1.3.6.1.4.1.19376.1.5.3.1.4.7. A combination medication is made up of two or more other&#xD;
medications. These may be prepackaged, such as Percocet, which is a combination of&#xD;
Acetaminophen and oxycodone in predefined ratios, or prepared by a pharmacist, such as a GI&#xD;
cocktail.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
In the case of the prepackaged combination, it is sufficient to supply the name of the&#xD;
combination drug product, and its strength designation in a single &amp;lt;substanceAdministation>&#xD;
entry. The dosing information should then be recorded as simply a count of administration units.&#xD;
In the latter case of a prepared mixture, the description of the mixture should be provided as the&#xD;
product name (e.g., &quot;GI Cocktail&quot;) , in the &amp;lt;substanceAdministration> entry. That entry may, but&#xD;
is not required, to have subordinate &amp;lt;substanceAdministration> entries included beneath it to record the components of the mixture.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0si3EguuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationMoodCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0si3EwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.moodCode=vocab::x_DocumentSubstanceMood::EVN or self.moodCode=vocab::x_DocumentSubstanceMood::INT </body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sjeIAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasDoseQuantityOrRateQuantity">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sjeIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.doseQuantity.oclIsUndefined() or not self.rateQuantity.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0skFMAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasConsents">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0skFMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getClinicalDocument().authorization->size() > 0 and self.getClinicalDocument().authorization.consent->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0slTUAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationInformationSource">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0slTUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.informant->isEmpty() &#xD;&#xA;or not self.getSection().informant->isEmpty()&#xD;&#xA;or not self.getClinicalDocument().informant->isEmpty()&#xD;&#xA;or self.reference->exists(ref : cda::Reference | ref.typeCode = vocab::x_ActRelationshipExternalReference::XCRPT)&#xD;&#xA;or (self.entryRelationship->exists(rel : cda::EntryRelationship | &#xD;&#xA;   rel.typeCode = vocab::x_ActRelationshipEntryRelationship::REFR&#xD;&#xA;   and rel.observation.code.code = '48766-0'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sl6YAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasPreconditionCriterion">
        <ownedComment xmi:id="_0sl6YQuuEeGvGIuLiiZuOg">
          <body>Indicates that the medication is administered only when the associated (coded or free text) criteria are met.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sl6YguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.precondition->exists(precondition : cda::Precondition | not precondition.criterion.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0smhcAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasReason">
        <ownedComment xmi:id="_0smhcQuuEeGvGIuLiiZuOg">
          <body>The target of the relationship represents the indication for the activity.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0smhcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->exists(entryRel : cda::EntryRelationship | entryRel.typeCode = vocab::x_ActRelationshipEntryRelationship::RSON)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0snIgAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasReasonProblem">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0snIgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::RSON, cda::ClinicalStatement)->forAll(target : &#xD;&#xD;&#xA;cda::ClinicalStatement | not target.oclIsUndefined() and &#xD;&#xA;  (target.oclIsKindOf(ccd::ProblemAct) or target.oclIsKindOf(ccd::ProblemObservation)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0snvkAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasProduct">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0snvkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.oclIsKindOf(ccd::Product)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0soWoQuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasDosing">
        <ownedComment xmi:id="_0soWoguuEeGvGIuLiiZuOg">
          <body>There are a variety of special cases for dosing that need to be accounted for. &#xD;
Most of these special cases involve changing the dosage or frequency over time, or based on&#xD;
some measurement. When the dosage changes, then additional entries are required for each differing dosage.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0soWowuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.1') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor self.templateId->exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.11')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0so9sAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationDosingRelationship">
        <ownedComment xmi:id="_0so9sQuuEeGvGIuLiiZuOg">
          <body>n the first three cases, the subordinate components shall specify only the changed &amp;lt;frequency>&#xD;
and/or &amp;lt;doseAmount> elements. For conditional dosing, each subordinate component shall have&#xD;
a &amp;lt;precondition> element that specifies the &amp;lt;observation> that must be obtained before&#xD;
administration of the dose. The value of the &amp;lt;sequenceNumber> shall be an ordinal number,&#xD;
starting at 1 for the first component, and increasing by 1 for each subsequent component.&#xD;
Components shall be sent in &amp;lt;sequenceNumber> order.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0so9sguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.8') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.9') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.10') xor &#xA;self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.11') implies self.entryRelationship->exists(er | er.typeCode=vocab::x_ActRelationshipEntryRelationship::COMP)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0so9swuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasDescriptionNoMedNotKnown">
        <ownedComment xmi:id="_0so9tAuuEeGvGIuLiiZuOg">
          <body>&lt;p>&#xD;
182904002 &quot;Drug Treatment Unknown&quot; (To indicate lack of knowledge about drug therapy)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
182849000 &quot;No Drug Therapy Prescribed&quot; (To indicate the absense of any prescribed medications)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
408350003 &quot;Patient Not On Self-Medications&quot; (To indicate no treatment)&#xD;
&lt;/p></body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0so9tQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0spkwAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationReasonClassMood">
        <ownedComment xmi:id="_0spkwQuuEeGvGIuLiiZuOg">
          <body>self.internalReference->exists(ir : ihe::InternalReference | ar.classCode &amp;lt;> 'ACT' or ar.moodCode &amp;lt;> 'EVN')</body>
        </ownedComment>
        <ownedComment xmi:id="_0spkwguuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the internalReference relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0spkwwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>true</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sqL0AuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasProductEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sqL0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.consumable.manufacturedProduct.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.7.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sqy4AuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasIntructionsInversion">
        <ownedComment xmi:id="_0sqy4QuuEeGvGIuLiiZuOg">
          <body>OCL Issue - What is the patientInstructions relationship?  unable to get OCL to reference</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sqy4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists( er : cda::EntryRelationship | er.inversionInd &lt;> true and er.act.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.4.3')  )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0srZ8AuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationProductStrength">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0srZ8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.code.oclIsUndefined() implies not self.consumable.manufacturedProduct.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ssBAAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationProductName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ssBAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.consumable.manufacturedProduct.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0stPIAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationPreconditionReference">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0stPIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.precondition.criterion.text->exists (t | t.reference.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0st2MAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasSupplyEntryInversion">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0st2MQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er : cda::EntryRelationship | (not er.supply->isEmpty()) and er.inversionInd&lt;>false )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0sudQAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationHasFillNumber">
        <ownedComment xmi:id="_0sudQQuuEeGvGIuLiiZuOg">
          <body>The prescription activity may have a &amp;lt;sequenceNumber> element to indicate the fill number. A&#xD;
value of 1, 2 or N indicates that it is the first, second, or Nth fill respectively of a specific&#xD;
prescription.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0sudQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship->exists(er| (not er.supply->isEmpty()) and er.sequenceNumber.value.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0svEUAuuEeGvGIuLiiZuOg" name="MedicationCombinationMedicationCombinationMedicationSubstanceAdministration">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0svEUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entryRelationship.substanceAdministration->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVAD4Qu0EeGvGIuLiiZuOg" name="MedicationTemplateId" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVAD4gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVTl4Au0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationId" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVTl4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVVbEAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationCode" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVVbEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVWpMAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationStatusCode" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVWpMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.statusCode.oclIsUndefined() or self.statusCode.isNullFlavorUndefined()) implies (not self.statusCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVYeYAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationEffectiveTime" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVYeYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime->isEmpty() or self.effectiveTime->exists(element | element.isNullFlavorUndefined())) implies (not self.effectiveTime->isEmpty())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVa6oAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationRouteCode" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVa6oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.routeCode.oclIsUndefined() or self.routeCode.isNullFlavorUndefined()) implies (not self.routeCode.oclIsUndefined() and self.routeCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.routeCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVd98Au0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationApproachSiteCode" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVelAAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.approachSiteCode->isEmpty() or self.approachSiteCode->exists(element | element.isNullFlavorUndefined())) implies (self.approachSiteCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CD) and &#xD;&#xA;let value : datatypes::CD = element.oclAsType(datatypes::CD) in &#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVgaMAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationDoseQuantity" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVgaMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.doseQuantity.oclIsUndefined() or self.doseQuantity.isNullFlavorUndefined()) implies (not self.doseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oViPYAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationRateQuantity" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oViPYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.rateQuantity.oclIsUndefined() or self.rateQuantity.isNullFlavorUndefined()) implies (not self.rateQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVkEkAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationMaxDoseQuantity" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVkEkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.maxDoseQuantity.oclIsUndefined() or self.maxDoseQuantity.isNullFlavorUndefined()) implies (not self.maxDoseQuantity.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVmg0Au0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationAdministrationUnitCode" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVmg0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.administrationUnitCode.oclIsUndefined() or self.administrationUnitCode.isNullFlavorUndefined()) implies (not self.administrationUnitCode.oclIsUndefined() and self.administrationUnitCode.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.administrationUnitCode.oclAsType(datatypes::CE) in (&#xD;&#xA;not value.codeSystem.oclIsUndefined() or not value.codeSystemName.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVqyQAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationMedicationSeriesNumberObservation" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVrZUAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVtOgAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationMedicationStatusObservation" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVtOgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVvqwAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationProductInstance" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVvqwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oVz8MAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationMedicationSeriesNumberObservation" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVz8MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationSeriesNumberObservation) and entryRelationship.typeCode = vocab::x_ActRelationshipEntryRelationship::SUBJ)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oV1xYAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationMedicationStatusObservation" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV1xYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entryRelationship->one(entryRelationship : cda::EntryRelationship | not entryRelationship.observation.oclIsUndefined() and entryRelationship.observation.oclIsKindOf(consol::MedicationStatusObservation))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oV40sAu0EeGvGIuLiiZuOg" name="MedicationCombinationMedicationProductInstance" constrainedElement="_0sM40AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV40sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.participant->exists(participant : cda::Participant2 | not participant.participantRole.oclIsUndefined() and participant.participantRole.oclIsKindOf(consol::ProductInstance))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0svEVQuuEeGvGIuLiiZuOg" general="_0Y4UMAuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oVsncAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oVsncwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oVsncwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oVsncAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVsndAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oVsncQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oVsncgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVucoAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oVucowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oVucowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oVucoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVucpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oVucoQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oVucogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVxf8Au0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oVxf8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oVxf8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oVxf8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVxf9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oVxf8Qu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oVxf8gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVyHAAu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oVyHAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oVyHAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oVyHAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVyHBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oVyHAQu0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oVyHAgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVyHBQu0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oVyuEAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oVyuEAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oVyHBQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oVyuEQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oVyHBgu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oVyHBwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV1KUAu0EeGvGIuLiiZuOg" name="getnullMedicationSeriesNumberObservation" isQuery="true" bodyCondition="_oV1KUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV1KUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV1KUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV1KVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationSeriesNumberObservation))->asSequence()->first().oclAsType(consol::MedicationSeriesNumberObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV1KUQu0EeGvGIuLiiZuOg" type="_0ZQuuQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV1KUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV3mkAu0EeGvGIuLiiZuOg" name="getnullMedicationStatusObservation" isQuery="true" bodyCondition="_oV3mkwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV3mkwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV3mkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV3mlAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationStatusObservation))->asSequence()->first().oclAsType(consol::MedicationStatusObservation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV3mkQu0EeGvGIuLiiZuOg" type="_0ZW1VAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV3mkgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV6C0Au0EeGvGIuLiiZuOg" name="getnullProductInstances" isQuery="true" bodyCondition="_oV6p4Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV6p4Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV6C0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV6p4gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getParticipantRoles()->select(participantRole : cda::ParticipantRole | not participantRole.oclIsUndefined() and participantRole.oclIsKindOf(consol::ProductInstance)).oclAsType(consol::ProductInstance)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV6C0Qu0EeGvGIuLiiZuOg" type="_0Zc8DAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV6p4Au0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV6p4wu0EeGvGIuLiiZuOg" name="getnullInternalReferences" isQuery="true" bodyCondition="_oV6p5gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV6p5gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV6p4wu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV6p5wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::InternalReference)).oclAsType(consol::InternalReference)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV6p5Au0EeGvGIuLiiZuOg" type="_0ZjCmguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV6p5Qu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV7Q8Au0EeGvGIuLiiZuOg" name="getnullPatientMedicalInstructionss" isQuery="true" bodyCondition="_oV7Q8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV7Q8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV7Q8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV7Q9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getActs()->select(act : cda::Act | not act.oclIsUndefined() and act.oclIsKindOf(consol::PatientMedicalInstructions)).oclAsType(consol::PatientMedicalInstructions)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV7Q8Qu0EeGvGIuLiiZuOg" type="_0ZjCsQuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV7Q8gu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV74AAu0EeGvGIuLiiZuOg" name="getnullMedicationType" isQuery="true" bodyCondition="_oV74Awu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV74Awu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV74AAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV74BAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::MedicationType))->asSequence()->first().oclAsType(consol::MedicationType)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV74AQu0EeGvGIuLiiZuOg" type="_0ZvP1AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV74Agu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV74BQu0EeGvGIuLiiZuOg" name="getnullMedicationOrderInformations" isQuery="true" bodyCondition="_oV74CAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV74CAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV74BQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV8fEAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getSupplies()->select(supply : cda::Supply | not supply.oclIsUndefined() and supply.oclIsKindOf(consol::MedicationOrderInformation)).oclAsType(consol::MedicationOrderInformation)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV74Bgu0EeGvGIuLiiZuOg" type="_0Z1WcwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV74Bwu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oV8fEQu0EeGvGIuLiiZuOg" name="getnullReactionObservation" isQuery="true" bodyCondition="_oV8fFAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oV8fFAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oV8fEQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV8fFQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getObservations()->select(observation : cda::Observation | not observation.oclIsUndefined() and observation.oclIsKindOf(consol::ProblemEntryReactionObservationContainer))->asSequence()->first().oclAsType(consol::ProblemEntryReactionObservationContainer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oV8fEgu0EeGvGIuLiiZuOg" type="_0W-PuwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oV8fEwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0szVwAuuEeGvGIuLiiZuOg" name="SupportParticipant">
      <ownedComment xmi:id="_0s3AIguuEeGvGIuLiiZuOg" annotatedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0s3AIwuuEeGvGIuLiiZuOg" annotatedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <body>At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included. If no healthcare providers are supplied, the reason should be supplied as free text in the narrative block (e.g., Unknown, etc).</body>
      </ownedComment>
      <ownedComment xmi:id="_0s3AJAuuEeGvGIuLiiZuOg" annotatedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0s3AJQuuEeGvGIuLiiZuOg" annotatedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <body>&lt;p>Represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.&lt;/p>&#xD;
&lt;p>CDA R2 represents a patient's guardian with the CDA Header Guardian class. Other Supporters are represented as participant participations in the CDA Header.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0szVwQuuEeGvGIuLiiZuOg" annotatedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <body>At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included. If no healthcare providers are supplied, the reason should be supplied as free text in the narrative block (e.g., Unknown, etc).</body>
      </ownedComment>
      <ownedRule xmi:id="_oV9GIAu0EeGvGIuLiiZuOg" name="SupportParticipantTemplateId" constrainedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV9GIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oV-7UAu0EeGvGIuLiiZuOg" name="SupportParticipantTypeCode" constrainedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oV-7UQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeCode=vocab::ParticipationType::IND</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oWAJcAu0EeGvGIuLiiZuOg" name="SupportParticipantTime" constrainedElement="_0szVwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oWAJcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.time.oclIsUndefined() or self.time.isNullFlavorUndefined()) implies (not self.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0s3AJguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_4_GbMEcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0s4OQAuuEeGvGIuLiiZuOg" name="UnstructuredDocument">
      <ownedComment xmi:id="_0t-acAuuEeGvGIuLiiZuOg" annotatedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0t-acQuuEeGvGIuLiiZuOg" annotatedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <body>A variety of legacy paper, film, electronic and scanner outputted formats are used to store and exchange clinical documents. These formats are not designed for healthcare documentation, and furthermore, do not have a uniform mechanism to store healthcare metadata associated with the documents, including patient identifiers, demographics, encounter, order or service information. The association of structured, healthcare metadata with this kind of document is important to maintain the integrity of the patient health record as managed by the source system. It is necessary to provide a mechanism that allows such source metadata to be stored with the document.</body>
      </ownedComment>
      <ownedComment xmi:id="_0s4OQQuuEeGvGIuLiiZuOg" annotatedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <body>&lt;b>IMPORTANT NOTE:&lt;/b> &lt;i>The HITSP C62 specification does not include a templateId for this doument type. The id 2.16.840.1.113883.3.88.11.62.1 is included in this model to support instance validation, but we are designing a solution to allow removal of this Id.&lt;/i></body>
      </ownedComment>
      <ownedRule xmi:id="_0tTsEwuuEeGvGIuLiiZuOg" name="UnstructuredDocumentPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tTsFAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tUTIAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tUTIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tU6MAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tU6MQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tVhQAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0tVhQQuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tVhQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tWIUAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tWIUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tWvYAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tWvYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tXWcAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTelephoneMatchesRegex">
        <ownedComment xmi:id="_0tXWcQuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0tXWcguuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tXWcwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tX9gQuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tX9gguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tZLoAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0tZLoQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tZLoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tZysAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tZysQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0taZwAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0taZwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tcO8AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentOidLength">
        <ownedComment xmi:id="_0tcO8QuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tcO8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tc2AAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tc2AQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tfSQAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentSetIdAndVersionNumber">
        <ownedComment xmi:id="_0tfSQQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tfSQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tf5UAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tf5UQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tggYAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentCopyTimeNotPresent">
        <ownedComment xmi:id="_0tggYQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tggYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0thHcAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0thHcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0thugAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0thugQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tiVkAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0tiVkQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tiVkguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tkx0AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tkx0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tlY4AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasAuthorTime">
        <ownedComment xmi:id="_0tlY4QuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tlY4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tl_8AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tl_8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tmnAQuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tmnAguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tn1IAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tn1IQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tocMAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tocMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tpDQAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tpDQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tpqUAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tpqUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tvJ4AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tvJ4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tvw8QuuEeGvGIuLiiZuOg" name="UnstructuredDocumentAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tvw8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tw_EAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTimePreciseToSecond">
        <ownedComment xmi:id="_0tw_EQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tw_EguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0txmIAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0txmIQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0txmIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tyNMAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentTypeIdFixed">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tyNMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.root = '2.16.840.1.113883.1.3' and self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ty0QAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasOneRecordTarget">
        <ownedComment xmi:id="_0ty0QQuuEeGvGIuLiiZuOg">
          <body>Contains identifying information about the patient concerned in the original content. In many cases this will have to be supplied by the operator.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ty0QguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tzbUAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasAssignedAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tzbUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.representedOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t0CYAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentPatientRoleId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t0CYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   and target.patientRole.id->forAll(roleId : datatypes::II | not roleId.root.oclIsUndefined()&#xD;&#xA;   and not roleId.extension.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t1QgAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasPatientRoleAddress">
        <ownedComment xmi:id="_0t1QgQuuEeGvGIuLiiZuOg">
          <body>The addr element has an unbounded upper limit on occurrences. It can, and should, be replicated to include additional addresses for a patient, each minimally specified by the country sub element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t1QgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   and target.patientRole.addr->exists(address : datatypes::AD | address.country->exists(c : datatypes::ADXP |&#xD;&#xA;   not c.oclIsUndefined() and c.getText().size() > 0)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t13kAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasPatientName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t13kQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.patient.oclIsUndefined()&#xD;&#xA;   and target.patientRole.patient.name->exists(name: datatypes::PN |&#xD;&#xA;      not name.given->isEmpty() and not name.family->isEmpty()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t2eoAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasPatientGenderCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t2eoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(target : cda::RecordTarget |&#xD;&#xA;   not target.patientRole.patient.administrativeGenderCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t3FsAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasPatientBirthYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t3FsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(target : cda::RecordTarget |&#xD;&#xA;   not target.patientRole.patient.birthTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t3swAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasOriginalAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t3swQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.oclIsUndefined() and author.oclIsKindOf(ihe::ScanOriginalAuthor))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t4T0AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasScanningDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t4T0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.oclIsUndefined() and author.oclIsKindOf(ihe::ScanningDevice))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t464AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasScanDataEnterer">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t464QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() and self.dataEnterer.oclIsKindOf(ihe::ScanDataEnterer)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t5h8AuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasRepresentedCustodianOrganizationName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t5h8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.custodian.assignedCustodian.representedCustodianOrganization.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t6JAQuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasRepresentedCustodianOrganizationAddr">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t6JAguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.custodian.assignedCustodian.representedCustodianOrganization.addr.oclIsUndefined()&#xD;&#xA;   and self.custodian.assignedCustodian.representedCustodianOrganization.addr.country->exists(c : datatypes::ADXP |&#xD;&#xA;      not c.oclIsUndefined() and c.getText().size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t7XIAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentLegalAuthenticatorAssignedEntityId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t7XIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.legalAuthenticator.assignedEntity.id->size() > 0 implies (&#xD;&#xA;   self.legalAuthenticator.assignedEntity.id->forAll(ident : datatypes::II |&#xD;&#xA;      not ident.root.oclIsUndefined() and not ident.extension.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t7-MAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasNonXMLBody">
        <ownedComment xmi:id="_0t7-MQuuEeGvGIuLiiZuOg">
          <body>Used to wrap the scanned content. The nonXMLBody element is guaranteed to be unique; thus the x-path to recover the scanned content is essentially fixed.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t7-MguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component.nonXMLBody.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t8lQAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasNonXMLBodyBinaryText">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t8lQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component.nonXMLBody.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t9MUAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasNonXMLBodyTextMediaType">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t9MUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.nonXMLBody.text.mediaType = 'application/pdf' or self.component.nonXMLBody.text.mediaType = 'text/plain'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0t9zYAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentHasNonXMLBodyTextRepresentation">
        <ownedComment xmi:id="_0t9zYQuuEeGvGIuLiiZuOg">
          <body>The @representation for both PDF and plaintext scanned content will be &quot;B64&quot;, because this profile requires the base-64 encoding of both formats.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0t9zYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.nonXMLBody.text.representation = datatypes::BinaryDataEncoding::B64</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0s4OQguuEeGvGIuLiiZuOg" name="UnstructuredDocumentNoStructuredData" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0s4OQwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.structuredBody.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0s4ORAuuEeGvGIuLiiZuOg" name="UnstructuredDocumentOnePatientPerDocument" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0s4ORQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(record : cda::RecordTarget | not record.patientRole.oclIsUndefined() and not record.patientRole.patient.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oWClsAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentTemplateId" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oWClsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.62.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oW8koAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentTypeId" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oW9LsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oW-Z0Au0EeGvGIuLiiZuOg" name="UnstructuredDocumentId" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oW-Z0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXAPAAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentCode" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXAPAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXCEMAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentTitle" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXCEMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXEgcAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentEffectiveTime" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXEgcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXGVoAu0EeGvGIuLiiZuOg" name="UnstructuredDocumentConfidentialityCode" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXGVoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.confidentialityCode.oclIsUndefined() or self.confidentialityCode.isNullFlavorUndefined()) implies (not self.confidentialityCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXIK0Au0EeGvGIuLiiZuOg" name="UnstructuredDocumentLanguageCode" constrainedElement="_0s4OQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXIK0Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0t-acguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0tCmUAuuEeGvGIuLiiZuOg" name="ScanOriginalAuthor">
      <ownedComment xmi:id="_0tCmUQuuEeGvGIuLiiZuOg" annotatedElement="_0tCmUAuuEeGvGIuLiiZuOg">
        <body>Represents the author of the original content. It additionally can encode the original author‟s institution in the subelement representedOrganization. Information regarding the original author and his/her institution shall be included, if it is known. In many cases this will have to be supplied by the operator.</body>
      </ownedComment>
      <ownedRule xmi:id="_0tCmUguuEeGvGIuLiiZuOg" name="ScanOriginalAuthorHasAssignedAuthorId">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_g76sEPG1Ed-FxO0PukiqhA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tCmUwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedAuthor.id->forAll(ident : datatypes::II |&#xD;&#xA;   not ident.root.oclIsUndefined() and not ident.extension.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tCmVAuuEeGvGIuLiiZuOg" name="ScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_g76sEPG1Ed-FxO0PukiqhA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tCmVQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedAuthor.representedOrganization.id->forAll(ident : datatypes::II |&#xD;&#xA;   not ident.root.oclIsUndefined() and not ident.extension.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXPfkAu0EeGvGIuLiiZuOg" name="ScanOriginalAuthorTemplateId" constrainedElement="_0tCmUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXQGoAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.2.20.1')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0tFpoAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_ChEisEcEEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0tG3wAuuEeGvGIuLiiZuOg" name="ScanningDevice">
      <ownedComment xmi:id="_0tG3wQuuEeGvGIuLiiZuOg" annotatedElement="_0tG3wAuuEeGvGIuLiiZuOg">
        <body>Represents the scanning device and software used to produce the scanned content.</body>
      </ownedComment>
      <ownedRule xmi:id="_0tG3wguuEeGvGIuLiiZuOg" name="ScanningDeviceTimeEqualsDocumentEffectiveTime">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_DVyVoPdQEd-aZohBEt6atA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3wwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.time.value = self.getClinicalDocument().effectiveTime.value</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tG3xAuuEeGvGIuLiiZuOg" name="ScanningDeviceHasAssignedAuthorId">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_g76sEPG1Ed-FxO0PukiqhA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3xQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedAuthor.id->forAll(ident : datatypes::II | not ident.root.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tG3xguuEeGvGIuLiiZuOg" name="ScanningDeviceHasAssignedAuthoringDeviceCode" constrainedElement="_0tG3wAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3xwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedAuthor.assignedAuthoringDevice.code.codeSystem = '1.2.840.10008.2.16.4'&#xD;&#xA;   and not self.assignedAuthor.assignedAuthoringDevice.code.code.oclIsUndefined()&#xD;&#xA;   and not self.assignedAuthor.assignedAuthoringDevice.code.displayName.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tG3yAuuEeGvGIuLiiZuOg" name="ScanningDeviceHasDeviceManufacturerModelName" constrainedElement="_0tG3wAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0tG3yQuuEeGvGIuLiiZuOg">
          <body>The mixed content shall contain string information that specifies the scanner product name and model number. From this information, features like bit depth and resolution can be inferred. In the case of virtually scanned documents (for example, print to PDF), the manufactureModelName referenced here refers to the makers of the technology that was used to produce the embedded content.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3yguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.assignedAuthor.assignedAuthoringDevice.manufacturerModelName.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tG3ywuuEeGvGIuLiiZuOg" name="ScanningDeviceHasDeviceSoftwareName" constrainedElement="_0tG3wAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0tG3zAuuEeGvGIuLiiZuOg">
          <body>The mixed content shall contain string information that specifies the scanning software name and version. In the case of virtually scanned documents, the softwareName referenced here refers to the technology that was used to produce the embedded content.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3zQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.assignedAuthor.assignedAuthoringDevice.softwareName.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tG3zguuEeGvGIuLiiZuOg" name="ScanningDeviceHasAssignedAuthorRepresentedOrganizationId">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_g76sEPG1Ed-FxO0PukiqhA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tG3zwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedAuthor.representedOrganization.id->forAll(ident : datatypes::II | not ident.root.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXUYEAu0EeGvGIuLiiZuOg" name="ScanningDeviceTemplateId" constrainedElement="_0tG3wAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXU_IAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.2.20.2')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0tMXUAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_ChEisEcEEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0tNlcAuuEeGvGIuLiiZuOg" name="ScanDataEnterer">
      <ownedComment xmi:id="_0tNlcQuuEeGvGIuLiiZuOg" annotatedElement="_0tNlcAuuEeGvGIuLiiZuOg">
        <body>Represents the scanner operator who produced the scanned content.</body>
      </ownedComment>
      <ownedRule xmi:id="_0tNlcguuEeGvGIuLiiZuOg" name="ScanDataEntererTimeEqualsDocumentEffectiveTime">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_DVyVoPdQEd-aZohBEt6atA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tNlcwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.time.value = self.getClinicalDocument().effectiveTime.value</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0tNldAuuEeGvGIuLiiZuOg" name="ScanDataEntererHasAssignedEntityId">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.ihe/model/ihe_Ecore.uml#_g76sEPG1Ed-FxO0PukiqhA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0tNldQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.assignedEntity.id->forAll(ident : datatypes::II | not ident.root.oclIsUndefined() and not ident.extension.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXc68Au0EeGvGIuLiiZuOg" name="ScanDataEntererTemplateId" constrainedElement="_0tNlcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXc68Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.2.20.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXf-QAu0EeGvGIuLiiZuOg" name="ScanDataEntererTime" constrainedElement="_0tNlcAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXf-QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.time.oclIsUndefined() or self.time.isNullFlavorUndefined()) implies (not self.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0tRP0AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_twqZYEcEEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0uAPoAuuEeGvGIuLiiZuOg" name="MedicationInformation">
      <ownedComment xmi:id="_0uQHQAuuEeGvGIuLiiZuOg" annotatedElement="_0uAPoAuuEeGvGIuLiiZuOg">
        <body>&lt;p>&#xD;
The product entry describes a medication or immunization used in a 'substanceAdministration'&#xD;
or 'supply' act&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
In a CDA document, the name and strength of the medication are specified in the elements under&#xD;
the 'manufacturedMaterial' element.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
The 'code' element of the 'manufacturedMaterial' describes the medication. This may be&#xD;
coded using a controlled vocabulary, such as RxNorm, First Databank, or other vocabulary&#xD;
system for medications, and should be the code that represents the generic medication name and&#xD;
strength (e.g., acetaminophen and oxycodone -5/325), or just the generic medication name alone&#xD;
if strength is not relevant (Acetaminophen).&#xD;
In a CDA document, the &amp;lt;originalText> shall contain a 'reference' whose URI value points to&#xD;
the generic name and strength of the medication, or just the generic name alone if strength is not&#xD;
relevant.&#xD;
&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0uAPoQuuEeGvGIuLiiZuOg" annotatedElement="_0uAPoAuuEeGvGIuLiiZuOg">
        <body>The product concentration is determined from the coded product or brand name using knowledge base information in the vocabularies specified for these fields, and therefore this information is not explicitly included.</body>
      </ownedComment>
      <ownedRule xmi:id="_0uHkYQuuEeGvGIuLiiZuOg" name="MedicationInformationHasMaterial">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uHkYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uILcQuuEeGvGIuLiiZuOg" name="MedicationInformationHasMaterialCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uILcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.code.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uJZkAuuEeGvGIuLiiZuOg" name="MedicationInformationHasMaterialCodeVocab">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uJZkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.6.88' or self.manufacturedMaterial.code.codeSystem='2.16.840.1.113883.6.59' or self.manufacturedMaterial.code.codeSystem='2.16.840.1.113883.6.96'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uL10AuuEeGvGIuLiiZuOg" name="MedicationInformationHasMaterialCodeOriginalText">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uL10QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uMc4QuuEeGvGIuLiiZuOg" name="MedicationInformationHasMaterialName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uMc4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uNrAAuuEeGvGIuLiiZuOg" name="MedicationInformationMayHaveMaterialManufacturer">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uNrAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturerOrganization->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uOSEAuuEeGvGIuLiiZuOg" name="MedicationInformationShouldHaveMaterialManufacturer">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uOSEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->size() > 0 implies self.manufacturerOrganization->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPoguuEeGvGIuLiiZuOg" name="MedicationInformationCodedProductName" constrainedElement="_0uAPoAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0uAPowuuEeGvGIuLiiZuOg">
          <body>A code describing the product from a controlled&#xD;
vocabulary</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPpAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.code.code.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPpwuuEeGvGIuLiiZuOg" name="MedicationInformationCodedProductVocab">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPqAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.6.88'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPqQuuEeGvGIuLiiZuOg" name="MedicationInformationCodedDrugClassVocab" constrainedElement="_0uAPpwuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPqguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.3.26.1.5' and (self.manufacturedMaterial.code.code = 'N0000000223' or self.manufacturedMaterial.code.code = 'N0000009802' or self.manufacturedMaterial.code.code = 'N0000000002')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPqwuuEeGvGIuLiiZuOg" name="MedicationInformationCodedIngredientVocab" constrainedElement="_0uAPqQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPrAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.4.9'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPrQuuEeGvGIuLiiZuOg" name="MedicationInformationCodedBrandName" constrainedElement="_0uAPqwuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0uAPrguuEeGvGIuLiiZuOg">
          <body>A code describing the product as a branded or&#xD;
trademarked entity from a controlled vocabulary</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPrwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.translation->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPsAuuEeGvGIuLiiZuOg" name="MedicationInformationCodedBrandNameVocab" constrainedElement="_0uAPrQuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.6.88' or self.manufacturedMaterial.code.codeSystem = '2.16.840.1.113883.6.69'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPsguuEeGvGIuLiiZuOg" name="MedicationInformationFreeTextProductName" constrainedElement="_0uAPsAuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0uAPswuuEeGvGIuLiiZuOg">
          <body>The name of the substance or product without&#xD;
reference to a specific vendor (e.g., generic or other&#xD;
non-proprietary name). If a Coded Product Name is&#xD;
present, this is the text associated with the coded&#xD;
concept</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPtAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.code.originalText.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uAPtQuuEeGvGIuLiiZuOg" name="MedicationInformationFreeTextBrandName" constrainedElement="_0uAPsguuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_0uAPtguuEeGvGIuLiiZuOg">
          <body>The branded or trademarked name of the substance&#xD;
or product. If a Coded Brand Name is present, this is&#xD;
the text associated with the coded concept</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uAPtwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.manufacturedMaterial.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXkPsAu0EeGvGIuLiiZuOg" name="MedicationInformationTemplateId" constrainedElement="_0uAPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXkPsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.83.8.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oXzgQAu0EeGvGIuLiiZuOg" name="MedicationInformationId" constrainedElement="_0uAPoAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oXzgQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id->isEmpty() or self.id->exists(element | element.isNullFlavorUndefined())) implies (not self.id->isEmpty())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0uQHQQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_p6Zs8EcZEd6besF9iFIJkQ"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0uQuUAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocument">
      <ownedComment xmi:id="_0vvVAAuuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0vvVAQuuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>A variety of legacy paper, film, electronic and scanner outputted formats are used to store and exchange clinical documents. These formats are not designed for healthcare documentation, and furthermore, do not have a uniform mechanism to store healthcare metadata associated with the documents, including patient identifiers, demographics, encounter, order or service information. The association of structured, healthcare metadata with this kind of document is important to maintain the integrity of the patient health record as managed by the source system. It is necessary to provide a mechanism that allows such source metadata to be stored with the document.</body>
      </ownedComment>
      <ownedComment xmi:id="_0vvVAguuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>&lt;b>IMPORTANT NOTE:&lt;/b> &lt;i>The HITSP C62 specification does not include a templateId for this doument type. The id 2.16.840.1.113883.3.88.11.62.1 is included in this model to support instance validation, but we are designing a solution to allow removal of this Id.&lt;/i></body>
      </ownedComment>
      <ownedComment xmi:id="_0vvVAwuuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_0vvVBAuuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>This document type is not intended to be a replacement for IHE's XDS-SD (Cross-Transaction Specifications and Content Specifications, Scanned Documents Module) profile. Rather, it serves a more generic use case. XDS-SD is specifically for scanned documents, and limits content to PDF-A or text. This Unstructured Documents implementation guide is applicable not only for scanned documents in non-PDF formats, but also for clinical documents produced through word processing applications, etc.</body>
      </ownedComment>
      <ownedComment xmi:id="_0uQuUQuuEeGvGIuLiiZuOg" annotatedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <body>Used for documents that implement both HL7 Unstructured Documents and HITSP C62 based on IHE Scanned Documents.</body>
      </ownedComment>
      <ownedRule xmi:id="_0umskAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0umskQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0unToAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0unToQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0unTowuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0unTpAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0un6sQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0un6sguuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0un6swuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uohwAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uohwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0upI0AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0upI0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0upv4AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTelephoneMatchesRegex">
        <ownedComment xmi:id="_0upv4QuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0upv4guuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0upv4wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0upv5QuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uqW8AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uqW8guuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0uqW8wuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uqW9AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uq-AAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uq-AQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0urlEAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0urlEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uszMQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentOidLength">
        <ownedComment xmi:id="_0uszMguuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uszMwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0utaQAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0utaQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uv2gAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentSetIdAndVersionNumber">
        <ownedComment xmi:id="_0uv2gQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uv2gguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uwdkAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uwdkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uxEoAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentCopyTimeNotPresent">
        <ownedComment xmi:id="_0uxEoQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uxEoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uxrsAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uxrsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uySwAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uySwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0uy50QuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0uy50guuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0uy50wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u1WEAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u1WEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u19IAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAuthorTime">
        <ownedComment xmi:id="_0u19IQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u19IguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u3LQAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u3LQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u3yUAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u3yUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u4ZYAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u4ZYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u5AcAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u5AcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u5ngAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u5ngQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u6OkAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u6OkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u_HEAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u_HEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0u_uIAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0u_uIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vAVMAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToSecond">
        <ownedComment xmi:id="_0vAVMQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vAVMguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vA8QAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0vA8QQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vA8QguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vBjUAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTypeIdFixed">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vBjUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.root = '2.16.840.1.113883.1.3' and self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vCKYQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasOneRecordTarget">
        <ownedComment xmi:id="_0vCKYguuEeGvGIuLiiZuOg">
          <body>Contains identifying information about the patient concerned in the original content. In many cases this will have to be supplied by the operator.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vCKYwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vCxcAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAssignedAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vCxcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.representedOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vDYgAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentPatientRoleId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vDYgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   and target.patientRole.id->forAll(roleId : datatypes::II | not roleId.root.oclIsUndefined()&#xD;&#xA;   and not roleId.extension.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vD_kAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientRoleAddress">
        <ownedComment xmi:id="_0vD_kQuuEeGvGIuLiiZuOg">
          <body>The addr element has an unbounded upper limit on occurrences. It can, and should, be replicated to include additional addresses for a patient, each minimally specified by the country sub element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vD_kguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   and target.patientRole.addr->exists(address : datatypes::AD | address.country->exists(c : datatypes::ADXP |&#xD;&#xA;   not c.oclIsUndefined() and c.getText().size() > 0)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vD_lAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vD_lQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.patient.oclIsUndefined()&#xD;&#xA;   and target.patientRole.patient.name->exists(name: datatypes::PN |&#xD;&#xA;      not name.given->isEmpty() and not name.family->isEmpty()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vEmoQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientGenderCode">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vEmoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(target : cda::RecordTarget |&#xD;&#xA;   not target.patientRole.patient.administrativeGenderCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vFNsAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientBirthYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vFNsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(target : cda::RecordTarget |&#xD;&#xA;   not target.patientRole.patient.birthTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vF0wAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasOriginalAuthor">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vF0wQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.oclIsUndefined() and author.oclIsKindOf(ihe::ScanOriginalAuthor))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vGb0AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasScanningDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vGb0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->exists(author : cda::Author | not author.oclIsUndefined() and author.oclIsKindOf(ihe::ScanningDevice))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vGb0wuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasScanDataEnterer">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vGb1AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() and self.dataEnterer.oclIsKindOf(ihe::ScanDataEnterer)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vHC4QuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vHC4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.custodian.assignedCustodian.representedCustodianOrganization.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vHp8AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vHp8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.custodian.assignedCustodian.representedCustodianOrganization.addr.oclIsUndefined()&#xD;&#xA;   and self.custodian.assignedCustodian.representedCustodianOrganization.addr.country->exists(c : datatypes::ADXP |&#xD;&#xA;      not c.oclIsUndefined() and c.getText().size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vIRAAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vIRAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.legalAuthenticator.assignedEntity.id->size() > 0 implies (&#xD;&#xA;   self.legalAuthenticator.assignedEntity.id->forAll(ident : datatypes::II |&#xD;&#xA;      not ident.root.oclIsUndefined() and not ident.extension.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vI4EAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasNonXMLBody">
        <ownedComment xmi:id="_0vI4EQuuEeGvGIuLiiZuOg">
          <body>Used to wrap the scanned content. The nonXMLBody element is guaranteed to be unique; thus the x-path to recover the scanned content is essentially fixed.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vI4EguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component.nonXMLBody.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vKGMAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasNonXMLBodyBinaryText">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vKGMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component.nonXMLBody.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vKtQAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vKtQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.nonXMLBody.text.mediaType = 'application/pdf' or self.component.nonXMLBody.text.mediaType = 'text/plain'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vLUUAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation">
        <ownedComment xmi:id="_0vLUUQuuEeGvGIuLiiZuOg">
          <body>The @representation for both PDF and plaintext scanned content will be &quot;B64&quot;, because this profile requires the base-64 encoding of both formats.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vLUUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.nonXMLBody.text.representation = datatypes::BinaryDataEncoding::B64</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vL7YAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentNoStructuredData">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vL7YQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.structuredBody.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vMicAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentOnePatientPerDocument">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vMicQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->one(record : cda::RecordTarget | not record.patientRole.oclIsUndefined() and not record.patientRole.patient.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vNwkAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vNwkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vOXoAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vOXoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vO-sAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vO-sQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vPlwAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0vPlwQuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vPlwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vQM0AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vQM0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vQz4AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vQz4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vRa8AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTelephoneMatchesRegex">
        <ownedComment xmi:id="_0vRa8QuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0vRa8guuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vRa8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vSpEAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vSpEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vTQIAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0vTQIQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vTQIguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vT3MAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vT3MQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vUeQAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vUeQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vWTcAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentOidLength">
        <ownedComment xmi:id="_0vWTcQuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vWTcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vW6gQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vW6gguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vZWwAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentSetIdAndVersionNumber">
        <ownedComment xmi:id="_0vZWwQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vZWwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vZ90AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vZ90QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vak4AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentCopyTimeNotPresent">
        <ownedComment xmi:id="_0vak4QuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vak4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vbL8AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vbL8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vbzAAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vbzAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vcaEQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0vcaEguuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vdBIAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ve2UAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ve2UQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vfdYAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAuthorTime">
        <ownedComment xmi:id="_0vfdYQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vfdYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vgEcQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vgEcguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vhSkAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vhSkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vh5oAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vh5oQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vigsAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vigsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vjHwAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vjHwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vju0AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vju0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0voAQAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0voAQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vonUAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vonUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vpOYAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToSecond">
        <ownedComment xmi:id="_0vpOYQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vpOYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vp1cAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0vp1cQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vp1cguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vp1dAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentPatientRoleHasId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vp1dQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not recordTarget.patientRole.id->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vqcgQuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentAssignedAuthorHasAddr">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vqcgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not author.assignedAuthor.addr->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vrDkAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentAssignedAuthorHasTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vrDkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not author.assignedAuthor.telecom->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vrqoAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vrqoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not custodian.assignedCustodian.representedCustodianOrganization.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vsRsAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vsRsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not custodian.assignedCustodian.representedCustodianOrganization.id->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vsRswuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vsRtAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not custodian.assignedCustodian.representedCustodianOrganization.name.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vs4wAuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vs4wQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not custodian.assignedCustodian.representedCustodianOrganization.telecom.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vtf0AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vtf0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not custodian.assignedCustodian.representedCustodianOrganization.addr.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vuG4AuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasNonXMLBodyText">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vuG4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.component.nonXMLBody.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vuG4wuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasTextReferenceOrRepresentation">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vuG5AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.component.nonXMLBody.text.reference.oclIsUndefined() and self.component.nonXMLBody.text.reference.isDefined('value')) or (self.component.nonXMLBody.text.representation = datatypes::BinaryDataEncoding::B64 and self.component.nonXMLBody.text.isDefined('mediaType') and self.component.nonXMLBody.text.getText().size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0vut8QuuEeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentHasTextMediaTypeValueSet">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0vut8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.component.nonXMLBody.text.isDefined('mediaType') implies (self.component.nonXMLBody.text.mediaType = 'application/msword' or self.component.nonXMLBody.text.mediaType = 'application/pdf' or self.component.nonXMLBody.text.mediaType = 'text/plain' or self.component.nonXMLBody.text.mediaType = 'text/rtf' or self.component.nonXMLBody.text.mediaType = 'text/html' or self.component.nonXMLBody.text.mediaType = 'image/gif' or self.component.nonXMLBody.text.mediaType = 'image/tiff' or self.component.nonXMLBody.text.mediaType = 'image/jpeg' or self.component.nonXMLBody.text.mediaType = 'image/png')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oX0uYAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTemplateId" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oX0uYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.19.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZs9sAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentRealmCode" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZs9sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZvZ8Au0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTypeId" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZvZ8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZxPIAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentId" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZxPIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZzEUAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentCode" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZzrYAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZ1gkAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentTitle" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZ1gkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZ380Au0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentEffectiveTime" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZ380Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oZ5yAAu0EeGvGIuLiiZuOg" name="UnstructuredOrScannedDocumentLanguageCode" constrainedElement="_0uQuUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oZ5yAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0vvVBQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0vxKMAuuEeGvGIuLiiZuOg" name="ReferralSummary">
      <ownedComment xmi:id="_0wfi8AuuEeGvGIuLiiZuOg" annotatedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0wAawguuEeGvGIuLiiZuOg" name="ReferralSummaryPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wAawwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wBB0AuuEeGvGIuLiiZuOg" name="ReferralSummaryRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wBB0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wBo4AuuEeGvGIuLiiZuOg" name="ReferralSummaryRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wBo4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wCP8AuuEeGvGIuLiiZuOg" name="ReferralSummaryOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0wCP8QuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wCP8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wC3AQuuEeGvGIuLiiZuOg" name="ReferralSummaryTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wC3AguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wEFIAuuEeGvGIuLiiZuOg" name="ReferralSummaryTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wEFIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wEsMAuuEeGvGIuLiiZuOg" name="ReferralSummaryTelephoneMatchesRegex">
        <ownedComment xmi:id="_0wEsMQuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0wEsMguuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wEsMwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wFTQAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wFTQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wF6UAuuEeGvGIuLiiZuOg" name="ReferralSummaryUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0wF6UQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wF6UguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wGhYAuuEeGvGIuLiiZuOg" name="ReferralSummaryTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wGhYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wHIcAuuEeGvGIuLiiZuOg" name="ReferralSummaryIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wHIcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wJksAuuEeGvGIuLiiZuOg" name="ReferralSummaryOidLength">
        <ownedComment xmi:id="_0wJksQuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wJksguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wKLwAuuEeGvGIuLiiZuOg" name="ReferralSummaryLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wKLwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wMA8AuuEeGvGIuLiiZuOg" name="ReferralSummarySetIdAndVersionNumber">
        <ownedComment xmi:id="_0wMA8QuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wMA8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wMoAAuuEeGvGIuLiiZuOg" name="ReferralSummarySetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wMoAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wNPEAuuEeGvGIuLiiZuOg" name="ReferralSummaryCopyTimeNotPresent">
        <ownedComment xmi:id="_0wNPEQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wNPEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wOdMAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wOdMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wPEQAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wPEQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wPrUAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0wPrUQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wPrUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wRggAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wRggQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wSuoAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasAuthorTime">
        <ownedComment xmi:id="_0wSuoQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wSuoguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wTVsAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wTVsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wT8wAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wT8wQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wUj0AuuEeGvGIuLiiZuOg" name="ReferralSummaryHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wUj0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wVK4AuuEeGvGIuLiiZuOg" name="ReferralSummaryHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wVK4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wVx8AuuEeGvGIuLiiZuOg" name="ReferralSummaryHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wVx8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wWZAAuuEeGvGIuLiiZuOg" name="ReferralSummaryHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wWZAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wb4kQuuEeGvGIuLiiZuOg" name="ReferralSummaryLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wb4kguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wcfoAuuEeGvGIuLiiZuOg" name="ReferralSummaryAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wcfoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wdGsAuuEeGvGIuLiiZuOg" name="ReferralSummaryTimePreciseToSecond">
        <ownedComment xmi:id="_0wdGsQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wdGsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0wdtwAuuEeGvGIuLiiZuOg" name="ReferralSummaryTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0wdtwQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0wdtwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0weU0AuuEeGvGIuLiiZuOg" name="ReferralSummaryMedicalSummaryProblemConcernEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0weU0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getActs()->exists(act : cda::Act | act.oclIsKindOf(ihe::ProblemConcernEntry)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0weU0wuuEeGvGIuLiiZuOg" name="ReferralSummaryMedicalSummaryAllergyConcernEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0weU1AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getActs()->exists(act : cda::Act | act.oclIsKindOf(ihe::AllergyIntoleranceConcern)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0we74AuuEeGvGIuLiiZuOg" name="ReferralSummaryMedicalSummaryMedications">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0we74QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getSubstanceAdministrations()->exists(sub : cda::SubstanceAdministration | sub.oclIsKindOf(ihe::Medication)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oaJpoAu0EeGvGIuLiiZuOg" name="ReferralSummaryTemplateId" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oaJpoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.48.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oawGkAu0EeGvGIuLiiZuOg" name="ReferralSummaryRealmCode" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oawGkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oax7wAu0EeGvGIuLiiZuOg" name="ReferralSummaryTypeId" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oax7wQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oazw8Au0EeGvGIuLiiZuOg" name="ReferralSummaryId" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oazw8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oa20QAu0EeGvGIuLiiZuOg" name="ReferralSummaryCode" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oa20QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oa4pcAu0EeGvGIuLiiZuOg" name="ReferralSummaryTitle" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oa5QgAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oa7FsAu0EeGvGIuLiiZuOg" name="ReferralSummaryEffectiveTime" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oa7FsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oa864Au0EeGvGIuLiiZuOg" name="ReferralSummaryLanguageCode" constrainedElement="_0vxKMAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oa864Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0wfi8QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0whYIAuuEeGvGIuLiiZuOg" name="DischargeSummary">
      <ownedComment xmi:id="_0xkhAAuuEeGvGIuLiiZuOg" annotatedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0xExwAuuEeGvGIuLiiZuOg" name="DischargeSummaryPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xExwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xFY0QuuEeGvGIuLiiZuOg" name="DischargeSummaryRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xFY0guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xF_4AuuEeGvGIuLiiZuOg" name="DischargeSummaryRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xF_4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xGm8AuuEeGvGIuLiiZuOg" name="DischargeSummaryOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0xGm8QuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xGm8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xHOAAuuEeGvGIuLiiZuOg" name="DischargeSummaryTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xHOAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xH1EAuuEeGvGIuLiiZuOg" name="DischargeSummaryTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xH1EQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xH1EwuuEeGvGIuLiiZuOg" name="DischargeSummaryTelephoneMatchesRegex">
        <ownedComment xmi:id="_0xH1FAuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0xH1FQuuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xH1FguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xIcIAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xIcIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xJDMAuuEeGvGIuLiiZuOg" name="DischargeSummaryUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0xJDMQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xJDMguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xJqQAuuEeGvGIuLiiZuOg" name="DischargeSummaryTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xJqQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xKRUQuuEeGvGIuLiiZuOg" name="DischargeSummaryIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xKRUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xMtkAuuEeGvGIuLiiZuOg" name="DischargeSummaryOidLength">
        <ownedComment xmi:id="_0xMtkQuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xMtkguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xNUoAuuEeGvGIuLiiZuOg" name="DischargeSummaryLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xNUoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xPJ0QuuEeGvGIuLiiZuOg" name="DischargeSummarySetIdAndVersionNumber">
        <ownedComment xmi:id="_0xPJ0guuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xPJ0wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xQX8AuuEeGvGIuLiiZuOg" name="DischargeSummarySetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xQX8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xQ_AAuuEeGvGIuLiiZuOg" name="DischargeSummaryCopyTimeNotPresent">
        <ownedComment xmi:id="_0xQ_AQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xQ_AguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xRmEAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xRmEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xSNIAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xSNIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xS0MAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0xS0MQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xS0MguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xVQcAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xVQcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xV3gAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasAuthorTime">
        <ownedComment xmi:id="_0xV3gQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xV3gguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xWekAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xWekQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xXFoAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xXFoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xXssAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xXssQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xYTwAuuEeGvGIuLiiZuOg" name="DischargeSummaryHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xYTwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xZh4AuuEeGvGIuLiiZuOg" name="DischargeSummaryHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xZh4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xaI8AuuEeGvGIuLiiZuOg" name="DischargeSummaryHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xaI8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xfogAuuEeGvGIuLiiZuOg" name="DischargeSummaryLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xfogQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xgPkAuuEeGvGIuLiiZuOg" name="DischargeSummaryAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xgPkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xg2oAuuEeGvGIuLiiZuOg" name="DischargeSummaryTimePreciseToSecond">
        <ownedComment xmi:id="_0xg2oQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xg2oguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xiEwAuuEeGvGIuLiiZuOg" name="DischargeSummaryTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0xiEwQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xiEwguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xir0AuuEeGvGIuLiiZuOg" name="DischargeSummaryMedicalSummaryProblemConcernEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xir0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getActs()->exists(act : cda::Act | act.oclIsKindOf(ihe::ProblemConcernEntry)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xjS4AuuEeGvGIuLiiZuOg" name="DischargeSummaryMedicalSummaryAllergyConcernEntry">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xjS4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getActs()->exists(act : cda::Act | act.oclIsKindOf(ihe::AllergyIntoleranceConcern)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xj58AuuEeGvGIuLiiZuOg" name="DischargeSummaryMedicalSummaryMedications">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xj58QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(sect : cda::Section | sect.getSubstanceAdministrations()->exists(sub : cda::SubstanceAdministration | sub.oclIsKindOf(ihe::Medication)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_obE2sAu0EeGvGIuLiiZuOg" name="DischargeSummaryTemplateId" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_obE2sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.3.88.11.48.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_obr6sAu0EeGvGIuLiiZuOg" name="DischargeSummaryRealmCode" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_obr6sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_obuW8Au0EeGvGIuLiiZuOg" name="DischargeSummaryTypeId" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_obuW8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_obvlEAu0EeGvGIuLiiZuOg" name="DischargeSummaryId" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_obvlEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_obyoYAu0EeGvGIuLiiZuOg" name="DischargeSummaryCode" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_obyoYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ob1EoAu0EeGvGIuLiiZuOg" name="DischargeSummaryTitle" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob1EoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ob3g4Au0EeGvGIuLiiZuOg" name="DischargeSummaryEffectiveTime" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob3g4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ob5WEAu0EeGvGIuLiiZuOg" name="DischargeSummaryLanguageCode" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob5WEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ob9AcAu0EeGvGIuLiiZuOg" name="DischargeSummaryProblemListSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob9AcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ob-1owu0EeGvGIuLiiZuOg" name="DischargeSummaryAdmissionMedicationHistorySection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob-1pAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdmissionMedicationHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocAq1Qu0EeGvGIuLiiZuOg" name="DischargeSummaryHospitalAdmissionDiagnosisSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocAq1gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalAdmissionDiagnosisSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocCgBQu0EeGvGIuLiiZuOg" name="DischargeSummaryAdvanceDirectivesSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocDHEAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdvanceDirectivesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocE8QAu0EeGvGIuLiiZuOg" name="DischargeSummaryAllergiesReactionsSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocE8QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocGxcAu0EeGvGIuLiiZuOg" name="DischargeSummaryDischargeDiagnosisSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocGxcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DischargeDiagnosisSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocImpQu0EeGvGIuLiiZuOg" name="DischargeSummaryDischargeDiet" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocJNsAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DischargeDiet))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocLC4Au0EeGvGIuLiiZuOg" name="DischargeSummaryHospitalDischargeMedicationsSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocLC4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalDischargeMedicationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocM4EAu0EeGvGIuLiiZuOg" name="DischargeSummaryDiagnosticResultsSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocM4EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticResultsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocOtQgu0EeGvGIuLiiZuOg" name="DischargeSummaryFunctionalStatusSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocOtQwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FunctionalStatusSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocQidQu0EeGvGIuLiiZuOg" name="DischargeSummaryHistoryOfPresentIllness" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocRJgAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPresentIllness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocS-sAu0EeGvGIuLiiZuOg" name="DischargeSummaryHospitalCourseSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocS-sQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalCourseSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocUz4Au0EeGvGIuLiiZuOg" name="DischargeSummaryMedicalEquipmentSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocUz4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicalEquipmentSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocWpEwu0EeGvGIuLiiZuOg" name="DischargeSummaryPhysicalExamSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocWpFAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocZFUAu0EeGvGIuLiiZuOg" name="DischargeSummaryPlanOfCareSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocZFUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PlanOfCareSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oca6gAu0EeGvGIuLiiZuOg" name="DischargeSummaryHistoryOfPastIllnessSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oca6gQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPastIllnessSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_occvsAu0EeGvGIuLiiZuOg" name="DischargeSummaryReviewOfSystemsSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_occvsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocek5Qu0EeGvGIuLiiZuOg" name="DischargeSummaryMedicationsAdministeredSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocek5gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsAdministeredSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ochBIAu0EeGvGIuLiiZuOg" name="DischargeSummaryVitalSignsSection" constrainedElement="_0whYIAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ochBIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0xkhAQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_ob-OkAu0EeGvGIuLiiZuOg" name="getProblemListSection" isQuery="true" bodyCondition="_ob-1oQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ob-1oQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ob-OkAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob-1ogu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))->asSequence()->first().oclAsType(consol::ProblemListSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ob-OkQu0EeGvGIuLiiZuOg" type="_0f8lgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ob-1oAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocAq0Au0EeGvGIuLiiZuOg" name="getAdmissionMedicationHistorySection" isQuery="true" bodyCondition="_ocAq0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocAq0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocAq0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocAq1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdmissionMedicationHistorySection))->asSequence()->first().oclAsType(consol::AdmissionMedicationHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocAq0Qu0EeGvGIuLiiZuOg" type="_0mXWkguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocAq0gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocCgAAu0EeGvGIuLiiZuOg" name="getHospitalAdmissionDiagnosisSection" isQuery="true" bodyCondition="_ocCgAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocCgAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocCgAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocCgBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalAdmissionDiagnosisSection))->asSequence()->first().oclAsType(consol::HospitalAdmissionDiagnosisSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocCgAQu0EeGvGIuLiiZuOg" type="_0mRP8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocCgAgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocEVMAu0EeGvGIuLiiZuOg" name="getAdvanceDirectivesSection" isQuery="true" bodyCondition="_ocEVMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocEVMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocEVMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocEVNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AdvanceDirectivesSection))->asSequence()->first().oclAsType(consol::AdvanceDirectivesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocEVMQu0EeGvGIuLiiZuOg" type="_0e5coAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocEVMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocGKYAu0EeGvGIuLiiZuOg" name="getAllergiesReactionsSection" isQuery="true" bodyCondition="_ocGKYwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocGKYwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocGKYAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocGKZAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))->asSequence()->first().oclAsType(consol::AllergiesReactionsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocGKYQu0EeGvGIuLiiZuOg" type="_0f0psAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocGKYgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocImoAu0EeGvGIuLiiZuOg" name="getDischargeDiagnosisSection" isQuery="true" bodyCondition="_ocImowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocImowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocImoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocImpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DischargeDiagnosisSection))->asSequence()->first().oclAsType(consol::DischargeDiagnosisSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocImoQu0EeGvGIuLiiZuOg" type="_0mRP_wuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocImogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocKb0Au0EeGvGIuLiiZuOg" name="getDischargeDiet" isQuery="true" bodyCondition="_ocKb0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocKb0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocKb0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocKb1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DischargeDiet))->asSequence()->first().oclAsType(consol::DischargeDiet)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocKb0Qu0EeGvGIuLiiZuOg" type="_0xBucAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocKb0gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocMRAAu0EeGvGIuLiiZuOg" name="getHospitalDischargeMedicationsSection" isQuery="true" bodyCondition="_ocMRAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocMRAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocMRAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocMRBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalDischargeMedicationsSection))->asSequence()->first().oclAsType(consol::HospitalDischargeMedicationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocMRAQu0EeGvGIuLiiZuOg" type="_0mXWmwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocMRAgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocOGMAu0EeGvGIuLiiZuOg" name="getDiagnosticResultsSection" isQuery="true" bodyCondition="_ocOtQAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocOtQAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocOGMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocOtQQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticResultsSection))->asSequence()->first().oclAsType(consol::DiagnosticResultsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocOGMQu0EeGvGIuLiiZuOg" type="_0lJOkAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocOGMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocQicAu0EeGvGIuLiiZuOg" name="getFunctionalStatusSection" isQuery="true" bodyCondition="_ocQicwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocQicwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocQicAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocQidAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FunctionalStatusSection))->asSequence()->first().oclAsType(consol::FunctionalStatusSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocQicQu0EeGvGIuLiiZuOg" type="_0efM8wuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocQicgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocSXoAu0EeGvGIuLiiZuOg" name="getHistoryOfPresentIllness" isQuery="true" bodyCondition="_ocSXowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocSXowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocSXoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocSXpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPresentIllness))->asSequence()->first().oclAsType(consol::HistoryOfPresentIllness)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocSXoQu0EeGvGIuLiiZuOg" type="_0mLJWAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocSXogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocUM0Au0EeGvGIuLiiZuOg" name="getHospitalCourseSection" isQuery="true" bodyCondition="_ocUM0wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocUM0wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocUM0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocUM1Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HospitalCourseSection))->asSequence()->first().oclAsType(consol::HospitalCourseSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocUM0Qu0EeGvGIuLiiZuOg" type="_0paqkAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocUM0gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocWCAAu0EeGvGIuLiiZuOg" name="getMedicalEquipmentSection" isQuery="true" bodyCondition="_ocWpEQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocWpEQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocWCAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocWpEgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicalEquipmentSection))->asSequence()->first().oclAsType(consol::MedicalEquipmentSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocWCAQu0EeGvGIuLiiZuOg" type="_0eXRIAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocWpEAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocYeQAu0EeGvGIuLiiZuOg" name="getPhysicalExamSection" isQuery="true" bodyCondition="_ocYeQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocYeQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocYeQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocYeRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))->asSequence()->first().oclAsType(consol::PhysicalExamSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocYeQQu0EeGvGIuLiiZuOg" type="_0mjj0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocYeQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocaTcAu0EeGvGIuLiiZuOg" name="getPlanOfCareSection" isQuery="true" bodyCondition="_ocaTcwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocaTcwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocaTcAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocaTdAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PlanOfCareSection))->asSequence()->first().oclAsType(consol::PlanOfCareSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocaTcQu0EeGvGIuLiiZuOg" type="_0igxUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocaTcgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_occIoAu0EeGvGIuLiiZuOg" name="getHistoryOfPastIllnessSection" isQuery="true" bodyCondition="_occIowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_occIowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_occIoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_occIpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPastIllnessSection))->asSequence()->first().oclAsType(consol::HistoryOfPastIllnessSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_occIoQu0EeGvGIuLiiZuOg" type="_0l41cAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_occIogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocek4Au0EeGvGIuLiiZuOg" name="getReviewOfSystemsSection" isQuery="true" bodyCondition="_ocek4wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocek4wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocek4Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocek5Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSection))->asSequence()->first().oclAsType(consol::ReviewOfSystemsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocek4Qu0EeGvGIuLiiZuOg" type="_0pUj_AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocek4gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ocgaEAu0EeGvGIuLiiZuOg" name="getMedicationsAdministeredSection" isQuery="true" bodyCondition="_ocgaEwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ocgaEwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ocgaEAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocgaFAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsAdministeredSection))->asSequence()->first().oclAsType(consol::MedicationsAdministeredSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ocgaEQu0EeGvGIuLiiZuOg" type="_0mddMguuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ocgaEgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ociPQAu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_ociPQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ociPQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ociPQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ociPRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))->asSequence()->first().oclAsType(consol::VitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ociPQQu0EeGvGIuLiiZuOg" type="_0kV9UAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ociPQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0xBucAuuEeGvGIuLiiZuOg" name="DischargeDiet">
      <ownedComment xmi:id="_0xBucQuuEeGvGIuLiiZuOg" annotatedElement="_0xBucAuuEeGvGIuLiiZuOg">
        <body>This section records a narrative description of the expectations for diet, including proposals, goals, and order requests for monitoring, tracking, or improving the dietary control of the patient, used in a discharge from a facility such as an emergency department, hospital, or nursing home.</body>
      </ownedComment>
      <ownedRule xmi:id="_ocoV4Au0EeGvGIuLiiZuOg" name="DischargeDietTemplateId" constrainedElement="_0xBucAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocoV4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.3.33')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocrZMAu0EeGvGIuLiiZuOg" name="DischargeDietCode" constrainedElement="_0xBucAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ocrZMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '42344-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0xEKsQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0xpZgAuuEeGvGIuLiiZuOg" name="HistoryAndPhysical">
      <ownedComment xmi:id="_0y-PMAuuEeGvGIuLiiZuOg" annotatedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0yl0sAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalPersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yl0sQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ymbwAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ymbwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ynC0AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ynC0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ynp4AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0ynp4QuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ynp4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yoQ8QuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yoQ8guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ypfEAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ypfEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yqGIAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTelephoneMatchesRegex">
        <ownedComment xmi:id="_0yqGIQuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0yqGIguuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yqGIwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yrUQAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yrUQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yr7UAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0yr7UQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yr7UguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ysiYAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ysiYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ytJcAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ytJcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yuXkAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalOidLength">
        <ownedComment xmi:id="_0yuXkQuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yuXkguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yu-oAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yu-oQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ywMwQuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalSetIdAndVersionNumber">
        <ownedComment xmi:id="_0ywMwguuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ywMwwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0ywz0AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0ywz0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yxa4AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalCopyTimeNotPresent">
        <ownedComment xmi:id="_0yxa4QuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yxa4guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yyB8AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yyB8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yyB8wuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yyB9AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0yypAQuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0yypAguuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yypAwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y0eMAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y0eMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y1FQAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasAuthorTime">
        <ownedComment xmi:id="_0y1FQQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y1FQguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y1FRAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y1FRQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y1sUQuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y1sUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y2TYAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y2TYQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y26cAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y26cQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y3hgAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y3hgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y3hgwuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y3hhAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y7y8AuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y7y8QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y8aAAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y8aAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y9BEAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTimePreciseToSecond">
        <ownedComment xmi:id="_0y9BEQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y9BEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0y9BFAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0y9BFQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0y9BFguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xpZiguuEeGvGIuLiiZuOg" name="HistoryAndPhysicalAssessmentAndPlan" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xpZiwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentAndPlanSection))&#xD;&#xA;   xor (self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentSection))&#xD;&#xA;      and self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::PlanSection)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xpZjAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalBothAssessmentAndPlan" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xpZjQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>let assessmentExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentSection)) in&#xD;&#xA;  let planExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::PlanSection))&#xD;&#xA;    in (assessmentExists or planExists) implies (assessmentExists and planExists)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xpZjguuEeGvGIuLiiZuOg" name="HistoryAndPhysicalReasonForVisitAndChiefComplaint" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xpZjwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ReasonForVisitAndChiefComplaintSection))&#xD;&#xA;   xor (self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ReasonForVisitSection))&#xD;&#xA;      and self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ChiefComplaintSection)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0xpZkAuuEeGvGIuLiiZuOg" name="HistoryAndPhysicalBothReasonForVisitAndChiefComplaint" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0xpZkQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>let reasonExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ReasonForVisitSection)) in&#xD;&#xA;  let complaintExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ChiefComplaintSection))&#xD;&#xA;    in (reasonExists or complaintExists) implies (reasonExists and complaintExists)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ocsnUAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalTemplateId" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_octOYAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odhtwAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalRealmCode" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odhtwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odkKAAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalTypeId" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odkKAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odlYIAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalId" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odlYIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odobcAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalCode" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odobcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odrewAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalTitle" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odrewQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odtT8Au0EeGvGIuLiiZuOg" name="HistoryAndPhysicalEffectiveTime" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odtT8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odvJIAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalLanguageCode" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odvJIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_odyMcAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalHistoryOfPresentIllness" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_odyMcQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IHEHistoryOfPresentIllness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od0osAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalPastMedicalHistorySection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od0osQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPastIllnessSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od2d4Au0EeGvGIuLiiZuOg" name="HistoryAndPhysicalMedicationsSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od2d4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od4TEAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalAlertsSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od4TEQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od6IQQu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalSocialHistorySection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od6IQgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od79dQu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalFamilyHistorySection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od79dgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_od-ZsAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalReviewOfSystemsSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_od-ZsQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSectionIHE))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeAO5Au0EeGvGIuLiiZuOg" name="HistoryAndPhysicalPhysicalExaminationSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeAO5Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeCrIAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalVitalSignsSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeCrIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::CCDVitalSignsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeEgUAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalGeneralStatusSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeEgUQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralStatusSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeGVhQu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalDiagnosticFindings" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeGVhgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeIxwAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalProblemSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeIxwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeKm8Au0EeGvGIuLiiZuOg" name="HistoryAndPhysicalProceduresSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeKm8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeMcIAu0EeGvGIuLiiZuOg" name="HistoryAndPhysicalImmunizationsSection" constrainedElement="_0xpZgAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeMcIQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0y-2QAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_od0BoAu0EeGvGIuLiiZuOg" name="getHistoryOfPresentIllness" isQuery="true" bodyCondition="_od0Bowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od0Bowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od0BoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od0BpAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IHEHistoryOfPresentIllness))->asSequence()->first().oclAsType(consol::IHEHistoryOfPresentIllness)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od0BoQu0EeGvGIuLiiZuOg" type="_0yJv0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od0Bogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od120Au0EeGvGIuLiiZuOg" name="getPastMedicalHistorySection" isQuery="true" bodyCondition="_od120wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od120wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od120Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od121Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::HistoryOfPastIllnessSection))->asSequence()->first().oclAsType(consol::HistoryOfPastIllnessSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od120Qu0EeGvGIuLiiZuOg" type="_0l41cAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od120gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od3sAAu0EeGvGIuLiiZuOg" name="getMedicationsSection" isQuery="true" bodyCondition="_od3sAwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od3sAwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od3sAAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od3sBAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))->asSequence()->first().oclAsType(consol::MedicationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od3sAQu0EeGvGIuLiiZuOg" type="_0iWZQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od3sAgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od5hMAu0EeGvGIuLiiZuOg" name="getAlertsSection" isQuery="true" bodyCondition="_od5hMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od5hMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od5hMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od6IQAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))->asSequence()->first().oclAsType(consol::AllergiesReactionsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od5hMQu0EeGvGIuLiiZuOg" type="_0f0psAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od5hMgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od79cAu0EeGvGIuLiiZuOg" name="getSocialHistorySection" isQuery="true" bodyCondition="_od79cwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od79cwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od79cAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od79dAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))->asSequence()->first().oclAsType(consol::SocialHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od79cQu0EeGvGIuLiiZuOg" type="_0dMzgwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od79cgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od9yoAu0EeGvGIuLiiZuOg" name="getFamilyHistorySection" isQuery="true" bodyCondition="_od9yowu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_od9yowu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od9yoAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_od9ypAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))->asSequence()->first().oclAsType(consol::FamilyHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_od9yoQu0EeGvGIuLiiZuOg" type="_0cH1cAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_od9yogu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_od_n0Au0EeGvGIuLiiZuOg" name="getReviewOfSystemsSection" isQuery="true" bodyCondition="_oeAO4gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeAO4gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_od_n0Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeAO4wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSectionIHE))->asSequence()->first().oclAsType(consol::ReviewOfSystemsSectionIHE)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeAO4Au0EeGvGIuLiiZuOg" type="_0yOoUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeAO4Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeCEEAu0EeGvGIuLiiZuOg" name="getPhysicalExaminationSection" isQuery="true" bodyCondition="_oeCEEwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeCEEwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeCEEAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeCEFAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))->asSequence()->first().oclAsType(consol::PhysicalExamSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeCEEQu0EeGvGIuLiiZuOg" type="_0mjj0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeCEEgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeD5QAu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_oeD5Qwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeD5Qwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeD5QAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeD5RAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::CCDVitalSignsSection))->asSequence()->first().oclAsType(consol::CCDVitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeD5QQu0EeGvGIuLiiZuOg" type="_0yTg0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeD5Qgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeGVgAu0EeGvGIuLiiZuOg" name="getGeneralStatusSection" isQuery="true" bodyCondition="_oeGVgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeGVgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeGVgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeGVhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralStatusSection))->asSequence()->first().oclAsType(consol::GeneralStatusSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeGVgQu0EeGvGIuLiiZuOg" type="_0ya1kAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeGVggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeIKsAu0EeGvGIuLiiZuOg" name="getDiagnosticFindings" isQuery="true" bodyCondition="_oeIKswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeIKswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeIKsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeIKtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))->asSequence()->first().oclAsType(consol::DiagnosticFindings)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeIKsQu0EeGvGIuLiiZuOg" type="_0yfuEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeIKsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeJ_4Au0EeGvGIuLiiZuOg" name="getProblemSection" isQuery="true" bodyCondition="_oeJ_4wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeJ_4wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeJ_4Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeJ_5Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))->asSequence()->first().oclAsType(consol::ProblemListSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeJ_4Qu0EeGvGIuLiiZuOg" type="_0f8lgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeJ_4gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeL1EAu0EeGvGIuLiiZuOg" name="getProceduresSection" isQuery="true" bodyCondition="_oeL1Ewu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeL1Ewu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeL1EAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeL1FAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))->asSequence()->first().oclAsType(consol::SurgeriesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeL1EQu0EeGvGIuLiiZuOg" type="_0jlIUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeL1Egu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oeORUAu0EeGvGIuLiiZuOg" name="getImmunizationsSection" isQuery="true" bodyCondition="_oeORUwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeORUwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeORUAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeORVAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))->asSequence()->first().oclAsType(consol::ImmunizationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeORUQu0EeGvGIuLiiZuOg" type="_0guooAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeORUgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0yJv0AuuEeGvGIuLiiZuOg" name="IHEHistoryOfPresentIllness">
      <ownedComment xmi:id="_0yJv0QuuEeGvGIuLiiZuOg" annotatedElement="_0yJv0AuuEeGvGIuLiiZuOg">
        <body>Conforms to IHE PCC template.</body>
      </ownedComment>
      <ownedRule xmi:id="_oeTw4Au0EeGvGIuLiiZuOg" name="IHEHistoryOfPresentIllnessTemplateId" constrainedElement="_0yJv0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeUX8Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.3.4')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeW0MAu0EeGvGIuLiiZuOg" name="IHEHistoryOfPresentIllnessCode" constrainedElement="_0yJv0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeW0MQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10164-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0yMzIQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0yOoUAuuEeGvGIuLiiZuOg" name="ReviewOfSystemsSectionIHE">
      <ownedComment xmi:id="_0yOoUQuuEeGvGIuLiiZuOg" annotatedElement="_0yOoUAuuEeGvGIuLiiZuOg">
        <body>The review of systems is a relevant collection of symptoms and function systematically&#xD;
gathered by a clinician. It includes symptoms the patient is currently experiencing,&#xD;
some of which were not elicited during the history of present illness, as well as a&#xD;
potentially large number of pertinent negatives, e.g., symptoms that the patient was&#xD;
specifically asked if they had experienced or were currently experiencing, but had&#xD;
denied experiencing.</body>
      </ownedComment>
      <ownedRule xmi:id="_oeYpYAu0EeGvGIuLiiZuOg" name="ReviewOfSystemsSectionIHETemplateId" constrainedElement="_0yOoUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeZQcAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '1.3.6.1.4.1.19376.1.5.3.1.3.18')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oebssAu0EeGvGIuLiiZuOg" name="ReviewOfSystemsSectionIHECode" constrainedElement="_0yOoUAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oebssQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10187-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0yRroQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0yTg0AuuEeGvGIuLiiZuOg" name="CCDVitalSignsSection">
      <ownedComment xmi:id="_0yTg0QuuEeGvGIuLiiZuOg" annotatedElement="_0yTg0AuuEeGvGIuLiiZuOg">
        <body>The Vital Signs section contains measured vital signs at the time of the examination.&#xD;
Measurements may include some or all of the following: blood pressure, heart rate,&#xD;
respiratory rate, body temperature, and pulse oximetry. Comments on relative trends&#xD;
may be appropriate, but not required. This section can be a first-level section or nested&#xD;
under Physical Exam.</body>
      </ownedComment>
      <ownedRule xmi:id="_0yTg0guuEeGvGIuLiiZuOg" name="CCDVitalSignsSectionClinicalStatements">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.cdt/model/cdt_Ecore.uml#_KSTmQGjOEd-tUpkWYQgJlQ"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0yTg0wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entry->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oedh4Au0EeGvGIuLiiZuOg" name="CCDVitalSignsSectionTemplateId" constrainedElement="_0yTg0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oedh4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.4')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeglMAu0EeGvGIuLiiZuOg" name="CCDVitalSignsSectionCode" constrainedElement="_0yTg0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeglMQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '8716-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeiaYAu0EeGvGIuLiiZuOg" name="CCDVitalSignsSectionText" constrainedElement="_0yTg0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oejBcAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oekPkAu0EeGvGIuLiiZuOg" name="CCDVitalSignsSectionVitalSignsOrganizer" constrainedElement="_0yTg0AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oekPkQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->one(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::VitalSignsOrganizer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0yZncAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oeldsAu0EeGvGIuLiiZuOg" name="getVitalSignsOrganizer" isQuery="true" bodyCondition="_oeldswu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oeldswu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oeldsAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeldtAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::VitalSignsOrganizer))->asSequence()->first().oclAsType(consol::VitalSignsOrganizer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oeldsQu0EeGvGIuLiiZuOg" type="_0kcD8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oeldsgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0ya1kAuuEeGvGIuLiiZuOg" name="GeneralStatusSection">
      <ownedComment xmi:id="_0ya1kQuuEeGvGIuLiiZuOg" annotatedElement="_0ya1kAuuEeGvGIuLiiZuOg">
        <body>The General Status section describes general observations and readily observable&#xD;
attributes of the patient, including affect and demeanor, apparent age compared to&#xD;
actual age, gender, ethnicity, nutritional status based on appearance, body build and&#xD;
habitus (e.g., muscular, cachectic, obese), developmental or other deformities, gait and&#xD;
mobility, personal hygiene, evidence of distress, and voice quality and speech. These&#xD;
observations may be nested under this heading or directly under the Physical Exam&#xD;
heading.</body>
      </ownedComment>
      <ownedRule xmi:id="_oeldtQu0EeGvGIuLiiZuOg" name="GeneralStatusSectionTemplateId" constrainedElement="_0ya1kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oemEwAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.5')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oeohAAu0EeGvGIuLiiZuOg" name="GeneralStatusSectionCode" constrainedElement="_0ya1kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeohAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10210-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0yef8AuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0yfuEAuuEeGvGIuLiiZuOg" name="DiagnosticFindings">
      <ownedComment xmi:id="_0yfuEQuuEeGvGIuLiiZuOg" annotatedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section contains the results of observations generated by laboratories, imaging&#xD;
procedures, and other procedures. The scope includes hematology, chemistry, serology,&#xD;
virology, toxicology, microbiology, plain x-ray, ultrasound, CT, MRI, angiography,&#xD;
cardiac echo, nuclear medicine, pathology, and procedure observations. The section&#xD;
usually includes notable results such as abnormal values or relevant trends, and may&#xD;
contain all results for the period of time being documented.&lt;/p>&#xD;
&#xD;
&lt;p>In some situations, such in an emergency department diagnostic findings may not be&#xD;
available when a Consultation Note is released. As explained in 4.1 Section Descriptions&#xD;
above, a required section for which no content is available must contain some&#xD;
indication of such.&lt;/p>&#xD;
&#xD;
&lt;p>Laboratory results are typically generated by laboratories providing analytic services in&#xD;
areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology,&#xD;
microbiology, and/or virology. These observations are based on analysis of specimens&#xD;
obtained from the patient and submitted to the laboratory.&lt;/p>&#xD;
&#xD;
&lt;p>Imaging results are typically generated by a clinician reviewing the output of an imaging&#xD;
procedure, such as where a cardiologist reports the left ventricular ejection fraction&#xD;
based on the review of a cardiac echo.&lt;/p>&#xD;
&#xD;
&lt;p>Procedure results are typically generated by a clinician wanting to provide more&#xD;
granular information about component observations made during the performance of a&#xD;
procedure, such as where a gastroenterologist reports the size of a polyp observed&#xD;
during a colonoscopy.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oeqWMQu0EeGvGIuLiiZuOg" name="ResultsSectionTemplateId" constrainedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oeqWMgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.1.14')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oetZgAu0EeGvGIuLiiZuOg" name="ResultsSectionCode" constrainedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oetZgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '30954-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oev1wAu0EeGvGIuLiiZuOg" name="DiagnosticFindingsTitle" constrainedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oev1wQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oexq8Au0EeGvGIuLiiZuOg" name="DiagnosticFindingsText" constrainedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oexq8Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oey5EAu0EeGvGIuLiiZuOg" name="DiagnosticFindingsResultOrganizer" constrainedElement="_0yfuEAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oey5EQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.entry->exists(entry : cda::Entry | not entry.organizer.oclIsUndefined() and entry.organizer.oclIsKindOf(consol::VitalSignsOrganizer))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0ykmkAuuEeGvGIuLiiZuOg" general="_0d8aYwuuEeGvGIuLiiZuOg"/>
      <ownedOperation xmi:id="_oe0HMAu0EeGvGIuLiiZuOg" name="getnullResultOrganizers" isQuery="true" bodyCondition="_oe0HMwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oe0HMwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oe0HMAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oe0HNAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getOrganizers()->select(organizer : cda::Organizer | not organizer.oclIsUndefined() and organizer.oclIsKindOf(consol::VitalSignsOrganizer)).oclAsType(consol::VitalSignsOrganizer)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oe0HMQu0EeGvGIuLiiZuOg" type="_0kcD8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oe0HMgu0EeGvGIuLiiZuOg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0zB5kAuuEeGvGIuLiiZuOg" name="ConsultationNote">
      <ownedComment xmi:id="_0z74gAuuEeGvGIuLiiZuOg" annotatedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0zkFEAuuEeGvGIuLiiZuOg" name="ConsultationNotePersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zkFEQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zksIAuuEeGvGIuLiiZuOg" name="ConsultationNoteRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zksIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zlTMAuuEeGvGIuLiiZuOg" name="ConsultationNoteRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zlTMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zl6QAuuEeGvGIuLiiZuOg" name="ConsultationNoteOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_0zl6QQuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zl6QguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zmhUAuuEeGvGIuLiiZuOg" name="ConsultationNoteTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zmhUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0znIYQuuEeGvGIuLiiZuOg" name="ConsultationNoteTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0znIYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0znvcQuuEeGvGIuLiiZuOg" name="ConsultationNoteTelephoneMatchesRegex">
        <ownedComment xmi:id="_0znvcguuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_0znvcwuuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0znvdAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zoWgQuuEeGvGIuLiiZuOg" name="ConsultationNoteHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zoWgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zo9kAuuEeGvGIuLiiZuOg" name="ConsultationNoteUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_0zo9kQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zo9kguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zpkoAuuEeGvGIuLiiZuOg" name="ConsultationNoteTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zpkoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zqLsAuuEeGvGIuLiiZuOg" name="ConsultationNoteIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zqLsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zrZ0AuuEeGvGIuLiiZuOg" name="ConsultationNoteOidLength">
        <ownedComment xmi:id="_0zrZ0QuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zrZ0guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zsA4AuuEeGvGIuLiiZuOg" name="ConsultationNoteLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zsA4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zt2EAuuEeGvGIuLiiZuOg" name="ConsultationNoteSetIdAndVersionNumber">
        <ownedComment xmi:id="_0zt2EQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zt2EguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zudIAuuEeGvGIuLiiZuOg" name="ConsultationNoteSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zudIQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zvEMAuuEeGvGIuLiiZuOg" name="ConsultationNoteCopyTimeNotPresent">
        <ownedComment xmi:id="_0zvEMQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zvEMguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zvrQAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zvrQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zvrQwuuEeGvGIuLiiZuOg" name="ConsultationNoteHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zvrRAuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zwSUAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasAdministrativeGenderCode">
        <ownedComment xmi:id="_0zwSUQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zwSUguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zyHgAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zyHgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zyukAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasAuthorTime">
        <ownedComment xmi:id="_0zyukQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zyukguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zyulAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zyulQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zzVoAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zzVoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zz8sAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zz8sQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z0jwAuuEeGvGIuLiiZuOg" name="ConsultationNoteHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z0jwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z1K0AuuEeGvGIuLiiZuOg" name="ConsultationNoteHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z1K0QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z1K0wuuEeGvGIuLiiZuOg" name="ConsultationNoteHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z1K1AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z5cQAuuEeGvGIuLiiZuOg" name="ConsultationNoteLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z5cQQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z6DUAuuEeGvGIuLiiZuOg" name="ConsultationNoteAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z6DUQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z6qYAuuEeGvGIuLiiZuOg" name="ConsultationNoteTimePreciseToSecond">
        <ownedComment xmi:id="_0z6qYQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z6qYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0z6qZAuuEeGvGIuLiiZuOg" name="ConsultationNoteTimePreciseToYearAndDay">
        <ownedComment xmi:id="_0z6qZQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0z6qZguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_0zB5mguuEeGvGIuLiiZuOg" name="ConsultationNoteReferralOrVisit" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0zB5mwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ReasonForReferralSection))&#xD;&#xA;   xor self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::ReasonForVisitSectionConsult))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oe0uQAu0EeGvGIuLiiZuOg" name="ConsultationNoteTemplateId" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oe0uQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.4')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofZWAAu0EeGvGIuLiiZuOg" name="ConsultationNoteRealmCode" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofZWAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofZWAgu0EeGvGIuLiiZuOg" name="ConsultationNoteTypeId" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofZWAwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofZWBAu0EeGvGIuLiiZuOg" name="ConsultationNoteId" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofZWBQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_offcoAu0EeGvGIuLiiZuOg" name="ConsultationNoteCode" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_offcoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_offcogu0EeGvGIuLiiZuOg" name="ConsultationNoteTitle" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_offcowu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofljQAu0EeGvGIuLiiZuOg" name="ConsultationNoteEffectiveTime" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofljQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofljQgu0EeGvGIuLiiZuOg" name="ConsultationNoteLanguageCode" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofljQwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofrp4Au0EeGvGIuLiiZuOg" name="ConsultationNoteHistoryOfPresentIllness" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp4Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IHEHistoryOfPresentIllness))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofrp5wu0EeGvGIuLiiZuOg" name="ConsultationNotePhysicalExamination" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp6Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofrp7gu0EeGvGIuLiiZuOg" name="ConsultationNoteProblemSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp7wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofrp9Qu0EeGvGIuLiiZuOg" name="ConsultationNoteProceduresSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp9gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofxwhQu0EeGvGIuLiiZuOg" name="ConsultationNotePastMedicalHistorySection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwhgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PastMedicalHistorySectionConsult))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofxwjAu0EeGvGIuLiiZuOg" name="ConsultationNoteImmunizationsSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwjQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ofxwkwu0EeGvGIuLiiZuOg" name="ConsultationNoteMedicationsSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwlAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of33JQu0EeGvGIuLiiZuOg" name="ConsultationNoteAlertsSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33Jgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of33LAu0EeGvGIuLiiZuOg" name="ConsultationNoteSocialHistorySection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33LQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of33Mwu0EeGvGIuLiiZuOg" name="ConsultationNoteFamilyHistorySection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33NAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of99xQu0EeGvGIuLiiZuOg" name="ConsultationNoteReviewOfSystemsSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of99xgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of99zAu0EeGvGIuLiiZuOg" name="ConsultationNoteVitalSignsSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of99zQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_of990wu0EeGvGIuLiiZuOg" name="ConsultationNoteGeneralStatusSection" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_of991Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralStatusSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ogEEZQu0EeGvGIuLiiZuOg" name="ConsultationNoteDiagnosticFindings" constrainedElement="_0zB5kAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogEEZgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0z74gQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_ofrp4gu0EeGvGIuLiiZuOg" name="getHistoryOfPresentIllness" isQuery="true" bodyCondition="_ofrp5Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofrp5Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofrp4gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp5gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::IHEHistoryOfPresentIllness))->asSequence()->first().oclAsType(consol::IHEHistoryOfPresentIllness)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofrp4wu0EeGvGIuLiiZuOg" type="_0yJv0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofrp5Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ofrp6Qu0EeGvGIuLiiZuOg" name="getPhysicalExamination" isQuery="true" bodyCondition="_ofrp7Au0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofrp7Au0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofrp6Qu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp7Qu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))->asSequence()->first().oclAsType(consol::PhysicalExamSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofrp6gu0EeGvGIuLiiZuOg" type="_0mjj0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofrp6wu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ofrp8Au0EeGvGIuLiiZuOg" name="getProblemSection" isQuery="true" bodyCondition="_ofrp8wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofrp8wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofrp8Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofrp9Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))->asSequence()->first().oclAsType(consol::ProblemListSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofrp8Qu0EeGvGIuLiiZuOg" type="_0f8lgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofrp8gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ofxwgAu0EeGvGIuLiiZuOg" name="getProceduresSection" isQuery="true" bodyCondition="_ofxwgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofxwgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofxwgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SurgeriesSection))->asSequence()->first().oclAsType(consol::SurgeriesSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofxwgQu0EeGvGIuLiiZuOg" type="_0jlIUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofxwggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ofxwhwu0EeGvGIuLiiZuOg" name="getPastMedicalHistorySection" isQuery="true" bodyCondition="_ofxwigu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofxwigu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofxwhwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwiwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PastMedicalHistorySectionConsult))->asSequence()->first().oclAsType(consol::PastMedicalHistorySectionConsult)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofxwiAu0EeGvGIuLiiZuOg" type="_0zhBwAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofxwiQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ofxwjgu0EeGvGIuLiiZuOg" name="getImmunizationsSection" isQuery="true" bodyCondition="_ofxwkQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ofxwkQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ofxwjgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ofxwkgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ImmunizationsSection))->asSequence()->first().oclAsType(consol::ImmunizationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ofxwjwu0EeGvGIuLiiZuOg" type="_0guooAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ofxwkAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of33IAu0EeGvGIuLiiZuOg" name="getMedicationsSection" isQuery="true" bodyCondition="_of33Iwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of33Iwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of33IAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33JAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))->asSequence()->first().oclAsType(consol::MedicationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of33IQu0EeGvGIuLiiZuOg" type="_0iWZQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of33Igu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of33Jwu0EeGvGIuLiiZuOg" name="getAlertsSection" isQuery="true" bodyCondition="_of33Kgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of33Kgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of33Jwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33Kwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))->asSequence()->first().oclAsType(consol::AllergiesReactionsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of33KAu0EeGvGIuLiiZuOg" type="_0f0psAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of33KQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of33Lgu0EeGvGIuLiiZuOg" name="getSocialHistorySection" isQuery="true" bodyCondition="_of33MQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of33MQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of33Lgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of33Mgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SocialHistorySection))->asSequence()->first().oclAsType(consol::SocialHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of33Lwu0EeGvGIuLiiZuOg" type="_0dMzgwuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of33MAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of99wAu0EeGvGIuLiiZuOg" name="getFamilyHistorySection" isQuery="true" bodyCondition="_of99wwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of99wwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of99wAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of99xAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::FamilyHistorySection))->asSequence()->first().oclAsType(consol::FamilyHistorySection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of99wQu0EeGvGIuLiiZuOg" type="_0cH1cAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of99wgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of99xwu0EeGvGIuLiiZuOg" name="getReviewOfSystemsSection" isQuery="true" bodyCondition="_of99ygu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of99ygu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of99xwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of99ywu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSection))->asSequence()->first().oclAsType(consol::ReviewOfSystemsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of99yAu0EeGvGIuLiiZuOg" type="_0pUj_AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of99yQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_of99zgu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_of990Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_of990Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_of99zgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_of990gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::VitalSignsSection))->asSequence()->first().oclAsType(consol::VitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_of99zwu0EeGvGIuLiiZuOg" type="_0kV9UAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_of990Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ogEEYAu0EeGvGIuLiiZuOg" name="getGeneralStatusSection" isQuery="true" bodyCondition="_ogEEYwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ogEEYwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ogEEYAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogEEZAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::GeneralStatusSection))->asSequence()->first().oclAsType(consol::GeneralStatusSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ogEEYQu0EeGvGIuLiiZuOg" type="_0ya1kAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ogEEYgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ogEEZwu0EeGvGIuLiiZuOg" name="getDiagnosticFindings" isQuery="true" bodyCondition="_ogEEagu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_ogEEagu0EeGvGIuLiiZuOg" name="body" constrainedElement="_ogEEZwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogEEawu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))->asSequence()->first().oclAsType(consol::DiagnosticFindings)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_ogEEaAu0EeGvGIuLiiZuOg" type="_0yfuEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ogEEaQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0zhBwAuuEeGvGIuLiiZuOg" name="PastMedicalHistorySectionConsult">
      <ownedComment xmi:id="_0zhBwQuuEeGvGIuLiiZuOg" annotatedElement="_0zhBwAuuEeGvGIuLiiZuOg">
        <body>This section describes the past medical history for the patient. It may contain&#xD;
information about past procedures or other illnesses that might have a bearing on the&#xD;
patient's current illness. Since past medical history can include past surgical history&#xD;
and other procedures, the Procedure History section may be included under the Past&#xD;
Medical History section or it may stand alone as its own section. By the same token,&#xD;
problems can be recorded in a standalone Problems section or in a nested Problems&#xD;
section. Wherever used, procedures and problems should conform to the CCD template&#xD;
for CDA entries cited in the respective sections.</body>
      </ownedComment>
      <ownedRule xmi:id="_ogKLAAu0EeGvGIuLiiZuOg" name="PastMedicalHistorySectionConsultTemplateId" constrainedElement="_0zhBwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogKLAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.4.9')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ogKLAwu0EeGvGIuLiiZuOg" name="PastMedicalHistorySectionConsultCode" constrainedElement="_0zhBwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogKLBAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11348-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ogQRoAu0EeGvGIuLiiZuOg" name="PastMedicalHistorySectionConsultText" constrainedElement="_0zhBwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogQRoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_0zjeAAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0z-70AuuEeGvGIuLiiZuOg" name="ReasonForVisitSectionConsult">
      <ownedRule xmi:id="_ogQRogu0EeGvGIuLiiZuOg" name="ReasonForVisitSectionConsultTemplateId" constrainedElement="_0z-70AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogQRowu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.4.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ogQRpQu0EeGvGIuLiiZuOg" name="ReasonForVisitSectionConsultCode" constrainedElement="_0z-70AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogQRpgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29299-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00B_IAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00DNQAuuEeGvGIuLiiZuOg" name="LevelOneConformance">
      <ownedRule xmi:id="_ogWYQAu0EeGvGIuLiiZuOg" name="LevelOneConformanceTemplateId" constrainedElement="_00DNQAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogWYQQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.10')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00LwIguuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00M-QAuuEeGvGIuLiiZuOg" name="LevelTwoConformance">
      <ownedRule xmi:id="_ogce4Qu0EeGvGIuLiiZuOg" name="LevelOneConformanceTemplateId" constrainedElement="_00M-QAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogce4gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.20')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00TE4guuEeGvGIuLiiZuOg" general="_00DNQAuuEeGvGIuLiiZuOg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00UTAAuuEeGvGIuLiiZuOg" name="LevelThreeConformance">
      <ownedRule xmi:id="_ogilgAu0EeGvGIuLiiZuOg" name="LevelOneConformanceTemplateId" constrainedElement="_00UTAAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogilgQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.30')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00aZoguuEeGvGIuLiiZuOg" general="_00M-QAuuEeGvGIuLiiZuOg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00c14AuuEeGvGIuLiiZuOg" name="AssessmentSection">
      <ownedComment xmi:id="_00c14QuuEeGvGIuLiiZuOg" annotatedElement="_00c14AuuEeGvGIuLiiZuOg">
        <body>The Assessment section (also called impression or diagnoses) represents the clinician's conclusions and working assumptions that will guide treatment of the patient. The assessment formulates a specific plan or set of recommendations. The assessment may be a list of specific disease entities or a narrative block.</body>
      </ownedComment>
      <ownedRule xmi:id="_ogilgwu0EeGvGIuLiiZuOg" name="AssessmentSectionTemplateId" constrainedElement="_00c14AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogilhAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.7')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ogosIQu0EeGvGIuLiiZuOg" name="AssessmentSectionCode" constrainedElement="_00c14AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogosIgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '51848-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00ggQAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00huYAuuEeGvGIuLiiZuOg" name="PlanSection">
      <ownedComment xmi:id="_00huYQuuEeGvGIuLiiZuOg" annotatedElement="_00huYAuuEeGvGIuLiiZuOg">
        <body>The Plan section contains data that defines pending orders, interventions, encounters, services, and procedures for the patient. It is limited to prospective, unfulfilled, or incomplete orders and requests only. All active, incomplete, or pending orders, appointments, referrals, procedures, services, or any other pending event of clinical significance to the current care of the patient should be listed unless constrained due to privacy issues. The plan may also contain information about ongoing care of the patient and information regarding goals and clinical reminders. Clinical reminders are placed here to provide prompts for disease prevention and management, patient safety, and health-care quality improvements, including widely accepted performance measures. The plan may also indicate that patient education was given or will be provided.</body>
      </ownedComment>
      <ownedRule xmi:id="_ogosIwu0EeGvGIuLiiZuOg" name="PlanSectionTemplateId" constrainedElement="_00huYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ogosJAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.7')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oguywAu0EeGvGIuLiiZuOg" name="PlanSectionCode" constrainedElement="_00huYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oguywQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '18776-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00kxsQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00mm4AuuEeGvGIuLiiZuOg" name="ReasonForVisitSection">
      <ownedRule xmi:id="_oguywgu0EeGvGIuLiiZuOg" name="ReasonForVisitSectionTemplateId" constrainedElement="_00mm4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oguywwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oguyxQu0EeGvGIuLiiZuOg" name="ReasonForVisitSectionCode" constrainedElement="_00mm4AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oguyxgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '29299-5' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00pqMQuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00rfYAuuEeGvGIuLiiZuOg" name="ReasonForVisitAndChiefComplaintSection">
      <ownedRule xmi:id="_og05YAu0EeGvGIuLiiZuOg" name="ReasonForVisitAndChiefComplaintSectionTemplateId" constrainedElement="_00rfYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_og05YQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.2.8')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_og05Ywu0EeGvGIuLiiZuOg" name="ReasonForVisitAndChiefComplaintSectionCode" constrainedElement="_00rfYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_og05ZAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '46239-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_00uisAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_00w-8AuuEeGvGIuLiiZuOg" name="ProgressNote">
      <ownedComment xmi:id="_02bL0AuuEeGvGIuLiiZuOg" annotatedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <body>&lt;p>This section describes constraints that apply to the H and P Note and to other types of CDA&#xD;
documents defined for general exchange. The template defined here should be reused&#xD;
wherever these general header constraints are applied.&lt;/p>&#xD;
&lt;p>To support communication between the receiver of the document and the patient or any&#xD;
other person or organization mentioned within it, the elements representing them will&#xD;
be named.&lt;/p>&#xD;
&lt;p>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element.&lt;/p>&#xD;
&lt;p>Events occurring at a single point in time that are represented in the Clinical Document&#xD;
header will in general be precise to the day. These point-in-time events are the time of&#xD;
creation of the document; the starting time of a participation by an author, data&#xD;
enterer, authenticator, or legal authenticator; or the starting and ending time of an&#xD;
encounter.&lt;/p>&#xD;
&lt;p>Within the specification, all telephone numbers are to be encoded using a grammar&#xD;
which is a restriction on the TEL data type and RFC 2806. It simplifies interchange between applications as&#xD;
it removes optional URL components found in RFC 2806 that applications typically do&#xD;
not know how to process, such as ISDN sub-address, phone context, or other dialing&#xD;
parameters.&lt;/p>&#xD;
&lt;p>Organizations that wish to use OIDs should properly register their OID root and ensure&#xD;
uniqueness of the OID roots used in identifiers. A large number of mechanisms exist&#xD;
for obtaining OID roots for free or for a reasonable fee. HL7 maintains an OID registry&#xD;
page from which organizations may request an OID root under the HL7 OID root. This&#xD;
page can be accessed at: http://www.hl7.org/oid.&lt;/p>&#xD;
&lt;p>Another useful resource lists the many ways to obtain a registered OID Root for free or&#xD;
a small fee anywhere in the world and is located at:&lt;/p>&#xD;
&lt;p>http://www.dclunie.com/medical-image-faq/html/part8.html#UIDRegistration.&lt;/p>&#xD;
&lt;p>The manner in which the OID root is obtained is not constrained by this DSTU.&lt;/p></body>
      </ownedComment>
      <ownedComment xmi:id="_00w-8QuuEeGvGIuLiiZuOg" annotatedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <body>&lt;p>A Progress Note documents a patient's clinical status during a hospitalization or outpatient visit.&lt;/p>&#xD;
&lt;p>Taber's  medical dictionary defines a Progress Note as &quot;An ongoing record of a patient's illness and treatment. Physicians, nurses, consultants, and therapists record their notes concerning the progress or lack of progress made by the patient between the time of the previous note and the most recent note.&quot;&lt;/p>&#xD;
&lt;p>Mosby's  medical dictionary defines a Progress Note as &quot;Notes made by a nurse, physician, social worker, physical therapist, and other health care professionals that describe the patient's condition and the treatment given or planned.&quot;&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_0161gAuuEeGvGIuLiiZuOg" name="ProgressNotePersonHasName">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_0161gQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_017ckAuuEeGvGIuLiiZuOg" name="ProgressNoteRolesShallHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_017ckQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_018DoAuuEeGvGIuLiiZuOg" name="ProgressNoteRolesShouldHaveAddrAndTelecom">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_018DoQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_018qsAuuEeGvGIuLiiZuOg" name="ProgressNoteOrganizationsHaveContactInfo">
        <ownedComment xmi:id="_018qsQuuEeGvGIuLiiZuOg">
          <body>When name, address, or telecom information is unknown and where these elements are&#xD;
required to be present, as with CDA conformance if the information is unknown, these&#xD;
elements will be represented using an appropriate value for the nullFlavor attribute on&#xD;
the element. Legal values according to this specification come from the HL7 NullFlavor&#xD;
vocabulary.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_018qsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_01940AuuEeGvGIuLiiZuOg" name="ProgressNoteTimePreciseToDay">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01940QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_01-f4AuuEeGvGIuLiiZuOg" name="ProgressNoteTimePreciseToYear">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01-f4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 4)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 4)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 4)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_01_G8AuuEeGvGIuLiiZuOg" name="ProgressNoteTelephoneMatchesRegex">
        <ownedComment xmi:id="_01_G8QuuEeGvGIuLiiZuOg">
          <body>The telecom element is used to provide a contact telephone number for the various&#xD;
participants that require it. The value attribute ofthis elements is a URL that specifies&#xD;
the telephone number, as indicated by the TEL data type.</body>
        </ownedComment>
        <ownedComment xmi:id="_01_G8guuEeGvGIuLiiZuOg">
          <body>All telephone numbers are to be encoded using a restricted form of the tel: URL scheme. &#xD;
A telephone number used for voice calls begins with the URL scheme tel:. If the&#xD;
number is a global phone number, it starts with a plus (+) sign. The remaining number&#xD;
is made up of the dialing digits and an optional extension and may also contain visual&#xD;
separators.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01_G8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_01_uAAuuEeGvGIuLiiZuOg" name="ProgressNoteHasTelephoneDialingDigits">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01_uAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02AVEAuuEeGvGIuLiiZuOg" name="ProgressNoteUnknownTelephoneUsesNullFlavor">
        <ownedComment xmi:id="_02AVEQuuEeGvGIuLiiZuOg">
          <body>There is no way to distinguish between an unknown phone number and an unknown&#xD;
e-mail or other telecommunications address. Therefore, the following convention will be&#xD;
used: Any telecom element that uses a flavor of null (has a nullFlavor attribute) is&#xD;
assumed to be a telephone number, which is the only required telecommunications&#xD;
address element within this DSTU.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02AVEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02A8IAuuEeGvGIuLiiZuOg" name="ProgressNoteTypeIdExtension">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02A8IQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.typeId.extension = 'POCD_HD000040'</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02BjMAuuEeGvGIuLiiZuOg" name="ProgressNoteIdRootFormat">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02BjMQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id.matches('root','([0-2])(.([1-9][0-9]*|0))+') or self.id.matches('root','([A-Fa-f0-9]{8})(\\\\-[A-Fa-f0-9]{4}){3}(\\\\-[A-Fa-f0-9]{12})')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02D_cAuuEeGvGIuLiiZuOg" name="ProgressNoteOidLength">
        <ownedComment xmi:id="_02D_cQuuEeGvGIuLiiZuOg">
          <body>OIDs are limited by this specification to no more than 64 characters in length for&#xD;
compatibility with other standards and Implementation Guides.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02D_cguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.id->select((not id.root.oclIsUndefined()) and id.root.size() > 64 )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02EmgAuuEeGvGIuLiiZuOg" name="ProgressNoteLanguageCodeForm">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02EmgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.languageCode.matches('code','(([a-z]{2})(\\\\-[A-Z]{2})?)')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02GbsAuuEeGvGIuLiiZuOg" name="ProgressNoteSetIdAndVersionNumber">
        <ownedComment xmi:id="_02GbsQuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/setId element uses the instance identifier (II) data type. The root&#xD;
attribute is a UUID or OID that uniquely identifies the scope of the identifier, and the&#xD;
extension attribute is a value that is unique within the scope of the root for the set of&#xD;
versions of the document. See Document Identification, Revisions, and Addenda in&#xD;
Section 4.2.3.1 of the CDA Specification for some examples showing the use of the setId&#xD;
element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02GbsguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.setId.oclIsUndefined() and self.versionNumber.oclIsUndefined())&#xD;&#xA;   xor (not self.setId.oclIsUndefined() and not self.versionNumber.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02HCwAuuEeGvGIuLiiZuOg" name="ProgressNoteSetIdAndIdAreUnique">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02HCwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(not self.setId.oclIsUndefined() and not self.id.oclIsUndefined())&#xD;&#xA;   implies (self.setId.root &lt;> self.id.root or self.setId.extension &lt;> self.id.extension)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02Hp0QuuEeGvGIuLiiZuOg" name="ProgressNoteCopyTimeNotPresent">
        <ownedComment xmi:id="_02IQ4AuuEeGvGIuLiiZuOg">
          <body>The ClinicalDocument/copyTime element has been deprecated in CDA R2.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02IQ4QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.copyTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02I38AuuEeGvGIuLiiZuOg" name="ProgressNoteHasRecordTargetPatientRole">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02I38QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->size() > 0 and self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02JfAAuuEeGvGIuLiiZuOg" name="ProgressNoteHasPatientBirthTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02JfAQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.birthTime.value.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.birthTime.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02KGEAuuEeGvGIuLiiZuOg" name="ProgressNoteHasAdministrativeGenderCode">
        <ownedComment xmi:id="_02KGEQuuEeGvGIuLiiZuOg">
          <body>TODO: add OCL test for terminology</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02KGEguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->forAll(target : cda::RecordTarget | not target.patientRole.oclIsUndefined()&#xD;&#xA;   implies (not target.patientRole.patient.administrativeGenderCode.code.oclIsUndefined()&#xD;&#xA;      or not target.patientRole.patient.administrativeGenderCode.nullFlavor.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02L7QAuuEeGvGIuLiiZuOg" name="ProgressNoteHasProviderOrganization">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02L7QQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.recordTarget->exists(target : cda::RecordTarget | not target.patientRole.providerOrganization.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02NJYAuuEeGvGIuLiiZuOg" name="ProgressNoteHasAuthorTime">
        <ownedComment xmi:id="_02NJYQuuEeGvGIuLiiZuOg">
          <body>The author/time element represents the start time of the author's&#xD;
participation in the creation of the clinical document.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02NJYguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.time.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02NwcAuuEeGvGIuLiiZuOg" name="ProgressNoteHasAssignedAuthorId">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02NwcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | author.assignedAuthor.id->size() > 0)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02OXgAuuEeGvGIuLiiZuOg" name="ProgressNoteHasAssignedAuthorPersonOrDevice">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02OXgQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.author->forAll(author : cda::Author | not author.assignedAuthor.assignedPerson.oclIsUndefined() &#xD;&#xA;   or not author.assignedAuthor.assignedAuthoringDevice.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02O-kAuuEeGvGIuLiiZuOg" name="ProgressNoteHasDataEntererAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02O-kQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02PloAuuEeGvGIuLiiZuOg" name="ProgressNoteHasDataEntererTime">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02PloQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.dataEnterer.oclIsUndefined() implies not self.dataEnterer.time.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02QMsAuuEeGvGIuLiiZuOg" name="ProgressNoteHasInformant">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02QMsQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->size() > 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02QzwAuuEeGvGIuLiiZuOg" name="ProgressNoteHasInformantAssignedPersonOrRelatedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02QzwQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.informant->forAll(i : cda::Informant12 | not i.assignedEntity.assignedPerson.oclIsUndefined()&#xD;&#xA;   or not i.relatedEntity.relatedPerson.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02W6YAuuEeGvGIuLiiZuOg" name="ProgressNoteLegalAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02W6YQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.legalAuthenticator.oclIsUndefined() implies not self.legalAuthenticator.assignedEntity.assignedPerson.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02XhcAuuEeGvGIuLiiZuOg" name="ProgressNoteAuthenticatorHasAssignedPerson">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02XhcQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.authenticator->forAll(auth : cda::Authenticator | auth.assignedEntity->forAll(entity : cda::AssignedEntity |&#xD;&#xA;   not entity.assignedPerson.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02YIgAuuEeGvGIuLiiZuOg" name="ProgressNoteTimePreciseToSecond">
        <ownedComment xmi:id="_02YIgQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-10 constraitn</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02YIgguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>-- implemented in Java using XPath selector</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_02YvkAuuEeGvGIuLiiZuOg" name="ProgressNoteTimePreciseToYearAndDay">
        <ownedComment xmi:id="_02YvkQuuEeGvGIuLiiZuOg">
          <body>Should portion of CON-HP-11 constraint</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_02YvkguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>cda::OrganizationPartOf.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject)-> union(  cda::MaintainedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union( cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::RelatedEntity.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::ServiceEvent.allInstances()->select( effectiveTime.oclIsUndefined()).oclAsType( ecore::EObject) )->union(cda::EncounterParticipant.allInstances()->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(self.participant->select( time.oclIsUndefined()).oclAsType( ecore::EObject))->union(cda::OrganizationPartOf.allInstances().effectiveTime->union(cda::MaintainedEntity.allInstances().effectiveTime)->union( cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::RelatedEntity.allInstances().effectiveTime)->union(cda::ServiceEvent.allInstances().effectiveTime)->union(cda::EncounterParticipant.allInstances().time)->union(self.participant.time)->select(current : datatypes::IVL_TS  |  ((not current.low.oclIsUndefined()) and (current.low.value.oclIsUndefined() or current.low.value.size() &lt; 8)) or ((not current.center.oclIsUndefined()) and (current.center.value.oclIsUndefined() or current.center.value.size() &lt; 8)) or ((not current.high.oclIsUndefined()) and (current.high.value.oclIsUndefined() or current.high.value.size() &lt; 8)) or (current.low.oclIsUndefined() and current.center.oclIsUndefined() and current.high.oclIsUndefined()) ).oclAsType( ecore::EObject))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w-8guuEeGvGIuLiiZuOg" name="ProgressNoteAssessmentAndPlan">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.cdt/model/cdt_Ecore.uml#_XtmggGeLEd-ilOLYnIx0jA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w-8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentAndPlanSectionProcNote))&#xD;&#xA;   xor (self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentSectionProcNote))&#xD;&#xA;      and self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(ccd::PlanOfCareSection)))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w-9AuuEeGvGIuLiiZuOg" name="ProgressNoteBothAssessmentAndPlan">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.cdt/model/cdt_Ecore.uml#_XtmggGeLEd-ilOLYnIx0jA"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w-9QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>let assessmentExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(cdt::AssessmentSectionProcNote)) in&#xD;&#xA;  let planExists : Boolean = self.getSections()->exists(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(ccd::PlanOfCareSection))&#xD;&#xA;    in (assessmentExists or planExists) implies (assessmentExists and planExists)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w-9guuEeGvGIuLiiZuOg" name="ProgressNoteHasServiceEvent" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_00w-9wuuEeGvGIuLiiZuOg">
          <body>The serviceEvent represents the event of writing the Progress Note.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w--AuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->exists(doc : cda::DocumentationOf | not doc.oclIsUndefined() &#xD;&#xA;  and not doc.serviceEvent.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w--QuuEeGvGIuLiiZuOg" name="ProgressNoteHasServiceEventCode" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w--guuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->exists(doc : cda::DocumentationOf | not doc.oclIsUndefined() and not doc.serviceEvent.oclIsUndefined()&#xD;&#xA;  and doc.serviceEvent.code.code = '371532007' and doc.serviceEvent.code.codeSystem = '2.16.840.1.113883.6.96' )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w--wuuEeGvGIuLiiZuOg" name="ProgressNoteHasServiceEventEffectiveTime" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_00w-_AuuEeGvGIuLiiZuOg">
          <body>When you know only the date for documenting the time, place the date in both the low and high elements. However, if you know the date and the duration of the documentation, use serviceEvent/effectiveTime/low with a width element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w-_QuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.documentationOf->exists(doc : cda::DocumentationOf | not doc.oclIsUndefined() and not doc.serviceEvent.oclIsUndefined()&#xD;&#xA; and not doc.serviceEvent.effectiveTime.oclIsUndefined() and not doc.serviceEvent.effectiveTime.low.oclIsUndefined() )</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w-_guuEeGvGIuLiiZuOg" name="ProgressNoteHasComponentOfElement" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w-_wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.componentOf.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w_AAuuEeGvGIuLiiZuOg" name="ProgressNoteHasEncompassingEncounterId" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_00w_AQuuEeGvGIuLiiZuOg">
          <body>The Progress Note is always associated with an encounter by the componentOf/encompassingEncounter element in the header.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w_AguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.componentOf.encompassingEncounter.id->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w_AwuuEeGvGIuLiiZuOg" name="ProgressNoteHasEncompassingEncounterEffectiveTime" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_00w_BAuuEeGvGIuLiiZuOg">
          <body>The effectiveTime element for an encompassingEncounter represents the time or time interval in which the encounter took place. A single encounter may contain multiple Progress Notes; hence the effectiveTime elements for a Progress Note (recorded in serviceEvent) and for an encounter (recorded in encompassingEncounter) represent different time intervals.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w_BQuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.componentOf.encompassingEncounter.effectiveTime.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w_BguuEeGvGIuLiiZuOg" name="ProgressNoteHasEncompassingEncounterEffectiveTimeLow" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w_BwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.componentOf.encompassingEncounter.effectiveTime.low.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_00w_CAuuEeGvGIuLiiZuOg" name="ProgressNoteHasEncompassingEncounterFacilityId" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <ownedComment xmi:id="_00w_CQuuEeGvGIuLiiZuOg">
          <body>All visits take place at a specific location. When available, the location ID is included in the encompassingEncounter/location/healthCareFacility/id element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_00w_CguuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.componentOf.encompassingEncounter.location.healthCareFacility.id->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_og7AAAu0EeGvGIuLiiZuOg" name="ProgressNoteTemplateId" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_og7AAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.21.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohluYAu0EeGvGIuLiiZuOg" name="ProgressNoteRealmCode" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohluYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.realmCode->isEmpty() or self.realmCode->exists(element | element.isNullFlavorUndefined())) implies (self.realmCode->size() = 1 and self.realmCode->forAll(element | not element.oclIsUndefined() and element.oclIsKindOf(datatypes::CS) and &#xD;&#xA;let value : datatypes::CS = element.oclAsType(datatypes::CS) in &#xD;&#xA;value.code = 'US'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohluYgu0EeGvGIuLiiZuOg" name="ProgressNoteTypeId" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohluYwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.typeId.oclIsUndefined() or self.typeId.isNullFlavorUndefined()) implies (not self.typeId.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohr1AAu0EeGvGIuLiiZuOg" name="ProgressNoteId" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohr1AQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.id.oclIsUndefined() or self.id.isNullFlavorUndefined()) implies (not self.id.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohr1Agu0EeGvGIuLiiZuOg" name="ProgressNoteCode" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohr1Awu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.codeSystem = '2.16.840.1.113883.6.1' and not value.code.oclIsUndefined()))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohx7oAu0EeGvGIuLiiZuOg" name="ProgressNoteTitle" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohx7oQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohx7ogu0EeGvGIuLiiZuOg" name="ProgressNoteEffectiveTime" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohx7owu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.effectiveTime.oclIsUndefined() or self.effectiveTime.isNullFlavorUndefined()) implies (not self.effectiveTime.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_ohx7pAu0EeGvGIuLiiZuOg" name="ProgressNoteLanguageCode" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_ohx7pQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.languageCode.oclIsUndefined() or self.languageCode.isNullFlavorUndefined()) implies (not self.languageCode.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oh4CTwu0EeGvGIuLiiZuOg" name="ProgressNoteAlertsSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CUAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oh4CVgu0EeGvGIuLiiZuOg" name="ProgressNoteChiefComplaintSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CVwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ChiefComplaintSectionProcNote))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oh-I5Qu0EeGvGIuLiiZuOg" name="ProgressNoteMedicationsSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I5gu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oh-I7Au0EeGvGIuLiiZuOg" name="ProgressNoteObjectiveSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I7Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ObjectiveSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oh-I8wu0EeGvGIuLiiZuOg" name="ProgressNotePhysicalExaminationSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I9Au0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiEPhQu0EeGvGIuLiiZuOg" name="ProgressNoteProblemSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPhgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiEPjAu0EeGvGIuLiiZuOg" name="ProgressNoteResultsSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPjQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiEPkwu0EeGvGIuLiiZuOg" name="ProgressNoteVitalSignsSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPlAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::CCDVitalSignsSection))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiKWJQu0EeGvGIuLiiZuOg" name="ProgressNoteReviewOfSystemsSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiKWJgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSectionIHE))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiKWLAu0EeGvGIuLiiZuOg" name="ProgressNoteSubjectiveSection" constrainedElement="_00w-8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiKWLQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.getAllSections()->one(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SubjectiveSection))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_02bL0QuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_S9OzADxXEd6JwqSGecoePg"/>
      </generalization>
      <ownedOperation xmi:id="_oh4CQAu0EeGvGIuLiiZuOg" name="getAssessmentAndPlanSection" isQuery="true" bodyCondition="_oh4CQwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh4CQwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh4CQAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CRAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AssessmentAndPlanSectionProcNote))->asSequence()->first().oclAsType(consol::AssessmentAndPlanSectionProcNote)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh4CQQu0EeGvGIuLiiZuOg" type="_01ZREAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh4CQgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh4CRQu0EeGvGIuLiiZuOg" name="getAssessmentSection" isQuery="true" bodyCondition="_oh4CSAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh4CSAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh4CRQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CSQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AssessmentSectionProcNote))->asSequence()->first().oclAsType(consol::AssessmentSectionProcNote)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh4CRgu0EeGvGIuLiiZuOg" type="_01fXsAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh4CRwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh4CSgu0EeGvGIuLiiZuOg" name="getPlanSection" isQuery="true" bodyCondition="_oh4CTQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh4CTQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh4CSgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CTgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PlanOfCareSection))->asSequence()->first().oclAsType(consol::PlanOfCareSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh4CSwu0EeGvGIuLiiZuOg" type="_0igxUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh4CTAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh4CUQu0EeGvGIuLiiZuOg" name="getAlertsSection" isQuery="true" bodyCondition="_oh4CVAu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh4CVAu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh4CUQu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh4CVQu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::AllergiesReactionsSection))->asSequence()->first().oclAsType(consol::AllergiesReactionsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh4CUgu0EeGvGIuLiiZuOg" type="_0f0psAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh4CUwu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh-I4Au0EeGvGIuLiiZuOg" name="getChiefComplaintSection" isQuery="true" bodyCondition="_oh-I4wu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh-I4wu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh-I4Au0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I5Au0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ChiefComplaintSectionProcNote))->asSequence()->first().oclAsType(consol::ChiefComplaintSectionProcNote)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh-I4Qu0EeGvGIuLiiZuOg" type="_01mFYAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh-I4gu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh-I5wu0EeGvGIuLiiZuOg" name="getMedicationsSection" isQuery="true" bodyCondition="_oh-I6gu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh-I6gu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh-I5wu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I6wu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::MedicationsSection))->asSequence()->first().oclAsType(consol::MedicationsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh-I6Au0EeGvGIuLiiZuOg" type="_0iWZQAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh-I6Qu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oh-I7gu0EeGvGIuLiiZuOg" name="getObjectiveSection" isQuery="true" bodyCondition="_oh-I8Qu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oh-I8Qu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oh-I7gu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oh-I8gu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ObjectiveSection))->asSequence()->first().oclAsType(consol::ObjectiveSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oh-I7wu0EeGvGIuLiiZuOg" type="_01rk8AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oh-I8Au0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiEPgAu0EeGvGIuLiiZuOg" name="getPhysicalExaminationSection" isQuery="true" bodyCondition="_oiEPgwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiEPgwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiEPgAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPhAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::PhysicalExamSection))->asSequence()->first().oclAsType(consol::PhysicalExamSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiEPgQu0EeGvGIuLiiZuOg" type="_0mjj0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiEPggu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiEPhwu0EeGvGIuLiiZuOg" name="getProblemSection" isQuery="true" bodyCondition="_oiEPigu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiEPigu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiEPhwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPiwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ProblemListSection))->asSequence()->first().oclAsType(consol::ProblemListSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiEPiAu0EeGvGIuLiiZuOg" type="_0f8lgAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiEPiQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiEPjgu0EeGvGIuLiiZuOg" name="getResultsSection" isQuery="true" bodyCondition="_oiEPkQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiEPkQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiEPjgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiEPkgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::DiagnosticFindings))->asSequence()->first().oclAsType(consol::DiagnosticFindings)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiEPjwu0EeGvGIuLiiZuOg" type="_0yfuEAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiEPkAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiKWIAu0EeGvGIuLiiZuOg" name="getVitalSignsSection" isQuery="true" bodyCondition="_oiKWIwu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiKWIwu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiKWIAu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiKWJAu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::CCDVitalSignsSection))->asSequence()->first().oclAsType(consol::CCDVitalSignsSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiKWIQu0EeGvGIuLiiZuOg" type="_0yTg0AuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiKWIgu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiKWJwu0EeGvGIuLiiZuOg" name="getReviewOfSystemsSection" isQuery="true" bodyCondition="_oiKWKgu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiKWKgu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiKWJwu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiKWKwu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::ReviewOfSystemsSectionIHE))->asSequence()->first().oclAsType(consol::ReviewOfSystemsSectionIHE)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiKWKAu0EeGvGIuLiiZuOg" type="_0yOoUAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiKWKQu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oiKWLgu0EeGvGIuLiiZuOg" name="getSubjectiveSection" isQuery="true" bodyCondition="_oiKWMQu0EeGvGIuLiiZuOg">
        <ownedRule xmi:id="_oiKWMQu0EeGvGIuLiiZuOg" name="body" constrainedElement="_oiKWLgu0EeGvGIuLiiZuOg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiKWMgu0EeGvGIuLiiZuOg">
            <language>OCL</language>
            <body>self.getAllSections()->select(section : cda::Section | not section.oclIsUndefined() and section.oclIsKindOf(consol::SubjectiveSection))->asSequence()->first().oclAsType(consol::SubjectiveSection)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_oiKWLwu0EeGvGIuLiiZuOg" type="_01zgwAuuEeGvGIuLiiZuOg" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_oiKWMAu0EeGvGIuLiiZuOg" value="1"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_01ZREAuuEeGvGIuLiiZuOg" name="AssessmentAndPlanSectionProcNote">
      <ownedComment xmi:id="_01ZREQuuEeGvGIuLiiZuOg" annotatedElement="_01ZREAuuEeGvGIuLiiZuOg">
        <body>&lt;p>The Assessment section (also called impression or diagnoses) represents the clinician's conclusions and working assumptions that will guide treatment of the patient. The assessment formulates a specific plan or set of recommendations. The assessment may be a list of specific disease entities or a narrative block.&lt;/p>&#xD;
&lt;p>The Plan section contains data that defines pending orders, interventions, encounters, services, and procedures for the patient. It is limited to prospective, unfulfilled, or incomplete orders and requests only. All active, incomplete, or pending orders, appointments, referrals, procedures, services, or any other pending event of clinical significance to the current care of the patient should be listed unless constrained due to privacy issues. The plan may also contain information about ongoing care of the patient and information regarding goals and clinical reminders. Clinical reminders are placed here to provide prompts for disease prevention and management, patient safety, and health-care quality improvements, including widely accepted performance measures. The plan may also indicate that patient education was given or will be provided.&lt;/p></body>
      </ownedComment>
      <ownedRule xmi:id="_oiQcwAu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionProcNoteTemplateId" constrainedElement="_01ZREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiQcwQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.18.2.14')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiWjYAu0EeGvGIuLiiZuOg" name="AssessmentAndPlanSectionProcNoteCode" constrainedElement="_01ZREAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiWjYQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '51847-2' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_01eJkAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_01fXsAuuEeGvGIuLiiZuOg" name="AssessmentSectionProcNote">
      <ownedComment xmi:id="_01fXsQuuEeGvGIuLiiZuOg" annotatedElement="_01fXsAuuEeGvGIuLiiZuOg">
        <body>The Assessment section (also called impression or diagnoses) represents the clinician's conclusions and working assumptions that will guide treatment of the patient. The assessment formulates a specific plan or set of recommendations. The assessment may be a list of specific disease entities or a narrative block.</body>
      </ownedComment>
      <ownedRule xmi:id="_oiWjYgu0EeGvGIuLiiZuOg" name="AssessmentSectionProcNoteTemplateId" constrainedElement="_01fXsAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiWjYwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.18.2.13')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oicqAAu0EeGvGIuLiiZuOg" name="AssessmentSectionProcNoteCode" constrainedElement="_01fXsAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oicqAQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '51848-0' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_01kQMAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_01mFYAuuEeGvGIuLiiZuOg" name="ChiefComplaintSectionProcNote">
      <ownedComment xmi:id="_01mFYQuuEeGvGIuLiiZuOg" annotatedElement="_01mFYAuuEeGvGIuLiiZuOg">
        <body>The Chief Complaint section records the patient's chief complaint (the patient's own description). The Chief Complaint section may be a subsection of the Medical History section.</body>
      </ownedComment>
      <ownedRule xmi:id="_oicqAgu0EeGvGIuLiiZuOg" name="ChiefComplaintSectionProcNoteTemplateId" constrainedElement="_01mFYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oicqAwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.18.2.16')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oicqBQu0EeGvGIuLiiZuOg" name="ChiefComplaintSectionProcNoteCode" constrainedElement="_01mFYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oicqBgu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '10154-3' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_01pvwAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_01rk8AuuEeGvGIuLiiZuOg" name="ObjectiveSection">
      <ownedComment xmi:id="_01rk8QuuEeGvGIuLiiZuOg" annotatedElement="_01rk8AuuEeGvGIuLiiZuOg">
        <body>The Objective section contains directly observed and/or quantifiable data about the patient. It includes important and relevant positive and negative test results, and physical findings.</body>
      </ownedComment>
      <ownedRule xmi:id="_01rk8guuEeGvGIuLiiZuOg" name="ObjectiveSectionHasClinicalStatements">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.cdt/model/cdt_Ecore.uml#_KSTmQGjOEd-tUpkWYQgJlQ"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01rk8wuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entry->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiiwoAu0EeGvGIuLiiZuOg" name="ObjectiveSectionTemplateId" constrainedElement="_01rk8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiiwoQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.21.2.1')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiiwowu0EeGvGIuLiiZuOg" name="ObjectiveSectionCode" constrainedElement="_01rk8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiiwpAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = 'OBJEC-X' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oio3QAu0EeGvGIuLiiZuOg" name="ObjectiveSectionTitle" constrainedElement="_01rk8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oio3QQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oio3Qgu0EeGvGIuLiiZuOg" name="ObjectiveSectionText" constrainedElement="_01rk8AuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oio3Qwu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_01xEgAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_01zgwAuuEeGvGIuLiiZuOg" name="SubjectiveSection">
      <ownedComment xmi:id="_01zgwQuuEeGvGIuLiiZuOg" annotatedElement="_01zgwAuuEeGvGIuLiiZuOg">
        <body>This section describes in a narrative format the patient's current condition and/or interval changes as reported by the patient or by the patient's guardian or caregiver.</body>
      </ownedComment>
      <ownedRule xmi:id="_01zgwguuEeGvGIuLiiZuOg" name="SubjectiveSectionHasClinicalStatements">
        <constrainedElement xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda.cdt/model/cdt_Ecore.uml#_KSTmQGjOEd-tUpkWYQgJlQ"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_01zgwwuuEeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.entry->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oio3RAu0EeGvGIuLiiZuOg" name="SubjectiveSectionTemplateId" constrainedElement="_01zgwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oio3RQu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.21.2.2')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiu94Au0EeGvGIuLiiZuOg" name="SubjectiveSectionCode" constrainedElement="_01zgwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiu94Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = 'SUBJ-X' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiu94gu0EeGvGIuLiiZuOg" name="SubjectiveSectionTitle" constrainedElement="_01zgwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiu94wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oiu95Au0EeGvGIuLiiZuOg" name="SubjectiveSectionText" constrainedElement="_01zgwAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiu95Qu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>not self.text.oclIsUndefined()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_016OcAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_02grYAuuEeGvGIuLiiZuOg" name="HospitalDischargeStudiesSummarySection">
      <ownedRule xmi:id="_oiu95gu0EeGvGIuLiiZuOg" name="HospitalDischargeStudiesSummarySectionTemplateId" constrainedElement="_02grYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oiu95wu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>self.templateId->exists(id : datatypes::II | id.root = '2.16.840.1.113883.10.20.16.2.3')</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oi1EgQu0EeGvGIuLiiZuOg" name="HospitalDischargeStudiesSummarySectionCode" constrainedElement="_02grYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oi1Eggu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.code.oclIsUndefined() or self.code.isNullFlavorUndefined()) implies (not self.code.oclIsUndefined() and self.code.oclIsKindOf(datatypes::CE) and &#xD;&#xA;let value : datatypes::CE = self.code.oclAsType(datatypes::CE) in (&#xD;&#xA;value.code = '11493-4' and value.codeSystem = '2.16.840.1.113883.6.1'))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_oi1Egwu0EeGvGIuLiiZuOg" name="HospitalDischargeStudiesSummarySectionTitle" constrainedElement="_02grYAuuEeGvGIuLiiZuOg">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_oi1EhAu0EeGvGIuLiiZuOg">
          <language>OCL</language>
          <body>(self.title.oclIsUndefined() or self.title.isNullFlavorUndefined()) implies (not self.title.oclIsUndefined() and self.title.getText() = 'HOSPITAL DISCHARGE STUDIES SUMMARY')</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_02jusAuuEeGvGIuLiiZuOg">
        <general xmi:type="uml:Class" href="../../org.openhealthtools.mdht.uml.cda/model/cda.uml#_qIf_wDxXEd6JwqSGecoePg"/>
      </generalization>
    </packagedElement>
    <profileApplication xmi:id="_0VELMQuuEeGvGIuLiiZuOg">
      <eAnnotations xmi:id="_0VELMguuEeGvGIuLiiZuOg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.openhealthtools.org/mdht/schemas/cda/4#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://CDA_PROFILES/CDA.profile.uml#_cxOJEIEVEd6H8o-hO3-B4Q"/>
    </profileApplication>
    <profileApplication xmi:id="_0VELMwuuEeGvGIuLiiZuOg">
      <eAnnotations xmi:id="_0VELNAuuEeGvGIuLiiZuOg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Ecore.profile.uml#_z1OFcHjqEdy8S4Cr8Rc_NA"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Ecore.profile.uml#_0"/>
    </profileApplication>
  </uml:Package>
  <Ecore:EPackage xmi:id="_0VELNQuuEeGvGIuLiiZuOg" base_Package="_0VELMAuuEeGvGIuLiiZuOg" packageName="consol" nsPrefix="consol" nsURI="http://www.openhealthtools.org/mdht/uml/cda/consol" basePackage="org.openhealthtools.mdht.uml.cda" prefix="Consol"/>
  <CDA:CDATemplate xmi:id="_0V7HBwuuEeGvGIuLiiZuOg" base_Class="_0V7G0AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.6" assigningAuthorityName="HITSP C83">
    <ruleId>C83-[DE-6-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0V7HCAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G1guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0V7HCQuuEeGvGIuLiiZuOg" base_Constraint="_0V7G2QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNcAuuEeGvGIuLiiZuOg" base_Constraint="_0V7G3AuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.02-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WBNcQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G3guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNcguuEeGvGIuLiiZuOg" base_Constraint="_0V7G4AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNcwuuEeGvGIuLiiZuOg" base_Constraint="_0V7G4guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNdAuuEeGvGIuLiiZuOg" base_Constraint="_0V7G5AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNdQuuEeGvGIuLiiZuOg" base_Constraint="_0V7G5guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNdguuEeGvGIuLiiZuOg" base_Constraint="_0V7G6AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNdwuuEeGvGIuLiiZuOg" base_Constraint="_0V7G6guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNeAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G7QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNeQuuEeGvGIuLiiZuOg" base_Constraint="_0V7G8AuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.04-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WBNeguuEeGvGIuLiiZuOg" base_Constraint="_0V7G8guuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.04-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WBNewuuEeGvGIuLiiZuOg" base_Constraint="_0V7G9AuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.04-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WBNfAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G9guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WBNfQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G-QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WHUEAuuEeGvGIuLiiZuOg" base_Constraint="_0V7G_AuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.06-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WHUEQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7G_guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WHUEguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0V7HAQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WHUEwuuEeGvGIuLiiZuOg" base_Constraint="_0V7HBAuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-6.08-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0WNaxguuEeGvGIuLiiZuOg" base_Class="_0WNaswuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.41" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0WThUAuuEeGvGIuLiiZuOg" base_Constraint="_0WNauAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-176</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0WThUQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0WNauguuEeGvGIuLiiZuOg">
    <ruleId>CONF-177</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0WThjAuuEeGvGIuLiiZuOg" base_Class="_0WThWguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.6" assigningAuthorityName="IHE PCC"/>
  <CDA:ConstraintValidation xmi:id="_0WZn8guuEeGvGIuLiiZuOg" base_Constraint="_0WThYQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn8wuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0WThYwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn9QuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0WThaAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn9guuEeGvGIuLiiZuOg" base_Constraint="_0WThawuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn9wuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0WThbQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn-AuuEeGvGIuLiiZuOg" base_Constraint="_0WThbwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn-QuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0WThcQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn-guuEeGvGIuLiiZuOg" base_Constraint="_0WThcwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn-wuuEeGvGIuLiiZuOg" base_Constraint="_0WThdQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0WZn_AuuEeGvGIuLiiZuOg" base_Constraint="_0WThdwuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0Wl1QwuuEeGvGIuLiiZuOg" base_Class="_0Wl1NAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.38" assigningAuthorityName="CCD"/>
  <CDA:CDATemplate xmi:id="_0Wr74QuuEeGvGIuLiiZuOg" base_Class="_0Wr72AuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.1.2"/>
  <CDA:ConstraintValidation xmi:id="_0WyCcAuuEeGvGIuLiiZuOg" base_Constraint="_0Wr72guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0W4JEguuEeGvGIuLiiZuOg" base_Constraint="_0W4JEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-509</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0W4JGQuuEeGvGIuLiiZuOg" base_Constraint="_0W4JFwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-518</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0W4JHAuuEeGvGIuLiiZuOg" base_Constraint="_0W4JGguuEeGvGIuLiiZuOg">
    <ruleId>CONF-519</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0XKc_wuuEeGvGIuLiiZuOg" base_Class="_0XKc9QuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.1"/>
  <CDA:ConstraintValidation xmi:id="_0XKdAwuuEeGvGIuLiiZuOg" base_Constraint="_0XKc9wuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0XWqQwuuEeGvGIuLiiZuOg" base_Class="_0XWqOguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.1.1"/>
  <CDA:ConstraintValidation xmi:id="_0XWqRwuuEeGvGIuLiiZuOg" base_Constraint="_0XWqPAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0Xcw3AuuEeGvGIuLiiZuOg" base_Constraint="_0Xcw2guuEeGvGIuLiiZuOg">
    <ruleId>CONF-509</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Xi3dguuEeGvGIuLiiZuOg" base_Constraint="_0Xi3dAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-518</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Xi3eQuuEeGvGIuLiiZuOg" base_Constraint="_0Xi3dwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-519</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0YNl5wuuEeGvGIuLiiZuOg" base_Class="_0YNl3QuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.11">
    <ruleId>C83-[DE-10-CDA-2]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0YTsfQuuEeGvGIuLiiZuOg" base_Constraint="_0YTsewuuEeGvGIuLiiZuOg">
    <ruleId>CONF-6.3.4.6.7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YTsgAuuEeGvGIuLiiZuOg" base_Constraint="_0YTsfguuEeGvGIuLiiZuOg">
    <ruleId>CONF-6.3.4.6.10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YTsgwuuEeGvGIuLiiZuOg" base_Constraint="_0YTsgQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-6.3.4.6.11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YTshguuEeGvGIuLiiZuOg" base_Constraint="_0YTshAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-6.3.4.6.12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzEguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0YZzEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-280</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzFQuuEeGvGIuLiiZuOg" base_Constraint="_0YZzEwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-296</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzGAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0YZzFguuEeGvGIuLiiZuOg">
    <ruleId>CONF-297</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzGwuuEeGvGIuLiiZuOg" base_Constraint="_0YZzGQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-161</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzHguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0YZzHAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-180</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YZzIQuuEeGvGIuLiiZuOg" base_Constraint="_0YZzHwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0YZzJAuuEeGvGIuLiiZuOg" base_Constraint="_0YZzIguuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0Yf5twuuEeGvGIuLiiZuOg" base_Class="_0W-PuwuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.5"/>
  <CDA:ConstraintValidation xmi:id="_0Yf5uguuEeGvGIuLiiZuOg" base_Constraint="_0Yf5uAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-161</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Yf5vQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Yf5uwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-180</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Yf5wAuuEeGvGIuLiiZuOg" base_Constraint="_0Yf5vguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0Yf5wwuuEeGvGIuLiiZuOg" base_Constraint="_0Yf5wQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0YmAVwuuEeGvGIuLiiZuOg" base_Constraint="_0YmAVQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-151</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YmAXguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0YmAXAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-153</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YmAYQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0YmAXwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-140</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YmAZAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0YmAYguuEeGvGIuLiiZuOg">
    <ruleId>CONF-256</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YsG8guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0YsG8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-179</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0YsG9QuuEeGvGIuLiiZuOg" base_Constraint="_0YsG8wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0YsG-QuuEeGvGIuLiiZuOg" base_Constraint="_0YsG9guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0YsG_AuuEeGvGIuLiiZuOg" base_Constraint="_0YsG-guuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0YsHBAuuEeGvGIuLiiZuOg" base_Constraint="_0YsHAguuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0Y4UjguuEeGvGIuLiiZuOg" base_Class="_0Y4UMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8" assigningAuthorityName="HITSP C83" contextDependent="true">
    <ruleId>C83-[DE-8-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0Y-a1wuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UNwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8-CDA-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEhcwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Y4UQQuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.08-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEhdQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Y4URQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.12-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEhdguuEeGvGIuLiiZuOg" base_Constraint="_0Y4URwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0ZEhdwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Y4USQuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.20-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEheAuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UTAuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.20-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEheQuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UTwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.20-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEheguuEeGvGIuLiiZuOg" base_Constraint="_0Y4UUQuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.20-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEhewuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UUwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.22-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZEhfAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Y4UVguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoEAuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UWQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoEQuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UWwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoEguuEeGvGIuLiiZuOg" base_Constraint="_0Y4UXQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-4]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoEwuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UXwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-5]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoFAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Y4UYQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.24-CDA-6]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ZKoFQuuEeGvGIuLiiZuOg" base_Constraint="_0Y4UYwuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.24-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0ZQuwwuuEeGvGIuLiiZuOg" base_Class="_0ZQuuQuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.46" assigningAuthorityName="CCD"/>
  <CDA:CDATemplate xmi:id="_0ZW1VwuuEeGvGIuLiiZuOg" base_Class="_0ZW1VAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.47" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0Zc79AuuEeGvGIuLiiZuOg" base_Constraint="_0Zc78guuEeGvGIuLiiZuOg">
    <ruleId>CONF-509</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Zc7-wuuEeGvGIuLiiZuOg" base_Constraint="_0Zc7-QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-518</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Zc7_guuEeGvGIuLiiZuOg" base_Constraint="_0Zc7_AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-519</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0Zc8EwuuEeGvGIuLiiZuOg" base_Class="_0Zc8DAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.52" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0ZjCkQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0Zc8DguuEeGvGIuLiiZuOg">
    <ruleId>CONF-451</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0ZjCowuuEeGvGIuLiiZuOg" base_Class="_0ZjCmguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.4.1"/>
  <CDA:CDATemplate xmi:id="_0ZjCwAuuEeGvGIuLiiZuOg" base_Class="_0ZjCsQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.3"/>
  <CDA:CDATemplate xmi:id="_0ZvP2AuuEeGvGIuLiiZuOg" base_Class="_0ZvP1AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8.1">
    <ruleId>C83-[DE-8.19-CDA-1]</ruleId>
    <ruleId>C83-[DE-8.19-CDA-4]</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_0Z1WpAuuEeGvGIuLiiZuOg" base_Class="_0Z1WcwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8.3">
    <ruleId>C83-[DE-8-CDA-6]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0Z7dEAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0Z1WdQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.26-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Z7dEQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0Z1WeAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0Z7dEguuEeGvGIuLiiZuOg" base_Constraint="_0Z1WewuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.26-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Z7dEwuuEeGvGIuLiiZuOg" base_Constraint="_0Z1WfguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.26-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Z7dFguuEeGvGIuLiiZuOg" base_Constraint="_0Z1WhAuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.34-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0Z7dFwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0Z1WhwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.34-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aBjsAuuEeGvGIuLiiZuOg" base_Constraint="_0Z1WjAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aBjsQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0Z1WjwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aBjtQuuEeGvGIuLiiZuOg" base_Constraint="_0Z1WlwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aBjtguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0Z1WmguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.39-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0aHqZQuuEeGvGIuLiiZuOg" base_Class="_0aHqWQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.3.1"/>
  <CDA:ConstraintValidation xmi:id="_0aNw_QuuEeGvGIuLiiZuOg" base_Constraint="_0aNw-wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-317</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aNxAQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0aNw_guuEeGvGIuLiiZuOg">
    <ruleId>CONF-323</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aNxBQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0aNxAguuEeGvGIuLiiZuOg">
    <ruleId>CONF-324</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aNxCQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0aNxBguuEeGvGIuLiiZuOg">
    <ruleId>CONF-325</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aT3kguuEeGvGIuLiiZuOg" base_Constraint="_0aT3kAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-326</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aT3lQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0aT3kwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-355</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0aT3nAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0aT3mguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aT3nwuuEeGvGIuLiiZuOg" base_Constraint="_0aT3nQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aT3oguuEeGvGIuLiiZuOg" base_Constraint="_0aT3oAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aT3pguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0aT3owuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aT3qQuuEeGvGIuLiiZuOg" base_Constraint="_0aT3pwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aZ-MAuuEeGvGIuLiiZuOg" base_Constraint="_0aT3qguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aZ-MwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0aZ-MQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aZ-NguuEeGvGIuLiiZuOg" base_Constraint="_0aZ-NAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aZ-OQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0aZ-NwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0aZ-PAuuEeGvGIuLiiZuOg" base_Constraint="_0aZ-OguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0agE2QuuEeGvGIuLiiZuOg" base_Constraint="_0agE1wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0agE3AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0agE2guuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0agE3wuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0agE3QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLcguuEeGvGIuLiiZuOg" base_Constraint="_0amLcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLdguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0amLcwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLeguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0amLdwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLfQuuEeGvGIuLiiZuOg" base_Constraint="_0amLewuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLgAuuEeGvGIuLiiZuOg" base_Constraint="_0amLfguuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLiguuEeGvGIuLiiZuOg" base_Constraint="_0amLhwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0amLjwuuEeGvGIuLiiZuOg" base_Constraint="_0amLiwuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0amLkguuEeGvGIuLiiZuOg" base_Constraint="_0amLkAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSEwuuEeGvGIuLiiZuOg" base_Constraint="_0asSEAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSFguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0asSFAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSGQuuEeGvGIuLiiZuOg" base_Constraint="_0asSFwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSHAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0asSGguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSHwuuEeGvGIuLiiZuOg" base_Constraint="_0asSHQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0asSIwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0asSIAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0a4fYAuuEeGvGIuLiiZuOg" base_Class="_0a4fVAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.7">
    <ruleId>C83-[DE-7-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0a4fYQuuEeGvGIuLiiZuOg" base_Constraint="_0a4fVguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.05-CDA-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0a4fYguuEeGvGIuLiiZuOg" base_Constraint="_0a4fWAuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.05-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0a4fYwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0a4fWguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.05-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bEstAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bEsnQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.01-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bEstQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bEsnwuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.01-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bEstguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bEsoQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-7.01-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0bQ54wuuEeGvGIuLiiZuOg" base_Class="_0bQ54QuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.42" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0bXAiguuEeGvGIuLiiZuOg" base_Constraint="_0bXAiAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-209</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bXAlQuuEeGvGIuLiiZuOg" base_Constraint="_0bXAkwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bXAmAuuEeGvGIuLiiZuOg" base_Constraint="_0bXAlguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bdHEguuEeGvGIuLiiZuOg" base_Constraint="_0bdHEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-214</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bdHFQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bdHEwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bdHHAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bdHGguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bdHHwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bdHHQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bdHIwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bdHIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-219</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bjNswuuEeGvGIuLiiZuOg" base_Constraint="_0bjNsQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-161</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bjNtguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0bjNtAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-180</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bjNuQuuEeGvGIuLiiZuOg" base_Constraint="_0bjNtwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bjNvAuuEeGvGIuLiiZuOg" base_Constraint="_0bjNuguuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0bpUUQuuEeGvGIuLiiZuOg" base_Class="_0bEsmwuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.5"/>
  <CDA:ConstraintValidation xmi:id="_0bpUVAuuEeGvGIuLiiZuOg" base_Constraint="_0bpUUguuEeGvGIuLiiZuOg">
    <ruleId>CONF-151</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bpUWwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bpUWQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-153</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bpUXguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bpUXAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-140</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bpUYQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0bpUXwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-256</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bpUZAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0bpUYguuEeGvGIuLiiZuOg">
    <ruleId>CONF-179</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0bpUZwuuEeGvGIuLiiZuOg" base_Constraint="_0bpUZQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bpUawuuEeGvGIuLiiZuOg" base_Constraint="_0bpUaAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bpUbguuEeGvGIuLiiZuOg" base_Constraint="_0bpUbAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0bva9wuuEeGvGIuLiiZuOg" base_Constraint="_0bva9QuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0bvbKguuEeGvGIuLiiZuOg" base_Class="_0bva_AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.32.1" assigningAuthorityName="HITSP C32">
    <ruleId>C32-[CT1-19]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0bvbKwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0bva_guuEeGvGIuLiiZuOg">
    <ruleId>C32-[CT1-6]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0cH1eguuEeGvGIuLiiZuOg" base_Class="_0cH1cAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.125" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0cMuHwuuEeGvGIuLiiZuOg" base_Class="_0cMt8AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.18" assigningAuthorityName="HITSP"/>
  <CDA:ConstraintValidation xmi:id="_0cPKMAuuEeGvGIuLiiZuOg" base_Constraint="_0cMt9wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cQYUAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0cMt_AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cQ_YAuuEeGvGIuLiiZuOg" base_Constraint="_0cMt_wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cUpwAuuEeGvGIuLiiZuOg" base_Constraint="_0cMuCQuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0cheFwuuEeGvGIuLiiZuOg" base_Class="_0cheEAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.13.3" assigningAuthorityName="IHE PCC"/>
  <CDA:ConstraintValidation xmi:id="_0crPEguuEeGvGIuLiiZuOg" base_Constraint="_0crPEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-209</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ctrUguuEeGvGIuLiiZuOg" base_Constraint="_0ctrUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cuSYguuEeGvGIuLiiZuOg" base_Constraint="_0cuSYAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cu5cguuEeGvGIuLiiZuOg" base_Constraint="_0cu5cAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-214</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0cvggguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0cvggAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cwuoguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0cwuoAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cx8wAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0cxVsAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0cyj0wuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0cyj0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-219</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c54kAuuEeGvGIuLiiZuOg" base_Constraint="_0c5RgQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-205</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c6foAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0c54kQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0c7GsguuEeGvGIuLiiZuOg" base_Constraint="_0c7GsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-208</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c7twguuEeGvGIuLiiZuOg" base_Constraint="_0c7twAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-212</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c8U0guuEeGvGIuLiiZuOg" base_Constraint="_0c8U0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-213</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c874guuEeGvGIuLiiZuOg" base_Constraint="_0c874AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0c9i8guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0c9i8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-215</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c_YIAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0c-xEQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-217</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c_YIwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0c_YIQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-218</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0c__MguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0c__MAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-219</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dDCgwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0dDCgQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0dDpkguuEeGvGIuLiiZuOg" base_Constraint="_0dDpkAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0dEQoguuEeGvGIuLiiZuOg" base_Constraint="_0dEQoAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0dE3sguuEeGvGIuLiiZuOg" base_Constraint="_0dE3sAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0dJwMguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0dJwMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-184</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dKXQguuEeGvGIuLiiZuOg" base_Constraint="_0dKXQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-189</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0dMziQuuEeGvGIuLiiZuOg" base_Class="_0dMzgwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.126" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0dS6IAuuEeGvGIuLiiZuOg" base_Class="_0dSTEAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.33"/>
  <CDA:CDATemplate xmi:id="_0dcEFQuuEeGvGIuLiiZuOg" base_Class="_0dcEEguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.56" assigningAuthorityName="HL7"/>
  <CDA:ConstraintValidation xmi:id="_0dl1EAuuEeGvGIuLiiZuOg" base_Constraint="_0dlOAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-509</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dnDMguuEeGvGIuLiiZuOg" base_Constraint="_0dnDMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-518</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dnqQguuEeGvGIuLiiZuOg" base_Constraint="_0dnqQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-519</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dqtkguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0dqtkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-243</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0dtJ0AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0dsiwAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0dtw4guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0dtw4AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0duX8guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0duX8AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0du_AguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0du_AAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0d260guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0d260AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-250</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0d3h4guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0d3h4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-251</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0d4I8guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0d4I8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-252</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0d4wAguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0d4wAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-253</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0d5-IAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0d5XEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-254</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0d6lMguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0d6lMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-255</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0d9BcAuuEeGvGIuLiiZuOg" base_Class="_0d8aYwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.14" assigningAuthorityName="CCD"/>
  <CDA:CDATemplate xmi:id="_0eGygQuuEeGvGIuLiiZuOg" base_Class="_0eGycAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.15">
    <ruleId>C83-[DE-15-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0eInoAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eGycguuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-15.03-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eJOsAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eGydAuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-15.03-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eJOsQuuEeGvGIuLiiZuOg" base_Constraint="_0eGydguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-15.05-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eMSBwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eMSBQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-413</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eOHMguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eOHMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-419</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eOuQguuEeGvGIuLiiZuOg" base_Constraint="_0eOuQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-420</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eOuRQuuEeGvGIuLiiZuOg" base_Constraint="_0eOuQwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-421</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eQjcguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eQjcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-398</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eSYoAuuEeGvGIuLiiZuOg" base_Constraint="_0eRxlAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-402</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eTmwguuEeGvGIuLiiZuOg" base_Constraint="_0eTmwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-406</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0eVb8AuuEeGvGIuLiiZuOg" base_Class="_0eChAAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.32"/>
  <CDA:CDATemplate xmi:id="_0eXRIwuuEeGvGIuLiiZuOg" base_Class="_0eXRIAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.128" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0efM9guuEeGvGIuLiiZuOg" base_Class="_0efM8wuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.109" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0eiQQwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0eiQQQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-123</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ejeYwuuEeGvGIuLiiZuOg" base_Constraint="_0ejeYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-128</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ekFcguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0ekFcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-129</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0env0guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0env0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-134</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eoW4guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0eoW4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-135</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eo98guuEeGvGIuLiiZuOg" base_Constraint="_0eo98AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-136</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0eo99QuuEeGvGIuLiiZuOg" base_Constraint="_0eo98wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-137</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0eqzMQuuEeGvGIuLiiZuOg" base_Class="_0eqzIwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.13" assigningAuthorityName="CCD"/>
  <CDA:CDATemplate xmi:id="_0evroAuuEeGvGIuLiiZuOg" base_Class="_0evEkAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.30" assigningAuthorityName="CCD">
    <ruleId>CONF-20</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0ezWAAuuEeGvGIuLiiZuOg" base_Constraint="_0evEkguuEeGvGIuLiiZuOg">
    <ruleId>CONF-26</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ez9EAuuEeGvGIuLiiZuOg" base_Constraint="_0evElAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-27</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0e5cpguuEeGvGIuLiiZuOg" base_Class="_0e5coAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.116" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0e_jQAuuEeGvGIuLiiZuOg" base_Class="_0e-8MAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.12"/>
  <CDA:ConstraintValidation xmi:id="_0fCmkAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8NQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fD0sAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8OguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fFp4AuuEeGvGIuLiiZuOg" base_Constraint="_0e-8QQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fGQ8AuuEeGvGIuLiiZuOg" base_Constraint="_0e-8QwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fG4AAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8RQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fHfEAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8RwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fIGIAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8SQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0fItMAuuEeGvGIuLiiZuOg" base_Constraint="_0e-8SwuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0fQB8AuuEeGvGIuLiiZuOg" base_Class="_0fPa4wuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.58" assigningAuthorityName="CCD">
    <ruleId>CONF-92</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_0fUTZguuEeGvGIuLiiZuOg" base_Class="_0fUTYwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.37" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0fcPMguuEeGvGIuLiiZuOg" base_Constraint="_0fcPMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-509</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0fddUguuEeGvGIuLiiZuOg" base_Constraint="_0fddUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-518</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0feEYguuEeGvGIuLiiZuOg" base_Constraint="_0feEYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-519</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0fhuwAuuEeGvGIuLiiZuOg" base_Class="_0fhHsguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.36">
    <ruleId>CONF-101</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0fi84AuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0fhHswuuEeGvGIuLiiZuOg">
    <ruleId>CONF-106</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0fjj8AuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0fhHtQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-107</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0fkyEAuuEeGvGIuLiiZuOg" base_Constraint="_0fhHuguuEeGvGIuLiiZuOg">
    <ruleId>CONF-105</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0foccguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0foccAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-90</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0fpDgguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0fpDgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-91</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0fqRoAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0fpqlAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0f1QwAuuEeGvGIuLiiZuOg" base_Class="_0f0psAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.102" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0f8lhguuEeGvGIuLiiZuOg" base_Class="_0f8lgAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.103" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0gD6QAuuEeGvGIuLiiZuOg" base_Class="_0gDTMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.127" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0gJZ7guuEeGvGIuLiiZuOg" base_Class="_0gJZ0AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.21" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0gNrQAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0gJZ0QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0gOSUAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0gJZ0wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0gO5YAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0gJZ1QuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0gUZAAuuEeGvGIuLiiZuOg" base_Class="_0gUY8AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.45" assigningAuthorityName="CCD"/>
  <CDA:ConstraintValidation xmi:id="_0gVnEQuuEeGvGIuLiiZuOg" base_Constraint="_0gUY8QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-474</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0gWOIAuuEeGvGIuLiiZuOg" base_Constraint="_0gUY8wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-475</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0gW1MAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0gUY9QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-476</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0gYDUAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0gUY9wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-477</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0gYqYAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0gUY-QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-478</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0gZRcAuuEeGvGIuLiiZuOg" base_Constraint="_0gUY-wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-479</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0geJ9QuuEeGvGIuLiiZuOg" base_Class="_0gdi4AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.16">
    <ruleId>C83-[DE-16-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0ggmMAuuEeGvGIuLiiZuOg" base_Constraint="_0gdi4guuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0guopguuEeGvGIuLiiZuOg" base_Class="_0guooAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.117" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0g1WUAuuEeGvGIuLiiZuOg" base_Class="_0g0vQAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.13" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0g3LgAuuEeGvGIuLiiZuOg" base_Constraint="_0g0vQQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hF1AguuEeGvGIuLiiZuOg" base_Constraint="_0hF1AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hGcEAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hF1AwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hGcEwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0hGcEQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hHDIguuEeGvGIuLiiZuOg" base_Constraint="_0hHDIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hHqMwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0hHqMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hIRQwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0hIRQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hI4UguuEeGvGIuLiiZuOg" base_Constraint="_0hI4UAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hJfYAuuEeGvGIuLiiZuOg" base_Constraint="_0hI4UwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0hNJwguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hNJwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-298</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0hRbNguuEeGvGIuLiiZuOg" base_Class="_0hRbMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.101" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0hYJNQuuEeGvGIuLiiZuOg" base_Class="_0hYI4AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.5" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0hePgAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYI5QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0he2kAuuEeGvGIuLiiZuOg" base_Constraint="_0hYI5wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hfdoAuuEeGvGIuLiiZuOg" base_Constraint="_0hYI6QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hgEsAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0hYI6wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hgrwAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0hYI7QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hjIAAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYI9QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hjvEAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYI9wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hkWIAuuEeGvGIuLiiZuOg" base_Constraint="_0hYI-QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hk9MAuuEeGvGIuLiiZuOg" base_Constraint="_0hYI-wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hlkQAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYI_QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hoAgAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJAwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0honkAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJBQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hqcwAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJDQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hrq4AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYJEQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hsR8AuuEeGvGIuLiiZuOg" base_Constraint="_0hYJFQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hs5AAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYJFwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0htgEAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJGQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hvVQAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJIwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hv8UAuuEeGvGIuLiiZuOg" base_Constraint="_0hYJJQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0hxxgAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0hYJKwuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0h5GRQuuEeGvGIuLiiZuOg" base_Class="_0h5GQwuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.18" assigningAuthorityName="IHE PCC"/>
  <CDA:ConstraintValidation xmi:id="_0iHIsguuEeGvGIuLiiZuOg" base_Constraint="_0iHIsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-56</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iHvwguuEeGvGIuLiiZuOg" base_Constraint="_0iHvwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-58</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iI94guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0iI94AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-62</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iJk8guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0iJk8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-63</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iKzEAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0iKMAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-65</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iLaIguuEeGvGIuLiiZuOg" base_Constraint="_0iLaIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-66</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iMBMguuEeGvGIuLiiZuOg" base_Constraint="_0iMBMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-67</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iOdcguuEeGvGIuLiiZuOg" base_Constraint="_0iOdcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-47</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0iPEgguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0iPEgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-44</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0iXAVQuuEeGvGIuLiiZuOg" base_Class="_0iWZQAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.112" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0ib40guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0ib40AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-298</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0igxXAuuEeGvGIuLiiZuOg" base_Class="_0igxUAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.124" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0ipUPAuuEeGvGIuLiiZuOg" base_Class="_0ipUMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" assigningAuthorityName="CCD" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0irwcAuuEeGvGIuLiiZuOg" base_Constraint="_0ipUMQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-488</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0iwB7guuEeGvGIuLiiZuOg" base_Class="_0iwB4AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0ix3EQuuEeGvGIuLiiZuOg" base_Constraint="_0iwB4QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-488</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0i2IjAuuEeGvGIuLiiZuOg" base_Class="_0i2IgAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" assigningAuthorityName="" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0i39sQuuEeGvGIuLiiZuOg" base_Constraint="_0i2IgQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-490</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0i82PAuuEeGvGIuLiiZuOg" base_Class="_0i82MAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" assigningAuthorityName="" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0i-rYAuuEeGvGIuLiiZuOg" base_Constraint="_0i82MQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-488</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0jC83AuuEeGvGIuLiiZuOg" base_Class="_0jC80AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0jEyAAuuEeGvGIuLiiZuOg" base_Constraint="_0jC80QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-489</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0jJDfAuuEeGvGIuLiiZuOg" base_Class="_0jJDcAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.25" contextDependent="true">
    <ruleId>CONF-485</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0jK4oAuuEeGvGIuLiiZuOg" base_Constraint="_0jJDcQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-489</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0jPKIAuuEeGvGIuLiiZuOg" base_Class="_0jPKEAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.17">
    <ruleId>C83-[DE-17-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0jSNYAuuEeGvGIuLiiZuOg" base_Constraint="_0jPKEguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0jS0cAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0jPKFQuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0jYUCQuuEeGvGIuLiiZuOg" base_Class="_0jYUAAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.5.3.4"/>
  <CDA:CDATemplate xmi:id="_0jclhAuuEeGvGIuLiiZuOg" base_Class="_0jclcAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.13.5"/>
  <CDA:CDATemplate xmi:id="_0jlIVQuuEeGvGIuLiiZuOg" base_Class="_0jlIUAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.108" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0jpZ2AuuEeGvGIuLiiZuOg" base_Class="_0jpZwAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.4"/>
  <CDA:ConstraintValidation xmi:id="_0jrO8QuuEeGvGIuLiiZuOg" base_Constraint="_0jpZwQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0jr2AAuuEeGvGIuLiiZuOg" base_Constraint="_0jpZwwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0jsdEAuuEeGvGIuLiiZuOg" base_Constraint="_0jpZxguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0jtEIAuuEeGvGIuLiiZuOg" base_Constraint="_0jpZyAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0jtEIQuuEeGvGIuLiiZuOg" base_Constraint="_0jpZywuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0jwunwuuEeGvGIuLiiZuOg" base_Class="_0jwugAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.19" assigningAuthorityName="IHE PCC" contextDependent="true"/>
  <CDA:ConstraintValidation xmi:id="_0j0_8QuuEeGvGIuLiiZuOg" base_Constraint="_0jwugQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0j1nAAuuEeGvGIuLiiZuOg" base_Constraint="_0jwugwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0j21IAuuEeGvGIuLiiZuOg" base_Constraint="_0jwuhwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0j3cMAuuEeGvGIuLiiZuOg" base_Constraint="_0jwuiQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0kNacguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0kNacAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-419</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0kPPpAuuEeGvGIuLiiZuOg" base_Class="_0kPPoAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.3"/>
  <CDA:CDATemplate xmi:id="_0kWkZAuuEeGvGIuLiiZuOg" base_Class="_0kV9UAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.119" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0kXLcAuuEeGvGIuLiiZuOg" base_Constraint="_0kWkYQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[CT-119-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0kcrAAuuEeGvGIuLiiZuOg" base_Class="_0kcD8AuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.4.13.1" assigningAuthorityName="IHE PCC">
    <ruleId>6.3.4.21</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0kixoAuuEeGvGIuLiiZuOg" base_Constraint="_0kcD8guuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.21.3</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0koROAuuEeGvGIuLiiZuOg" base_Class="_0koRMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.14" assigningAuthorityName="HITSP">
    <ruleId>C83-[DE-14-CDA-1]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0kxbIwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0kxbIQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-413</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0kz3YguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0kz3YAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-419</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0k0ecguuEeGvGIuLiiZuOg" base_Constraint="_0k0ecAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-420</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0k1FgguuEeGvGIuLiiZuOg" base_Constraint="_0k1FgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-421</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0k_dkguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0k_dkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-398</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lB50AuuEeGvGIuLiiZuOg" base_Constraint="_0lBSwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-402</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lDvAguuEeGvGIuLiiZuOg" base_Constraint="_0lDvAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-406</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lEWEwuuEeGvGIuLiiZuOg" base_Constraint="_0lEWEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-387</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0lJ1oAuuEeGvGIuLiiZuOg" base_Class="_0lJOkAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.122" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0lKcsAuuEeGvGIuLiiZuOg" base_Constraint="_0lJOkguuEeGvGIuLiiZuOg">
    <ruleId>C83-[CT-122-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lRxcguuEeGvGIuLiiZuOg" base_Constraint="_0lRxcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-2</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lS_kAuuEeGvGIuLiiZuOg" base_Constraint="_0lSYgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-3</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lTmoAuuEeGvGIuLiiZuOg" base_Constraint="_0lS_kQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-4</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lUNsAuuEeGvGIuLiiZuOg" base_Constraint="_0lTmoQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lUNswuuEeGvGIuLiiZuOg" base_Constraint="_0lUNsQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lU0wguuEeGvGIuLiiZuOg" base_Constraint="_0lU0wAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lVb0guuEeGvGIuLiiZuOg" base_Constraint="_0lVb0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lWC4guuEeGvGIuLiiZuOg" base_Constraint="_0lWC4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lWp8AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0lWC4wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lWp8wuuEeGvGIuLiiZuOg" base_Constraint="_0lWp8QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lXRAguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0lXRAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lZtQguuEeGvGIuLiiZuOg" base_Constraint="_0lZtQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0laUUAuuEeGvGIuLiiZuOg" base_Constraint="_0lZtQwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0laUUwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0laUUQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0la7YwuuEeGvGIuLiiZuOg" base_Constraint="_0la7YAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lbicguuEeGvGIuLiiZuOg" base_Constraint="_0lbicAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lcJgguuEeGvGIuLiiZuOg" base_Constraint="_0lcJgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lcwkAuuEeGvGIuLiiZuOg" base_Constraint="_0lcJgwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ldXoguuEeGvGIuLiiZuOg" base_Constraint="_0ldXoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ld-swuuEeGvGIuLiiZuOg" base_Constraint="_0ld-sAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lelwguuEeGvGIuLiiZuOg" base_Constraint="_0lelwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lfM0guuEeGvGIuLiiZuOg" base_Constraint="_0lfM0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lga-AuuEeGvGIuLiiZuOg" base_Constraint="_0lga9QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lga-wuuEeGvGIuLiiZuOg" base_Constraint="_0lga-QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lgbBwuuEeGvGIuLiiZuOg" base_Constraint="_0lgbBAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lgbCguuEeGvGIuLiiZuOg" base_Constraint="_0lgbCAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lgbDguuEeGvGIuLiiZuOg" base_Constraint="_0lgbCwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhkAuuEeGvGIuLiiZuOg" base_Constraint="_0lgbDwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhkwuuEeGvGIuLiiZuOg" base_Constraint="_0lmhkQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhlwuuEeGvGIuLiiZuOg" base_Constraint="_0lmhlAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhoQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0lmhnwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhpQuuEeGvGIuLiiZuOg" base_Constraint="_0lmhoguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhqAuuEeGvGIuLiiZuOg" base_Constraint="_0lmhpguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lmhqwuuEeGvGIuLiiZuOg" base_Constraint="_0lmhqQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lsoMguuEeGvGIuLiiZuOg" base_Constraint="_0lsoMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lsoNQuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0lsoMwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lsoOAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0lsoNguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lsoOwuuEeGvGIuLiiZuOg" base_Constraint="_0lsoOQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lyu2QuuEeGvGIuLiiZuOg" base_Constraint="_0lyu1wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lyu3AuuEeGvGIuLiiZuOg" base_Constraint="_0lyu2guuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lyu4AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0lyu3QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0lyu5AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0lyu4QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0l41dwuuEeGvGIuLiiZuOg" base_Class="_0l41cAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.104" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0l-8EguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0l-8EAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0l-8HAuuEeGvGIuLiiZuOg" base_Class="_0l-8FguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.105" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mFCvAuuEeGvGIuLiiZuOg" base_Class="_0mFCsguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.106" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mLJWwuuEeGvGIuLiiZuOg" base_Class="_0mLJWAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.107" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mRP9guuEeGvGIuLiiZuOg" base_Class="_0mRP8AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.110" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mRQBQuuEeGvGIuLiiZuOg" base_Class="_0mRP_wuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.111" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mXWlQuuEeGvGIuLiiZuOg" base_Class="_0mXWkguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.113" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mXWoQuuEeGvGIuLiiZuOg" base_Class="_0mXWmwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.114" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mddNQuuEeGvGIuLiiZuOg" base_Class="_0mddMguuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.115" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mjj2guuEeGvGIuLiiZuOg" base_Class="_0mjj0AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.118" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0mpqewuuEeGvGIuLiiZuOg" base_Class="_0mpqcwuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.16" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0mvxHguuEeGvGIuLiiZuOg" base_Class="_0mvxFguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.48" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0m13wguuEeGvGIuLiiZuOg" base_Class="_0m13uguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.17" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0m7-YguuEeGvGIuLiiZuOg" base_Class="_0m7-WguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.18" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nCFAguuEeGvGIuLiiZuOg" base_Class="_0nCE-guuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.19" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nILoQuuEeGvGIuLiiZuOg" base_Class="_0nILmQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.20" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nOSQguuEeGvGIuLiiZuOg" base_Class="_0nOSOguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.21" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nafcAuuEeGvGIuLiiZuOg" base_Class="_0nUY2wuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.22" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0ngmHQuuEeGvGIuLiiZuOg" base_Class="_0ngmFQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.23" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nmsvQuuEeGvGIuLiiZuOg" base_Class="_0nmstQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.24" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0nszXQuuEeGvGIuLiiZuOg" base_Class="_0nszVQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.25" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0ny5_QuuEeGvGIuLiiZuOg" base_Class="_0ny59QuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.26" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0n5AnQuuEeGvGIuLiiZuOg" base_Class="_0n5AlQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.27" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0n_HOwuuEeGvGIuLiiZuOg" base_Class="_0n_HNQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.28" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oFN2guuEeGvGIuLiiZuOg" base_Class="_0oFN0guuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.29" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oLUeguuEeGvGIuLiiZuOg" base_Class="_0oLUcguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.30" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oLUjguuEeGvGIuLiiZuOg" base_Class="_0oLUhguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.31" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oRbIguuEeGvGIuLiiZuOg" base_Class="_0oRbGguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.32" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oXhvguuEeGvGIuLiiZuOg" base_Class="_0oXhtguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.33" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0odoXguuEeGvGIuLiiZuOg" base_Class="_0odoVguuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.34" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0oju_wuuEeGvGIuLiiZuOg" base_Class="_0oju9wuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.35" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0op1oQuuEeGvGIuLiiZuOg" base_Class="_0op1mQuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.36" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0pOdWAuuEeGvGIuLiiZuOg" base_Class="_0pOdUAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.9.37" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0pOdbAuuEeGvGIuLiiZuOg" base_Class="_0pOdZAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.1.16.2.1" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0pUkAAuuEeGvGIuLiiZuOg" base_Class="_0pUj_AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.120" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0paqkwuuEeGvGIuLiiZuOg" base_Class="_0paqkAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.121" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0paqqQuuEeGvGIuLiiZuOg" base_Class="_0paqmQuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.123" assigningAuthorityName="HITSP C83"/>
  <CDA:CDATemplate xmi:id="_0pgxSAuuEeGvGIuLiiZuOg" base_Class="_0pgxOAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.2">
    <ruleId>C83-[DE-2.01-CDA-2]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0pm31AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0pgxPQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-2.01-CDA-5]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0ps-gQuuEeGvGIuLiiZuOg" base_Class="_0ps-fwuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.4" assigningAuthorityName="HITSP C83"/>
  <CDA:ConstraintValidation xmi:id="_0qFZAguuEeGvGIuLiiZuOg" base_Constraint="_0qFZAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qFZBQuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0qFZAwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qFZCAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qFZBguuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qFZCwuuEeGvGIuLiiZuOg" base_Constraint="_0qFZCQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qFZDwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qFZDAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qFZEwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qFZEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qLfkguuEeGvGIuLiiZuOg" base_Constraint="_0qLfkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qLflQuuEeGvGIuLiiZuOg" base_Constraint="_0qLfkwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qLfnwuuEeGvGIuLiiZuOg" base_Constraint="_0qLfnAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfpAuuEeGvGIuLiiZuOg" base_Constraint="_0qLfoAuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qLfpwuuEeGvGIuLiiZuOg" base_Constraint="_0qLfpQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfqwuuEeGvGIuLiiZuOg" base_Constraint="_0qLfqAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfrguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0qLfrAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfsQuuEeGvGIuLiiZuOg" base_Constraint="_0qLfrwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLftAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qLfsguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLftwuuEeGvGIuLiiZuOg" base_Constraint="_0qLftQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfuwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0qLfuAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0qLfvguuEeGvGIuLiiZuOg" base_Constraint="_0qLfvAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0qUpgAuuEeGvGIuLiiZuOg" base_Class="_0pzFEAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8"/>
  <CDA:ConstraintValidation xmi:id="_0qwuZAuuEeGvGIuLiiZuOg" base_Constraint="_0qwuYguuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qx8gAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0qxVcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qyjkguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qyjkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qzKoguuEeGvGIuLiiZuOg" base_Constraint="_0qzKoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0qzxswuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0qzxsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0q0YwwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0q0YwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0q1m4AuuEeGvGIuLiiZuOg" base_Constraint="_0q0_0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0q2N8QuuEeGvGIuLiiZuOg" base_Constraint="_0q1m4QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0q21BguuEeGvGIuLiiZuOg" base_Constraint="_0q21AwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q3cEguuEeGvGIuLiiZuOg" base_Constraint="_0q21BwuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0q3cFQuuEeGvGIuLiiZuOg" base_Constraint="_0q3cEwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q4DIwuuEeGvGIuLiiZuOg" base_Constraint="_0q4DIAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q4qMguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0q4qMAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q5RQguuEeGvGIuLiiZuOg" base_Constraint="_0q5RQAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q54UAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0q5RQwuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q54UwuuEeGvGIuLiiZuOg" base_Constraint="_0q54UQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q6fYwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0q6fYAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0q7GcguuEeGvGIuLiiZuOg" base_Constraint="_0q7GcAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0q-JwAuuEeGvGIuLiiZuOg" base_Class="_0qVQkAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8"/>
  <CDA:CDATemplate xmi:id="_0q-w0wuuEeGvGIuLiiZuOg" base_Class="_0q-w0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rbcxAuuEeGvGIuLiiZuOg" base_Constraint="_0rbcwguuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rcD0guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0rcD0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rdR8guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0rdR8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rd5AguuEeGvGIuLiiZuOg" base_Constraint="_0rd5AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rd5BguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0rd5AwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0regEwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0regEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rfHIguuEeGvGIuLiiZuOg" base_Constraint="_0rfHIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rfuMguuEeGvGIuLiiZuOg" base_Constraint="_0rfuMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rgVSQuuEeGvGIuLiiZuOg" base_Constraint="_0rgVRguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rg8VAuuEeGvGIuLiiZuOg" base_Constraint="_0rg8UAuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0rhjYguuEeGvGIuLiiZuOg" base_Constraint="_0rhjYAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0riKcwuuEeGvGIuLiiZuOg" base_Constraint="_0riKcAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rixgguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0rixgAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rjYkguuEeGvGIuLiiZuOg" base_Constraint="_0rjYkAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rj_oguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0rj_oAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rkmsguuEeGvGIuLiiZuOg" base_Constraint="_0rkmsAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rlNwAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0rkmswuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0rlNwwuuEeGvGIuLiiZuOg" base_Constraint="_0rlNwQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0r9oRAuuEeGvGIuLiiZuOg" base_Constraint="_0r9oQguuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0r-PUAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0r9oRQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0r-PUwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0r-PUQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0r-2YguuEeGvGIuLiiZuOg" base_Constraint="_0r-2YAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0r_dcwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0r_dcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sArkAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0sAEgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sBSoguuEeGvGIuLiiZuOg" base_Constraint="_0sBSoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sB5sguuEeGvGIuLiiZuOg" base_Constraint="_0sB5sAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sCgyQuuEeGvGIuLiiZuOg" base_Constraint="_0sCgxguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sDu4AuuEeGvGIuLiiZuOg" base_Constraint="_0sDH0AuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sEV8AuuEeGvGIuLiiZuOg" base_Constraint="_0sDu4QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sE9AwuuEeGvGIuLiiZuOg" base_Constraint="_0sE9AAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sFkEguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0sFkEAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sGLIguuEeGvGIuLiiZuOg" base_Constraint="_0sGLIAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sGyMguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0sGyMAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sHZQguuEeGvGIuLiiZuOg" base_Constraint="_0sHZQAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sInYAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0sIAUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sJOcguuEeGvGIuLiiZuOg" base_Constraint="_0sJOcAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0sMRwAuuEeGvGIuLiiZuOg" base_Class="_0roREAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8"/>
  <CDA:ConstraintValidation xmi:id="_0si3FAuuEeGvGIuLiiZuOg" base_Constraint="_0si3EguuEeGvGIuLiiZuOg">
    <ruleId>CONF-305</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sjeIguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0sjeIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-311</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sksQAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0skFMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-314</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0slTUguuEeGvGIuLiiZuOg" base_Constraint="_0slTUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-315</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sl6YwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0sl6YAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-327</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0smhcwuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0smhcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-328</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0snIgguuEeGvGIuLiiZuOg" base_Constraint="_0snIgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-329</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0soWoAuuEeGvGIuLiiZuOg" base_Constraint="_0snvkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-354</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0so9tguuEeGvGIuLiiZuOg" base_Constraint="_0so9swuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0spkxAuuEeGvGIuLiiZuOg" base_Constraint="_0spkwAuuEeGvGIuLiiZuOg">
    <ruleId>6.3.4.16.22</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0sqL0guuEeGvGIuLiiZuOg" base_Constraint="_0sqL0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sqy4wuuEeGvGIuLiiZuOg" base_Constraint="_0sqy4AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0srZ8guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0srZ8AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0ssoEAuuEeGvGIuLiiZuOg" base_Constraint="_0ssBAAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0stPIguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0stPIAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0st2MguuEeGvGIuLiiZuOg" base_Constraint="_0st2MAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0sudQwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0sudQAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0syHoAuuEeGvGIuLiiZuOg" base_Class="_0sM40AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8"/>
  <CDA:CDATemplate xmi:id="_0szVxAuuEeGvGIuLiiZuOg" base_Class="_0szVwAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.3"/>
  <CDA:CDATemplate xmi:id="_0s4OSAuuEeGvGIuLiiZuOg" base_Class="_0s4OQAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.62.1"/>
  <CDA:ConstraintValidation xmi:id="_0s41UAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0s4OQguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0s5cYAuuEeGvGIuLiiZuOg" base_Constraint="_0s4ORAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0tCmWQuuEeGvGIuLiiZuOg" base_Class="_0tCmUAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.2.20.1"/>
  <CDA:ConstraintValidation xmi:id="_0tDNYAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0tCmUguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tD0cAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0tCmVAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0tHe0AuuEeGvGIuLiiZuOg" base_Class="_0tG3wAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.2.20.2"/>
  <CDA:ConstraintValidation xmi:id="_0tIF4AuuEeGvGIuLiiZuOg" base_Constraint="_0tG3wguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tIs8AuuEeGvGIuLiiZuOg" base_Constraint="_0tG3xAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tJUAAuuEeGvGIuLiiZuOg" base_Constraint="_0tG3xguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tJUAQuuEeGvGIuLiiZuOg" base_Constraint="_0tG3yAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tJ7EAuuEeGvGIuLiiZuOg" base_Constraint="_0tG3ywuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tKiIAuuEeGvGIuLiiZuOg" base_Constraint="_0tG3zguuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0tOMgAuuEeGvGIuLiiZuOg" base_Class="_0tNlcAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.2.20.3"/>
  <CDA:ConstraintValidation xmi:id="_0tOzkQuuEeGvGIuLiiZuOg" base_Constraint="_0tNlcguuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tPaoAuuEeGvGIuLiiZuOg" base_Constraint="_0tNldAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tTsFQuuEeGvGIuLiiZuOg" base_Constraint="_0tTsEwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tUTIguuEeGvGIuLiiZuOg" base_Constraint="_0tUTIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tU6MguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0tU6MAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tVhQwuuEeGvGIuLiiZuOg" base_Constraint="_0tVhQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tWIUguuEeGvGIuLiiZuOg" base_Constraint="_0tWIUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tWvYguuEeGvGIuLiiZuOg" base_Constraint="_0tWvYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tX9gAuuEeGvGIuLiiZuOg" base_Constraint="_0tXWcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tYkkAuuEeGvGIuLiiZuOg" base_Constraint="_0tX9gQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tZLowuuEeGvGIuLiiZuOg" base_Constraint="_0tZLoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tZysguuEeGvGIuLiiZuOg" base_Constraint="_0tZysAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0taZwguuEeGvGIuLiiZuOg" base_Constraint="_0taZwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tcO8wuuEeGvGIuLiiZuOg" base_Constraint="_0tcO8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tddEAuuEeGvGIuLiiZuOg" base_Constraint="_0tc2AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tfSQwuuEeGvGIuLiiZuOg" base_Constraint="_0tfSQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tf5UguuEeGvGIuLiiZuOg" base_Constraint="_0tf5UAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tggYwuuEeGvGIuLiiZuOg" base_Constraint="_0tggYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0thHcguuEeGvGIuLiiZuOg" base_Constraint="_0thHcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0thugguuEeGvGIuLiiZuOg" base_Constraint="_0thugAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ti8oAuuEeGvGIuLiiZuOg" base_Constraint="_0tiVkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tkx0guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0tkx0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tlY4wuuEeGvGIuLiiZuOg" base_Constraint="_0tlY4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tmnAAuuEeGvGIuLiiZuOg" base_Constraint="_0tl_8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tnOEAuuEeGvGIuLiiZuOg" base_Constraint="_0tmnAQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tn1IguuEeGvGIuLiiZuOg" base_Constraint="_0tn1IAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tocMguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0tocMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tpDQguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0tpDQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tpqUguuEeGvGIuLiiZuOg" base_Constraint="_0tpqUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tvw8AuuEeGvGIuLiiZuOg" base_Constraint="_0tvJ4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0twYAAuuEeGvGIuLiiZuOg" base_Constraint="_0tvw8QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tw_EwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0tw_EAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0txmIwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0txmIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0tyNMguuEeGvGIuLiiZuOg" base_Constraint="_0tyNMAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0ty0QwuuEeGvGIuLiiZuOg" base_Constraint="_0ty0QAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0tzbUguuEeGvGIuLiiZuOg" base_Constraint="_0tzbUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t0pcAuuEeGvGIuLiiZuOg" base_Constraint="_0t0CYAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t1QgwuuEeGvGIuLiiZuOg" base_Constraint="_0t1QgAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t13kguuEeGvGIuLiiZuOg" base_Constraint="_0t13kAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t2eoguuEeGvGIuLiiZuOg" base_Constraint="_0t2eoAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t3FsguuEeGvGIuLiiZuOg" base_Constraint="_0t3FsAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t3swguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0t3swAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t4T0guuEeGvGIuLiiZuOg" base_Constraint="_0t4T0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t464guuEeGvGIuLiiZuOg" base_Constraint="_0t464AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t6JAAuuEeGvGIuLiiZuOg" base_Constraint="_0t5h8AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t6wEAuuEeGvGIuLiiZuOg" base_Constraint="_0t6JAQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t7XIguuEeGvGIuLiiZuOg" base_Constraint="_0t7XIAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t7-MwuuEeGvGIuLiiZuOg" base_Constraint="_0t7-MAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t8lQguuEeGvGIuLiiZuOg" base_Constraint="_0t8lQAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t9MUguuEeGvGIuLiiZuOg" base_Constraint="_0t9MUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0t9zYwuuEeGvGIuLiiZuOg" base_Constraint="_0t9zYAuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0uAPuQuuEeGvGIuLiiZuOg" base_Class="_0uAPoAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.83.8.2">
    <ruleId>C83-[DE-8-CDA-5]</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_0uBdwAuuEeGvGIuLiiZuOg" base_Constraint="_0uAPoguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.13-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uCr4AuuEeGvGIuLiiZuOg" base_Constraint="_0uAPpwuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.13-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uDS8AuuEeGvGIuLiiZuOg" base_Constraint="_0uAPqQuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.13-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uD6AAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0uAPqwuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.13-3]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uEhEAuuEeGvGIuLiiZuOg" base_Constraint="_0uAPrQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.14-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uFIIAuuEeGvGIuLiiZuOg" base_Constraint="_0uAPsAuuEeGvGIuLiiZuOg">
    <ruleId>C154-[DE-8.14-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uFvMAuuEeGvGIuLiiZuOg" base_Constraint="_0uAPsguuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.15-CDA-1]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uGWQAuuEeGvGIuLiiZuOg" base_Constraint="_0uAPtQuuEeGvGIuLiiZuOg">
    <ruleId>C83-[DE-8.14-CDA-2]</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uILcAuuEeGvGIuLiiZuOg" base_Constraint="_0uHkYQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-357</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uIygAuuEeGvGIuLiiZuOg" base_Constraint="_0uILcQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-358</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uJZkguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0uJZkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-359</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uMc4AuuEeGvGIuLiiZuOg" base_Constraint="_0uL10AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-363</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uND8AuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0uMc4QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-364</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uNrAguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0uNrAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-365</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uOSEguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0uOSEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-367</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0umskguuEeGvGIuLiiZuOg" base_Constraint="_0umskAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0unToguuEeGvGIuLiiZuOg" base_Constraint="_0unToAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0un6sAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0unTowuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0un6tAuuEeGvGIuLiiZuOg" base_Constraint="_0un6sQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uohwguuEeGvGIuLiiZuOg" base_Constraint="_0uohwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0upI0guuEeGvGIuLiiZuOg" base_Constraint="_0upI0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0upv5AuuEeGvGIuLiiZuOg" base_Constraint="_0upv4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uqW8QuuEeGvGIuLiiZuOg" base_Constraint="_0upv5QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uqW9QuuEeGvGIuLiiZuOg" base_Constraint="_0uqW8guuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uq-AguuEeGvGIuLiiZuOg" base_Constraint="_0uq-AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0urlEguuEeGvGIuLiiZuOg" base_Constraint="_0urlEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uszNAuuEeGvGIuLiiZuOg" base_Constraint="_0uszMQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uuBUAuuEeGvGIuLiiZuOg" base_Constraint="_0utaQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uv2gwuuEeGvGIuLiiZuOg" base_Constraint="_0uv2gAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uwdkguuEeGvGIuLiiZuOg" base_Constraint="_0uwdkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uxEowuuEeGvGIuLiiZuOg" base_Constraint="_0uxEoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uxrsguuEeGvGIuLiiZuOg" base_Constraint="_0uxrsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uy50AuuEeGvGIuLiiZuOg" base_Constraint="_0uySwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0uzg4AuuEeGvGIuLiiZuOg" base_Constraint="_0uy50QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u1WEguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0u1WEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u2kMAuuEeGvGIuLiiZuOg" base_Constraint="_0u19IAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u3LQguuEeGvGIuLiiZuOg" base_Constraint="_0u3LQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u3yUguuEeGvGIuLiiZuOg" base_Constraint="_0u3yUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u4ZYguuEeGvGIuLiiZuOg" base_Constraint="_0u4ZYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u5AcguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0u5AcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u5ngguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0u5ngAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u6OkguuEeGvGIuLiiZuOg" base_Constraint="_0u6OkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u_HEguuEeGvGIuLiiZuOg" base_Constraint="_0u_HEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0u_uIguuEeGvGIuLiiZuOg" base_Constraint="_0u_uIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vAVMwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vAVMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vA8QwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vA8QAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vCKYAuuEeGvGIuLiiZuOg" base_Constraint="_0vBjUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vCKZAuuEeGvGIuLiiZuOg" base_Constraint="_0vCKYQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vCxcguuEeGvGIuLiiZuOg" base_Constraint="_0vCxcAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vDYgguuEeGvGIuLiiZuOg" base_Constraint="_0vDYgAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vD_kwuuEeGvGIuLiiZuOg" base_Constraint="_0vD_kAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vEmoAuuEeGvGIuLiiZuOg" base_Constraint="_0vD_lAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vEmowuuEeGvGIuLiiZuOg" base_Constraint="_0vEmoQuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vFNsguuEeGvGIuLiiZuOg" base_Constraint="_0vFNsAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vF0wguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vF0wAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vGb0guuEeGvGIuLiiZuOg" base_Constraint="_0vGb0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vHC4AuuEeGvGIuLiiZuOg" base_Constraint="_0vGb0wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vHC4wuuEeGvGIuLiiZuOg" base_Constraint="_0vHC4QuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vHp8guuEeGvGIuLiiZuOg" base_Constraint="_0vHp8AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vIRAguuEeGvGIuLiiZuOg" base_Constraint="_0vIRAAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vI4EwuuEeGvGIuLiiZuOg" base_Constraint="_0vI4EAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vKGMguuEeGvGIuLiiZuOg" base_Constraint="_0vKGMAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vKtQguuEeGvGIuLiiZuOg" base_Constraint="_0vKtQAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vLUUwuuEeGvGIuLiiZuOg" base_Constraint="_0vLUUAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vL7YguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vL7YAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vNJgAuuEeGvGIuLiiZuOg" base_Constraint="_0vMicAuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0vNwkguuEeGvGIuLiiZuOg" base_Constraint="_0vNwkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vOXoguuEeGvGIuLiiZuOg" base_Constraint="_0vOXoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vO-sguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vO-sAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vPlwwuuEeGvGIuLiiZuOg" base_Constraint="_0vPlwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vQM0guuEeGvGIuLiiZuOg" base_Constraint="_0vQM0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vQz4guuEeGvGIuLiiZuOg" base_Constraint="_0vQz4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vSCAAuuEeGvGIuLiiZuOg" base_Constraint="_0vRa8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vSpEguuEeGvGIuLiiZuOg" base_Constraint="_0vSpEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vTQIwuuEeGvGIuLiiZuOg" base_Constraint="_0vTQIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vT3MguuEeGvGIuLiiZuOg" base_Constraint="_0vT3MAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vUeQguuEeGvGIuLiiZuOg" base_Constraint="_0vUeQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vW6gAuuEeGvGIuLiiZuOg" base_Constraint="_0vWTcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vXhkAuuEeGvGIuLiiZuOg" base_Constraint="_0vW6gQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vZWwwuuEeGvGIuLiiZuOg" base_Constraint="_0vZWwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vZ90guuEeGvGIuLiiZuOg" base_Constraint="_0vZ90AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vak4wuuEeGvGIuLiiZuOg" base_Constraint="_0vak4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vbL8guuEeGvGIuLiiZuOg" base_Constraint="_0vbL8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vcaEAuuEeGvGIuLiiZuOg" base_Constraint="_0vbzAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vdBIQuuEeGvGIuLiiZuOg" base_Constraint="_0vcaEQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ve2UguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0ve2UAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vgEcAuuEeGvGIuLiiZuOg" base_Constraint="_0vfdYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vgrgAuuEeGvGIuLiiZuOg" base_Constraint="_0vgEcQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vhSkguuEeGvGIuLiiZuOg" base_Constraint="_0vhSkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vh5oguuEeGvGIuLiiZuOg" base_Constraint="_0vh5oAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vigsguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0vigsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vjHwguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0vjHwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vju0guuEeGvGIuLiiZuOg" base_Constraint="_0vju0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0voAQguuEeGvGIuLiiZuOg" base_Constraint="_0voAQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vonUguuEeGvGIuLiiZuOg" base_Constraint="_0vonUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vpOYwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vpOYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vp1cwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0vp1cAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vqcgAuuEeGvGIuLiiZuOg" base_Constraint="_0vp1dAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vqcgwuuEeGvGIuLiiZuOg" base_Constraint="_0vqcgQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vrDkguuEeGvGIuLiiZuOg" base_Constraint="_0vrDkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-26</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vrqoguuEeGvGIuLiiZuOg" base_Constraint="_0vrqoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vsRsguuEeGvGIuLiiZuOg" base_Constraint="_0vsRsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vsRtQuuEeGvGIuLiiZuOg" base_Constraint="_0vsRswuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vs4wguuEeGvGIuLiiZuOg" base_Constraint="_0vs4wAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vtf0guuEeGvGIuLiiZuOg" base_Constraint="_0vtf0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vuG4guuEeGvGIuLiiZuOg" base_Constraint="_0vuG4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-34</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vut8AuuEeGvGIuLiiZuOg" base_Constraint="_0vuG4wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-35</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0vut8wuuEeGvGIuLiiZuOg" base_Constraint="_0vut8QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-UD-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0vwjIAuuEeGvGIuLiiZuOg" base_Class="_0uQuUAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.19.1"/>
  <CDA:CDATemplate xmi:id="_0vxKMguuEeGvGIuLiiZuOg" base_Class="_0vxKMAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.48.1"/>
  <CDA:ConstraintValidation xmi:id="_0wAaxAuuEeGvGIuLiiZuOg" base_Constraint="_0wAawguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wBB0guuEeGvGIuLiiZuOg" base_Constraint="_0wBB0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wBo4guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0wBo4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wC3AAuuEeGvGIuLiiZuOg" base_Constraint="_0wCP8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wDeEAuuEeGvGIuLiiZuOg" base_Constraint="_0wC3AQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wEFIguuEeGvGIuLiiZuOg" base_Constraint="_0wEFIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wEsNAuuEeGvGIuLiiZuOg" base_Constraint="_0wEsMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wFTQguuEeGvGIuLiiZuOg" base_Constraint="_0wFTQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wF6UwuuEeGvGIuLiiZuOg" base_Constraint="_0wF6UAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wGhYguuEeGvGIuLiiZuOg" base_Constraint="_0wGhYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wHIcguuEeGvGIuLiiZuOg" base_Constraint="_0wHIcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wJkswuuEeGvGIuLiiZuOg" base_Constraint="_0wJksAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wKLwguuEeGvGIuLiiZuOg" base_Constraint="_0wKLwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wMA8wuuEeGvGIuLiiZuOg" base_Constraint="_0wMA8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wMoAguuEeGvGIuLiiZuOg" base_Constraint="_0wMoAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wN2IAuuEeGvGIuLiiZuOg" base_Constraint="_0wNPEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wOdMguuEeGvGIuLiiZuOg" base_Constraint="_0wOdMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wPEQguuEeGvGIuLiiZuOg" base_Constraint="_0wPEQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wPrUwuuEeGvGIuLiiZuOg" base_Constraint="_0wPrUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wSHkAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0wRggAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wSuowuuEeGvGIuLiiZuOg" base_Constraint="_0wSuoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wTVsguuEeGvGIuLiiZuOg" base_Constraint="_0wTVsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wT8wguuEeGvGIuLiiZuOg" base_Constraint="_0wT8wAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wUj0guuEeGvGIuLiiZuOg" base_Constraint="_0wUj0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wVK4guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0wVK4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wVx8guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0wVx8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wXAEAuuEeGvGIuLiiZuOg" base_Constraint="_0wWZAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wb4kwuuEeGvGIuLiiZuOg" base_Constraint="_0wb4kQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wcfoguuEeGvGIuLiiZuOg" base_Constraint="_0wcfoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wdGswuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0wdGsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0wdtwwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0wdtwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0weU0guuEeGvGIuLiiZuOg" base_Constraint="_0weU0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0weU1QuuEeGvGIuLiiZuOg" base_Constraint="_0weU0wuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0we74guuEeGvGIuLiiZuOg" base_Constraint="_0we74AuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0wh_MAuuEeGvGIuLiiZuOg" base_Class="_0whYIAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.3.88.11.48.2"/>
  <CDA:CDATemplate xmi:id="_0xBudguuEeGvGIuLiiZuOg" base_Class="_0xBucAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.3.33"/>
  <CDA:ConstraintValidation xmi:id="_0xFY0AuuEeGvGIuLiiZuOg" base_Constraint="_0xExwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xFY0wuuEeGvGIuLiiZuOg" base_Constraint="_0xFY0QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xF_4guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0xF_4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xGm8wuuEeGvGIuLiiZuOg" base_Constraint="_0xGm8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xHOAguuEeGvGIuLiiZuOg" base_Constraint="_0xHOAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xH1EguuEeGvGIuLiiZuOg" base_Constraint="_0xH1EAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xH1FwuuEeGvGIuLiiZuOg" base_Constraint="_0xH1EwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xIcIguuEeGvGIuLiiZuOg" base_Constraint="_0xIcIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xJDMwuuEeGvGIuLiiZuOg" base_Constraint="_0xJDMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xKRUAuuEeGvGIuLiiZuOg" base_Constraint="_0xJqQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xK4YAuuEeGvGIuLiiZuOg" base_Constraint="_0xKRUQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xMtkwuuEeGvGIuLiiZuOg" base_Constraint="_0xMtkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xNUoguuEeGvGIuLiiZuOg" base_Constraint="_0xNUoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xPw4AuuEeGvGIuLiiZuOg" base_Constraint="_0xPJ0QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xQX8guuEeGvGIuLiiZuOg" base_Constraint="_0xQX8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xQ_AwuuEeGvGIuLiiZuOg" base_Constraint="_0xQ_AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xRmEguuEeGvGIuLiiZuOg" base_Constraint="_0xRmEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xSNIguuEeGvGIuLiiZuOg" base_Constraint="_0xSNIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xS0MwuuEeGvGIuLiiZuOg" base_Constraint="_0xS0MAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xVQcguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0xVQcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xV3gwuuEeGvGIuLiiZuOg" base_Constraint="_0xV3gAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xWekguuEeGvGIuLiiZuOg" base_Constraint="_0xWekAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xXFoguuEeGvGIuLiiZuOg" base_Constraint="_0xXFoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xXssguuEeGvGIuLiiZuOg" base_Constraint="_0xXssAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xY60AuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0xYTwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xZh4guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0xZh4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xaI8guuEeGvGIuLiiZuOg" base_Constraint="_0xaI8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xfogguuEeGvGIuLiiZuOg" base_Constraint="_0xfogAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xgPkguuEeGvGIuLiiZuOg" base_Constraint="_0xgPkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xhdsAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0xg2oAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xiEwwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0xiEwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xir0guuEeGvGIuLiiZuOg" base_Constraint="_0xir0AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0xjS4guuEeGvGIuLiiZuOg" base_Constraint="_0xjS4AuuEeGvGIuLiiZuOg"/>
  <CDA:ConstraintValidation xmi:id="_0xj58guuEeGvGIuLiiZuOg" base_Constraint="_0xj58AuuEeGvGIuLiiZuOg"/>
  <CDA:CDATemplate xmi:id="_0xpZvQuuEeGvGIuLiiZuOg" base_Class="_0xpZgAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2"/>
  <CDA:ConstraintValidation xmi:id="_0xtq8AuuEeGvGIuLiiZuOg" base_Constraint="_0xpZiguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-92</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xuSAAuuEeGvGIuLiiZuOg" base_Constraint="_0xpZjAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-91</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xu5EAuuEeGvGIuLiiZuOg" base_Constraint="_0xpZjguuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-75</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0xvgIAuuEeGvGIuLiiZuOg" base_Constraint="_0xpZkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-74</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0yJv1AuuEeGvGIuLiiZuOg" base_Class="_0yJv0AuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.3.4" assigningAuthorityName="IHE PCC"/>
  <CDA:CDATemplate xmi:id="_0yOoVguuEeGvGIuLiiZuOg" base_Class="_0yOoUAuuEeGvGIuLiiZuOg" templateId="1.3.6.1.4.1.19376.1.5.3.1.3.18" assigningAuthorityName="IHE PCC">
    <ruleId>CONF-HP-83</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_0yTg3QuuEeGvGIuLiiZuOg" base_Class="_0yTg0AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.4"/>
  <CDA:ConstraintValidation xmi:id="_0yWkIAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0yTg0guuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-87</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0ya1lguuEeGvGIuLiiZuOg" base_Class="_0ya1kAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.5"/>
  <CDA:CDATemplate xmi:id="_0ylNoAuuEeGvGIuLiiZuOg" base_Class="_0yfuEAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.1.14"/>
  <CDA:ConstraintValidation xmi:id="_0yl0sguuEeGvGIuLiiZuOg" base_Constraint="_0yl0sAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ymbwguuEeGvGIuLiiZuOg" base_Constraint="_0ymbwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ynC0guuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0ynC0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yoQ8AuuEeGvGIuLiiZuOg" base_Constraint="_0ynp4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yo4AAuuEeGvGIuLiiZuOg" base_Constraint="_0yoQ8QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ypfEguuEeGvGIuLiiZuOg" base_Constraint="_0ypfEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yqGJAuuEeGvGIuLiiZuOg" base_Constraint="_0yqGIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yrUQguuEeGvGIuLiiZuOg" base_Constraint="_0yrUQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yr7UwuuEeGvGIuLiiZuOg" base_Constraint="_0yr7UAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ysiYguuEeGvGIuLiiZuOg" base_Constraint="_0ysiYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ytJcguuEeGvGIuLiiZuOg" base_Constraint="_0ytJcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yuXkwuuEeGvGIuLiiZuOg" base_Constraint="_0yuXkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yu-oguuEeGvGIuLiiZuOg" base_Constraint="_0yu-oAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ywMxAuuEeGvGIuLiiZuOg" base_Constraint="_0ywMwQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0ywz0guuEeGvGIuLiiZuOg" base_Constraint="_0ywz0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yxa4wuuEeGvGIuLiiZuOg" base_Constraint="_0yxa4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yyB8guuEeGvGIuLiiZuOg" base_Constraint="_0yyB8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yypAAuuEeGvGIuLiiZuOg" base_Constraint="_0yyB8wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0yypBAuuEeGvGIuLiiZuOg" base_Constraint="_0yypAQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y0eMguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0y0eMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y1FQwuuEeGvGIuLiiZuOg" base_Constraint="_0y1FQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y1sUAuuEeGvGIuLiiZuOg" base_Constraint="_0y1FRAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y1sUwuuEeGvGIuLiiZuOg" base_Constraint="_0y1sUQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y2TYguuEeGvGIuLiiZuOg" base_Constraint="_0y2TYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y26cguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0y26cAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y3hgguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0y3hgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y4IkAuuEeGvGIuLiiZuOg" base_Constraint="_0y3hgwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y7y8guuEeGvGIuLiiZuOg" base_Constraint="_0y7y8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y8aAguuEeGvGIuLiiZuOg" base_Constraint="_0y8aAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y9BEwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0y9BEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0y9oIAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0y9BFAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0zCgoAuuEeGvGIuLiiZuOg" base_Class="_0zB5kAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.4"/>
  <CDA:ConstraintValidation xmi:id="_0zFj8AuuEeGvGIuLiiZuOg" base_Constraint="_0zB5mguuEeGvGIuLiiZuOg">
    <ruleId>CONF-CO-26</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0zhByQuuEeGvGIuLiiZuOg" base_Class="_0zhBwAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.4.9"/>
  <CDA:ConstraintValidation xmi:id="_0zkFEguuEeGvGIuLiiZuOg" base_Constraint="_0zkFEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zksIguuEeGvGIuLiiZuOg" base_Constraint="_0zksIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zlTMguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0zlTMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zl6QwuuEeGvGIuLiiZuOg" base_Constraint="_0zl6QAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0znIYAuuEeGvGIuLiiZuOg" base_Constraint="_0zmhUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0znvcAuuEeGvGIuLiiZuOg" base_Constraint="_0znIYQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zoWgAuuEeGvGIuLiiZuOg" base_Constraint="_0znvcQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zoWgwuuEeGvGIuLiiZuOg" base_Constraint="_0zoWgQuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zo9kwuuEeGvGIuLiiZuOg" base_Constraint="_0zo9kAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zpkoguuEeGvGIuLiiZuOg" base_Constraint="_0zpkoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zqLsguuEeGvGIuLiiZuOg" base_Constraint="_0zqLsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zrZ0wuuEeGvGIuLiiZuOg" base_Constraint="_0zrZ0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zsA4guuEeGvGIuLiiZuOg" base_Constraint="_0zsA4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zt2EwuuEeGvGIuLiiZuOg" base_Constraint="_0zt2EAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zudIguuEeGvGIuLiiZuOg" base_Constraint="_0zudIAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zvEMwuuEeGvGIuLiiZuOg" base_Constraint="_0zvEMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zvrQguuEeGvGIuLiiZuOg" base_Constraint="_0zvrQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zvrRQuuEeGvGIuLiiZuOg" base_Constraint="_0zvrQwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zwSUwuuEeGvGIuLiiZuOg" base_Constraint="_0zwSUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zyHgguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0zyHgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zyukwuuEeGvGIuLiiZuOg" base_Constraint="_0zyukAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zyulguuEeGvGIuLiiZuOg" base_Constraint="_0zyulAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zzVoguuEeGvGIuLiiZuOg" base_Constraint="_0zzVoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0zz8sguuEeGvGIuLiiZuOg" base_Constraint="_0zz8sAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z0jwguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0z0jwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z1K0guuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_0z1K0AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z1x4AuuEeGvGIuLiiZuOg" base_Constraint="_0z1K0wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z5cQguuEeGvGIuLiiZuOg" base_Constraint="_0z5cQAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z6DUguuEeGvGIuLiiZuOg" base_Constraint="_0z6DUAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z6qYwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0z6qYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0z7RcAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_0z6qZAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_0z_i4AuuEeGvGIuLiiZuOg" base_Class="_0z-70AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.4.8" contextDependent="true"/>
  <CDA:CDATemplate xmi:id="_00DNQguuEeGvGIuLiiZuOg" base_Class="_00DNQAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.10">
    <ruleId>CONF-HP-3</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_00M-QguuEeGvGIuLiiZuOg" base_Class="_00M-QAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.20">
    <ruleId>CONF-HP-4</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_00UTAguuEeGvGIuLiiZuOg" base_Class="_00UTAAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.30">
    <ruleId>CONF-HP-5</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_00dc8AuuEeGvGIuLiiZuOg" base_Class="_00c14AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.7" contextDependent="true"/>
  <CDA:CDATemplate xmi:id="_00huZguuEeGvGIuLiiZuOg" base_Class="_00huYAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.7" contextDependent="true"/>
  <CDA:CDATemplate xmi:id="_00mm5QuuEeGvGIuLiiZuOg" base_Class="_00mm4AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.8" assigningAuthorityName="CONF-HP-73" contextDependent="true"/>
  <CDA:CDATemplate xmi:id="_00rfZQuuEeGvGIuLiiZuOg" base_Class="_00rfYAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.2.8" assigningAuthorityName="CONF-HP-73" contextDependent="true"/>
  <CDA:CDATemplate xmi:id="_00xmAAuuEeGvGIuLiiZuOg" base_Class="_00w-8AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.21.1">
    <ruleId>CONF-PRGN-2</ruleId>
  </CDA:CDATemplate>
  <CDA:ConstraintValidation xmi:id="_00zbMAuuEeGvGIuLiiZuOg" base_Constraint="_00w-8guuEeGvGIuLiiZuOg">
    <ruleId>CONF-PN-45</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_000CQAuuEeGvGIuLiiZuOg" base_Constraint="_00w-9AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PN-44</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_000pUAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_00w-9guuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-4</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_001QYAuuEeGvGIuLiiZuOg" base_Constraint="_00w--QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-5</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0013cAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_00w--wuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_003FkAuuEeGvGIuLiiZuOg" base_Constraint="_00w-_guuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_003soAuuEeGvGIuLiiZuOg" base_Constraint="_00w_AAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_004TsAuuEeGvGIuLiiZuOg" base_Constraint="_00w_AwuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0046wAuuEeGvGIuLiiZuOg" base_Constraint="_00w_BguuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_005h0AuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_00w_CAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ClassValidation xmi:id="_01ZRFguuEeGvGIuLiiZuOg" base_Class="_01ZREAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-PN-46</ruleId>
  </CDA:ClassValidation>
  <CDA:CDATemplate xmi:id="_01Z4IAuuEeGvGIuLiiZuOg" base_Class="_01ZREAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.18.2.14"/>
  <CDA:CDATemplate xmi:id="_01f-wAuuEeGvGIuLiiZuOg" base_Class="_01fXsAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.18.2.13">
    <ruleId>CONF-PN-45</ruleId>
  </CDA:CDATemplate>
  <CDA:CDATemplate xmi:id="_01mFaQuuEeGvGIuLiiZuOg" base_Class="_01mFYAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.18.2.16"/>
  <CDA:CDATemplate xmi:id="_01rk_guuEeGvGIuLiiZuOg" base_Class="_01rk8AuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.21.2.1"/>
  <CDA:ConstraintValidation xmi:id="_01v2YAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_01rk8guuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-15</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_01zgzguuEeGvGIuLiiZuOg" base_Class="_01zgwAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.21.2.2"/>
  <CDA:ConstraintValidation xmi:id="_014ZQAuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_01zgwguuEeGvGIuLiiZuOg">
    <ruleId>CONF-PRGN-15</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_0161gguuEeGvGIuLiiZuOg" base_Constraint="_0161gAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-6</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_017ckguuEeGvGIuLiiZuOg" base_Constraint="_017ckAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-7</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_018DoguuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_018DoAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-8</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_019RwAuuEeGvGIuLiiZuOg" base_Constraint="_018qsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-9</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_01940guuEeGvGIuLiiZuOg" base_Constraint="_01940AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_01-f4guuEeGvGIuLiiZuOg" base_Constraint="_01-f4AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_01_G9AuuEeGvGIuLiiZuOg" base_Constraint="_01_G8AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-12</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_01_uAguuEeGvGIuLiiZuOg" base_Constraint="_01_uAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-13</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02AVEwuuEeGvGIuLiiZuOg" base_Constraint="_02AVEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-14</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02A8IguuEeGvGIuLiiZuOg" base_Constraint="_02A8IAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-16</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02CKQAuuEeGvGIuLiiZuOg" base_Constraint="_02BjMAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-17</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02D_cwuuEeGvGIuLiiZuOg" base_Constraint="_02D_cAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-20</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02EmgguuEeGvGIuLiiZuOg" base_Constraint="_02EmgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-25</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02GbswuuEeGvGIuLiiZuOg" base_Constraint="_02GbsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-28</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02Hp0AuuEeGvGIuLiiZuOg" base_Constraint="_02HCwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-29</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02IQ4guuEeGvGIuLiiZuOg" base_Constraint="_02Hp0QuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-30</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02I38guuEeGvGIuLiiZuOg" base_Constraint="_02I38AuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-31</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02JfAguuEeGvGIuLiiZuOg" base_Constraint="_02JfAAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-32</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02KGEwuuEeGvGIuLiiZuOg" base_Constraint="_02KGEAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-33</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02MiUAuuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_02L7QAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-36</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02NJYwuuEeGvGIuLiiZuOg" base_Constraint="_02NJYAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-37</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02NwcguuEeGvGIuLiiZuOg" base_Constraint="_02NwcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-38</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02OXgguuEeGvGIuLiiZuOg" base_Constraint="_02OXgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-39</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02O-kguuEeGvGIuLiiZuOg" base_Constraint="_02O-kAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-40</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02PloguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_02PloAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-41</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02QMsguuEeGvGIuLiiZuOg" severity="INFO" base_Constraint="_02QMsAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-42</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02Ra0AuuEeGvGIuLiiZuOg" base_Constraint="_02QzwAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-43</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02W6YguuEeGvGIuLiiZuOg" base_Constraint="_02W6YAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-51</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02XhcguuEeGvGIuLiiZuOg" base_Constraint="_02XhcAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-52</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02YIgwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_02YIgAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-10</ruleId>
  </CDA:ConstraintValidation>
  <CDA:ConstraintValidation xmi:id="_02YvkwuuEeGvGIuLiiZuOg" severity="WARNING" base_Constraint="_02YvkAuuEeGvGIuLiiZuOg">
    <ruleId>CONF-HP-11</ruleId>
  </CDA:ConstraintValidation>
  <CDA:CDATemplate xmi:id="_02graAuuEeGvGIuLiiZuOg" base_Class="_02grYAuuEeGvGIuLiiZuOg" templateId="2.16.840.1.113883.10.20.16.2.3">
    <ruleId>CONF-DS-44</ruleId>
  </CDA:CDATemplate>
  <Ecore:EClass xmi:id="_n3aI8Au0EeGvGIuLiiZuOg" base_Class="_0V7G0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.6' code.nullFlavor='NA' constraints.validation.error='AllergyDrugSensitivityTemplateId AllergyDrugSensitivityEntryRelationshipRequired AllergyDrugSensitivityEffectiveTimeLowHigh AllergyDrugSensitivityHasRelatedObservations AllergyDrugSensitivityRelatedObservationsTypeCode AllergyDrugSensitivityHasRelatedReferencesTypeCode AllergyDrugSensitivityAdvereEventType AllergyDrugSensitivityAdvereEventTypeVocab AllergyDrugSensitivityAllergyProductTypeCode AllergyDrugSensitivityProductDetailParticipantRole AllergyDrugSensitivityProductDetailParticipantRoleClassCode AllergyDrugSensitivityProductDetailPlayingEntity AllergyDrugSensitivityProductDetailPlayingEntityClassCode AllergyDrugSensitivityProductDetailName AllergyDrugSensitivityAllergyProductFoodVocab AllergyDrugSensitivityAllergyProductMedClassVocab AllergyDrugSensitivityAllergyProductSpecificMedVocab AllergyDrugSensitivityReactionCodeVocab AllergyDrugSensitivitySeverityCodeVocab AllergyDrugSensitivityClassCode AllergyDrugSensitivityMoodCode AllergyDrugSensitivityId AllergyDrugSensitivityCodeNullFlavor AllergyDrugSensitivityEffectiveTime AllergyDrugSensitivityAllergyIntolerance' constraints.validation.warning='AllergyDrugSensitivitySubjectOfTarget AllergyDrugSensitivityContainsProblemObservation AllergyDrugSensitivityContainsAlertObservation AllergyDrugSensitivityAdvereEventDate AllergyDrugSensitivityAllergyProduct AllergyDrugSensitivityProductCode AllergyDrugSensitivityReactionText AllergyDrugSensitivityReactionCode AllergyDrugSensitivitySeverityText AllergyDrugSensitivitySeverityCode' classCode='ACT' constraints.validation.info='AllergyDrugSensitivityContainsPatientAwareness AllergyDrugSensitivityEpisodeObservation' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n3-wtAu0EeGvGIuLiiZuOg" base_Class="_0WNaswuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation value.codeSystemName='SNOMEDCT' code.codeSystem='2.16.840.1.113883.5.4' templateId.root='2.16.840.1.113883.10.20.1.41' constraints.validation.error='EpisodeObservationTemplateId EpisodeObservationOneEntryRelationshipSUBJ EpisodeObservationClassCode EpisodeObservationMoodCode EpisodeObservationStatusCode' code.code='ASSERTION' constraints.validation.info='EpisodeObservationExistsEntryRelationshipSAS' value.displayName='Clinical finding' statusCode.code='completed' value.code='404684003' code.codeSystemName='HL7ActCode' constraints.validation.warning='EpisodeObservationCode EpisodeObservationValue' classCode='OBS' moodCode='EVN' value.codeSystem='2.16.840.1.113883.6.96'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n4REmQu0EeGvGIuLiiZuOg" base_Class="_0WThWguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.5.4' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.6' constraints.validation.error='AllergyIntoleranceTemplateId AllergyIntoleranceInformationSource AllergyIntoleranceHasTextReference AllergyIntoleranceCommentInversionInd AllergyIntoleranceCodeCodeSystemRequired AllergyIntoleranceAllergySubstanceTypeCode AllergyIntoleranceAllergySubstanceParticipantRoleClassCode AllergyIntoleranceAllergySubstancePlayingEntityClassCode AllergyIntoleranceAllergySubstancePlayingEntityCode AllergyIntolerancePlayingEntityCodeReference AllergyIntoleranceMoodCode AllergyIntoleranceId AllergyIntoleranceCode AllergyIntoleranceText AllergyIntoleranceStatusCode AllergyIntoleranceValue' code.codeSystemName='ObservationIntoleranceType' classCode='OBS' constraints.validation.warning='AllergyIntoleranceDisplayNameCodeName AllergyIntoleranceEffectiveTime' constraints.validation.info='AllergyIntoleranceContainsPatientAwareness AllergyIntoleranceAllergySubstance AllergyIntoleranceAllergySubstanceParticipantRole AllergyIntoleranceAllergySubstancePlayingEntity AllergyIntoleranceProblemEntryReactionObservationContainer AllergyIntoleranceSeverity AllergyIntoleranceProblemStatusObservation AllergyIntoleranceComment AllergyIntoleranceAgeObservation AllergyIntoleranceHealthStatusObservation' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n41sZQu0EeGvGIuLiiZuOg" base_Class="_0Wl1NAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' code.displayName='Age' templateId.root='2.16.840.1.113883.10.20.1.38' constraints.validation.error='AgeObservationTemplateId AgeObservationClassCode AgeObservationMoodCode AgeObservationCode AgeObservationStatusCode AgeObservationValue' code.codeSystemName='SNOMEDCT' classCode='OBS' code.code='397659008' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n5IANwu0EeGvGIuLiiZuOg" base_Class="_0Wr72AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' value.codeSystemName='SNOMEDCT' code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Health status' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.1.2' constraints.validation.error='HealthStatusObservationTemplateId HealthStatusObservationTargetOfEntryRelationship HealthStatusObservationNoAdditionalParticipants HealthStatusObservationNoAdditionalRelationships HealthStatusObservationHasTextReference HealthStatusObservationClassCode HealthStatusObservationMoodCode HealthStatusObservationCode HealthStatusObservationText HealthStatusObservationStatusCode HealthStatusObservationValue' code.codeSystemName='LOINC' classCode='OBS' code.code='11323-3' moodCode='EVN' value.codeSystem='2.16.840.1.113883.6.96'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n5aUGQu0EeGvGIuLiiZuOg" base_Class="_0W-PuwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.5' constraints.validation.error='ProblemEntryReactionObservationContainerTemplateId ProblemEntryReactionObservationContainerReactionInterventionTypeCode ProblemEntryReactionObservationContainerInformationSource ProblemEntryReactionObservationContainerHasTextReference ProblemEntryReactionObservationContainerCommentInversionInd ProblemEntryReactionObservationContainerMoodCode ProblemEntryReactionObservationContainerId ProblemEntryReactionObservationContainerText ProblemEntryReactionObservationContainerStatusCode ProblemEntryReactionObservationContainerValue' code.codeSystemName='SNOMEDCT' constraints.validation.warning='ProblemEntryReactionObservationContainerCode ProblemEntryReactionObservationContainerEffectiveTime' classCode='OBS' moodCode='EVN' constraints.validation.info='ProblemEntryReactionObservationContainerHasReactionIntervention ProblemEntryReactionObservationContainerReactionInterventionType ProblemEntryReactionObservationContainerContainsPatientAwareness ProblemEntryReactionObservationContainerAgeObservation ProblemEntryReactionObservationContainerSeverity ProblemEntryReactionObservationContainerProblemStatusObservation ProblemEntryReactionObservationContainerHealthStatusObservation ProblemEntryReactionObservationContainerComment'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n5yumwu0EeGvGIuLiiZuOg" base_Class="_0XKc9QuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' value.codeSystemName='SeverityObservation' code.codeSystem='2.16.840.1.113883.5.4' code.displayName='Severity observation' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.1' constraints.validation.error='SeverityTemplateId SeverityHasTextReference SeverityClassCode SeverityMoodCode SeverityCode SeverityText SeverityStatusCode SeverityValue' code.codeSystemName='HL7ActCode' classCode='OBS' code.code='SEV' moodCode='EVN' value.codeSystem='2.16.840.1.113883.5.1063'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n6FCewu0EeGvGIuLiiZuOg" base_Class="_0XWqOguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' value.codeSystemName='SNOMEDCT' code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Status' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.1.1' constraints.validation.error='ProblemStatusObservationTemplateId ProblemStatusObservationTargetOfEntryRelationship ProblemStatusObservationNoAdditionalParticipants ProblemStatusObservationNoAdditionalRelationships ProblemStatusObservationHasTextReference ProblemStatusObservationClassCode ProblemStatusObservationMoodCode ProblemStatusObservationCode ProblemStatusObservationText ProblemStatusObservationStatusCode ProblemStatusObservationValue' code.codeSystemName='LOINC' classCode='OBS' code.code='33999-4' moodCode='EVN' value.codeSystem='2.16.840.1.113883.6.96'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n6ddAAu0EeGvGIuLiiZuOg" base_Class="_0YNl3QuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Annotation comment' templateId.root='2.16.840.1.113883.3.88.11.83.11' constraints.validation.error='CommentTemplateId CommentHasTextReference CommentEffectiveTimeWhenAuthorPresent CommentHasAuthorId CommentHasAuthorOrganization CommentClassCode CommentMoodCode CommentCode CommentText CommentStatusCode' code.codeSystemName='LOINC' classCode='ACT' code.code='48767-8' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n613eQu0EeGvGIuLiiZuOg" base_Class="_0Y4UMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.3.88.11.83.8' constraints.validation.error='MedicationTemplateId MedicationMoodCode MedicationInformationSource MedicationHasReasonProblem MedicationHasProduct MedicationHasDosing MedicationDosingRelationship MedicationHasDescriptionNoMedNotKnown MedicationReasonClassMood MedicationHasProductEntry MedicationHasIntructionsInversion MedicationProductName MedicationHasSupplyEntryInversion MedicationFirstEffectiveTimeDatatype MedicationHasMedicationInformation MedicationHasIndication MedicationHasIndicationNarrativeText MedicationHasIndicationVocab MedicationHasPatientInstructions MedicationVehicleType MedicationVehicleClass MedicationVehicleCode MedicationVehicleName MedicationVehicleCodedNameVocab MedicationId MedicationStatusCode' constraints.validation.warning='MedicationHasDoseQuantityOrRateQuantity MedicationProductStrength MedicationHasFillNumber MedicationRateQuantity' classCode='SBADM' constraints.validation.info='MedicationHasConsents MedicationHasPreconditionCriterion MedicationHasReason MedicationPreconditionReference MedicationDoseUnits MedicationDeliveryMethodDescription MedicationHasStatusOfMedication MedicationHasMedicationVehicle MedicationVehicleCodedName MedicationCode MedicationEffectiveTime MedicationRouteCode MedicationApproachSiteCode MedicationDoseQuantity MedicationMaxDoseQuantity MedicationAdministrationUnitCode MedicationMedicationSeriesNumberObservation MedicationMedicationStatusObservation MedicationProductInstance'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n8LUQQu0EeGvGIuLiiZuOg" base_Class="_0ZQuuQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.1.46' code.displayName='Dose number' constraints.validation.error='MedicationSeriesNumberObservationTemplateId MedicationSeriesNumberObservationClassCode MedicationSeriesNumberObservationMoodCode MedicationSeriesNumberObservationCode MedicationSeriesNumberObservationStatusCode MedicationSeriesNumberObservationValue' code.codeSystemName='LOINC' classCode='OBS' code.code='30973-2' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n8XhfQu0EeGvGIuLiiZuOg" base_Class="_0ZW1VAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.1.47' code.displayName='Status' constraints.validation.error='MedicationStatusObservationTemplateId MedicationStatusObservationTargetOfEntryRelationship MedicationStatusObservationNoAdditionalParticipants MedicationStatusObservationNoAdditionalRelationships MedicationStatusObservationClassCode MedicationStatusObservationMoodCode MedicationStatusObservationCode MedicationStatusObservationStatusCode' code.codeSystemName='LOINC' classCode='OBS' code.code='33999-4' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n8p1WQu0EeGvGIuLiiZuOg" base_Class="_0Zc8DAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.52' constraints.validation.error='ProductInstanceTemplateId ProductInstanceClassCode' constraints.validation.warning='ProductInstanceHasScopingEntity' classCode='MANU'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n8v7-wu0EeGvGIuLiiZuOg" base_Class="_0ZjCmguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.4.1' constraints.validation.error='InternalReferenceTemplateId InternalReferenceId InternalReferenceCode'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n82CmQu0EeGvGIuLiiZuOg" base_Class="_0ZjCsQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='1.3.6.1.4.1.19376.1.5.3.2' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.3' constraints.validation.error='PatientMedicalInstructionsTemplateId PatientMedicalInstructionsClassCode PatientMedicalInstructionsMoodCode PatientMedicalInstructionsCode PatientMedicalInstructionsText PatientMedicalInstructionsStatusCode' code.codeSystemName='IHEActCode' classCode='ACT' code.code='PINSTRUCT' moodCode='INT'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n9CP2Qu0EeGvGIuLiiZuOg" base_Class="_0ZvP1AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.96' templateId.root='2.16.840.1.113883.3.88.11.83.8.1' constraints.validation.error='MedicationTypeTemplateId MedicationTypeCode' code.codeSystemName='SNOMEDCT'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n9IWcgu0EeGvGIuLiiZuOg" base_Class="_0Z1WcwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8.3' constraints.validation.error='MedicationOrderInformationTemplateId MedicationOrderInformationMoodCode MedicationOrderInformationInformationSource MedicationOrderInformationHasAuthorTime MedicationOrderInformationHasAssignedAuthor MedicationOrderInformationHasAssignedAuthorPersonOrOrg MedicationOrderInformationHasPerformerTimeEvent MedicationOrderInformationHasPerformerAssignedEntity MedicationOrderInformationHasPerformerEntityPersonOrOrg MedicationOrderInformationQuantityOrdered MedicationOrderInformationQuantityUnit MedicationOrderInformationPrescriptionNumber MedicationOrderInformationDispenseDate MedicationOrderInformationQuantityDispensed MedicationOrderInformationId' constraints.validation.warning='MedicationOrderInformationHasAssignedAuthorID MedicationOrderInformationHasPerformerTimeIntent MedicationOrderInformationHasPerformerAssignedEntityID MedicationOrderInformationOrderNumber MedicationOrderInformationOrderExpiration MedicationOrderInformationAssigningAuthority MedicationOrderInformationHasFillNumber MedicationOrderInformationEffectiveTime MedicationOrderInformationQuantity' classCode='SPLY' constraints.validation.info='MedicationOrderInformationHasAuthor MedicationOrderInformationHasPerformer MedicationOrderInformationHasParticipantLocation MedicationOrderInformationHasProduct MedicationOrderInformationHasIntentAuthor MedicationOrderInformationDispensingPharmacyLocation MedicationOrderInformationStatusCode MedicationOrderInformationRepeatNumber MedicationOrderInformationMedicationStatusObservation MedicationOrderInformationProductInstance'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n9zE0Au0EeGvGIuLiiZuOg" base_Class="_0aHqWQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='1.3.6.1.4.1.19376.1.5.3.2' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.3.1' constraints.validation.error='MedicationFullfillmentInstructionsTemplateId MedicationFullfillmentInstructionsMoodCode MedicationFullfillmentInstructionsCode MedicationFullfillmentInstructionsText MedicationFullfillmentInstructionsStatusCode' code.codeSystemName='IHEActCode' code.code='FINSTRUCT' moodCode='INT'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n95Lewu0EeGvGIuLiiZuOg" base_Class="_0a4fVAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.7' code.nullFlavor='NA' constraints.validation.error='ConditionTemplateId ConditionEntryRelationshipRequired ConditionEffectiveTimeLowHigh ConditionHasRelatedObservations ConditionRelatedObservationsTypeCode ConditionHasRelatedReferencesTypeCode ConditionHasTreatingProvider ConditionHasProviderId ConditionClassCode ConditionMoodCode ConditionId ConditionCodeNullFlavor ConditionEffectiveTime ConditionConditionEntry' constraints.validation.warning='ConditionSubjectOfTarget ConditionContainsProblemObservation ConditionContainsAlertObservation' classCode='ACT' constraints.validation.info='ConditionContainsPatientAwareness ConditionHasProviderTreatmentTime ConditionEpisodeObservation' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n-RmAAu0EeGvGIuLiiZuOg" base_Class="_0bEsmwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' value.codeSystemName='SNOMEDCT' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.5' constraints.validation.error='ConditionEntryTemplateId ConditionEntryInformationSource ConditionEntryHasTextReference ConditionEntryCommentInversionInd ConditionEntryMoodCode ConditionEntryId ConditionEntryText ConditionEntryStatusCode ConditionEntryValue' code.codeSystemName='SNOMEDCT' constraints.validation.warning='ConditionEntryHasOnsetDate ConditionEntryHasResolutionDate ConditionEntryHasUnknownResolutionDate ConditionEntryCode ConditionEntryEffectiveTime' classCode='OBS' moodCode='EVN' constraints.validation.info='ConditionEntryContainsPatientAwareness ConditionEntryAgeObservation ConditionEntryCauseOfDeathObservation ConditionEntryProblemStatusObservation ConditionEntrySeverity ConditionEntryHealthStatusObservation ConditionEntryComment' value.codeSystem='2.16.840.1.113883.6.96'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n-2NuAu0EeGvGIuLiiZuOg" base_Class="_0bQ54QuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' templateId.root='2.16.840.1.113883.10.20.1.42' constraints.validation.error='CauseOfDeathObservationTemplateId CauseOfDeathObservationHasSubject CauseOfDeathObservationHasSubjectPatientRelationship CauseOfDeathObservationRelationshipValueCode CauseOfDeathObservationHasRelatedSubjectCode CauseOfDeathObservationMoodCode CauseOfDeathObservationId CauseOfDeathObservationStatusCode CauseOfDeathObservationCauseOfDeathObservation' constraints.validation.warning='CauseOfDeathObservationRelatedSubjectCodeValueSet CauseOfDeathObservationHasRelatedSubjectSubject CauseOfDeathObservationHasGenderCode CauseOfDeathObservationRelatedSubjectBirthTime CauseOfDeathObservationEffectiveTime' constraints.validation.info='CauseOfDeathObservationAgeObservation CauseOfDeathObservationProblemStatusObservation' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_n_OoPgu0EeGvGIuLiiZuOg" base_Class="_0bva_AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.32.1' constraints.validation.error='PatientSummaryTemplateId PatientSummaryServiceEventRequired PatientSummaryServiceEventClassCode PatientSummaryServiceEventEffectiveTime PatientSummaryLanguageCodeFormat PatientSummaryNoTemplateIdExtension PatientSummaryHasEffectiveTimeSeconds PatientSummaryHasEffectiveTimeZone PatientSummaryOneOrTwoRecordTarget PatientSummaryHasAssignedAuthorNullFlavor PatientSummaryPersonHasName PatientSummaryRolesShallHaveAddrAndTelecom PatientSummaryOrganizationsHaveContactInfo PatientSummaryTimePreciseToDay PatientSummaryTimePreciseToYear PatientSummaryTelephoneMatchesRegex PatientSummaryHasTelephoneDialingDigits PatientSummaryUnknownTelephoneUsesNullFlavor PatientSummaryTypeIdExtension PatientSummaryIdRootFormat PatientSummaryOidLength PatientSummaryLanguageCodeForm PatientSummarySetIdAndVersionNumber PatientSummarySetIdAndIdAreUnique PatientSummaryCopyTimeNotPresent PatientSummaryHasRecordTargetPatientRole PatientSummaryHasPatientBirthTime PatientSummaryHasAdministrativeGenderCode PatientSummaryHasAuthorTime PatientSummaryHasAssignedAuthorId PatientSummaryHasAssignedAuthorPersonOrDevice PatientSummaryHasDataEntererAssignedPerson PatientSummaryHasInformantAssignedPersonOrRelatedPerson PatientSummaryLegalAuthenticatorHasAssignedPerson PatientSummaryAuthenticatorHasAssignedPerson PatientSummaryRealmCode PatientSummaryTypeId PatientSummaryId PatientSummaryCode PatientSummaryTitle PatientSummaryEffectiveTime PatientSummaryLanguageCode' constraints.validation.warning='PatientSummaryHasAssignedAuthor PatientSummaryRolesShouldHaveAddrAndTelecom PatientSummaryTimePreciseToSecond PatientSummaryTimePreciseToYearAndDay PatientSummaryFamilyHistorySection PatientSummarySocialHistorySection PatientSummaryResultsSection PatientSummaryMedicalEquipmentSection PatientSummaryFunctionalStatusSection' realmCode.code='US' constraints.validation.info='PatientSummaryHasInformationRecipient PatientSummaryHasProviderOrganization PatientSummaryHasDataEntererTime PatientSummaryHasInformant PatientSummaryHealthcareProvider PatientSummaryAdvanceDirectivesSection PatientSummaryAllergiesReactionsSection PatientSummaryProblemListSection PatientSummaryEncountersSection PatientSummaryImmunizationsSection PatientSummaryPayersSection PatientSummaryMedicationsSection PatientSummaryPlanOfCareSection PatientSummaryPregnancyHistorySection PatientSummarySurgeriesSection PatientSummaryVitalSignsSection PatientSummaryDiagnosticResultsSection PatientSummaryPurposeSection'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oAtO4Au0EeGvGIuLiiZuOg" base_Class="_0cH1cAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='History of family member diseases' templateId.root='2.16.840.1.113883.3.88.11.83.125' constraints.validation.error='FamilyHistorySectionTemplateId FamilyHistorySectionNoSubject FamilyHistorySectionCode FamilyHistorySectionTitle FamilyHistorySectionText FamilyHistorySectionFamilyHistory' code.codeSystemName='LOINC' constraints.validation.warning='FamilyHistorySectionFamilyHistoryObsOrgs' code.code='10157-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oA5cIAu0EeGvGIuLiiZuOg" base_Class="_0cMt8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.5.111' templateId.root='2.16.840.1.113883.3.88.11.83.18' constraints.validation.error='FamilyHistoryTemplateId FamilyHistoryHasComponent FamilyHistoryHasSubject FamilyHistoryHasSubjectPatientRelationship FamilyHistoryRelationshipValueCode FamilyHistoryHasRelatedSubjectCode FamilyHistoryHasParticipantParticipantRole FamilyHistoryHasParticipantRoleCode FamilyHistoryHasParticipantRolePlayingEntity FamilyHistoryRelatedSubjectCodeValueSet FamilyHistoryHasGenderCode FamilyHistoryFamilyMemberCondition FamilyHistoryClassCode FamilyHistoryMoodCode FamilyHistoryCode FamilyHistoryStatusCode FamilyHistoryFamilyHistoryObservation' code.codeSystemName='RoleCode' constraints.validation.warning='FamilyHistoryHasFamilyHistoryObservation FamilyHistoryRelatedSubjectCodeValueSet FamilyHistoryHasRelatedSubjectSubject FamilyHistoryHasGenderCode FamilyHistoryRelatedSubjectBirthTime FamilyHistoryHasFamilyName FamilyHistoryProblemStatusObservation' classCode='CLUSTER' constraints.validation.info='FamilyHistoryHasParticipant' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oBggIAu0EeGvGIuLiiZuOg" base_Class="_0cheEAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.13.3' constraints.validation.error='FamilyHistoryObservationTemplateId FamilyHistoryObservationHasSubject FamilyHistoryObservationHasSubjectPatientRelationship FamilyHistoryObservationRelationshipValueCode FamilyHistoryObservationHasRelatedSubjectCode FamilyHistoryObservationId FamilyHistoryObservationCode FamilyHistoryObservationStatusCode FamilyHistoryObservationValue FamilyHistoryObservationCauseOfDeathObservation' code.codeSystemName='SNOMEDCT' constraints.validation.warning='FamilyHistoryObservationRelatedSubjectCodeValueSet FamilyHistoryObservationHasRelatedSubjectSubject FamilyHistoryObservationHasGenderCode FamilyHistoryObservationRelatedSubjectBirthTime' constraints.validation.info='FamilyHistoryObservationAgeObservation FamilyHistoryObservationProblemStatusObservation'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oB_oUAu0EeGvGIuLiiZuOg" base_Class="_0dMzgwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Social history' templateId.root='2.16.840.1.113883.3.88.11.83.126' constraints.validation.error='SocialHistorySectionTemplateId SocialHistorySectionCode SocialHistorySectionTitle SocialHistorySectionText' code.codeSystemName='LOINC' constraints.validation.warning='SocialHistorySectionMaritalStatus SocialHistorySectionReligiousAffiliation SocialHistorySectionPatientRace SocialHistorySectionPatientEthnicity' code.code='29762-2' constraints.validation.info='SocialHistorySectionPatientRaceCodeSystem SocialHistorySectionPatientEthnicityCodeSystem SocialHistorySectionSocialHistory'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oCOR0Au0EeGvGIuLiiZuOg" base_Class="_0dSTEAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='2.16.840.1.113883.10.20.1.33' constraints.validation.error='SocialHistoryTemplateId SocialHistoryId SocialHistoryText SocialHistoryStatusCode' code.codeSystemName='SNOMEDCT' constraints.validation.warning='SocialHistoryCodeValueSet SocialHistoryNoRepeatNumber SocialHistoryNoInterpretationCode SocialHistoryNoMethodCode SocialHistoryNoTargetSiteCode SocialHistoryCode SocialHistoryEffectiveTime' constraints.validation.info='SocialHistoryValue SocialHistorySocialHistoryStatusObservation SocialHistoryEpisodeObservation'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oChz0Au0EeGvGIuLiiZuOg" base_Class="_0dcEEguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' value.codeSystemName='SocialHistoryStatusCode' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.1.56' code.displayName='Status' constraints.validation.error='SocialHistoryStatusObservationTemplateId SocialHistoryStatusObservationTargetOfEntryRelationship SocialHistoryStatusObservationNoAdditionalParticipants SocialHistoryStatusObservationNoAdditionalRelationships SocialHistoryStatusObservationClassCode SocialHistoryStatusObservationMoodCode SocialHistoryStatusObservationCode SocialHistoryStatusObservationStatusCode SocialHistoryStatusObservationValue' code.codeSystemName='LOINC' classCode='OBS' code.code='33999-4' moodCode='EVN' value.codeSystem='2.16.840.1.113883.1.11.20.17'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oC5AMQu0EeGvGIuLiiZuOg" base_Class="_0d8aYwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Relevant diagnostic tests and/or laboratory data' templateId.root='2.16.840.1.113883.10.20.1.14' constraints.validation.error='ResultsSectionTemplateId ResultsSectionCode ResultsSectionTitle ResultsSectionText' code.codeSystemName='LOINC' constraints.validation.warning='ResultsSectionResultOrganizer' code.code='30954-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oDDYQAu0EeGvGIuLiiZuOg" base_Class="_0eChAAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.32' constraints.validation.error='ResultOrganizerTemplateId ResultOrganizerComponentElement ResultOrganizerInformationSource ResultOrganizerMoodCode ResultOrganizerId ResultOrganizerCode ResultOrganizerStatusCode ResultOrganizerResult' constraints.validation.warning='ResultOrganizerCodeValue' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oDRasAu0EeGvGIuLiiZuOg" base_Class="_0eGycAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.15' constraints.validation.error='ResultTemplateId ResultNoObservationRangeCode ResultInformationSource ResultValuePresence ResultMoodCode ResultId ResultCode ResultStatusCode ResultEffectiveTime ResultValue' constraints.validation.warning='ResultCodeValue ResultReferenceRangeRequired ResultTypeCodeSystem ResultLaboratoryResultsValueSet ResultInterpretationCode' classCode='OBS' constraints.validation.info='ResultMethodCode' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oDmx4Au0EeGvGIuLiiZuOg" base_Class="_0eXRIAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.128' code.displayName='History of medical device use' constraints.validation.error='MedicalEquipmentSectionTemplateId MedicalEquipmentSectionCode MedicalEquipmentSectionTitle MedicalEquipmentSectionText' code.codeSystemName='LOINC' constraints.validation.warning='MedicalEquipmentSectionSupplyActivity' code.code='46264-8' constraints.validation.info='MedicalEquipmentSectionMedicationActivity'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oD0NQAu0EeGvGIuLiiZuOg" base_Class="_0efM8wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.109' code.displayName='Functional status assessment' constraints.validation.error='FunctionalStatusSectionTemplateId FunctionalStatusSectionObservationCode FunctionalStatusSectionProblemStatusObservation FunctionalStatusSectionResultStatusObservation FunctionalStatusSectionCode FunctionalStatusSectionTitle FunctionalStatusSectionText' code.codeSystemName='LOINC' constraints.validation.warning='FunctionalStatusSectionClinicalStatements' code.code='47420-5' constraints.validation.info='FunctionalStatusSectionObservationCodeValueSet FunctionalStatusSectionValueDatatype FunctionalStatusSectionIcfCodeSystem'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oEFTAAu0EeGvGIuLiiZuOg" base_Class="_0eqzIwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Summary purpose' templateId.root='2.16.840.1.113883.10.20.1.13' constraints.validation.error='PurposeSectionTemplateId PurposeSectionCode PurposeSectionTitle PurposeSectionText' code.codeSystemName='LOINC' constraints.validation.warning='PurposeSectionPurposeActivity' code.code='48764-5'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oEPEAAu0EeGvGIuLiiZuOg" base_Class="_0evEkAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='2.16.840.1.113883.10.20.1.30' code.displayName='Documentation procedure' constraints.validation.error='PurposeActivityTemplateId PurposeActivityHasReason PurposeActivityReasonType PurposeActivityClassCode PurposeActivityMoodCode PurposeActivityCode PurposeActivityStatusCode' code.codeSystemName='SNOMEDCT' classCode='ACT' code.code='23745001' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oEjNEAu0EeGvGIuLiiZuOg" base_Class="_0e5coAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Advance directives' templateId.root='2.16.840.1.113883.3.88.11.83.116' constraints.validation.error='AdvanceDirectivesSectionTemplateId AdvanceDirectivesSectionCode AdvanceDirectivesSectionTitle AdvanceDirectivesSectionText AdvanceDirectivesSectionAdvanceDirective' code.codeSystemName='LOINC' code.code='42348-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oEtlIAu0EeGvGIuLiiZuOg" base_Class="_0e-8MAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='2.16.840.1.113883.3.88.11.83.12' constraints.validation.error='AdvanceDirectiveTemplateId AdvanceDirectiveHasStartingTime AdvanceDirectiveHasEndingTime AdvanceDirectiveHasCustodian AdvanceDirectiveParticipantTypeCode AdvanceDirectiveParticipantRoleClassCode AdvanceDirectiveHasAddress AdvanceDirectiveHasTelecom AdvanceDirectiveHasNameOfAgent AdvanceDirectiveClassCode AdvanceDirectiveMoodCode AdvanceDirectiveId AdvanceDirectiveCode AdvanceDirectiveStatusCode AdvanceDirectiveEffectiveTime AdvanceDirectiveRepeatNumber AdvanceDirectiveInterpretationCode AdvanceDirectiveTargetSiteCode AdvanceDirectiveAdvanceDirectiveStatusObservation' code.codeSystemName='SNOMEDCT' constraints.validation.warning='AdvanceDirectiveAdvDirectiveCodeCodeSystem' classCode='OBS' constraints.validation.info='AdvanceDirectiveAdvDirectiveCodeValueSet AdvanceDirectiveHasExternalReference' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oFMGQAu0EeGvGIuLiiZuOg" base_Class="_0fPa4wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.58' constraints.validation.error='AdvanceDirectiveVerificationTemplateId AdvanceDirectiveVerificationTypeCode' constraints.validation.warning='AdvanceDirectiveVerificationTime' typeCode='VRF'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oFSz8Au0EeGvGIuLiiZuOg" base_Class="_0fUTYwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.1.37' code.displayName='Status' constraints.validation.error='AdvanceDirectiveStatusObservationTemplateId AdvanceDirectiveStatusObservationTargetOfEntryRelationship AdvanceDirectiveStatusObservationNoAdditionalParticipants AdvanceDirectiveStatusObservationNoAdditionalRelationships AdvanceDirectiveStatusObservationClassCode AdvanceDirectiveStatusObservationMoodCode AdvanceDirectiveStatusObservationCode AdvanceDirectiveStatusObservationStatusCode' code.codeSystemName='LOINC' classCode='OBS' code.code='33999-4' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oFjSoAu0EeGvGIuLiiZuOg" base_Class="_0fhHsguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.36' constraints.validation.error='AdvanceDirectiveReferenceTemplateId AdvanceDirectiveReferenceExternalDocumentHasId AdvanceDirectiveReferenceTypeCode' typeCode='REFR' constraints.validation.info='AdvanceDirectiveReferenceHasURL AdvanceDirectiveReferenceHasMIMEType'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oFqnYAu0EeGvGIuLiiZuOg" base_Class="_0f0psAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Allergies, adverse reactions, alerts' templateId.root='2.16.840.1.113883.3.88.11.83.102' constraints.validation.error='AllergiesReactionsSectionTemplateId AllergiesReactionsSectionCode AllergiesReactionsSectionTitle AllergiesReactionsSectionText AllergiesReactionsSectionAllergyDrugSensitivity' code.codeSystemName='LOINC' code.code='48765-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oF0YYQu0EeGvGIuLiiZuOg" base_Class="_0f8lgAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Problem list' templateId.root='2.16.840.1.113883.3.88.11.83.103' constraints.validation.error='ProblemListSectionTemplateId ProblemListSectionCode ProblemListSectionTitle ProblemListSectionText ProblemListSectionCondition' code.codeSystemName='LOINC' code.code='11450-4'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oF-JYAu0EeGvGIuLiiZuOg" base_Class="_0gDTMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.127' code.displayName='History of encounters' constraints.validation.error='EncountersSectionTemplateId EncountersSectionCode EncountersSectionTitle EncountersSectionText EncountersSectionEncounterEntry' code.codeSystemName='LOINC' constraints.validation.warning='EncountersSectionEncountersActivity' code.code='46240-8'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oGHTUAu0EeGvGIuLiiZuOg" base_Class="_0gJZ0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.21' constraints.validation.error='EncountersActivityTemplateId EncountersActivityClassCode EncountersActivityMoodCode EncountersActivityId' classCode='ENC' constraints.validation.info='EncountersActivityHasIndications EncountersActivityHasPractitioners EncountersActivityPractitionerRole EncountersActivityEffectiveTime EncountersActivityPatientInstruction EncountersActivityAgeObservation' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oGXyAAu0EeGvGIuLiiZuOg" base_Class="_0gUY8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.1.45' constraints.validation.error='EncounterLocationTemplateId EncounterLocationHasParticipantRole EncounterLocationHasParticipantRoleLocation EncounterLocationHasPlayingEntityPlace EncounterLocationTypeCode' constraints.validation.warning='EncounterLocationHasParticipantRoleCodeVocab' typeCode='LOC' constraints.validation.info='EncounterLocationHasParticipantRoleCode EncounterLocationHasPlayingEntity'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oGixIAu0EeGvGIuLiiZuOg" base_Class="_0gdi4AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.12' templateId.root='2.16.840.1.113883.3.88.11.83.16' constraints.validation.error='ConsolEncounterTemplateId ConsolEncounterAdmissionSourceValueSet ConsolEncounterClassCode ConsolEncounterId ConsolEncounterText' code.codeSystemName='CPT-4' classCode='ENC' constraints.validation.warning='ConsolEncounterCode'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oGwMgAu0EeGvGIuLiiZuOg" base_Class="_0guooAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.117' code.displayName='History of immunizations' constraints.validation.error='ImmunizationsSectionTemplateId ImmunizationsSectionCode ImmunizationsSectionTitle ImmunizationsSectionText ImmunizationsSectionImmunization' code.codeSystemName='LOINC' constraints.validation.warning='ImmunizationsSectionHasMedicationOrSupplyActivity ImmunizationsSectionSupplyActivity' code.code='11369-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oG9n4Au0EeGvGIuLiiZuOg" base_Class="_0g0vQAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.12.292' templateId.root='2.16.840.1.113883.3.88.11.83.13' constraints.validation.error='ImmunizationTemplateId ImmunizationMoodCode ImmunizationInformationSource ImmunizationHasReasonProblem ImmunizationHasProduct ImmunizationComments ImmunizationRefusalReason ImmunizationId ImmunizationCode ImmunizationStatusCode ImmunizationEffectiveTime' code.codeSystemName='Vaccines administered (CVX)' routeCode.codeSystem='2.16.840.1.113883.5.112' constraints.validation.warning='ImmunizationHasDoseQuantityOrRateQuantity ImmunizationRouteCode' classCode='SBADM' routeCode.codeSystemName='HL7 RouteOfAdministration' moodCode='EVN' constraints.validation.info='ImmunizationHasConsents ImmunizationHasPreconditionCriterion ImmunizationHasReason ImmunizationMaxDoseQuantity ImmunizationMedicationSeriesNumberObservation ImmunizationMedicationStatusObservation ImmunizationPatientInstruction ImmunizationReactionObservation ImmunizationProductInstance'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oHiPoAu0EeGvGIuLiiZuOg" base_Class="_0hRbMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Payment sources' templateId.root='2.16.840.1.113883.3.88.11.83.101' constraints.validation.error='PayersSectionTemplateId PayersSectionCode PayersSectionTitle PayersSectionText PayersSectionInsuranceProvider' code.codeSystemName='LOINC' code.code='48768-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oHsnsAu0EeGvGIuLiiZuOg" base_Class="_0hYI4AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Payment sources' templateId.root='2.16.840.1.113883.3.88.11.83.5' constraints.validation.error='InsuranceProviderTemplateId InsuranceProviderInformationSource InsuranceProviderPaymentProviders InsuranceProviderHealthInsuranceType InsuranceProviderInsuranceInformation InsuranceProviderPatientInformation InsuranceProviderMemberId InsuranceProviderRelationshipToSubscriber InsuranceProviderRelationshipToSubscriberCodeSystem InsuranceProviderPatientName InsuranceProviderSubscriberId InsuranceProviderSubscriberAddress InsuranceProviderFinancialResponsibilityPartyType InsuranceProviderFinancialResponsibilityPartyTypeCode InsuranceProviderClassCode InsuranceProviderMoodCode InsuranceProviderId InsuranceProviderCode InsuranceProviderStatusCode InsuranceProviderPayerEntry' code.codeSystemName='LOINC' constraints.validation.warning='InsuranceProviderPayerEntryID InsuranceProviderHealthPlanCoverageStartTime InsuranceProviderHealthPlanCoverageStopTime InsuranceProviderMemberIdRoot InsuranceProviderSubscriberInformation InsuranceProviderSubscriberIdRoot InsuranceProviderFinancialResponsibilityPartyAddress' classCode='ACT' code.code='48768-6' constraints.validation.info='InsuranceProviderSequenceNumber InsuranceProviderInsuranceInfoSourceID InsuranceProviderInsuranceInfoSourceAddr' moodCode='DEF'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oIWH8Au0EeGvGIuLiiZuOg" base_Class="_0h5GQwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.18' constraints.validation.error='PayerEntryTemplateId PayerEntryPayerEntityIsRequired PayerEntryCoveredPartyIsRequired PayerEntryEntryRelationshipREFR PayerEntryEntryRelationshipTarget PayerEntryClassCode PayerEntryMoodCode PayerEntryId PayerEntryStatusCode PayerEntryPayerEntity PayerEntryCoveredParty' classCode='ACT' constraints.validation.info='PayerEntryCoveredPartyTime PayerEntrySubscriberIsAllowed PayerEntrySubscriberTime PayerEntrySubscriber' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oImmoAu0EeGvGIuLiiZuOg" base_Class="_0h_z8wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation constraints.validation.error='PayerEntityId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oIpC4Au0EeGvGIuLiiZuOg" base_Class="_0iCQMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation constraints.validation.warning='CoveredPartyId CoveredPartyCode'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oItUUAu0EeGvGIuLiiZuOg" base_Class="_0iEscwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation constraints.validation.warning='PolicySubscriberId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oIxlwAu0EeGvGIuLiiZuOg" base_Class="_0iWZQAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.112' code.displayName='History of medication use' constraints.validation.error='MedicationsSectionTemplateId MedicationsSectionCode MedicationsSectionTitle MedicationsSectionText MedicationsSectionMedication' code.codeSystemName='LOINC' constraints.validation.warning='MedicationsSectionHasMedicationOrSupplyActivity MedicationsSectionSupplyActivity' code.code='10160-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oI_BIAu0EeGvGIuLiiZuOg" base_Class="_0igxUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.124' code.displayName='Treatment plan' constraints.validation.error='PlanOfCareSectionTemplateId PlanOfCareSectionCode PlanOfCareSectionTitle PlanOfCareSectionText' code.codeSystemName='LOINC' code.code='18776-5' constraints.validation.info='PlanOfCareSectionMedication PlanOfCareSectionImmunization PlanOfCareSectionEncounter PlanOfCareSectionProcedure PlanOfCareSectionPlanOfCareActivityAct PlanOfCareSectionPlanOfCareActivityEncounter PlanOfCareSectionPlanOfCareActivityObservation PlanOfCareSectionPlanOfCareActivityProcedure PlanOfCareSectionPlanOfCareActivitySubstanceAdministration PlanOfCareSectionPlanOfCareActivitySupply'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJORsQu0EeGvGIuLiiZuOg" base_Class="_0ipUMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivityActTemplateId PlanOfCareActivityActMoodCodeValue PlanOfCareActivityActMoodCode PlanOfCareActivityActId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJWNgAu0EeGvGIuLiiZuOg" base_Class="_0iwB4AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivityEncounterTemplateId PlanOfCareActivityEncounterMoodCodeValue PlanOfCareActivityEncounterMoodCode PlanOfCareActivityEncounterId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJeJUAu0EeGvGIuLiiZuOg" base_Class="_0i2IgAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivityObservationTemplateId PlanOfCareActivityObservationMoodCodeValue PlanOfCareActivityObservationMoodCode PlanOfCareActivityObservationId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJleEAu0EeGvGIuLiiZuOg" base_Class="_0i82MAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivityProcedureTemplateId PlanOfCareActivityProcedureMoodCodeValue PlanOfCareActivityProcedureMoodCode PlanOfCareActivityProcedureId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJtZ4Au0EeGvGIuLiiZuOg" base_Class="_0jC80AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivitySubstanceAdministrationTemplateId PlanOfCareActivitySubstanceAdministrationMoodCodeValue PlanOfCareActivitySubstanceAdministrationMoodCode PlanOfCareActivitySubstanceAdministrationId' classCode='SBADM'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJ18wAu0EeGvGIuLiiZuOg" base_Class="_0jJDcAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='2.16.840.1.113883.10.20.1.25' constraints.validation.error='PlanOfCareActivitySupplyTemplateId PlanOfCareActivitySupplyMoodCodeValue PlanOfCareActivitySupplyMoodCode PlanOfCareActivitySupplyId' classCode='SPLY'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oJ-foAu0EeGvGIuLiiZuOg" base_Class="_0jPKEAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.17' constraints.validation.error='ConsolProcedureTemplateId ConsolProcedureHasCodeOriginalText' constraints.validation.warning='ConsolProcedurePerformerAssignedEntity ConsolProcedureCode ConsolProcedureTargetSiteCode' targetSiteCode.codeSystem='2.16.840.1.113883.6.96' targetSiteCode.codeSystemName='SNOMEDCT'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oKHCgAu0EeGvGIuLiiZuOg" base_Class="_0jYUAAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HISTORY OF PREGNANCIES' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.5.3.4' constraints.validation.error='PregnancyHistorySectionTemplateId PregnancyHistorySectionCode PregnancyHistorySectionPregnancyObservation' code.codeSystemName='LOINC' code.code='10162-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oKNJIAu0EeGvGIuLiiZuOg" base_Class="_0jclcAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.13.5' constraints.validation.error='PregnancyObservationTemplateId PregnancyObservationId PregnancyObservationCode PregnancyObservationStatusCode PregnancyObservationRepeatNumber PregnancyObservationValue PregnancyObservationInterpretationCode PregnancyObservationMethodCode PregnancyObservationTargetSiteCode'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oKbLkAu0EeGvGIuLiiZuOg" base_Class="_0jlIUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='History of procedures' templateId.root='2.16.840.1.113883.3.88.11.83.108' constraints.validation.error='SurgeriesSectionTemplateId SurgeriesSectionCode SurgeriesSectionTitle SurgeriesSectionText SurgeriesSectionProcedureActivity SurgeriesSectionProcedureEntryProcedureActivityProcedure' code.codeSystemName='LOINC' constraints.validation.warning='SurgeriesSectionHasProcedureActivity SurgeriesSectionExternalReference' code.code='47519-4'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oKmKsAu0EeGvGIuLiiZuOg" base_Class="_0jpZwAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.4' constraints.validation.error='ExternalReferenceTemplateId ExternalReferenceHasNoCode ExternalReferenceHasReference ExternalReferenceHasReferenceExternalDocument ExternalReferenceHasReferenceExternalDocumentID ExternalReferenceHasReferenceExternalDocumentText ExternalReferenceClassCode ExternalReferenceMoodCode ExternalReferenceId ExternalReferenceText' classCode='ACT' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oK0NIAu0EeGvGIuLiiZuOg" base_Class="_0jwugAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.19' constraints.validation.error='ProcedureEntryProcedureActivityProcedureTemplateId ProcedureEntryProcedureActivityProcedureMoodCode ProcedureEntryProcedureActivityProcedureHasTextReference ProcedureEntryProcedureActivityProcedurePriorityCode ProcedureEntryProcedureActivityProcedureHasInversionIndForEncounter ProcedureEntryProcedureActivityProcedureClassCode ProcedureEntryProcedureActivityProcedureId ProcedureEntryProcedureActivityProcedureCode ProcedureEntryProcedureActivityProcedureText' constraints.validation.warning='ProcedureEntryProcedureActivityProcedureEffectiveTime' classCode='PROC' moodCode='EVN' constraints.validation.info='ProcedureEntryProcedureActivityProcedureApproachSiteCode ProcedureEntryProcedureActivityProcedureInternalReference ProcedureEntryProcedureActivityProcedureInternalReferenceReason ProcedureEntryProcedureActivityProcedureProblemObservation ProcedureEntryProcedureActivityProcedureProblemAct ProcedureEntryProcedureActivityProcedureAgeObservation ProcedureEntryProcedureActivityProcedureMedicationActivity ProcedureEntryProcedureActivityProcedurePatientInstruction'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oLaqEAu0EeGvGIuLiiZuOg" base_Class="_0kPPoAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.5.111' templateId.root='2.16.840.1.113883.3.88.11.83.3' constraints.validation.error='SupportGuardianTemplateId SupportGuardianClassCode SupportGuardianCode' code.codeSystemName='RoleCode' classCode='GUAR' constraints.validation.warning='SupportGuardianAddr SupportGuardianTelecom'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oLj0AAu0EeGvGIuLiiZuOg" base_Class="_0kV9UAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Vital signs' templateId.root='2.16.840.1.113883.3.88.11.83.119' constraints.validation.error='VitalSignsSectionTemplateId VitalSignsSectionVitalSignEntry VitalSignsSectionCode VitalSignsSectionTitle VitalSignsSectionText VitalSignsSectionVitalSignsOrganizer' code.codeSystemName='LOINC' code.code='8716-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oLs98Au0EeGvGIuLiiZuOg" base_Class="_0kcD8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation statusCode.code='completed' code.codeSystem='2.16.840.1.113883.6.96' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.4.13.1' code.displayName='Vital signs' constraints.validation.error='VitalSignsOrganizerTemplateId VitalSignsOrganizerComponentElement VitalSignsOrganizerInformationSource VitalSignsOrganizerRequireResultsOrganizerTemplateID VitalSignsOrganizerClassCode VitalSignsOrganizerMoodCode VitalSignsOrganizerId VitalSignsOrganizerCode VitalSignsOrganizerStatusCode VitalSignsOrganizerEffectiveTime VitalSignsOrganizerVitalSignObservation' code.codeSystemName='SNOMEDCT' classCode='CLUSTER' constraints.validation.warning='VitalSignsOrganizerCodeValue' code.code='46680005' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oMF_gAu0EeGvGIuLiiZuOg" base_Class="_0koRMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.14' constraints.validation.error='VitalSignTemplateId VitalSignNoObservationRangeCode VitalSignInformationSource VitalSignMoodCode VitalSignId VitalSignCode VitalSignStatusCode VitalSignValue' code.codeSystemName='LOINC' constraints.validation.warning='VitalSignCodeValue VitalSignReferenceRangeRequired VitalSignEffectiveTime' classCode='OBS' constraints.validation.info='VitalSignInterpretationCode VitalSignMethodCode VitalSignTargetSiteCode' moodCode='EVN'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oMoLAAu0EeGvGIuLiiZuOg" base_Class="_0lJOkAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.122' code.displayName='STUDIES SUMMARY' constraints.validation.error='DiagnosticResultsSectionTemplateId DiagnosticResultsSectionHasResult DiagnosticResultsSectionCode DiagnosticResultsSectionDiagnosticProcedure' code.codeSystemName='LOINC' constraints.validation.warning='DiagnosticResultsSectionExternalReference' code.code='30954-2' constraints.validation.info='DiagnosticResultsSectionResult DiagnosticResultsSectionResultOrganizer'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oM0YQAu0EeGvGIuLiiZuOg" base_Class="_0l41cAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HISTORY OF PAST ILLNESS' templateId.root='2.16.840.1.113883.3.88.11.83.104' constraints.validation.error='HistoryOfPastIllnessSectionTemplateId HistoryOfPastIllnessSectionCode HistoryOfPastIllnessSectionCondition' code.codeSystemName='LOINC' constraints.validation.warning='HistoryOfPastIllnessSectionHasClinicalStatements' code.code='11348-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oM8UEAu0EeGvGIuLiiZuOg" base_Class="_0l-8FguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='CHIEF COMPLAINT' templateId.root='2.16.840.1.113883.3.88.11.83.105' constraints.validation.error='ChiefComplaintSectionTemplateId ChiefComplaintSectionCode' code.codeSystemName='LOINC' code.code='10154-3' constraints.validation.info='ChiefComplaintSectionCondition'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNCasAu0EeGvGIuLiiZuOg" base_Class="_0mFCsguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='REASON FOR REFERRAL' templateId.root='2.16.840.1.113883.3.88.11.83.106' constraints.validation.error='ReasonForReferralSectionTemplateId ReasonForReferralSectionCode ReasonForReferralSectionProblemEntry' code.codeSystemName='LOINC' code.code='42349-1' constraints.validation.info='ReasonForReferralSectionCondition ReasonForReferralSectionResult'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNMywAu0EeGvGIuLiiZuOg" base_Class="_0mLJWAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.107' code.displayName='HISTORY OF PRESENT ILLNESS' constraints.validation.error='HistoryOfPresentIllnessTemplateId HistoryOfPresentIllnessCode' code.codeSystemName='LOINC' code.code='10164-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNRrQAu0EeGvGIuLiiZuOg" base_Class="_0mRP8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HOSPITAL ADMISSION DX' templateId.root='2.16.840.1.113883.3.88.11.83.110' constraints.validation.error='HospitalAdmissionDiagnosisSectionTemplateId HospitalAdmissionDiagnosisSectionCode HospitalAdmissionDiagnosisSectionCondition' code.codeSystemName='LOINC' code.code='46241-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNXx4Au0EeGvGIuLiiZuOg" base_Class="_0mRP_wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HOSPITAL DISCHARGE DX' templateId.root='2.16.840.1.113883.3.88.11.83.111' constraints.validation.error='DischargeDiagnosisSectionTemplateId DischargeDiagnosisSectionCode DischargeDiagnosisSectionCondition' code.codeSystemName='LOINC' code.code='11535-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNd4gAu0EeGvGIuLiiZuOg" base_Class="_0mXWkguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.113' code.displayName='MEDICATIONS ON ADMISSION' constraints.validation.error='AdmissionMedicationHistorySectionTemplateId AdmissionMedicationHistorySectionCode' code.codeSystemName='LOINC' code.code='42346-7'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNixAAu0EeGvGIuLiiZuOg" base_Class="_0mXWmwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HOSPITAL DISCHARGE MEDICATIONS' templateId.root='2.16.840.1.113883.3.88.11.83.114' constraints.validation.error='HospitalDischargeMedicationsSectionTemplateId HospitalDischargeMedicationsSectionCode HospitalDischargeMedicationsSectionMedication' code.codeSystemName='LOINC' code.code='10183-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNo3oAu0EeGvGIuLiiZuOg" base_Class="_0mddMguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.115' code.displayName='MEDICATION ADMINISTERED' constraints.validation.error='MedicationsAdministeredSectionTemplateId MedicationsAdministeredSectionCode' code.codeSystemName='LOINC' code.code='18610-6'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oNtJEAu0EeGvGIuLiiZuOg" base_Class="_0mjj0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.118' code.displayName='PHYSICAL EXAMINATION' constraints.validation.error='PhysicalExamSectionTemplateId PhysicalExamSectionCode PhysicalExamSectionCondition' code.codeSystemName='LOINC' code.code='29545-1' constraints.validation.info='PhysicalExamSectionVitalSignsSection PhysicalExamSectionGeneralAppearanceSection PhysicalExamSectionVisibleImplantedMedicalDevicesSection PhysicalExamSectionIntegumentarySystemSection PhysicalExamSectionHeadSection PhysicalExamSectionEyesSection PhysicalExamSectionEarsNoseMouthThroatSection PhysicalExamSectionEarsSection PhysicalExamSectionNoseSection PhysicalExamSectionMouthThroatTeethSection PhysicalExamSectionNeckSection PhysicalExamSectionEndocrineSystemSection PhysicalExamSectionThoraxLungsSection PhysicalExamSectionChestWallSection PhysicalExamSectionBreastSection PhysicalExamSectionHeartSection PhysicalExamSectionRespiratorySystemSection PhysicalExamSectionAbdomenSection PhysicalExamSectionLymphaticSection PhysicalExamSectionVesselsSection PhysicalExamSectionMusculoskeletalSystemSection PhysicalExamSectionNeurologicSystemSection PhysicalExamSectionGenitaliaSection PhysicalExamSectionRectumSection PhysicalExamSectionExtremitiesSection'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oN3hIAu0EeGvGIuLiiZuOg" base_Class="_0mpqcwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='GENERAL STATUS' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.16' constraints.validation.error='GeneralAppearanceSectionTemplateId GeneralAppearanceSectionCode' code.codeSystemName='LOINC' code.code='10210-3' constraints.validation.info='GeneralAppearanceSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oN_c8Au0EeGvGIuLiiZuOg" base_Class="_0mvxFguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Visible implanted medical devices' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.48' constraints.validation.error='VisibleImplantedMedicalDevicesSectionTemplateId VisibleImplantedMedicalDevicesSectionCode' code.codeSystemName='LOINC' code.code='XX-VisibleImplantedDevices' constraints.validation.info='VisibleImplantedMedicalDevicesSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOHYwAu0EeGvGIuLiiZuOg" base_Class="_0m13uguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='INTEGUMENTARY SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.17' constraints.validation.error='IntegumentarySystemSectionTemplateId IntegumentarySystemSectionCode' code.codeSystemName='LOINC' code.code='29302-7' constraints.validation.info='IntegumentarySystemSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOP7oAu0EeGvGIuLiiZuOg" base_Class="_0m7-WguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HEAD' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.18' constraints.validation.error='HeadSectionTemplateId HeadSectionCode' code.codeSystemName='LOINC' code.code='10199-8' constraints.validation.info='HeadSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOX3cAu0EeGvGIuLiiZuOg" base_Class="_0nCE-guuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='EYE' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.19' constraints.validation.error='EyesSectionTemplateId EyesSectionCode' code.codeSystemName='LOINC' code.code='10197-2' constraints.validation.info='EyesSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOfzQAu0EeGvGIuLiiZuOg" base_Class="_0nILmQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='EARS and NOSE and MOUTH and THROAT' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.20' constraints.validation.error='EarsNoseMouthThroatSectionTemplateId EarsNoseMouthThroatSectionCode' code.codeSystemName='LOINC' code.code='11393-6' constraints.validation.info='EarsNoseMouthThroatSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOnvEQu0EeGvGIuLiiZuOg" base_Class="_0nOSOguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='EAR' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.21' constraints.validation.error='EarsSectionTemplateId EarsSectionCode' code.codeSystemName='LOINC' code.code='10195-6' constraints.validation.info='EarsSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOt1ugu0EeGvGIuLiiZuOg" base_Class="_0nUY2wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='NOSE' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.22' constraints.validation.error='NoseSectionTemplateId NoseSectionCode' code.codeSystemName='LOINC' code.code='10203-8' constraints.validation.info='NoseSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oOz8YAu0EeGvGIuLiiZuOg" base_Class="_0ngmFQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='MOUTH and THROAT and TEETH' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.23' constraints.validation.error='MouthThroatTeethSectionTemplateId MouthThroatTeethSectionCode' code.codeSystemName='LOINC' code.code='10201-2' constraints.validation.info='MouthThroatTeethSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPAJkgu0EeGvGIuLiiZuOg" base_Class="_0nmstQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='NECK' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.24' constraints.validation.error='NeckSectionTemplateId NeckSectionCode' code.codeSystemName='LOINC' code.code='11411-6' constraints.validation.info='NeckSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPGQOQu0EeGvGIuLiiZuOg" base_Class="_0nszVQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='ENDOCRINE SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.25' constraints.validation.error='EndocrineSystemSectionTemplateId EndocrineSystemSectionCode' code.codeSystemName='LOINC' code.code='29307-6' constraints.validation.info='EndocrineSystemSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPMW4Au0EeGvGIuLiiZuOg" base_Class="_0ny59QuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='THORAX+LUNGS' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.26' constraints.validation.error='ThoraxLungsSectionTemplateId ThoraxLungsSectionCode' code.codeSystemName='LOINC' code.code='10207-9' constraints.validation.info='ThoraxLungsSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPSdgAu0EeGvGIuLiiZuOg" base_Class="_0n5AlQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='CHEST WALL' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.27' constraints.validation.error='ChestWallSectionTemplateId ChestWallSectionCode' code.codeSystemName='LOINC' code.code='11392-8' constraints.validation.info='ChestWallSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPeqtwu0EeGvGIuLiiZuOg" base_Class="_0n_HNQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.28' code.displayName='BREASTS' constraints.validation.error='BreastSectionTemplateId BreastSectionCode' code.codeSystemName='LOINC' code.code='10193-1'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPkxVwu0EeGvGIuLiiZuOg" base_Class="_0oFN0guuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HEART' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.29' constraints.validation.error='HeartSectionTemplateId HeartSectionCode' code.codeSystemName='LOINC' code.code='10200-4' constraints.validation.info='HeartSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPq3_gu0EeGvGIuLiiZuOg" base_Class="_0oLUcguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='RESPIRATORY SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.30' constraints.validation.error='RespiratorySystemSectionTemplateId RespiratorySystemSectionCode' code.codeSystemName='LOINC' code.code='11412-4' constraints.validation.info='RespiratorySystemSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oPw-oAu0EeGvGIuLiiZuOg" base_Class="_0oLUhguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='ABDOMEN' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.31' constraints.validation.error='AbdomenSectionTemplateId AbdomenSectionCode' code.codeSystemName='LOINC' code.code='10191-5' constraints.validation.info='AbdomenSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oP9L0Au0EeGvGIuLiiZuOg" base_Class="_0oRbGguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HEMATOLOGIC+LYMPHATIC+IMMUNOLOGIC SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.32' constraints.validation.error='LymphaticSectionTemplateId LymphaticSectionCode' code.codeSystemName='LOINC' code.code='11447-0' constraints.validation.info='LymphaticSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQDSeQu0EeGvGIuLiiZuOg" base_Class="_0oXhtguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='VESSELS' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.33' constraints.validation.error='VesselsSectionTemplateId VesselsSectionCode' code.codeSystemName='LOINC' code.code='10208-7' constraints.validation.info='VesselsSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQJZIAu0EeGvGIuLiiZuOg" base_Class="_0odoVguuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='MUSCULOSKELETAL SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.34' constraints.validation.error='MusculoskeletalSystemSectionTemplateId MusculoskeletalSystemSectionCode' code.codeSystemName='LOINC' code.code='11410-8' constraints.validation.info='MusculoskeletalSystemSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQVmUAu0EeGvGIuLiiZuOg" base_Class="_0oju9wuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='NEUROLOGIC SYSTEM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.35' constraints.validation.error='NeurologicSystemSectionTemplateId NeurologicSystemSectionCode' code.codeSystemName='LOINC' code.code='10202-0' constraints.validation.info='NeurologicSystemSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQbs9wu0EeGvGIuLiiZuOg" base_Class="_0op1mQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='GENITALIA' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.36' constraints.validation.error='GenitaliaSectionTemplateId GenitaliaSectionCode' code.codeSystemName='LOINC' code.code='11400-9' constraints.validation.info='GenitaliaSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQhzngu0EeGvGIuLiiZuOg" base_Class="_0pOdUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='RECTUM' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.9.37' constraints.validation.error='RectumSectionTemplateId RectumSectionCode' code.codeSystemName='LOINC' code.code='10205-3' constraints.validation.info='RectumSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQn6QAu0EeGvGIuLiiZuOg" base_Class="_0pOdZAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='EXTREMITIES' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.1.16.2.1' constraints.validation.error='ExtremitiesSectionTemplateId ExtremitiesSectionCode' code.codeSystemName='LOINC' code.code='10196-4' constraints.validation.info='ExtremitiesSectionProblemEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQ0Hdwu0EeGvGIuLiiZuOg" base_Class="_0pUj_AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.120' code.displayName='REVIEW OF SYSTEMS' constraints.validation.error='ReviewOfSystemsSectionTemplateId ReviewOfSystemsSectionCode' code.codeSystemName='LOINC' code.code='10187-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQ0HfAu0EeGvGIuLiiZuOg" base_Class="_0paqkAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.121' code.displayName='HOSPITAL COURSE' constraints.validation.error='HospitalCourseSectionTemplateId HospitalCourseSectionCode' code.codeSystemName='LOINC' code.code='8648-8'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oQ6OFAu0EeGvGIuLiiZuOg" base_Class="_0paqmQuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.83.123' code.displayName='ASSESSMENT AND PLAN' constraints.validation.error='AssessmentAndPlanSectionTemplateId AssessmentAndPlanSectionCode' code.codeSystemName='LOINC' code.code='51847-2' constraints.validation.info='AssessmentAndPlanSectionMedication AssessmentAndPlanSectionImmunization AssessmentAndPlanSectionEncounterEntry AssessmentAndPlanSectionProcedureEntry'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oRGbXgu0EeGvGIuLiiZuOg" base_Class="_0pgxOAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.2' constraints.validation.error='LanguageSpokenTemplateId LanguageSpokenModeCode' constraints.validation.warning='LanguageSpokenNoProficiencyLevelCode' modeCode.codeSystem='2.16.840.1.113883.5.60' modeCode.codeSystemName='LanguageAbilityMode'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oRMh9Au0EeGvGIuLiiZuOg" base_Class="_0ps-fwuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.4' constraints.validation.error='HealthcareProviderTemplateId'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oRSokAu0EeGvGIuLiiZuOg" base_Generalization="_0qSNQAuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oRSokwu0EeGvGIuLiiZuOg" base_Class="_0pzFEAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8' constraints.validation.error='MedicationNormalDoseTemplateId MedicationNormalDoseMoodCode MedicationNormalDoseInformationSource MedicationNormalDoseHasReasonProblem MedicationNormalDoseHasProduct MedicationNormalDoseHasDosing MedicationNormalDoseDosingRelationship MedicationNormalDoseHasDescriptionNoMedNotKnown MedicationNormalDoseReasonClassMood MedicationNormalDoseHasProductEntry MedicationNormalDoseHasIntructionsInversion MedicationNormalDoseProductName MedicationNormalDoseHasSupplyEntryInversion MedicationNormalDoseNoSubordinateSubstanceAdministration MedicationNormalDoseId MedicationNormalDoseStatusCode' classCode='SBADM' constraints.validation.warning='MedicationNormalDoseHasDoseQuantityOrRateQuantity MedicationNormalDoseProductStrength MedicationNormalDoseHasFillNumber MedicationNormalDoseRateQuantity' constraints.validation.info='MedicationNormalDoseHasConsents MedicationNormalDoseHasPreconditionCriterion MedicationNormalDoseHasReason MedicationNormalDosePreconditionReference MedicationNormalDoseCode MedicationNormalDoseEffectiveTime MedicationNormalDoseRouteCode MedicationNormalDoseApproachSiteCode MedicationNormalDoseDoseQuantity MedicationNormalDoseMaxDoseQuantity MedicationNormalDoseAdministrationUnitCode MedicationNormalDoseMedicationSeriesNumberObservation MedicationNormalDoseMedicationStatusObservation MedicationNormalDoseProductInstance'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oSJkVQu0EeGvGIuLiiZuOg" base_Generalization="_0q7tgwuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oSPq0Au0EeGvGIuLiiZuOg" base_Class="_0qVQkAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8' constraints.validation.error='MedicationSplitDoseTemplateId MedicationSplitDoseMoodCode MedicationSplitDoseInformationSource MedicationSplitDoseHasReasonProblem MedicationSplitDoseHasProduct MedicationSplitDoseHasDosing MedicationSplitDoseDosingRelationship MedicationSplitDoseHasDescriptionNoMedNotKnown MedicationSplitDoseReasonClassMood MedicationSplitDoseHasProductEntry MedicationSplitDoseHasIntructionsInversion MedicationSplitDoseProductName MedicationSplitDoseHasSupplyEntryInversion MedicationSplitDoseSplitDosingSubstanceAdministration MedicationSplitDoseId MedicationSplitDoseStatusCode' classCode='SBADM' constraints.validation.warning='MedicationSplitDoseHasDoseQuantityOrRateQuantity MedicationSplitDoseProductStrength MedicationSplitDoseHasFillNumber MedicationSplitDoseRateQuantity' constraints.validation.info='MedicationSplitDoseHasConsents MedicationSplitDoseHasPreconditionCriterion MedicationSplitDoseHasReason MedicationSplitDosePreconditionReference MedicationSplitDoseCode MedicationSplitDoseEffectiveTime MedicationSplitDoseRouteCode MedicationSplitDoseApproachSiteCode MedicationSplitDoseDoseQuantity MedicationSplitDoseMaxDoseQuantity MedicationSplitDoseAdministrationUnitCode MedicationSplitDoseMedicationSeriesNumberObservation MedicationSplitDoseMedicationStatusObservation MedicationSplitDoseProductInstance'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oTGmjgu0EeGvGIuLiiZuOg" base_Generalization="_0rl00wuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oTGmkQu0EeGvGIuLiiZuOg" base_Class="_0q-w0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='null' constraints.validation.error='MedicationTaperedDoseTemplateId MedicationTaperedDoseMoodCode MedicationTaperedDoseInformationSource MedicationTaperedDoseHasReasonProblem MedicationTaperedDoseHasProduct MedicationTaperedDoseHasDosing MedicationTaperedDoseDosingRelationship MedicationTaperedDoseHasDescriptionNoMedNotKnown MedicationTaperedDoseReasonClassMood MedicationTaperedDoseHasProductEntry MedicationTaperedDoseHasIntructionsInversion MedicationTaperedDoseProductName MedicationTaperedDoseHasSupplyEntryInversion MedicationTaperedDoseTaperedDosingSubstanceAdministration MedicationTaperedDoseId MedicationTaperedDoseStatusCode' classCode='SBADM' constraints.validation.warning='MedicationTaperedDoseHasDoseQuantityOrRateQuantity MedicationTaperedDoseProductStrength MedicationTaperedDoseHasFillNumber MedicationTaperedDoseRateQuantity' constraints.validation.info='MedicationTaperedDoseHasConsents MedicationTaperedDoseHasPreconditionCriterion MedicationTaperedDoseHasReason MedicationTaperedDosePreconditionReference MedicationTaperedDoseCode MedicationTaperedDoseEffectiveTime MedicationTaperedDoseRouteCode MedicationTaperedDoseApproachSiteCode MedicationTaperedDoseDoseQuantity MedicationTaperedDoseMaxDoseQuantity MedicationTaperedDoseAdministrationUnitCode MedicationTaperedDoseMedicationSeriesNumberObservation MedicationTaperedDoseMedicationStatusObservation MedicationTaperedDoseProductInstance'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oUDosAu0EeGvGIuLiiZuOg" base_Generalization="_0sJ1gwuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oUEPwAu0EeGvGIuLiiZuOg" base_Class="_0roREAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8' constraints.validation.error='MedicationConditionalDoseTemplateId MedicationConditionalDoseMoodCode MedicationConditionalDoseInformationSource MedicationConditionalDoseHasReasonProblem MedicationConditionalDoseHasProduct MedicationConditionalDoseHasDosing MedicationConditionalDoseDosingRelationship MedicationConditionalDoseHasDescriptionNoMedNotKnown MedicationConditionalDoseReasonClassMood MedicationConditionalDoseHasProductEntry MedicationConditionalDoseHasIntructionsInversion MedicationConditionalDoseProductName MedicationConditionalDoseHasSupplyEntryInversion MedicationConditionalDoseConditionalDosingSubstanceAdministration MedicationConditionalDoseId MedicationConditionalDoseStatusCode' classCode='SBADM' constraints.validation.warning='MedicationConditionalDoseHasDoseQuantityOrRateQuantity MedicationConditionalDoseProductStrength MedicationConditionalDoseHasFillNumber MedicationConditionalDoseRateQuantity' constraints.validation.info='MedicationConditionalDoseHasConsents MedicationConditionalDoseHasPreconditionCriterion MedicationConditionalDoseHasReason MedicationConditionalDosePreconditionReference MedicationConditionalDoseCode MedicationConditionalDoseEffectiveTime MedicationConditionalDoseRouteCode MedicationConditionalDoseApproachSiteCode MedicationConditionalDoseDoseQuantity MedicationConditionalDoseMaxDoseQuantity MedicationConditionalDoseAdministrationUnitCode MedicationConditionalDoseMedicationSeriesNumberObservation MedicationConditionalDoseMedicationStatusObservation MedicationConditionalDoseProductInstance'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oVAD4Au0EeGvGIuLiiZuOg" base_Generalization="_0svEVQuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oVAq8Au0EeGvGIuLiiZuOg" base_Class="_0sM40AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8' constraints.validation.error='MedicationCombinationMedicationTemplateId MedicationCombinationMedicationMoodCode MedicationCombinationMedicationInformationSource MedicationCombinationMedicationHasReasonProblem MedicationCombinationMedicationHasProduct MedicationCombinationMedicationHasDosing MedicationCombinationMedicationDosingRelationship MedicationCombinationMedicationHasDescriptionNoMedNotKnown MedicationCombinationMedicationReasonClassMood MedicationCombinationMedicationHasProductEntry MedicationCombinationMedicationHasIntructionsInversion MedicationCombinationMedicationProductName MedicationCombinationMedicationHasSupplyEntryInversion MedicationCombinationMedicationCombinationMedicationSubstanceAdministration MedicationCombinationMedicationId MedicationCombinationMedicationStatusCode' classCode='SBADM' constraints.validation.warning='MedicationCombinationMedicationHasDoseQuantityOrRateQuantity MedicationCombinationMedicationProductStrength MedicationCombinationMedicationHasFillNumber MedicationCombinationMedicationRateQuantity' constraints.validation.info='MedicationCombinationMedicationHasConsents MedicationCombinationMedicationHasPreconditionCriterion MedicationCombinationMedicationHasReason MedicationCombinationMedicationPreconditionReference MedicationCombinationMedicationCode MedicationCombinationMedicationEffectiveTime MedicationCombinationMedicationRouteCode MedicationCombinationMedicationApproachSiteCode MedicationCombinationMedicationDoseQuantity MedicationCombinationMedicationMaxDoseQuantity MedicationCombinationMedicationAdministrationUnitCode MedicationCombinationMedicationMedicationSeriesNumberObservation MedicationCombinationMedicationMedicationStatusObservation MedicationCombinationMedicationProductInstance'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oV9tMAu0EeGvGIuLiiZuOg" base_Class="_0szVwAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.3' constraints.validation.error='SupportParticipantTemplateId SupportParticipantTypeCode' typeCode='IND' constraints.validation.info='SupportParticipantTime'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oWDMwAu0EeGvGIuLiiZuOg" base_Class="_0s4OQAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.62.1' constraints.validation.error='UnstructuredDocumentTemplateId UnstructuredDocumentPersonHasName UnstructuredDocumentRolesShallHaveAddrAndTelecom UnstructuredDocumentOrganizationsHaveContactInfo UnstructuredDocumentTimePreciseToDay UnstructuredDocumentTimePreciseToYear UnstructuredDocumentTelephoneMatchesRegex UnstructuredDocumentHasTelephoneDialingDigits UnstructuredDocumentUnknownTelephoneUsesNullFlavor UnstructuredDocumentTypeIdExtension UnstructuredDocumentIdRootFormat UnstructuredDocumentOidLength UnstructuredDocumentLanguageCodeForm UnstructuredDocumentSetIdAndVersionNumber UnstructuredDocumentSetIdAndIdAreUnique UnstructuredDocumentCopyTimeNotPresent UnstructuredDocumentHasRecordTargetPatientRole UnstructuredDocumentHasPatientBirthTime UnstructuredDocumentHasAdministrativeGenderCode UnstructuredDocumentHasAuthorTime UnstructuredDocumentHasAssignedAuthorId UnstructuredDocumentHasAssignedAuthorPersonOrDevice UnstructuredDocumentHasDataEntererAssignedPerson UnstructuredDocumentHasInformantAssignedPersonOrRelatedPerson UnstructuredDocumentLegalAuthenticatorHasAssignedPerson UnstructuredDocumentAuthenticatorHasAssignedPerson UnstructuredDocumentTypeIdFixed UnstructuredDocumentHasOneRecordTarget UnstructuredDocumentHasAssignedAuthor UnstructuredDocumentPatientRoleId UnstructuredDocumentHasPatientRoleAddress UnstructuredDocumentHasPatientName UnstructuredDocumentHasPatientGenderCode UnstructuredDocumentHasPatientBirthYear UnstructuredDocumentHasScanningDevice UnstructuredDocumentHasScanDataEnterer UnstructuredDocumentHasRepresentedCustodianOrganizationName UnstructuredDocumentHasRepresentedCustodianOrganizationAddr UnstructuredDocumentLegalAuthenticatorAssignedEntityId UnstructuredDocumentHasNonXMLBody UnstructuredDocumentHasNonXMLBodyBinaryText UnstructuredDocumentHasNonXMLBodyTextMediaType UnstructuredDocumentHasNonXMLBodyTextRepresentation UnstructuredDocumentOnePatientPerDocument UnstructuredDocumentTypeId UnstructuredDocumentId UnstructuredDocumentCode UnstructuredDocumentEffectiveTime UnstructuredDocumentConfidentialityCode UnstructuredDocumentLanguageCode' constraints.validation.warning='UnstructuredDocumentRolesShouldHaveAddrAndTelecom UnstructuredDocumentTimePreciseToSecond UnstructuredDocumentTimePreciseToYearAndDay UnstructuredDocumentHasOriginalAuthor UnstructuredDocumentNoStructuredData UnstructuredDocumentTitle' constraints.validation.info='UnstructuredDocumentHasProviderOrganization UnstructuredDocumentHasDataEntererTime UnstructuredDocumentHasInformant'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oXQtsAu0EeGvGIuLiiZuOg" base_Class="_0tCmUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='1.3.6.1.4.1.19376.1.2.20.1' constraints.validation.error='ScanOriginalAuthorTemplateId' constraints.validation.warning='ScanOriginalAuthorHasAssignedAuthorId ScanOriginalAuthorHasAssignedAuthorRepresentedOrganizationId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oXU_IQu0EeGvGIuLiiZuOg" base_Class="_0tG3wAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='1.3.6.1.4.1.19376.1.2.20.2' constraints.validation.error='ScanningDeviceTemplateId ScanningDeviceTimeEqualsDocumentEffectiveTime ScanningDeviceHasAssignedAuthorId ScanningDeviceHasAssignedAuthoringDeviceCode ScanningDeviceHasDeviceManufacturerModelName ScanningDeviceHasDeviceSoftwareName ScanningDeviceHasAssignedAuthorRepresentedOrganizationId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oXdiAAu0EeGvGIuLiiZuOg" base_Class="_0tNlcAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='1.3.6.1.4.1.19376.1.2.20.3' constraints.validation.error='ScanDataEntererTemplateId ScanDataEntererTimeEqualsDocumentEffectiveTime ScanDataEntererHasAssignedEntityId ScanDataEntererTime'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oXk2wAu0EeGvGIuLiiZuOg" base_Class="_0uAPoAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.3.88.11.83.8.2' constraints.validation.error='MedicationInformationTemplateId MedicationInformationHasMaterial MedicationInformationHasMaterialCode MedicationInformationHasMaterialCodeOriginalText MedicationInformationCodedProductName MedicationInformationCodedProductVocab MedicationInformationCodedDrugClassVocab MedicationInformationCodedBrandName MedicationInformationCodedBrandNameVocab MedicationInformationFreeTextProductName MedicationInformationFreeTextBrandName' constraints.validation.warning='MedicationInformationHasMaterialCodeVocab MedicationInformationShouldHaveMaterialManufacturer' constraints.validation.info='MedicationInformationHasMaterialName MedicationInformationMayHaveMaterialManufacturer MedicationInformationCodedIngredientVocab MedicationInformationId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oX1VcAu0EeGvGIuLiiZuOg" base_Class="_0uQuUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.19.1' constraints.validation.error='UnstructuredOrScannedDocumentTemplateId UnstructuredOrScannedDocumentPersonHasName UnstructuredOrScannedDocumentRolesShallHaveAddrAndTelecom UnstructuredOrScannedDocumentOrganizationsHaveContactInfo UnstructuredOrScannedDocumentTimePreciseToDay UnstructuredOrScannedDocumentTimePreciseToYear UnstructuredOrScannedDocumentTelephoneMatchesRegex UnstructuredOrScannedDocumentHasTelephoneDialingDigits UnstructuredOrScannedDocumentUnknownTelephoneUsesNullFlavor UnstructuredOrScannedDocumentTypeIdExtension UnstructuredOrScannedDocumentIdRootFormat UnstructuredOrScannedDocumentOidLength UnstructuredOrScannedDocumentLanguageCodeForm UnstructuredOrScannedDocumentSetIdAndVersionNumber UnstructuredOrScannedDocumentSetIdAndIdAreUnique UnstructuredOrScannedDocumentCopyTimeNotPresent UnstructuredOrScannedDocumentHasRecordTargetPatientRole UnstructuredOrScannedDocumentHasPatientBirthTime UnstructuredOrScannedDocumentHasAdministrativeGenderCode UnstructuredOrScannedDocumentHasAuthorTime UnstructuredOrScannedDocumentHasAssignedAuthorId UnstructuredOrScannedDocumentHasAssignedAuthorPersonOrDevice UnstructuredOrScannedDocumentHasDataEntererAssignedPerson UnstructuredOrScannedDocumentHasInformantAssignedPersonOrRelatedPerson UnstructuredOrScannedDocumentLegalAuthenticatorHasAssignedPerson UnstructuredOrScannedDocumentAuthenticatorHasAssignedPerson UnstructuredOrScannedDocumentTypeIdFixed UnstructuredOrScannedDocumentHasOneRecordTarget UnstructuredOrScannedDocumentHasAssignedAuthor UnstructuredOrScannedDocumentPatientRoleId UnstructuredOrScannedDocumentHasPatientRoleAddress UnstructuredOrScannedDocumentHasPatientName UnstructuredOrScannedDocumentHasPatientGenderCode UnstructuredOrScannedDocumentHasPatientBirthYear UnstructuredOrScannedDocumentHasScanningDevice UnstructuredOrScannedDocumentHasScanDataEnterer UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationName UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationAddr UnstructuredOrScannedDocumentLegalAuthenticatorAssignedEntityId UnstructuredOrScannedDocumentHasNonXMLBody UnstructuredOrScannedDocumentHasNonXMLBodyBinaryText UnstructuredOrScannedDocumentHasNonXMLBodyTextMediaType UnstructuredOrScannedDocumentHasNonXMLBodyTextRepresentation UnstructuredOrScannedDocumentOnePatientPerDocument UnstructuredOrScannedDocumentPatientRoleHasId UnstructuredOrScannedDocumentAssignedAuthorHasAddr UnstructuredOrScannedDocumentAssignedAuthorHasTelecom UnstructuredOrScannedDocumentHasRepresentedCustodianOrganization UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationId UnstructuredOrScannedDocumentHasRepresentedCustodianOrganizationTelecom UnstructuredOrScannedDocumentHasNonXMLBodyText UnstructuredOrScannedDocumentHasTextReferenceOrRepresentation UnstructuredOrScannedDocumentHasTextMediaTypeValueSet UnstructuredOrScannedDocumentRealmCode UnstructuredOrScannedDocumentTypeId UnstructuredOrScannedDocumentId UnstructuredOrScannedDocumentCode UnstructuredOrScannedDocumentTitle UnstructuredOrScannedDocumentEffectiveTime UnstructuredOrScannedDocumentLanguageCode' constraints.validation.warning='UnstructuredOrScannedDocumentRolesShouldHaveAddrAndTelecom UnstructuredOrScannedDocumentTimePreciseToSecond UnstructuredOrScannedDocumentTimePreciseToYearAndDay UnstructuredOrScannedDocumentHasOriginalAuthor UnstructuredOrScannedDocumentNoStructuredData' realmCode.code='US' constraints.validation.info='UnstructuredOrScannedDocumentHasProviderOrganization UnstructuredOrScannedDocumentHasDataEntererTime UnstructuredOrScannedDocumentHasInformant'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oaKQsAu0EeGvGIuLiiZuOg" base_Class="_0vxKMAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.48.1' constraints.validation.error='ReferralSummaryTemplateId ReferralSummaryPersonHasName ReferralSummaryRolesShallHaveAddrAndTelecom ReferralSummaryOrganizationsHaveContactInfo ReferralSummaryTimePreciseToDay ReferralSummaryTimePreciseToYear ReferralSummaryTelephoneMatchesRegex ReferralSummaryHasTelephoneDialingDigits ReferralSummaryUnknownTelephoneUsesNullFlavor ReferralSummaryTypeIdExtension ReferralSummaryIdRootFormat ReferralSummaryOidLength ReferralSummaryLanguageCodeForm ReferralSummarySetIdAndVersionNumber ReferralSummarySetIdAndIdAreUnique ReferralSummaryCopyTimeNotPresent ReferralSummaryHasRecordTargetPatientRole ReferralSummaryHasPatientBirthTime ReferralSummaryHasAdministrativeGenderCode ReferralSummaryHasAuthorTime ReferralSummaryHasAssignedAuthorId ReferralSummaryHasAssignedAuthorPersonOrDevice ReferralSummaryHasDataEntererAssignedPerson ReferralSummaryHasInformantAssignedPersonOrRelatedPerson ReferralSummaryLegalAuthenticatorHasAssignedPerson ReferralSummaryAuthenticatorHasAssignedPerson ReferralSummaryMedicalSummaryProblemConcernEntry ReferralSummaryMedicalSummaryAllergyConcernEntry ReferralSummaryMedicalSummaryMedications ReferralSummaryRealmCode ReferralSummaryTypeId ReferralSummaryId ReferralSummaryCode ReferralSummaryTitle ReferralSummaryEffectiveTime ReferralSummaryLanguageCode' code.codeSystemName='LOINC' constraints.validation.warning='ReferralSummaryRolesShouldHaveAddrAndTelecom ReferralSummaryTimePreciseToSecond ReferralSummaryTimePreciseToYearAndDay' realmCode.code='US' constraints.validation.info='ReferralSummaryHasProviderOrganization ReferralSummaryHasDataEntererTime ReferralSummaryHasInformant'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_obFdwAu0EeGvGIuLiiZuOg" base_Class="_0whYIAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.3.88.11.48.2' constraints.validation.error='DischargeSummaryTemplateId DischargeSummaryPersonHasName DischargeSummaryRolesShallHaveAddrAndTelecom DischargeSummaryOrganizationsHaveContactInfo DischargeSummaryTimePreciseToDay DischargeSummaryTimePreciseToYear DischargeSummaryTelephoneMatchesRegex DischargeSummaryHasTelephoneDialingDigits DischargeSummaryUnknownTelephoneUsesNullFlavor DischargeSummaryTypeIdExtension DischargeSummaryIdRootFormat DischargeSummaryOidLength DischargeSummaryLanguageCodeForm DischargeSummarySetIdAndVersionNumber DischargeSummarySetIdAndIdAreUnique DischargeSummaryCopyTimeNotPresent DischargeSummaryHasRecordTargetPatientRole DischargeSummaryHasPatientBirthTime DischargeSummaryHasAdministrativeGenderCode DischargeSummaryHasAuthorTime DischargeSummaryHasAssignedAuthorId DischargeSummaryHasAssignedAuthorPersonOrDevice DischargeSummaryHasDataEntererAssignedPerson DischargeSummaryHasInformantAssignedPersonOrRelatedPerson DischargeSummaryLegalAuthenticatorHasAssignedPerson DischargeSummaryAuthenticatorHasAssignedPerson DischargeSummaryMedicalSummaryProblemConcernEntry DischargeSummaryMedicalSummaryAllergyConcernEntry DischargeSummaryMedicalSummaryMedications DischargeSummaryRealmCode DischargeSummaryTypeId DischargeSummaryId DischargeSummaryCode DischargeSummaryTitle DischargeSummaryEffectiveTime DischargeSummaryLanguageCode DischargeSummaryProblemListSection DischargeSummaryHospitalAdmissionDiagnosisSection DischargeSummaryAllergiesReactionsSection DischargeSummaryDischargeDiagnosisSection DischargeSummaryHospitalDischargeMedicationsSection DischargeSummaryHospitalCourseSection DischargeSummaryPlanOfCareSection DischargeSummaryHistoryOfPastIllnessSection' code.codeSystemName='LOINC' constraints.validation.warning='DischargeSummaryRolesShouldHaveAddrAndTelecom DischargeSummaryTimePreciseToSecond DischargeSummaryTimePreciseToYearAndDay DischargeSummaryAdmissionMedicationHistorySection DischargeSummaryHistoryOfPresentIllness DischargeSummaryMedicalEquipmentSection DischargeSummaryMedicationsAdministeredSection DischargeSummaryVitalSignsSection' realmCode.code='US' constraints.validation.info='DischargeSummaryHasProviderOrganization DischargeSummaryHasDataEntererTime DischargeSummaryHasInformant DischargeSummaryAdvanceDirectivesSection DischargeSummaryDischargeDiet DischargeSummaryDiagnosticResultsSection DischargeSummaryFunctionalStatusSection DischargeSummaryPhysicalExamSection DischargeSummaryReviewOfSystemsSection'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oco88Au0EeGvGIuLiiZuOg" base_Class="_0xBucAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.3.33' code.displayName='Discharge Diet' constraints.validation.error='DischargeDietTemplateId DischargeDietCode' code.codeSystemName='LOINC' code.code='42344-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_octOYQu0EeGvGIuLiiZuOg" base_Class="_0xpZgAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2' constraints.validation.error='HistoryAndPhysicalTemplateId HistoryAndPhysicalPersonHasName HistoryAndPhysicalRolesShallHaveAddrAndTelecom HistoryAndPhysicalOrganizationsHaveContactInfo HistoryAndPhysicalTimePreciseToDay HistoryAndPhysicalTimePreciseToYear HistoryAndPhysicalTelephoneMatchesRegex HistoryAndPhysicalHasTelephoneDialingDigits HistoryAndPhysicalUnknownTelephoneUsesNullFlavor HistoryAndPhysicalTypeIdExtension HistoryAndPhysicalIdRootFormat HistoryAndPhysicalOidLength HistoryAndPhysicalLanguageCodeForm HistoryAndPhysicalSetIdAndVersionNumber HistoryAndPhysicalSetIdAndIdAreUnique HistoryAndPhysicalCopyTimeNotPresent HistoryAndPhysicalHasRecordTargetPatientRole HistoryAndPhysicalHasPatientBirthTime HistoryAndPhysicalHasAdministrativeGenderCode HistoryAndPhysicalHasAuthorTime HistoryAndPhysicalHasAssignedAuthorId HistoryAndPhysicalHasAssignedAuthorPersonOrDevice HistoryAndPhysicalHasDataEntererAssignedPerson HistoryAndPhysicalHasInformantAssignedPersonOrRelatedPerson HistoryAndPhysicalLegalAuthenticatorHasAssignedPerson HistoryAndPhysicalAuthenticatorHasAssignedPerson HistoryAndPhysicalAssessmentAndPlan HistoryAndPhysicalBothAssessmentAndPlan HistoryAndPhysicalReasonForVisitAndChiefComplaint HistoryAndPhysicalBothReasonForVisitAndChiefComplaint HistoryAndPhysicalRealmCode HistoryAndPhysicalTypeId HistoryAndPhysicalId HistoryAndPhysicalCode HistoryAndPhysicalTitle HistoryAndPhysicalEffectiveTime HistoryAndPhysicalLanguageCode HistoryAndPhysicalHistoryOfPresentIllness HistoryAndPhysicalPastMedicalHistorySection HistoryAndPhysicalMedicationsSection HistoryAndPhysicalAlertsSection HistoryAndPhysicalSocialHistorySection HistoryAndPhysicalFamilyHistorySection HistoryAndPhysicalReviewOfSystemsSection HistoryAndPhysicalPhysicalExaminationSection HistoryAndPhysicalVitalSignsSection HistoryAndPhysicalGeneralStatusSection HistoryAndPhysicalDiagnosticFindings' code.codeSystemName='LOINC' constraints.validation.warning='HistoryAndPhysicalRolesShouldHaveAddrAndTelecom HistoryAndPhysicalTimePreciseToSecond HistoryAndPhysicalTimePreciseToYearAndDay' realmCode.code='US' constraints.validation.info='HistoryAndPhysicalHasProviderOrganization HistoryAndPhysicalHasDataEntererTime HistoryAndPhysicalHasInformant HistoryAndPhysicalProblemSection HistoryAndPhysicalProceduresSection HistoryAndPhysicalImmunizationsSection'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oeU_AAu0EeGvGIuLiiZuOg" base_Class="_0yJv0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.3.4' code.displayName='HISTORY OF PRESENT ILLNESS' constraints.validation.error='IHEHistoryOfPresentIllnessTemplateId IHEHistoryOfPresentIllnessCode' code.codeSystemName='LOINC' code.code='10164-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oeZ3gAu0EeGvGIuLiiZuOg" base_Class="_0yOoUAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='1.3.6.1.4.1.19376.1.5.3.1.3.18' code.displayName='REVIEW OF SYSTEMS' constraints.validation.error='ReviewOfSystemsSectionIHETemplateId ReviewOfSystemsSectionIHECode' code.codeSystemName='LOINC' code.code='10187-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oeeI8Au0EeGvGIuLiiZuOg" base_Class="_0yTg0AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.4' code.displayName='VITAL SIGNS' constraints.validation.error='CCDVitalSignsSectionTemplateId CCDVitalSignsSectionCode CCDVitalSignsSectionText' code.codeSystemName='LOINC' constraints.validation.warning='CCDVitalSignsSectionClinicalStatements CCDVitalSignsSectionVitalSignsOrganizer' code.code='8716-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oemr0Au0EeGvGIuLiiZuOg" base_Class="_0ya1kAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.5' code.displayName='GENERAL STATUS, PHYSICAL FINDINGS' constraints.validation.error='GeneralStatusSectionTemplateId GeneralStatusSectionCode' code.codeSystemName='LOINC' code.code='10210-3'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_oeqWMAu0EeGvGIuLiiZuOg" base_Generalization="_0ykmkAuuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_oeq9QAu0EeGvGIuLiiZuOg" base_Class="_0yfuEAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='Relevant diagnostic tests and/or laboratory data' templateId.root='2.16.840.1.113883.10.20.1.14' constraints.validation.error='DiagnosticFindingsTemplateId ResultsSectionCode DiagnosticFindingsTitle DiagnosticFindingsText' code.codeSystemName='LOINC' constraints.validation.warning='DiagnosticFindingsResultOrganizer' code.code='30954-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oe1VUAu0EeGvGIuLiiZuOg" base_Class="_0zB5kAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.4' constraints.validation.error='ConsultationNoteTemplateId ConsultationNotePersonHasName ConsultationNoteRolesShallHaveAddrAndTelecom ConsultationNoteOrganizationsHaveContactInfo ConsultationNoteTimePreciseToDay ConsultationNoteTimePreciseToYear ConsultationNoteTelephoneMatchesRegex ConsultationNoteHasTelephoneDialingDigits ConsultationNoteUnknownTelephoneUsesNullFlavor ConsultationNoteTypeIdExtension ConsultationNoteIdRootFormat ConsultationNoteOidLength ConsultationNoteLanguageCodeForm ConsultationNoteSetIdAndVersionNumber ConsultationNoteSetIdAndIdAreUnique ConsultationNoteCopyTimeNotPresent ConsultationNoteHasRecordTargetPatientRole ConsultationNoteHasPatientBirthTime ConsultationNoteHasAdministrativeGenderCode ConsultationNoteHasAuthorTime ConsultationNoteHasAssignedAuthorId ConsultationNoteHasAssignedAuthorPersonOrDevice ConsultationNoteHasDataEntererAssignedPerson ConsultationNoteHasInformantAssignedPersonOrRelatedPerson ConsultationNoteLegalAuthenticatorHasAssignedPerson ConsultationNoteAuthenticatorHasAssignedPerson ConsultationNoteReferralOrVisit ConsultationNoteRealmCode ConsultationNoteTypeId ConsultationNoteId ConsultationNoteCode ConsultationNoteTitle ConsultationNoteEffectiveTime ConsultationNoteLanguageCode ConsultationNoteHistoryOfPresentIllness ConsultationNotePhysicalExamination' code.codeSystemName='LOINC' constraints.validation.warning='ConsultationNoteRolesShouldHaveAddrAndTelecom ConsultationNoteTimePreciseToSecond ConsultationNoteTimePreciseToYearAndDay' realmCode.code='US' constraints.validation.info='ConsultationNoteHasProviderOrganization ConsultationNoteHasDataEntererTime ConsultationNoteHasInformant ConsultationNoteProblemSection ConsultationNoteProceduresSection ConsultationNotePastMedicalHistorySection ConsultationNoteImmunizationsSection ConsultationNoteMedicationsSection ConsultationNoteAlertsSection ConsultationNoteSocialHistorySection ConsultationNoteFamilyHistorySection ConsultationNoteReviewOfSystemsSection ConsultationNoteVitalSignsSection ConsultationNoteGeneralStatusSection ConsultationNoteDiagnosticFindings'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_ogKLAgu0EeGvGIuLiiZuOg" base_Class="_0zhBwAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' code.displayName='HISTORY OF PAST ILLNESS' templateId.root='2.16.840.1.113883.10.20.4.9' constraints.validation.error='PastMedicalHistorySectionConsultTemplateId PastMedicalHistorySectionConsultCode PastMedicalHistorySectionConsultText' code.codeSystemName='LOINC' code.code='11348-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_ogQRpAu0EeGvGIuLiiZuOg" base_Class="_0z-70AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.4.8' code.displayName='REASON FOR VISIT' constraints.validation.error='ReasonForVisitSectionConsultTemplateId ReasonForVisitSectionConsultCode' code.codeSystemName='LOINC' code.code='29299-5'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_ogWYQgu0EeGvGIuLiiZuOg" base_Class="_00DNQAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.10' constraints.validation.error='LevelOneConformanceTemplateId'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_ogce4Au0EeGvGIuLiiZuOg" base_Generalization="_00TE4guuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_ogce4wu0EeGvGIuLiiZuOg" base_Class="_00M-QAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.20' constraints.validation.error='LevelTwoConformanceTemplateId'</annotation>
  </Ecore:EClass>
  <CDA:ConformsTo xmi:id="_ogce5Au0EeGvGIuLiiZuOg" base_Generalization="_00aZoguuEeGvGIuLiiZuOg"/>
  <Ecore:EClass xmi:id="_ogilggu0EeGvGIuLiiZuOg" base_Class="_00UTAAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation templateId.root='2.16.840.1.113883.10.20.30' constraints.validation.error='LevelThreeConformanceTemplateId'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_ogosIAu0EeGvGIuLiiZuOg" base_Class="_00c14AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.7' code.displayName='Assessment' constraints.validation.error='AssessmentSectionTemplateId AssessmentSectionCode' code.codeSystemName='LOINC' code.code='51848-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_ogosJQu0EeGvGIuLiiZuOg" base_Class="_00huYAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.7' code.displayName='Plan' constraints.validation.error='PlanSectionTemplateId PlanSectionCode' code.codeSystemName='LOINC' code.code='18776-5'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oguyxAu0EeGvGIuLiiZuOg" base_Class="_00mm4AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.8' code.displayName='Reason for visit' constraints.validation.error='ReasonForVisitSectionTemplateId ReasonForVisitSectionCode' code.codeSystemName='LOINC' code.code='29299-5'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_og05Ygu0EeGvGIuLiiZuOg" base_Class="_00rfYAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation contextDependent='true' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.2.8' code.displayName='Reason for visit + Chief complaint' constraints.validation.error='ReasonForVisitAndChiefComplaintSectionTemplateId ReasonForVisitAndChiefComplaintSectionCode' code.codeSystemName='LOINC' code.code='46239-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_og7AAgu0EeGvGIuLiiZuOg" base_Class="_00w-8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.21.1' constraints.validation.error='ProgressNoteTemplateId ProgressNotePersonHasName ProgressNoteRolesShallHaveAddrAndTelecom ProgressNoteOrganizationsHaveContactInfo ProgressNoteTimePreciseToDay ProgressNoteTimePreciseToYear ProgressNoteTelephoneMatchesRegex ProgressNoteHasTelephoneDialingDigits ProgressNoteUnknownTelephoneUsesNullFlavor ProgressNoteTypeIdExtension ProgressNoteIdRootFormat ProgressNoteOidLength ProgressNoteLanguageCodeForm ProgressNoteSetIdAndVersionNumber ProgressNoteSetIdAndIdAreUnique ProgressNoteCopyTimeNotPresent ProgressNoteHasRecordTargetPatientRole ProgressNoteHasPatientBirthTime ProgressNoteHasAdministrativeGenderCode ProgressNoteHasAuthorTime ProgressNoteHasAssignedAuthorId ProgressNoteHasAssignedAuthorPersonOrDevice ProgressNoteHasDataEntererAssignedPerson ProgressNoteHasInformantAssignedPersonOrRelatedPerson ProgressNoteLegalAuthenticatorHasAssignedPerson ProgressNoteAuthenticatorHasAssignedPerson ProgressNoteAssessmentAndPlan ProgressNoteBothAssessmentAndPlan ProgressNoteHasServiceEventCode ProgressNoteHasComponentOfElement ProgressNoteHasEncompassingEncounterId ProgressNoteHasEncompassingEncounterEffectiveTime ProgressNoteHasEncompassingEncounterEffectiveTimeLow ProgressNoteRealmCode ProgressNoteTypeId ProgressNoteId ProgressNoteCode ProgressNoteTitle ProgressNoteEffectiveTime ProgressNoteLanguageCode' code.codeSystemName='LOINC' constraints.validation.warning='ProgressNoteRolesShouldHaveAddrAndTelecom ProgressNoteTimePreciseToSecond ProgressNoteTimePreciseToYearAndDay ProgressNoteHasServiceEvent ProgressNoteHasServiceEventEffectiveTime ProgressNoteHasEncompassingEncounterFacilityId' realmCode.code='US' constraints.validation.info='ProgressNoteHasProviderOrganization ProgressNoteHasDataEntererTime ProgressNoteHasInformant ProgressNoteAlertsSection ProgressNoteChiefComplaintSection ProgressNoteMedicationsSection ProgressNoteObjectiveSection ProgressNotePhysicalExaminationSection ProgressNoteProblemSection ProgressNoteResultsSection ProgressNoteVitalSignsSection ProgressNoteReviewOfSystemsSection ProgressNoteSubjectiveSection'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oiQcwgu0EeGvGIuLiiZuOg" base_Class="_01ZREAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.18.2.14' code.displayName='ASSESSMENT AND PLAN' constraints.validation.error='AssessmentAndPlanSectionProcNoteTemplateId AssessmentAndPlanSectionProcNoteCode' code.codeSystemName='LOINC' code.code='51847-2'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oiWjZAu0EeGvGIuLiiZuOg" base_Class="_01fXsAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.18.2.13' code.displayName='ASSESSMENT' constraints.validation.error='AssessmentSectionProcNoteTemplateId AssessmentSectionProcNoteCode' code.codeSystemName='LOINC' code.code='51848-0'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oicqBAu0EeGvGIuLiiZuOg" base_Class="_01mFYAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.18.2.16' code.displayName='CHIEF COMPLAINT' constraints.validation.error='ChiefComplaintSectionProcNoteTemplateId ChiefComplaintSectionProcNoteCode' code.codeSystemName='LOINC' code.code='10154-3'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oiiwogu0EeGvGIuLiiZuOg" base_Class="_01rk8AuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.21.2.1' code.displayName='OBJECTIVE DATA' constraints.validation.error='ObjectiveSectionTemplateId ObjectiveSectionCode ObjectiveSectionTitle ObjectiveSectionText' code.codeSystemName='LOINC' constraints.validation.warning='ObjectiveSectionHasClinicalStatements' code.code='OBJEC-X'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oio3Rgu0EeGvGIuLiiZuOg" base_Class="_01zgwAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.21.2.2' code.displayName='SUBJECTIVE DATA' constraints.validation.error='SubjectiveSectionTemplateId SubjectiveSectionCode SubjectiveSectionTitle SubjectiveSectionText' code.codeSystemName='LOINC' constraints.validation.warning='SubjectiveSectionHasClinicalStatements' code.code='SUBJ-X'</annotation>
  </Ecore:EClass>
  <Ecore:EClass xmi:id="_oi1EgAu0EeGvGIuLiiZuOg" base_Class="_02grYAuuEeGvGIuLiiZuOg">
    <annotation>http://www.openhealthtools.org/mdht/uml/cda/annotation title.mixed='HOSPITAL DISCHARGE STUDIES SUMMARY' code.codeSystem='2.16.840.1.113883.6.1' templateId.root='2.16.840.1.113883.10.20.16.2.3' code.displayName='Hospital Discharge Studies Summary' constraints.validation.error='HospitalDischargeStudiesSummarySectionTemplateId HospitalDischargeStudiesSummarySectionCode HospitalDischargeStudiesSummarySectionTitle' code.codeSystemName='LOINC' code.code='11493-4'</annotation>
  </Ecore:EClass>
</xmi:XMI>
