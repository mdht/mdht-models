<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="classId" xml:lang="en-us">
<title>Allergy Drug Sensitivity - conformance rules</title>
<shortdesc id="shortdesc">[Act: templateId <tt>2.16.840.1.113883.3.88.11.83.6</tt>]</shortdesc>
<prolog id="prolog">
<metadata><category>Act</category></metadata>
<resourceid id="2.16.840.1.113883.3.88.11.83.6"/>
</prolog>
<body>
<section id="description">
<p>
    This module contains the allergy or intolerance conditions and the associated adverse reactions suffered
    by the patient. See the HL7 Continuity of Care Document Section 3.8 for constraints applicable to this module. 
</p>
</section>
<ol id="conformance">
<li><b>SHALL</b> conform to <xref format="html" href="http://www.cdatools.org/infocenter/topic/org.openhealthtools.mdht.uml.cda.ihe.doc/classes/AllergyIntoleranceConcern.html">IHE Allergy Intolerance Concern</xref> template (templateId: <tt>1.3.6.1.4.1.19376.1.5.3.1.4.5.3</tt>) (C83-[DE-6-CDA-2])</li>
<li><b>SHOULD</b> satisfy: the observation/effectiveTime element is present to record event date<ul><li>This is a date that expresses when this particular
allergy or intolerance was known to be active for the
patient</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.effectiveTime.oclIsUndefined())</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the observation/code element shall be present to record the adverse event type<ul><li>Describes the type of product and intolerance suffered
by the patient. The type of product shall be classified
with respect to whether the adverse event occurs in
relationship with a medication, food, or environmental
or other product. The adverse event should also be
classified more specifically as an allergy, non-allergy
intolerance, or just adverse reaction if that level of
detail is not known</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined())</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code/@code attribute value is from Allergy/Adverse Event Type Value Set, 2.16.840.1.113883.3.88.12.3221.6.2, version: 20081218, Static (C154-[DE-6.02-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined() and obs.code.codeSystem = '2.16.840.1.113883.6.96' and (obs.code.code = '420134006' or obs.code.code ='418038007' or obs.code.code='419511003' or obs.code.code='418471000' or obs.code.code='419199007' or obs.code.code='416098002' or obs.code.code='414285001' or obs.code.code='59037007' or obs.code.code='235719002'))</codeblock></li></ul></li>
<li>the observation/participant element <b>SHOULD</b> be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/@typecode attribute shall be 'CSM'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies par.typeCode = vocab::ParticipationType::CSM))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole element may be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined()))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/@classcode attribute shall be 'MANU'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: The participant/participantRole/PlayingEntity element may be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined())))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/playingEntity/@classcode attribute shall be 'MMAT'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode =vocab::EntityClassRoot::MMAT )))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/playingEntity/name element is present<ul><li>This is the name or other description of the product or
agent that causes the intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.name-&gt;size() = 1)))))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: participant/participantRole/playingEntity/code element is present<ul><li>This value is a code describing the product</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1)))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Food and substance allergies <b>SHALL</b> be coded as Ingredient Name Value Set, 2.16.840.1.113883.3.88.12.80.20, Dynamic (C154-[DE-6.04-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Allergies to a class of medication <b>SHALL</b> be coded as Medication Drug Class Value Set, 2.16.840.1.113883.3.88.12.80.17, version: 20081218, Dynamic (C154-[DE-6.04-2])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Allergies to a specific medication <b>SHALL</b> be coded with Medication Brand Name Value Set, 2.16.840.1.113883.3.88.12.80.16, version: 20081218, Dynamic (C154-[DE-6.04-3])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the text element is present in the Reaction Observation entry<ul><li>This is the reaction that may be caused by the product
or agent</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.text.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the code element is present in the Reaction Observation entry<ul><li>This value is a code describing the reaction</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code element is coded as Problem Value Set, 2.16.840.1.113883.3.88.12.3221.7.4, version: 20100125, Dynamic (C154-[DE-6.06-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '404684003' or o.code.code = '243796009')))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: The text element is present in the Severity Observation template<ul><li>This is a description of the level of severity of the
allergy or intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.text.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the code element is present in the Severity Observation entry<ul><li>This value is a code describing the level severity of
the allergy or intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code element is coded as Problem Severity Value Set, 2.16.840.1.113883.3.88.12.3221.6.8, version: 20081218, Static (C154-[DE-6.08-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '255604002' or o.code.code = '371923003' or o.code.code = '6736007' or o.code.code = '371924009' or o.code.code = '24484000' or o.code.code = '399166001')))</codeblock></li></ul></li>
</ol>
<ol id="aggregate">
<li><b>SHALL</b> conform to <xref format="html" href="http://www.cdatools.org/infocenter/topic/org.openhealthtools.mdht.uml.cda.ccd.doc/classes/ProblemAct.html">CCD Problem Act</xref> template (templateId: <tt>2.16.840.1.113883.10.20.1.27</tt>)</li>
<li><b>SHALL</b> conform to <xref format="html" href="http://www.cdatools.org/infocenter/topic/org.openhealthtools.mdht.uml.cda.ihe.doc/classes/ConcernEntry.html">IHE Concern Entry</xref> template (templateId: <tt>1.3.6.1.4.1.19376.1.5.3.1.4.5.1</tt>)</li>
<li><b>SHALL</b> conform to <xref format="html" href="http://www.cdatools.org/infocenter/topic/org.openhealthtools.mdht.uml.cda.ihe.doc/classes/AllergyIntoleranceConcern.html">IHE Allergy Intolerance Concern</xref> template (templateId: <tt>1.3.6.1.4.1.19376.1.5.3.1.4.5.3</tt>)</li>
<li><b>SHALL</b> contain exactly one [1..1] <tt><b>@classCode</b>="ACT" </tt><i>Act</i> (CodeSystem:<tt> 2.16.840.1.113883.5.6 HL7ActClass</tt>) (CONF-146)
</li>
<li><b>SHALL</b> contain exactly one [1..1] <tt><b>@moodCode</b>="EVN" </tt><i>Event</i> (CodeSystem:<tt> 2.16.840.1.113883.5.1001 HL7ActMood</tt>) (CONF-147)
</li>
<li><b>SHALL</b> contain at least one [1..*] <tt><b>id</b></tt> (CONF-148)
</li>
<li><b>SHALL</b> contain exactly one [1..1] <tt><b>code</b></tt><tt>/@nullFlavor</tt> = "NA" <i>NA (not applicable)</i> (CONF-149)
</li>
<li><b>SHALL</b> contain exactly one [1..1] <tt><b>statusCode</b></tt>, which <b>SHALL</b> be selected from ValueSet<tt> <xref href="../../terminology/ConcernEntryStatus.dita">ConcernEntryStatus</xref></tt><b> STATIC</b>
<ul><li><p>
The statusCode associated with any concern must be one of the following values:
</p>
<p>
<b>active</b>: A concern that is still being tracked.
<b>suspended</b>: A concern that is active, but which may be set aside. For example, this value might be used to suspend concern
about a patient problem after some period of remission, but before assumption that the concern has been resolved.
<b>aborted</b>: A concern that is no longer actively being tracked, but for reasons other than because the problem was resolved.
This value might be used to mark a concern as being aborted after a patient leaves care against medical advice.
<b>completed</b>:
The problem, allergy or medical state has been resolved and the concern no longer needs to be tracked except for
historical purposes.
</p></li></ul></li>
<li><b>SHALL</b> contain exactly one [1..1] <tt><b>effectiveTime</b></tt>
<ul><li>The effectiveTime element records the starting and ending times during which the concern was active.</li></ul></li>
<li><b>MAY</b> contain exactly one [1..1] <tt><b>entryRelationship</b></tt> (CONF-168), such that
<ol>
<li>Contains exactly one [1..1] <xref href="../EpisodeObservation.dita">Episode Observation</xref> (templateId: <tt>2.16.840.1.113883.10.20.1.41</tt>)</li></ol></li>
<li><b>SHALL</b> contain at least one [1..*] <tt><b>entryRelationship</b></tt>, such that
<ol>
<li>Contains <tt><b>@typeCode="</b>SUBJ" </tt><i>SUBJ (has subject)</i></li>
<li>Contains exactly one [1..1] <xref href="../AllergyIntolerance.dita">Allergy Intolerance</xref> (templateId: <tt>1.3.6.1.4.1.19376.1.5.3.1.4.6</tt>)</li></ol></li>
<li><b>SHALL</b> contain one or more entryRelationship (CONF-151)<ul><li><codeblock>[OCL]: not self.entryRelationship-&gt;isEmpty()</codeblock></li></ul></li>
<li>A problem act <b>MAY</b> reference a problem observation, alert observation (see section Alerts) or other clinical statement that is the subject of concern, by setting the value for "Act / entryRelationship / @typeCode" to be "SUBJ" 2.16.840.1.113883.5.1002 ActRelationshipType STATIC. (CONF-152)<ul><li>UNIMPLEMENTABLE</li></ul></li>
<li>The target of a problem act with Act / entryRelationship / @typeCode="SUBJ" <b>SHOULD</b> be a problem observation (in the Problem section) or alert observation (in the Alert section), but <b>MAY</b> be some other clinical statement. (CONF-153)<ul><li><codeblock>[OCL]: self.getEntryRelationshipTargets(vocab::x_ActRelationshipEntryRelationship::SUBJ, cda::ClinicalStatement)-&gt;forAll(target : cda::ClinicalStatement | not target.oclIsUndefined() and 
  (target.oclIsKindOf(ccd::ProblemObservation) or target.oclIsKindOf(ccd::AlertObservation)))</codeblock></li></ul></li>
<li>In Problem Section, a Problem Act <b>SHOULD</b> contain one or more Problem Observations. (CONF-140)<ul><li><codeblock>[OCL]: self.getSection().oclIsKindOf(ccd::ProblemSection) implies self.getObservations()
   -&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::ProblemObservation))</codeblock></li></ul></li>
<li>In Alert Section, a ProblemAct <b>SHOULD</b> contain one or more Alert Observations. (CONF-256)<ul><li><codeblock>[OCL]: self.getSection().oclIsKindOf(ccd::AlertsSection) implies self.getObservations()
   -&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation))</codeblock></li></ul></li>
<li><b>MAY</b> contain exactly one Patient Awareness (CONF-179)<ul><li><codeblock>[OCL]: self.participant-&gt;one(partic : cda::Participant2 | partic.oclIsKindOf(ccd::PatientAwareness))</codeblock></li></ul></li>
<li>The effectiveTime 'low' element <b>SHALL</b> be present. The 'high' element <b>SHALL</b> be present for concerns in the completed or aborted state, and <b>SHALL NOT</b> be present otherwise.<ul><li><codeblock>[OCL]: not self.effectiveTime.low.oclIsUndefined()
   and ((self.statusCode.code = 'completed' or self.statusCode.code = 'aborted') implies not self.effectiveTime.high.oclIsUndefined())
   and ((self.statusCode.code &lt;&gt; 'completed' and self.statusCode.code &lt;&gt; 'aborted') implies self.effectiveTime.high.oclIsUndefined())</codeblock></li></ul></li>
<li>This entry <b>SHALL</b> contain one or more problem or allergy entries that conform to the specification in section Problem Entry or Allergies and Intolerances.<ul><li>Each concern is about one or more related problems or allergies. This is how a series of related observations can be grouped as a single concern.</li></ul><ul><li><codeblock>[OCL]: self.entryRelationship.observation.templateId-&gt;exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.5') or self.entryRelationship.observation.templateId-&gt;exists(id : datatypes::II | id.root =  '1.3.6.1.4.1.19376.1.5.3.1.4.6')</codeblock></li></ul></li>
<li>This <b>SHALL</b> be represented using entryRelationship with typeCode = 'SUBJ'<ul><li><codeblock>[OCL]: self.entryRelationship-&gt;select(er|er.typeCode &lt;&gt; vocab::x_ActRelationshipEntryRelationship::SUBJ)-&gt;isEmpty()</codeblock></li></ul></li>
<li>Each concern <b>MAY</b> have 0 or more related references. This <b>MAY</b> be any valid CDA clinical statement, and <b>SHOULD</b> be an IHE entry template.<ul><li>These may be used to represent related statements such related visits.</li><li>UNIMPLEMENTABLE</li></ul></li>
<li>Related References <b>SHALL</b> be represented using entryRelationship with typeCode = 'REFR'.<ul><li><codeblock>[OCL]: self.reference-&gt;forAll(r | r.typeCode = vocab::x_ActRelationshipExternalReference)</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the observation/effectiveTime element is present to record event date<ul><li>This is a date that expresses when this particular
allergy or intolerance was known to be active for the
patient</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.effectiveTime.oclIsUndefined())</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the observation/code element shall be present to record the adverse event type<ul><li>Describes the type of product and intolerance suffered
by the patient. The type of product shall be classified
with respect to whether the adverse event occurs in
relationship with a medication, food, or environmental
or other product. The adverse event should also be
classified more specifically as an allergy, non-allergy
intolerance, or just adverse reaction if that level of
detail is not known</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined())</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code/@code attribute value is from Allergy/Adverse Event Type Value Set, 2.16.840.1.113883.3.88.12.3221.6.2, version: 20081218, Static (C154-[DE-6.02-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and not obs.code.oclIsUndefined() and obs.code.codeSystem = '2.16.840.1.113883.6.96' and (obs.code.code = '420134006' or obs.code.code ='418038007' or obs.code.code='419511003' or obs.code.code='418471000' or obs.code.code='419199007' or obs.code.code='416098002' or obs.code.code='414285001' or obs.code.code='59037007' or obs.code.code='235719002'))</codeblock></li></ul></li>
<li>the observation/participant element <b>SHOULD</b> be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/@typecode attribute shall be 'CSM'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies par.typeCode = vocab::ParticipationType::CSM))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole element may be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined()))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/@classcode attribute shall be 'MANU'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: The participant/participantRole/PlayingEntity element may be present<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined())))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/playingEntity/@classcode attribute shall be 'MMAT'<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode =vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode =vocab::EntityClassRoot::MMAT )))))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the participant/participantRole/playingEntity/name element is present<ul><li>This is the name or other description of the product or
agent that causes the intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.name-&gt;size() = 1)))))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: participant/participantRole/playingEntity/code element is present<ul><li>This value is a code describing the product</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode=vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1)))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Food and substance allergies <b>SHALL</b> be coded as Ingredient Name Value Set, 2.16.840.1.113883.3.88.12.80.20, Dynamic (C154-[DE-6.04-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Allergies to a class of medication <b>SHALL</b> be coded as Medication Drug Class Value Set, 2.16.840.1.113883.3.88.12.80.17, version: 20081218, Dynamic (C154-[DE-6.04-2])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li>For participant/participantRole/playingEntity/code element, Allergies to a specific medication <b>SHALL</b> be coded with Medication Brand Name Value Set, 2.16.840.1.113883.3.88.12.80.16, version: 20081218, Dynamic (C154-[DE-6.04-3])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and 
obs.participant-&gt;exists( par : cda::Participant2 | not par.oclIsUndefined() implies (par.typeCode = vocab::ParticipationType::CSM and par.participantRole-&gt;exists(prole : cda::ParticipantRole | not prole.oclIsUndefined() and 
prole.classCode= vocab::RoleClassRoot::MANU and prole.playingEntity-&gt;exists( playe : cda::PlayingEntity | not playe.oclIsUndefined() and playe.classCode = vocab::EntityClassRoot::MMAT and playe.code-&gt;size() = 1 and (playe.code.codeSystem =
'2.16.840.1.113883.4.9' or playe.code.codeSystem = '2.16.840.1.113883.3.26.1.5' or playe.code.codeSystem = '2.16.840.1.113883.6.88'))))))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the text element is present in the Reaction Observation entry<ul><li>This is the reaction that may be caused by the product
or agent</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.text.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the code element is present in the Reaction Observation entry<ul><li>This value is a code describing the reaction</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code element is coded as Problem Value Set, 2.16.840.1.113883.3.88.12.3221.7.4, version: 20100125, Dynamic (C154-[DE-6.06-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::ReactionObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '404684003' or o.code.code = '243796009')))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: The text element is present in the Severity Observation template<ul><li>This is a description of the level of severity of the
allergy or intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.text.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHOULD</b> satisfy: the code element is present in the Severity Observation entry<ul><li>This value is a code describing the level severity of
the allergy or intolerance</li></ul><ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined()))</codeblock></li></ul></li>
<li><b>SHALL</b> satisfy: the code element is coded as Problem Severity Value Set, 2.16.840.1.113883.3.88.12.3221.6.8, version: 20081218, Static (C154-[DE-6.08-1])<ul><li><codeblock>[OCL]: self.getObservations()-&gt;exists(obs : cda::Observation | obs.oclIsKindOf(ccd::AlertObservation) and obs.getObservations()-&gt;exists(o : cda::Observation | o.oclIsKindOf(ccd::SeverityObservation) and not o.code.oclIsUndefined() and o.code.codeSystem = '2.16.840.1.113883.6.96' and (o.code.code = '255604002' or o.code.code = '371923003' or o.code.code = '6736007' or o.code.code = '371924009' or o.code.code = '24484000' or o.code.code = '399166001')))</codeblock></li></ul></li>
</ol>
<codeblock id="example"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<act xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:hl7-org:v3" xsi:schemaLocation="urn:hl7-org:v3 CDA.xsd" classCode="ACT" moodCode="EVN">
  <templateId root="2.16.840.1.113883.10.20.1.27"/>
  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1"/>
  <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.3"/>
  <templateId root="2.16.840.1.113883.3.88.11.83.6"/>
  <id root="829770452"/>
  <code nullFlavor="NA"/>
  <statusCode code="completed"/>
  <effectiveTime>
    <low value="2011"/>
    <high value="2011"/>
  </effectiveTime>
</act>]]></codeblock>
</body>
</topic>
